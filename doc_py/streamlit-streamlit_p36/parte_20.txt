  105, 109, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109, 101, 54, 52, 91, 110,
  115, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110,
  117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101,
  34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108,
  95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109, 101, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97,
  116, 101, 116, 105, 109, 101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109,
  101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44,
  32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98,
  114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44,
  32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 53, 46, 48,
  46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101, 114,
  115, 105, 111, 110, 34, 58, 32, 34, 50, 46, 50, 46, 49, 34, 125, 0, 0, 0, 6,
  0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 140, 0, 0, 0, 64, 0,
  0, 0, 4, 0, 0, 0, 144, 255, 255, 255, 0, 0, 1, 10, 16, 0, 0, 0, 36, 0, 0, 0,
  4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110, 100, 101, 120, 95,
  108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0, 0, 126, 255, 255, 255, 0, 0,
  3, 0, 200, 255, 255, 255, 0, 0, 1, 10, 16, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 19, 0, 0, 0, 50, 48, 48, 49, 45, 49, 50, 45, 51, 49, 32, 48, 48,
  58, 48, 48, 58, 48, 48, 0, 182, 255, 255, 255, 0, 0, 3, 0, 16, 0, 20, 0, 8,
  0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 10, 16, 0, 0, 0, 44,
  0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 50, 48, 48, 48, 45, 49, 50, 45,
  51, 49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 0, 0, 0, 6, 0, 8, 0, 6, 0, 6, 0,
  0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 255, 255, 255, 255, 232, 0, 0, 0, 20, 0, 0, 0,
  0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0,
  24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0,
  10, 0, 0, 0, 124, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 32, 116, 62, 41, 249, 229, 21, 0, 32, 116, 62, 41, 249, 229, 21,
  0, 32, 144, 252, 158, 154, 63, 22, 0, 32, 144, 252, 158, 154, 63, 22, 0, 0,
  230, 127, 162, 86, 147, 13, 0, 0, 137, 173, 117, 96, 3, 14, 255, 255, 255,
  255, 0, 0, 0, 0,
])

// Raw data (in Apache Arrow format) for a dataframe
// that uses `DatetimeIndex` for both `index` and `columns` attributes.
//
// df = pd.DataFrame(
//   [
//       [
//           datetime(2020, 1, 2, 5, 0, 0, tzinfo=timezone.utc),
//           datetime(2020, 10, 20, 5, 0, 0, tzinfo=timezone.utc),
//       ],
//   ],
//   index=pd.Series(pd.date_range("2000-01-01", periods=2, freq="Y")),
//   columns=pd.Series(pd.date_range("2000-01-01", periods=2, freq="Y")),
// )

export const DATETIMETZ = new Uint8Array([
  255, 255, 255, 255, 40, 4, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 16, 3, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 232, 2, 0, 0, 4, 0, 0, 0, 219, 2, 0, 0, 123,
  34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58,
  32, 91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95,
  48, 95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110,
  100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105,
  109, 101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109,
  101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97,
  116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108,
  117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  34, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48,
  48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 34, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58,
  48, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109, 101, 116, 122, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97,
  116, 101, 116, 105, 109, 101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109,
  101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123, 34, 116, 105, 109, 101, 122,
  111, 110, 101, 34, 58, 32, 34, 85, 84, 67, 34, 125, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 50, 48, 48, 49, 45, 49, 50, 45, 51, 49,
  32, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 32, 34, 102, 105, 101, 108, 100,
  95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 48, 48, 49, 45, 49, 50, 45, 51,
  49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105,
  109, 101, 116, 122, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109, 101, 54, 52, 91,
  110, 115, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58,
  32, 123, 34, 116, 105, 109, 101, 122, 111, 110, 101, 34, 58, 32, 34, 85, 84,
  67, 34, 125, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48,
  95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109, 101, 34, 44, 32, 34, 110,
  117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116,
  101, 116, 105, 109, 101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109, 101,
  116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32,
  34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114,
  97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32,
  34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 53, 46, 48, 46,
  49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115,
  105, 111, 110, 34, 58, 32, 34, 50, 46, 50, 46, 49, 34, 125, 0, 6, 0, 0, 0,
  112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 156, 0, 0, 0, 68, 0, 0, 0, 4,
  0, 0, 0, 128, 255, 255, 255, 0, 0, 1, 10, 16, 0, 0, 0, 40, 0, 0, 0, 4, 0, 0,
  0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101,
  118, 101, 108, 95, 48, 95, 95, 0, 6, 0, 8, 0, 6, 0, 6, 0, 0, 0, 0, 0, 3, 0,
  188, 255, 255, 255, 0, 0, 1, 10, 16, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0,
  0, 0, 19, 0, 0, 0, 50, 48, 48, 49, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58,
  48, 48, 58, 48, 48, 0, 172, 255, 255, 255, 0, 0, 3, 0, 4, 0, 0, 0, 3, 0, 0,
  0, 85, 84, 67, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0,
  0, 0, 0, 0, 1, 10, 16, 0, 0, 0, 44, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 19, 0,
  0, 0, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48,
  48, 0, 8, 0, 12, 0, 6, 0, 8, 0, 8, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 3, 0, 0,
  0, 85, 84, 67, 0, 255, 255, 255, 255, 232, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,
  12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0,
  48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0,
  124, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
  0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
  0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  32, 116, 62, 41, 249, 229, 21, 0, 32, 116, 62, 41, 249, 229, 21, 0, 32, 144,
  252, 158, 154, 63, 22, 0, 32, 144, 252, 158, 154, 63, 22, 0, 0, 230, 127,
  162, 86, 147, 13, 0, 0, 137, 173, 117, 96, 3, 14, 255, 255, 255, 255, 0, 0,
  0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/decimal.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that contains columns with decimal values.
//
// df = pd.DataFrame(
//     [
//         [Decimal("1.1"), Decimal("2.23")],
//         [Decimal("10000"), Decimal("-0.1")],
//     ],
//     columns=["c1", "c2"],
// )

export const DECIMAL = new Uint8Array([
  255, 255, 255, 255, 24, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 112, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 56, 253,
  255, 255, 80, 2, 0, 0, 4, 0, 0, 0, 67, 2, 0, 0, 123, 34, 105, 110, 100, 101,
  120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 107, 105,
  110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34, 44, 32, 34, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 115, 116, 97, 114, 116,
  34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34, 58, 32, 50, 44, 32, 34,
  115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32, 34, 99, 111, 108, 117,
  109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110,
  105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34,
  109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123, 34, 101, 110, 99, 111,
  100, 105, 110, 103, 34, 58, 32, 34, 85, 84, 70, 45, 56, 34, 125, 125, 93, 44,
  32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97,
  109, 101, 34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 102, 105, 101, 108, 100,
  95, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 101, 99, 105, 109,
  97, 108, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 123, 34, 112, 114, 101, 99, 105, 115, 105, 111,
  110, 34, 58, 32, 54, 44, 32, 34, 115, 99, 97, 108, 101, 34, 58, 32, 49, 125,
  125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 50, 34, 44, 32,
  34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 99, 50,
  34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 100, 101, 99, 105, 109, 97, 108, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123, 34, 112,
  114, 101, 99, 105, 115, 105, 111, 110, 34, 58, 32, 51, 44, 32, 34, 115, 99,
  97, 108, 101, 34, 58, 32, 50, 125, 125, 93, 44, 32, 34, 99, 114, 101, 97,
  116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58,
  32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115,
  105, 111, 110, 34, 58, 32, 34, 49, 50, 46, 48, 46, 49, 34, 125, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58,
  32, 34, 50, 46, 49, 46, 49, 34, 125, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97,
  115, 0, 0, 2, 0, 0, 0, 68, 0, 0, 0, 4, 0, 0, 0, 212, 255, 255, 255, 0, 0, 1,
  7, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 50, 0,
  0, 196, 255, 255, 255, 3, 0, 0, 0, 2, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7,
  0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 7, 16, 0, 0, 0, 28, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 49, 0, 0, 8, 0, 12, 0, 4, 0, 8, 0, 8, 0,
  0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 184, 0, 0, 0, 20, 0, 0, 0,
  0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0,
  24, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0,
  10, 0, 0, 0, 92, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 134, 1,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/dictionary.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that contains columns with decimal values.
//
// df = pd.DataFrame(
//   [
//       [{"a": 1, "b": 2}, {"a": 3, "b": 4}],
//       [{"c": "foo", "d": 2}, {"a": 5, "b": None}],
//   ],
//   columns=["c1", "c2"],
// )

export const DICTIONARY = new Uint8Array([
  255, 255, 255, 255, 0, 4, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 72, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 32, 2, 0, 0, 4, 0, 0, 0, 17, 2, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34,
  44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34,
  58, 32, 50, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32,
  34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34,
  58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123, 34,
  101, 110, 99, 111, 100, 105, 110, 103, 34, 58, 32, 34, 85, 84, 70, 45, 56,
  34, 125, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34,
  109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44,
  32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 50, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 99, 50, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34,
  109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93,
  44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105,
  98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34,
  44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 48, 46,
  48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101,
  114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 53, 46, 51, 34, 125, 0, 0,
  0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 2, 0, 0, 0, 140, 0, 0, 0, 4,
  0, 0, 0, 200, 254, 255, 255, 0, 0, 1, 13, 24, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0,
  0, 2, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 99, 50, 0, 0, 36, 255,
  255, 255, 244, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0,
  0, 0, 0, 0, 0, 1, 0, 0, 0, 98, 0, 0, 0, 228, 254, 255, 255, 0, 0, 0, 1, 64,
  0, 0, 0, 32, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 97, 0, 0, 0, 16, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 76, 255, 255, 255, 0, 0, 1, 13, 32, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 4,
  0, 0, 0, 172, 0, 0, 0, 108, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0,
  99, 49, 0, 0, 176, 255, 255, 255, 128, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0,
  0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 100, 0, 0, 0, 112, 255,
  255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 172, 255, 255, 255, 0, 0, 1, 5, 16, 0, 0,
  0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 99, 0, 0, 0, 4, 0, 4, 0,
  4, 0, 0, 0, 212, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 98, 0, 0, 0, 196, 255, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0,
  0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 97,
  0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0,
  0, 0, 255, 255, 255, 255, 200, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22,
  0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 144, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 12, 1, 0,
  0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
  0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
  0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
  48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 12,
  0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 80, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
  0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0,
  0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
  0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
  0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 102, 111, 111, 0, 0, 0, 0, 0, 2, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
  0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/float64.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `Float64Index` for both `index` and `columns` attributes.
//
// pd.DataFrame(
//     [[1.2, 1.3], [1.4, 1.5]],
//     index=pd.Float64Index([1.24, 2.35]),
//     columns=pd.Float64Index([1.24, 2.35]),
// )

export const FLOAT64 = new Uint8Array([
  255, 255, 255, 255, 112, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 140, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
  0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 100, 2, 0, 0, 4, 0, 0, 0, 86, 2, 0, 0, 123,
  34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58,
  32, 91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95,
  48, 95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110,
  100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 102, 108, 111, 97, 116, 54, 52,
  34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 102, 108, 111, 97, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100,
  97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111,
  108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 34, 49, 46, 50, 52, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 49, 46, 50, 52, 34, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 102, 108, 111, 97, 116, 54,
  52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 102, 108, 111, 97, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110,
  97, 109, 101, 34, 58, 32, 34, 50, 46, 51, 53, 34, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 46, 51, 53, 34, 44, 32,
  34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 102,
  108, 111, 97, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 102, 108, 111, 97, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32,
  34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 95, 95,
  105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  102, 108, 111, 97, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 102, 108, 111, 97, 116, 54, 52, 34, 44,
  32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108,
  125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34,
  108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111,
  119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 52,
  46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118,
  101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 50, 46, 52, 34, 125, 0,
  0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0,
  64, 0, 0, 0, 4, 0, 0, 0, 156, 255, 255, 255, 0, 0, 1, 3, 16, 0, 0, 0, 36, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110, 100, 101, 120,
  95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0, 0, 154, 255, 255, 255, 0,
  0, 2, 0, 212, 255, 255, 255, 0, 0, 1, 3, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0,
  0, 0, 0, 0, 0, 4, 0, 0, 0, 50, 46, 51, 53, 0, 0, 0, 0, 198, 255, 255, 255, 0,
  0, 2, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0,
  0, 1, 3, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 49,
  46, 50, 52, 0, 0, 6, 0, 8, 0, 6, 0, 6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 255,
  255, 255, 255, 232, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5,
  0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 124, 0, 0, 0, 16, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0,
  0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0,
  0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 51, 51, 51,
  243, 63, 102, 102, 102, 102, 102, 102, 246, 63, 205, 204, 204, 204, 204, 204,
  244, 63, 0, 0, 0, 0, 0, 0, 248, 63, 215, 163, 112, 61, 10, 215, 243, 63, 205,
  204, 204, 204, 204, 204, 2, 64, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/int64.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `Int64Index` for both `index` and `columns` attributes.
//
// pd.DataFrame(
//     [[0, 1], [2, 3]],
//     index=[1, 2],
//     columns=[1, 2],
// )

export const INT64 = new Uint8Array([
  255, 255, 255, 255, 88, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 112, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 72, 2, 0, 0, 4, 0, 0, 0, 58, 2, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48,
  95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100,
  101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110,
  115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49, 34, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49,
  34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
  109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44,
  32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34, 44, 32, 34, 102, 105,
  101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110,
  97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120,
  95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97,
  116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58,
  32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115,
  105, 111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112,
  97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34,
  49, 46, 50, 46, 52, 34, 125, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0,
  0, 3, 0, 0, 0, 132, 0, 0, 0, 68, 0, 0, 0, 4, 0, 0, 0, 152, 255, 255, 255, 0,
  0, 1, 2, 16, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95,
  95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0,
  0, 0, 152, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 212, 255, 255, 255, 0, 0,
  1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0,
  0, 196, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7,
  0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0,
  0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 255, 255, 255, 255, 232, 0, 0, 0, 20, 0, 0, 0,
  0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0,
  24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0,
  10, 0, 0, 0, 124, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
  0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
  255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/intervalDatetime64.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `DatetimeIntervalIndex` for the `index` attribute.
//
// pd.DataFrame(
//   [["foo", 100], ["bar", 200]],
//   index=pd.interval_range(
//       start=pd.Timestamp("2017-01-01"), end=pd.Timestamp("2017-01-03")
//   ),
//   columns=pd.interval_range(
//       start=pd.Timestamp("2017-01-01"), end=pd.Timestamp("2017-01-03")
//   ),
// )

export const INTERVAL_DATETIME64 = new Uint8Array([
  255, 255, 255, 255, 56, 5, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 104, 252,
  255, 255, 224, 2, 0, 0, 4, 0, 0, 0, 209, 2, 0, 0, 123, 34, 105, 110, 100,
  101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 34, 95, 95,
  105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 93,
  44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101,
  115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108,
  108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 101, 114, 118, 97, 108, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 101, 114, 118, 97, 108, 91, 100, 97, 116, 101, 116, 105, 109, 101,
  54, 52, 91, 110, 115, 93, 44, 32, 114, 105, 103, 104, 116, 93, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 40, 50, 48, 49, 55, 45, 48, 49, 45, 48,
  49, 44, 32, 50, 48, 49, 55, 45, 48, 49, 45, 48, 50, 93, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 40, 50, 48, 49,
  55, 45, 48, 49, 45, 48, 49, 44, 32, 50, 48, 49, 55, 45, 48, 49, 45, 48, 50,
  93, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 40, 50,
  48, 49, 55, 45, 48, 49, 45, 48, 50, 44, 32, 50, 48, 49, 55, 45, 48, 49, 45,
  48, 51, 93, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101,
  34, 58, 32, 34, 40, 50, 48, 49, 55, 45, 48, 49, 45, 48, 50, 44, 32, 50, 48,
  49, 55, 45, 48, 49, 45, 48, 51, 93, 34, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44,
  32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118,
  101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 101, 114, 118, 97, 108, 91, 100, 97, 116, 101, 116, 105, 109, 101,
  54, 52, 91, 110, 115, 93, 44, 32, 114, 105, 103, 104, 116, 93, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108,
  105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119,
  34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 52, 46,
  48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101,
  114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 51, 46, 48, 34, 125, 0, 0,
  0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 200, 1, 0, 0,
  104, 1, 0, 0, 24, 0, 0, 0, 0, 0, 18, 0, 24, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0,
  16, 0, 20, 0, 18, 0, 0, 0, 0, 0, 1, 13, 28, 0, 0, 0, 224, 0, 0, 0, 8, 0, 0,
  0, 40, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 208, 0, 0, 0, 17, 0, 0, 0, 95, 95,
  105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0,
  0, 2, 0, 0, 0, 76, 0, 0, 0, 4, 0, 0, 0, 196, 255, 255, 255, 28, 0, 0, 0, 4,
  0, 0, 0, 15, 0, 0, 0, 112, 97, 110, 100, 97, 115, 46, 105, 110, 116, 101,
  114, 118, 97, 108, 0, 20, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120, 116,
  101, 110, 115, 105, 111, 110, 58, 110, 97, 109, 101, 0, 0, 0, 0, 8, 0, 12, 0,
  4, 0, 8, 0, 8, 0, 0, 0, 60, 0, 0, 0, 4, 0, 0, 0, 47, 0, 0, 0, 123, 34, 115,
  117, 98, 116, 121, 112, 101, 34, 58, 32, 34, 116, 105, 109, 101, 115, 116,
  97, 109, 112, 91, 110, 115, 93, 34, 44, 32, 34, 99, 108, 111, 115, 101, 100,
  34, 58, 32, 34, 114, 105, 103, 104, 116, 34, 125, 0, 24, 0, 0, 0, 65, 82, 82,
  79, 87, 58, 101, 120, 116, 101, 110, 115, 105, 111, 110, 58, 109, 101, 116,
  97, 100, 97, 116, 97, 0, 0, 0, 0, 12, 255, 255, 255, 88, 255, 255, 255, 0, 0,
  1, 10, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 114,
  105, 103, 104, 116, 0, 0, 0, 214, 255, 255, 255, 0, 0, 3, 0, 132, 255, 255,
  255, 0, 0, 1, 10, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
  0, 108, 101, 102, 116, 0, 0, 6, 0, 8, 0, 6, 0, 6, 0, 0, 0, 0, 0, 3, 0, 180,
  255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 52, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
  24, 0, 0, 0, 40, 50, 48, 49, 55, 45, 48, 49, 45, 48, 50, 44, 32, 50, 48, 49,
  55, 45, 48, 49, 45, 48, 51, 93, 0, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0,
  0, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16,
  0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 48, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
  24, 0, 0, 0, 40, 50, 48, 49, 55, 45, 48, 49, 45, 48, 49, 44, 32, 50, 48, 49,
  55, 45, 48, 49, 45, 48, 50, 93, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 255, 255,
  255, 255, 72, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8,
  0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 188, 0, 0, 0, 16, 0, 0, 0,
  2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0,
  0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0,
  0, 102, 111, 111, 98, 97, 114, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 161, 48, 188, 124, 149, 20, 0, 0, 240, 193, 80, 203, 149,
  20, 0, 0, 240, 193, 80, 203, 149, 20, 0, 0, 63, 83, 229, 25, 150, 20, 255,
  255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/intervalFloat64.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `FloatIntervalIndex` for the `index` attribute.
//
// pd.DataFrame(
//   [["foo", 100], ["bar", 200]],
//   index=pd.interval_range(start=0, periods=2, freq=1.5),
//   columns=pd.interval_range(start=0, periods=2, freq=1.5),
// )

export const INTERVAL_FLOAT64 = new Uint8Array([
  255, 255, 255, 255, 208, 4, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 184, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 176,
  252, 255, 255, 152, 2, 0, 0, 4, 0, 0, 0, 139, 2, 0, 0, 123, 34, 105, 110,
  100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 34, 95,
  95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120,
  101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 101, 114, 118, 97, 108, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 101, 114, 118, 97, 108, 91, 102, 108, 111, 97, 116, 54, 52, 44, 32,
  114, 105, 103, 104, 116, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117,
  109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34,
  40, 48, 46, 48, 44, 32, 49, 46, 53, 93, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 40, 48, 46, 48, 44, 32, 49, 46,
  53, 93, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99,
  116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110,
  117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 40,
  49, 46, 53, 44, 32, 51, 46, 48, 93, 34, 44, 32, 34, 102, 105, 101, 108, 100,
  95, 110, 97, 109, 101, 34, 58, 32, 34, 40, 49, 46, 53, 44, 32, 51, 46, 48,
  93, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32,
  34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 95, 95,
  105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 101, 114, 118, 97, 108, 91,
  102, 108, 111, 97, 116, 54, 52, 44, 32, 114, 105, 103, 104, 116, 93, 34, 44,
  32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108,
  125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34,
  108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111,
  119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 52,
  46, 48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118,
  101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 51, 46, 48, 34, 125, 0,
  6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 180, 1, 0, 0, 100,
  1, 0, 0, 24, 0, 0, 0, 0, 0, 18, 0, 24, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16,
  0, 20, 0, 18, 0, 0, 0, 0, 0, 1, 13, 28, 0, 0, 0, 220, 0, 0, 0, 8, 0, 0, 0,
  40, 0, 0, 0, 2, 0, 0, 0, 252, 0, 0, 0, 204, 0, 0, 0, 17, 0, 0, 0, 95, 95,
  105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0,
  0, 2, 0, 0, 0, 76, 0, 0, 0, 4, 0, 0, 0, 196, 255, 255, 255, 28, 0, 0, 0, 4,
  0, 0, 0, 15, 0, 0, 0, 112, 97, 110, 100, 97, 115, 46, 105, 110, 116, 101,
  114, 118, 97, 108, 0, 20, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120, 116,
  101, 110, 115, 105, 111, 110, 58, 110, 97, 109, 101, 0, 0, 0, 0, 8, 0, 12, 0,
  4, 0, 8, 0, 8, 0, 0, 0, 56, 0, 0, 0, 4, 0, 0, 0, 40, 0, 0, 0, 123, 34, 115,
  117, 98, 116, 121, 112, 101, 34, 58, 32, 34, 100, 111, 117, 98, 108, 101, 34,
  44, 32, 34, 99, 108, 111, 115, 101, 100, 34, 58, 32, 34, 114, 105, 103, 104,
  116, 34, 125, 0, 0, 0, 0, 24, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120, 116,
  101, 110, 115, 105, 111, 110, 58, 109, 101, 116, 97, 100, 97, 116, 97, 0, 0,
  0, 0, 44, 255, 255, 255, 104, 255, 255, 255, 0, 0, 1, 3, 16, 0, 0, 0, 24, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 114, 105, 103, 104, 116, 0, 0, 0,
  214, 255, 255, 255, 0, 0, 2, 0, 148, 255, 255, 255, 0, 0, 1, 3, 16, 0, 0, 0,
  28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 108, 101, 102, 116, 0, 0, 6,
  0, 8, 0, 6, 0, 6, 0, 0, 0, 0, 0, 2, 0, 196, 255, 255, 255, 0, 0, 1, 2, 16, 0,
  0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 40, 49, 46, 53, 44,
  32, 51, 46, 48, 93, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1,
  64, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0,
  0, 0, 1, 5, 16, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0,
  40, 48, 46, 48, 44, 32, 49, 46, 53, 93, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0,
  0, 0, 255, 255, 255, 255, 72, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0,
  6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 72, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 188, 0, 0, 0,
  16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0,
  0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
  40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 56, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0,
  0, 0, 0, 0, 0, 102, 111, 111, 98, 97, 114, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
  200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 63,
  0, 0, 0, 0, 0, 0, 248, 63, 0, 0, 0, 0, 0, 0, 8, 64, 255, 255, 255, 255, 0, 0,
  0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/intervalInt64.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `IntervalIndex` for both `index` and `columns` attributes.
//
// pd.DataFrame(
//   [["foo", 100], ["bar", 200]],
//   index=pd.interval_range(start=0, end=2),
//   columns=pd.interval_range(start=0, end=2),
// )

export const INTERVAL_INT64 = new Uint8Array([
  255, 255, 255, 255, 176, 4, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 164, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 196,
  252, 255, 255, 132, 2, 0, 0, 4, 0, 0, 0, 119, 2, 0, 0, 123, 34, 105, 110,
  100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 34, 95,
  95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120,
  101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 101, 114, 118, 97, 108, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 101, 114, 118, 97, 108, 91, 105, 110, 116, 54, 52, 44, 32, 114,
  105, 103, 104, 116, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109,
  110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 40, 48,
  44, 32, 49, 93, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 34, 40, 48, 44, 32, 49, 93, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111,
  100, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 40, 49, 44, 32, 50, 93, 34, 44, 32, 34,
  102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 40, 49, 44,
  32, 50, 93, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108,
  44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
  95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95,
  34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 101, 114, 118, 97,
  108, 91, 105, 110, 116, 54, 52, 44, 32, 114, 105, 103, 104, 116, 93, 34, 44,
  32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108,
  125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34,
  108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111,
  119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 52,
  46, 48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118,
  101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 51, 46, 48, 34, 125, 0,
  6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 176, 1, 0, 0, 100,
  1, 0, 0, 24, 0, 0, 0, 0, 0, 18, 0, 24, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16,
  0, 20, 0, 18, 0, 0, 0, 0, 0, 1, 13, 28, 0, 0, 0, 216, 0, 0, 0, 8, 0, 0, 0,
  40, 0, 0, 0, 2, 0, 0, 0, 252, 0, 0, 0, 200, 0, 0, 0, 17, 0, 0, 0, 95, 95,
  105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0,
  0, 2, 0, 0, 0, 76, 0, 0, 0, 4, 0, 0, 0, 196, 255, 255, 255, 28, 0, 0, 0, 4,
  0, 0, 0, 15, 0, 0, 0, 112, 97, 110, 100, 97, 115, 46, 105, 110, 116, 101,
  114, 118, 97, 108, 0, 20, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120, 116,
  101, 110, 115, 105, 111, 110, 58, 110, 97, 109, 101, 0, 0, 0, 0, 8, 0, 12, 0,
  4, 0, 8, 0, 8, 0, 0, 0, 52, 0, 0, 0, 4, 0, 0, 0, 39, 0, 0, 0, 123, 34, 115,
  117, 98, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44,
  32, 34, 99, 108, 111, 115, 101, 100, 34, 58, 32, 34, 114, 105, 103, 104, 116,
  34, 125, 0, 24, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120, 116, 101, 110,
  115, 105, 111, 110, 58, 109, 101, 116, 97, 100, 97, 116, 97, 0, 0, 0, 0, 48,
  255, 255, 255, 104, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 24, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 114, 105, 103, 104, 116, 0, 0, 0, 160, 255,
  255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 152, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0,
  0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 108, 101, 102, 116, 0, 0,
  0, 0, 208, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 200, 255, 255, 255, 0, 0,
  1, 2, 16, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 40, 49,
  44, 32, 50, 93, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0,
  0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0,
  1, 5, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 40, 48,
  44, 32, 49, 93, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 255, 255, 255, 255, 72, 1, 0,
  0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0,
  0, 0, 3, 4, 0, 24, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12,
  0, 4, 0, 8, 0, 10, 0, 0, 0, 188, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 6,
  0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0,
  0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0,
  0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 102, 111, 111,
  98, 97, 114, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
  0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/intervalUint64.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `FloatIntervalIndex` for the `index` attribute.
//
// pd.DataFrame(
//   [["foo", 100], ["bar", 200]],
//   index=pd.IntervalIndex.from_arrays(
//       np.array([0, 1], dtype=np.uint64), np.array([1, 2], dtype=np.uint64)
//   ),
//   columns=pd.IntervalIndex.from_arrays(
//       np.array([0, 1], dtype=np.uint64), np.array([1, 2], dtype=np.uint64)
//   ),
// )

export const INTERVAL_UINT64 = new Uint8Array([
  255, 255, 255, 255, 184, 4, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 168, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 192,
  252, 255, 255, 136, 2, 0, 0, 4, 0, 0, 0, 121, 2, 0, 0, 123, 34, 105, 110,
  100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 34, 95,
  95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120,
  101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 101, 114, 118, 97, 108, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 101, 114, 118, 97, 108, 91, 117, 105, 110, 116, 54, 52, 44, 32,
  114, 105, 103, 104, 116, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117,
  109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34,
  40, 48, 44, 32, 49, 93, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 40, 48, 44, 32, 49, 93, 34, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99,
  111, 100, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101,
  116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123,
  34, 110, 97, 109, 101, 34, 58, 32, 34, 40, 49, 44, 32, 50, 93, 34, 44, 32,
  34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 40, 49,
  44, 32, 50, 93, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108,
  108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95,
  95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 101, 114, 118,
  97, 108, 91, 117, 105, 110, 116, 54, 52, 44, 32, 114, 105, 103, 104, 116, 93,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32,
  123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114,
  114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32,
  34, 52, 46, 48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 51, 46, 48, 34,
  125, 0, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 176,
  1, 0, 0, 100, 1, 0, 0, 24, 0, 0, 0, 0, 0, 18, 0, 24, 0, 8, 0, 6, 0, 7, 0, 12,
  0, 0, 0, 16, 0, 20, 0, 18, 0, 0, 0, 0, 0, 1, 13, 28, 0, 0, 0, 220, 0, 0, 0,
  8, 0, 0, 0, 40, 0, 0, 0, 2, 0, 0, 0, 252, 0, 0, 0, 204, 0, 0, 0, 17, 0, 0, 0,
  95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95,
  0, 0, 0, 2, 0, 0, 0, 76, 0, 0, 0, 4, 0, 0, 0, 196, 255, 255, 255, 28, 0, 0,
  0, 4, 0, 0, 0, 15, 0, 0, 0, 112, 97, 110, 100, 97, 115, 46, 105, 110, 116,
  101, 114, 118, 97, 108, 0, 20, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120,
  116, 101, 110, 115, 105, 111, 110, 58, 110, 97, 109, 101, 0, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 56, 0, 0, 0, 4, 0, 0, 0, 40, 0, 0, 0, 123, 34,
  115, 117, 98, 116, 121, 112, 101, 34, 58, 32, 34, 117, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 99, 108, 111, 115, 101, 100, 34, 58, 32, 34, 114, 105, 103,
  104, 116, 34, 125, 0, 0, 0, 0, 24, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120,
  116, 101, 110, 115, 105, 111, 110, 58, 109, 101, 116, 97, 100, 97, 116, 97,
  0, 0, 0, 0, 52, 255, 255, 255, 108, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0,
  24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 114, 105, 103, 104, 116, 0,
  0, 0, 214, 255, 255, 255, 64, 0, 0, 0, 152, 255, 255, 255, 0, 0, 1, 2, 16, 0,
  0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 108, 101, 102, 116, 0,
  0, 6, 0, 8, 0, 4, 0, 6, 0, 0, 0, 64, 0, 0, 0, 200, 255, 255, 255, 0, 0, 1, 2,
  16, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 40, 49, 44, 32,
  50, 93, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0,
  16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5,
  16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 40, 48, 44, 32,
  49, 93, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 72, 1,
  0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0,
  0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0,
  12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 188, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
  6, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
  0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
  0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
  0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 102, 111, 111,
  98, 97, 114, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
  0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/range.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `RangeIndex` (default) for both `index` and `columns` attributes.
//
// pd.DataFrame(
//     [["foo", 1], ["bar", 2]],
// )

export const RANGE = new Uint8Array([
  255, 255, 255, 255, 200, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 48, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 8, 2, 0, 0, 4, 0, 0, 0, 250, 1, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34,
  44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34,
  58, 32, 50, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32,
  34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34,
  58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111,
  100, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 49, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111,
  100, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34,
  99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97,
  114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34,
  118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34,
  125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105,
  111, 110, 34, 58, 32, 34, 49, 46, 50, 46, 52, 34, 125, 0, 0, 6, 0, 0, 0, 112,
  97, 110, 100, 97, 115, 0, 0, 2, 0, 0, 0, 60, 0, 0, 0, 4, 0, 0, 0, 220, 255,
  255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0,
  0, 0, 49, 0, 0, 0, 204, 255, 255, 255, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0,
  0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255,
  255, 255, 255, 216, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5,
  0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 124, 0, 0, 0, 16, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16,
  0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
  0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 102, 111, 111, 98, 97,
  114, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 49, 50, 0, 0, 0,
  0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/timedelta.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that contains columns with timedelta (aka duration) values.
//
// df = pd.DataFrame(
//   [
//       [
//           timedelta(seconds=5),
//           pd.Timedelta(20, "d"),
//       ],
//       [
//           timedelta(minutes=250),
//           pd.Timedelta(2, "hours"),
//       ],
//   ],
//   columns=["c1", "c2"],
// )

export const TIMEDELTA = new Uint8Array([
  255, 255, 255, 255, 248, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 88, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 48, 2, 0, 0, 4, 0, 0, 0, 35, 2, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34,
  44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34,
  58, 32, 50, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32,
  34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34,
  58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123, 34,
  101, 110, 99, 111, 100, 105, 110, 103, 34, 58, 32, 34, 85, 84, 70, 45, 56,
  34, 125, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 116, 105, 109, 101, 100, 101, 108, 116, 97,
  54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 34, 99, 50, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 99, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44,
  32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 116,
  105, 109, 101, 100, 101, 108, 116, 97, 54, 52, 91, 110, 115, 93, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108,
  105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119,
  34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 52,
  46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118,
  101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 50, 46, 49, 46, 50, 34, 125, 0,
  6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 4, 0,
  0, 0, 216, 255, 255, 255, 0, 0, 1, 18, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 2, 0, 0, 0, 99, 50, 0, 0, 198, 255, 255, 255, 0, 0, 3, 0, 16, 0,
  20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 18, 16, 0,
  0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 49, 0, 0, 0, 0, 6,
  0, 8, 0, 6, 0, 6, 0, 0, 0, 0, 0, 3, 0, 255, 255, 255, 255, 184, 0, 0, 0, 20,
  0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0,
  3, 4, 0, 24, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 92, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 5, 42, 1, 0, 0, 0, 0, 240, 171, 117, 164, 13,
  0, 0, 0, 0, 44, 90, 155, 35, 6, 0, 0, 64, 113, 97, 140, 6, 0, 0, 255, 255,
  255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/uint64.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `UInt64Index` for both `index` and `columns` attributes.
//
// pd.DataFrame(
//     [[1, 2], [3, 4]],
//     index=pd.UInt64Index([1, 2]),
//     columns=pd.UInt64Index([1, 2]),
// )

export const UINT64 = new Uint8Array([
  255, 255, 255, 255, 96, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 116, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 76, 2, 0, 0, 4, 0, 0, 0, 62, 2, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48,
  95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100,
  101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 105, 110, 116, 54, 52, 34, 44,
  32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117,
  105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109,
  110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49, 34,
  44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
  49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34, 44, 32,
  34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101,
  120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 117, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34,
  99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97,
  114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34,
  118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34,
  125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105,
  111, 110, 34, 58, 32, 34, 49, 46, 50, 46, 52, 34, 125, 0, 0, 6, 0, 0, 0, 112,
  97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 132, 0, 0, 0, 68, 0, 0, 0, 4, 0, 0,
  0, 152, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 40, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118,
  101, 108, 95, 48, 95, 95, 0, 6, 0, 8, 0, 4, 0, 6, 0, 0, 0, 64, 0, 0, 0, 212,
  255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
  1, 0, 0, 0, 50, 0, 0, 0, 196, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0,
  20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 2, 16, 0,
  0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 8, 0, 12,
  0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 255, 255,
  255, 255, 232, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8,
  0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 124, 0, 0, 0, 16, 0, 0, 0,
  2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0,
  0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0,
  0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0,
  0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
  0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/unicode.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `UnicodeIndex` for both `index` and `columns` attributes.
//
// pd.DataFrame(
//     [["foo", "1"], ["bar", "2"]],
//     index=["i1", "i2"],
//     columns=["c1", "c2"],
// )

export const UNICODE = new Uint8Array([
  255, 255, 255, 255, 96, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 144, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 104, 2, 0, 0, 4, 0, 0, 0, 91, 2, 0, 0, 123,
  34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58,
  32, 91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95,
  48, 95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110,
  100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100,
  101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100,
  97, 116, 97, 34, 58, 32, 123, 34, 101, 110, 99, 111, 100, 105, 110, 103, 34,
  58, 32, 34, 85, 84, 70, 45, 56, 34, 125, 125, 93, 44, 32, 34, 99, 111, 108,
  117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  34, 99, 49, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101,
  34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98,
  106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 34, 99, 50, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 34, 99, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44,
  32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111,
  98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118,
  101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44,
  32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111,
  98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116,
  111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32,
  34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115,
  105, 111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112,
  97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34,
  49, 46, 50, 46, 52, 34, 125, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0,
  3, 0, 0, 0, 116, 0, 0, 0, 60, 0, 0, 0, 4, 0, 0, 0, 168, 255, 255, 255, 0, 0,
  1, 5, 16, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95,
  105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0,
  0, 168, 255, 255, 255, 220, 255, 255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 20, 0, 0,
  0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 50, 0, 0, 204, 255, 255, 255, 16,
  0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16,
  0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 49, 0, 0, 4, 0,
  4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 24, 1, 0, 0, 20, 0, 0, 0,
  0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0,
  24, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0,
  10, 0, 0, 0, 172, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0,
  0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
  12, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 48,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 12, 0,
  0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 102, 111, 111, 98, 97,
  114, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 49, 50, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 105, 49, 105, 50, 0,
  0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/profiler/PerformanceEvents.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { logMessage } from "@streamlit/lib/src/util/log"
import { getRerunAnalysis } from "@streamlit/lib/src/profiler/RerunAnalyzer"
import { ScriptRunState } from "@streamlit/lib/src/ScriptRunState"

interface PerformanceEventBase {
  timestamp?: number
}

export interface RequestedRerunEvent extends PerformanceEventBase {
  name: "RequestedRerun"
  scriptRunState: ScriptRunState
}

export interface BeginHandleMessageEvent extends PerformanceEventBase {
  name: "BeginHandleMessage"
  messageIndex: number
}

export interface DecodedMessageEvent extends PerformanceEventBase {
  name: "DecodedMessage"
  messageIndex: number
  messageType?: string
  len: number
}

export interface GotCachedPayloadEvent extends PerformanceEventBase {
  name: "GotCachedPayload"
  messageIndex: number
}

export interface DispatchedMessageEvent extends PerformanceEventBase {
  name: "DispatchedMessage"
  messageIndex: number
  messageType?: string
}

export type HandleMessageEvent =
  | BeginHandleMessageEvent
  | DecodedMessageEvent
  | GotCachedPayloadEvent
  | DispatchedMessageEvent

export type PerformanceEvent = RequestedRerunEvent | HandleMessageEvent

/** Simple utility for capturing time samples. */
export class PerformanceEvents {
  /** Set this to true to capture PerformanceEvents. */
  public static enabled = false

  private static events: PerformanceEvent[] = []

  public static record(event: PerformanceEvent): void {
    if (!this.enabled) {
      return
    }

    event.timestamp = performance.now()
    this.events.push(event)

    if (
      event.name === "DispatchedMessage" &&
      event.messageType === "scriptFinished"
    ) {
      logMessage("Rerun results", getRerunAnalysis(this.events))
      this.events = []
    }
  }
}


================================================
File: /frontend/lib/src/profiler/RerunAnalyzer.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  DecodedMessageEvent,
  HandleMessageEvent,
  PerformanceEvent,
  RequestedRerunEvent,
} from "@streamlit/lib/src/profiler/PerformanceEvents"
import {
  findNextEventIndex,
  findPrevEvent,
  findPrevEventIndex,
  getTimeDelta,
  isHandleMessageEvent,
} from "@streamlit/lib/src/profiler/Utils"

type JSON = any

class RerunAnalyzer {
  /** All the events that occurred in this rerun. */
  private readonly rerunEvents: PerformanceEvent[]

  /** The rerun request event that immediately preceded the rerun, if any. */
  private readonly requestedRerun?: RequestedRerunEvent

  public constructor(allEvents: PerformanceEvent[], lastEventIndex: number) {
    const firstEventIndex = findRunStartEventIndex(allEvents, lastEventIndex)
    if (firstEventIndex === undefined) {
      throw new Error("Unable to find run start!")
    }

    this.rerunEvents = allEvents.slice(firstEventIndex, lastEventIndex + 1)
    this.requestedRerun = <RequestedRerunEvent>(
      findPrevEvent(
        allEvents,
        firstEventIndex - 1,
        evt => evt.name === "RequestedRerun"
      )
    )
  }

  public getResults = (): JSON => {
    // Determine which messages were part of the run
    const messageIndexes = new Set<number>()
    this.rerunEvents.forEach(evt => {
      if (isHandleMessageEvent(evt)) {
        messageIndexes.add(evt.messageIndex)
      }
    })

    if (messageIndexes.size === 0) {
      return "No rerun messages found!"
    }

    // Analyze each message in the run
    const sortedMessageIndexes =
      Array.from(messageIndexes).sort(compareNumbers)

    // Get the total duration of the run
    const lastRerunEvent = this.rerunEvents[this.rerunEvents.length - 1]
    const firstRerunEvent = this.rerunEvents[0]

    const results: any = {
      messages: sortedMessageIndexes.map(this.getMessageAnalysis),
      rerunDuration: getTimeDelta(firstRerunEvent, lastRerunEvent),
    }

    // If we had a rerun request, include some additional stats
    if (this.requestedRerun !== undefined) {
      results.requestedRerun = true
      results.scriptRunStateAtStart = this.requestedRerun.scriptRunState
      results.requestToRerunStart = getTimeDelta(
        this.requestedRerun,
        firstRerunEvent
      )
    }

    return results
  }

  private getMessageAnalysis = (messageIndex: number): any => {
    // Get each event associated with the given message.
    const handleMessageEvents: HandleMessageEvent[] = []
    let curIndex = 0
    while (curIndex < this.rerunEvents.length) {
      const nextEventIndex = findNextMessageEvent(
        this.rerunEvents,
        curIndex,
        messageIndex
      )

      if (nextEventIndex === undefined) {
        break
      }

      handleMessageEvents.push(
        <HandleMessageEvent>this.rerunEvents[nextEventIndex]
      )
      curIndex = nextEventIndex + 1
    }

    if (handleMessageEvents.length === 0) {
      throw new Error(`No messages for the given index: ${messageIndex}`)
    }

    const first = handleMessageEvents[0]
    const last = handleMessageEvents[handleMessageEvents.length - 1]

    const messageAnalysis: any = {
      messageIndex,
      duration: getTimeDelta(first, last),
      steps: [],
    }

    for (let ii = 1; ii < handleMessageEvents.length; ++ii) {
      const prevStep = handleMessageEvents[ii - 1]
      const thisStep = handleMessageEvents[ii]

      if (thisStep.name === "DecodedMessage") {
        messageAnalysis.messageType = thisStep.messageType
        messageAnalysis.len = thisStep.len
      }

      messageAnalysis.steps.push({
        name: thisStep.name,
        duration: getTimeDelta(prevStep, thisStep),
      })
    }

    return messageAnalysis
  }
}

function compareNumbers(a: number, b: number): number {
  if (a < b) {
    return -1
  }
  if (a > b) {
    return 1
  }
  return 0
}

/** Find the index of the first event in the run. */
function findRunStartEventIndex(
  events: PerformanceEvent[],
  lastEventIndex: number
): number | undefined {
  const newSessionDecodedIndex = findPrevEventIndex(
    events,
    lastEventIndex - 1,
    event =>
      event.name === "DecodedMessage" && event.messageType === "newSession"
  )

  if (newSessionDecodedIndex === undefined) {
    return undefined
  }

  // Find the newSession's "BeginHandleMessage" event
  const { messageIndex } = <DecodedMessageEvent>events[newSessionDecodedIndex]

  return findPrevEventIndex(
    events,
    newSessionDecodedIndex,
    event =>
      event.name === "BeginHandleMessage" &&
      event.messageIndex === messageIndex
  )
}

/** Find the next HandleMessageEvent index for the given message. */
function findNextMessageEvent(
  events: PerformanceEvent[],
  startIndex: number,
  messageIndex: number
): number | undefined {
  return findNextEventIndex(
    events,
    startIndex,
    evt => isHandleMessageEvent(evt) && evt.messageIndex === messageIndex
  )
}

/** Return a human-readable performance analysis of a single rerun. */
export function getRerunAnalysis(
  allEvents: PerformanceEvent[],
  lastEventIndex?: number
): JSON {
  return new RerunAnalyzer(
    allEvents,
    lastEventIndex ?? allEvents.length - 1
  ).getResults()
}


================================================
File: /frontend/lib/src/profiler/Utils.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  HandleMessageEvent,
  PerformanceEvent,
} from "@streamlit/lib/src/profiler/PerformanceEvents"

export type EventPredicate = (event: PerformanceEvent) => boolean

export function findNextEventIndex(
  events: PerformanceEvent[],
  startEvent: PerformanceEvent | number,
  pred: EventPredicate
): number | undefined {
  const startIndex =
    typeof startEvent === "number" ? startEvent : events.indexOf(startEvent)

  for (let ii = startIndex; ii < events.length; ++ii) {
    if (pred(events[ii])) {
      return ii
    }
  }

  return undefined
}

export function findNextEvent(
  events: PerformanceEvent[],
  startEvent: PerformanceEvent | number,
  pred: EventPredicate
): PerformanceEvent | undefined {
  const index = findNextEventIndex(events, startEvent, pred)
  return index !== undefined ? events[index] : undefined
}

export function findPrevEventIndex(
  events: PerformanceEvent[],
  startEvent: PerformanceEvent | number,
  pred: EventPredicate
): number | undefined {
  const startIndex =
    typeof startEvent === "number" ? startEvent : events.indexOf(startEvent)

  for (let ii = startIndex; ii >= 0; --ii) {
    const event = events[ii]
    if (pred(event)) {
      return ii
    }
  }

  return undefined
}

export function findPrevEvent(
  events: PerformanceEvent[],
  startEvent: PerformanceEvent | number,
  pred: EventPredicate
): PerformanceEvent | undefined {
  const index = findPrevEventIndex(events, startEvent, pred)
  return index !== undefined ? events[index] : undefined
}

export function isHandleMessageEvent(
  event: PerformanceEvent
): event is HandleMessageEvent {
  return (event as HandleMessageEvent).messageIndex !== undefined
}

/** Return the elapsed time between two performance events. */
export function getTimeDelta(
  a: PerformanceEvent,
  b: PerformanceEvent
): number {
  return Math.abs((b.timestamp as number) - (a.timestamp as number))
}


================================================
File: /frontend/lib/src/theme/baseui.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  darkThemePrimitives as baseuiDarkThemePrimitives,
  lightThemePrimitives as baseuiLightThemePrimitives,
} from "baseui"

import emotionLightTheme from "./emotionLightTheme"
import emotionDarkTheme from "./emotionDarkTheme"
import { createBaseUiTheme } from "./createThemeUtil"

export const baseuiLightTheme = createBaseUiTheme(
  emotionLightTheme,
  baseuiLightThemePrimitives
)

export const baseuiDarkTheme = createBaseUiTheme(
  emotionDarkTheme,
  baseuiDarkThemePrimitives
)

export type BaseUILightTheme = typeof baseuiLightTheme


================================================
File: /frontend/lib/src/theme/consts.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const STALE_TRANSITION_PARAMS = "1s ease-in 0.5s"

export const STALE_STYLES = {
  opacity: 0.33,
  transition: `opacity ${STALE_TRANSITION_PARAMS}`,
}


================================================
File: /frontend/lib/src/theme/createThemeUtil.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  createTheme as createBaseTheme,
  lightThemePrimitives as lightBaseThemePrimitives,
  Primitives as ThemePrimitives,
} from "baseui"
import { Theme as BaseTheme } from "baseui/theme"
import { transparentize } from "color2k"

import { EmotionTheme } from "./types"

// Theme primitives. See lightThemePrimitives for what's available. These are
// used to create a large JSON-style structure with theme values for all
// widgets.
// - See node_modules/baseui/themes/light-theme-primitives.js for an example
// of primitives we can use here.
// - See node_modules/baseui/themes/creator.js for the mapping of values from
// this file to output values.
export const createBaseThemePrimitives = (
  baseTheme: ThemePrimitives,
  theme: EmotionTheme
): ThemePrimitives => {
  const { colors, genericFonts } = theme

  return {
    ...baseTheme,

    primaryFontFamily: genericFonts.bodyFont,

    primary100: colors.primary,
    primary200: colors.primary,
    primary300: colors.primary,
    primary400: colors.primary,
    primary500: colors.primary,
    primary600: colors.primary,
    primary700: colors.primary,

    // Override gray values based on what is actually used in BaseWeb, and the
    // way we want it to match our theme originating from Bootstrap.
    mono100: colors.bgColor, // Popup menu
    mono200: colors.secondaryBg, // Text input, text area, selectbox
    mono300: colors.lightGray, // Disabled widget background
    mono400: colors.lightGray, // Slider track
    mono500: colors.gray, // Clicked checkbox and radio
    mono600: colors.fadedText40, // Disabled widget text
    mono700: colors.gray, // Unselected checkbox and radio
    mono800: colors.bodyText, // Selectbox text
    mono900: colors.bodyText, // Not used, but just in case.
    mono1000: colors.black,
  }
}

// Theme overrides.
// NOTE: A lot of the properties we can override here don't seem to actually
// be used anywhere in BaseWeb's source. Will report a bug about it.
export const createThemeOverrides = (
  theme: EmotionTheme
): Record<string, any> => {
  const { inSidebar, colors, genericFonts, fontSizes, lineHeights, radii } =
    theme

  const fontStyles = {
    fontFamily: genericFonts.bodyFont,
    fontSize: fontSizes.md,
    fontSizeSm: fontSizes.sm,
    fontWeight: "normal",
    lineHeight: lineHeights.base,
    lineHeightTight: lineHeights.tight,
  }

  const widgetBackgroundColor = colors.widgetBackgroundColor
    ? colors.widgetBackgroundColor
    : colors.secondaryBg

  // We want menuFill to always use bgColor. But when in sidebar, bgColor and secondaryBg are
  // swapped! So here we unswap them.
  const mainPaneBgColor = inSidebar ? colors.secondaryBg : colors.bgColor
  const mainPaneSecondaryBgColor = inSidebar
    ? colors.bgColor
    : colors.secondaryBg

  return {
    borders: {
      // Override borders that are declared from literals in
      // https://github.com/uber/baseweb/blob/master/src/themes/shared/borders.ts

      radius100: radii.default,
      radius200: radii.default,
      radius300: radii.default,
      radius400: radii.default,
      radius500: radii.default,

      /** Datepicker (Range), Progress Bar, Slider, Tag */
      useRoundedCorners: true,
      /** Button, ButtonGroup */
      buttonBorderRadiusMini: radii.md, // Unused today.
      buttonBorderRadius: radii.default,
      /** Checkbox */
      checkboxBorderRadius: radii.md,
      /** Input, Select, Textarea */
      inputBorderRadiusMini: radii.md, // Unused today.
      inputBorderRadius: radii.default,
      /** Popover, Menu, Tooltip */
      popoverBorderRadius: radii.default,
      /** Card, Datepicker, Modal, Toast, Notification */
      surfaceBorderRadius: radii.default,
      /** Tag */
      tagBorderRadius: radii.md,
    },
    typography: {
      // Here we override some fonts that are used in widgets. We don't care
      // about the ones that are not used.
      font100: {},
      font150: { ...fontStyles }, // Popup menus
      font200: {},
      font250: {},
      font300: { ...fontStyles }, // Popup menus
      font350: { ...fontStyles }, // Checkbox
      font400: { ...fontStyles }, // Textinput, textarea, selectboxes
      font450: { ...fontStyles }, // Radio
      font460: { ...fontStyles }, // Calendar header buttons
      font470: { ...fontStyles }, // Button
      font500: { ...fontStyles }, // Selected items in selectbox
      font600: {},

      LabelXSmall: { ...fontStyles },
      LabelSmall: { ...fontStyles },
      LabelMedium: { ...fontStyles },
      LabelLarge: { ...fontStyles },
      ParagraphSmall: { ...fontStyles },
    },

    colors: {
      white: colors.white,
      black: colors.black,
      primary: colors.primary,
      primaryA: colors.primary,
      backgroundPrimary: colors.bgColor,
      backgroundSecondary: widgetBackgroundColor,
      backgroundTertiary: colors.bgColor,
      borderOpaque: colors.darkenedBgMix25,
      accent: transparentize(colors.primary, 0.5),
      tagPrimarySolidBackground: colors.primary,
      tagPrimaryFontDisabled: colors.fadedText40,
      tagPrimaryOutlinedDisabled: colors.transparent,
      borderSelected: colors.primary,
      contentPrimary: colors.bodyText,
      inputPlaceholder: colors.fadedText60,
      tickFillDisabled: colors.fadedText40,
      tickMarkFill: colors.lightestGray,
      tickFillSelected: colors.primary,
      datepickerBackground: mainPaneBgColor,
      calendarBackground: mainPaneBgColor,
      calendarForeground: colors.bodyText,
      calendarDayForegroundPseudoSelected: colors.bodyText,
      calendarHeaderBackground: mainPaneSecondaryBgColor,
      calendarHeaderBackgroundActive: mainPaneSecondaryBgColor,
      calendarHeaderForeground: colors.bodyText,
      calendarHeaderForegroundDisabled: colors.gray40,
      calendarDayBackgroundSelected: colors.primary,
      calendarDayBackgroundSelectedHighlighted: colors.primary,
      calendarDayForegroundSelected: colors.white,
      calendarDayForegroundSelectedHighlighted: colors.white,
      calendarDayForegroundPseudoSelectedHighlighted: colors.bodyText,
      menuFontHighlighted: colors.bodyText,
      menuFontSelected: colors.bodyText,

      modalCloseColor: colors.bodyText,

      notificationInfoBackground: colors.infoBg,
      notificationInfoText: colors.info,
      notificationPositiveBackground: colors.successBg,
      notificationPositiveText: colors.success,
      notificationWarningBackground: colors.warningBg,
      notificationWarningText: colors.warning,
      notificationNegativeBackground: colors.dangerBg,
      notificationNegativeText: colors.danger,
      progressbarTrackFill: widgetBackgroundColor,

      // mono100 overrides
      tickFill: colors.lightenedBg05, // Checkbox and Radio
      tickMarkFillDisabled: colors.lightenedBg05,
      // We want menuFill to always use bgColor. But when in sidebar, bgColor and secondaryBg are
      // swapped! So here we unswap them.
      menuFill: mainPaneBgColor,

      // mono200 overrides
      buttonDisabledFill: colors.lightenedBg05,
      tickFillHover: widgetBackgroundColor,
      inputFillDisabled: widgetBackgroundColor,
      inputFillActive: widgetBackgroundColor,

      // mono300 overrides
      toggleTrackFillDisabled: widgetBackgroundColor,
      tickFillActive: widgetBackgroundColor,
      sliderTrackFillDisabled: widgetBackgroundColor,
      inputBorder: colors.widgetBorderColor || widgetBackgroundColor,
      inputFill: widgetBackgroundColor,
      inputEnhanceFill: widgetBackgroundColor,
      inputEnhancerFillDisabled: widgetBackgroundColor,

      // mono400 overrides
      buttonDisabledSpinnerBackground: colors.gray40,
      toggleTrackFill: colors.gray40,
      sliderTrackFill: colors.gray40,
      sliderHandleInnerFill: colors.gray40,
      sliderHandleInnerFillDisabled: colors.gray40,
    },
  }
}

export const createBaseUiTheme = (
  theme: EmotionTheme,
  primitives = lightBaseThemePrimitives
): BaseTheme & Record<string, any> =>
  createBaseTheme(
    createBaseThemePrimitives(primitives, theme),
    createThemeOverrides(theme)
  )


================================================
File: /frontend/lib/src/theme/emotion.d.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { EmotionTheme as StreamlitTheme } from "@streamlit/lib/src/theme/index"

// Outside imports make declarations not ambient, so we separate out from
// the ambient declarations.d.ts
//
// This declaration allows us to extend our type declarations for emotion's
// theme (an empty object) to be our type
declare module "@emotion/react" {
  export interface Theme extends StreamlitTheme {}
}


================================================
File: /frontend/lib/src/theme/getColors.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { darken, getLuminance, lighten, mix, transparentize } from "color2k"

import { EmotionTheme } from "./types"

export type DerivedColors = {
  linkText: string
  fadedText05: string
  fadedText10: string
  fadedText20: string
  fadedText40: string
  fadedText60: string

  bgMix: string
  darkenedBgMix100: string
  darkenedBgMix25: string
  darkenedBgMix15: string
  lightenedBg05: string

  borderColor: string
  borderColorLight: string
}

export const computeDerivedColors = (
  genericColors: Record<string, string>
): DerivedColors => {
  const { bodyText, secondaryBg, bgColor } = genericColors

  const hasLightBg = getLuminance(bgColor) > 0.5

  // Always keep links blue, but brighten them up a bit on dark backgrounds so
  // they're easier to read.
  const linkText = hasLightBg
    ? genericColors.blue
    : lighten(genericColors.blue, 0.2)

  const fadedText05 = transparentize(bodyText, 0.9) // Mostly used for very faint 1px lines.
  const fadedText10 = transparentize(bodyText, 0.8) // Mostly used for 1px lines.
  const fadedText20 = transparentize(bodyText, 0.7) // Used for 1px lines.
  const fadedText40 = transparentize(bodyText, 0.6) // Backgrounds.
  const fadedText60 = transparentize(bodyText, 0.4) // Secondary text.

  const borderColor = fadedText10
  const borderColorLight = fadedText05

  const bgMix = mix(bgColor, secondaryBg, 0.5)
  const darkenedBgMix100 = hasLightBg
    ? darken(bgMix, 0.3)
    : lighten(bgMix, 0.6) // Icons.
  // TODO(tvst): Rename to darkenedBgMix25 (number = opacity)
  const darkenedBgMix25 = transparentize(darkenedBgMix100, 0.75)
  const darkenedBgMix15 = transparentize(darkenedBgMix100, 0.85) // Hovered menu/nav items.

  const lightenedBg05 = lighten(bgColor, 0.025) // Button, checkbox, radio background.

  return {
    linkText,
    fadedText05,
    fadedText10,
    fadedText20,
    fadedText40,
    fadedText60,

    bgMix,
    darkenedBgMix100,
    darkenedBgMix25,
    darkenedBgMix15,
    lightenedBg05,

    borderColor,
    borderColorLight,
  }
}

export function hasLightBackgroundColor(theme: EmotionTheme): boolean {
  return getLuminance(theme.colors.bgColor) > 0.5
}

export const createEmotionColors = (genericColors: {
  [key: string]: string
}): { [key: string]: string } => {
  const derivedColors = computeDerivedColors(genericColors)
  return {
    ...genericColors,
    ...derivedColors,

    codeTextColor: genericColors.green80,
    codeHighlightColor: derivedColors.bgMix,

    metricPositiveDeltaColor: genericColors.green,
    metricNegativeDeltaColor: genericColors.red,
    metricNeutralDeltaColor: derivedColors.fadedText60,

    docStringModuleText: genericColors.bodyText,
    docStringTypeText: genericColors.green70,
    docStringContainerBackground: transparentize(
      genericColors.secondaryBg,
      0.6
    ),

    headingColor: genericColors.bodyText,
  }
}

export function getDividerColors(theme: EmotionTheme): any {
  const lightTheme = hasLightBackgroundColor(theme)
  const blue = lightTheme ? theme.colors.blue60 : theme.colors.blue90
  const green = lightTheme ? theme.colors.green60 : theme.colors.green90
  const orange = lightTheme ? theme.colors.orange60 : theme.colors.orange90
  const red = lightTheme ? theme.colors.red60 : theme.colors.red90
  const violet = lightTheme ? theme.colors.purple60 : theme.colors.purple80
  const gray = lightTheme ? theme.colors.gray40 : theme.colors.gray70

  return {
    blue: blue,
    green: green,
    orange: orange,
    red: red,
    violet: violet,
    gray: gray,
    grey: gray,
    rainbow: `linear-gradient(to right, ${red}, ${orange}, ${green}, ${blue}, ${violet})`,
  }
}

export function getMarkdownTextColors(theme: EmotionTheme): any {
  const lightTheme = hasLightBackgroundColor(theme)
  const red = lightTheme ? theme.colors.red80 : theme.colors.red70
  const orange = lightTheme ? theme.colors.orange100 : theme.colors.orange60
  const yellow = lightTheme ? theme.colors.yellow100 : theme.colors.yellow40
  const green = lightTheme ? theme.colors.green90 : theme.colors.green60
  const blue = lightTheme ? theme.colors.blue80 : theme.colors.blue50
  const violet = lightTheme ? theme.colors.purple80 : theme.colors.purple50
  const purple = lightTheme ? theme.colors.purple100 : theme.colors.purple80
  const gray = lightTheme ? theme.colors.gray80 : theme.colors.gray70
  const primary = theme.colors.primary

  return {
    red: red,
    orange: orange,
    yellow: yellow,
    green: green,
    blue: blue,
    violet: violet,
    purple: purple,
    gray: gray,
    primary: primary,
  }
}

export function getMarkdownBgColors(theme: EmotionTheme): any {
  const lightTheme = hasLightBackgroundColor(theme)

  return {
    redbg: transparentize(
      theme.colors[lightTheme ? "red80" : "red60"],
      lightTheme ? 0.9 : 0.7
    ),
    orangebg: transparentize(theme.colors.yellow70, lightTheme ? 0.9 : 0.7),
    yellowbg: transparentize(
      theme.colors[lightTheme ? "yellow70" : "yellow50"],
      lightTheme ? 0.9 : 0.7
    ),
    greenbg: transparentize(
      theme.colors[lightTheme ? "green70" : "green60"],
      lightTheme ? 0.9 : 0.7
    ),
    bluebg: transparentize(
      theme.colors[lightTheme ? "blue70" : "blue60"],
      lightTheme ? 0.9 : 0.7
    ),
    violetbg: transparentize(
      theme.colors[lightTheme ? "purple70" : "purple60"],
      lightTheme ? 0.9 : 0.7
    ),
    purplebg: transparentize(
      theme.colors[lightTheme ? "purple90" : "purple80"],
      lightTheme ? 0.9 : 0.7
    ),
    graybg: transparentize(
      theme.colors[lightTheme ? "gray70" : "gray50"],
      lightTheme ? 0.9 : 0.7
    ),
    primarybg: transparentize(theme.colors.primary, lightTheme ? 0.9 : 0.7),
  }
}

export function getGray70(theme: EmotionTheme): string {
  return hasLightBackgroundColor(theme)
    ? theme.colors.gray70
    : theme.colors.gray30
}

export function getGray30(theme: EmotionTheme): string {
  return hasLightBackgroundColor(theme)
    ? theme.colors.gray30
    : theme.colors.gray85
}

export function getGray90(theme: EmotionTheme): string {
  return hasLightBackgroundColor(theme)
    ? theme.colors.gray90
    : theme.colors.gray10
}

export function getBlue80(theme: EmotionTheme): string {
  return hasLightBackgroundColor(theme)
    ? theme.colors.blue80
    : theme.colors.blue40
}
function getBlueArrayAsc(theme: EmotionTheme): string[] {
  const { colors } = theme
  return [
    colors.blue10,
    colors.blue20,
    colors.blue30,
    colors.blue40,
    colors.blue50,
    colors.blue60,
    colors.blue70,
    colors.blue80,
    colors.blue90,
    colors.blue100,
  ]
}
function getBlueArrayDesc(theme: EmotionTheme): string[] {
  const { colors } = theme
  return [
    colors.blue100,
    colors.blue90,
    colors.blue80,
    colors.blue70,
    colors.blue60,
    colors.blue50,
    colors.blue40,
    colors.blue30,
    colors.blue20,
    colors.blue10,
  ]
}

export function getSequentialColorsArray(theme: EmotionTheme): string[] {
  return hasLightBackgroundColor(theme)
    ? getBlueArrayAsc(theme)
    : getBlueArrayDesc(theme)
}

export function getDivergingColorsArray(theme: EmotionTheme): string[] {
  const { colors } = theme
  return [
    colors.red100,
    colors.red90,
    colors.red70,
    colors.red50,
    colors.red30,
    colors.blue30,
    colors.blue50,
    colors.blue70,
    colors.blue90,
    colors.blue100,
  ]
}

export function getCategoricalColorsArray(theme: EmotionTheme): string[] {
  const { colors } = theme
  return hasLightBackgroundColor(theme)
    ? [
        colors.blue80,
        colors.blue40,
        colors.red80,
        colors.red40,
        colors.blueGreen80,
        colors.green40,
        colors.orange80,
        colors.orange50,
        colors.purple80,
        colors.gray40,
      ]
    : [
        colors.blue40,
        colors.blue80,
        colors.red40,
        colors.red80,
        colors.green40,
        colors.blueGreen80,
        colors.orange50,
        colors.orange80,
        colors.purple80,
        colors.gray40,
      ]
}

export function getDecreasingRed(theme: EmotionTheme): string {
  return hasLightBackgroundColor(theme)
    ? theme.colors.red80
    : theme.colors.red40
}

export function getIncreasingGreen(theme: EmotionTheme): string {
  return hasLightBackgroundColor(theme)
    ? theme.colors.blueGreen80
    : theme.colors.green40
}


================================================
File: /frontend/lib/src/theme/globalStyles.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { css, SerializedStyles } from "@emotion/react"
import { transparentize } from "color2k"

import { EmotionTheme } from "@streamlit/lib/src/theme"

/**
 * Contains various styles that are applied globally to the app.
 *
 * Please only add styles here if they are truly global. Putting styles to the
 * individual components should be strongly preferred.
 */
export const globalStyles = (theme: EmotionTheme): SerializedStyles => css`
  // Override the base font-size value here.
  html {
    font-size: ${theme.fontSizes.mdPx}px;
  }

  // Set height to 100% for printing, otherwise the page on Safari might be blank
  @media print {
    html {
      height: 100%;
      // make background-colors appear by default (e.g. the sidebar background,
      // widget background, multi-select element background, ...)
      print-color-adjust: exact;
      -webkit-print-color-adjust: exact;
    }
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  // Body
  //
  // 1. Remove the margin in all browsers.
  // 2. As a best practice, apply a default background-color.
  // 3. Prevent adjustments of font size after orientation changes in iOS.
  // 4. Change the default tap highlight to be completely transparent in iOS.

  body {
    margin: 0; // 1
    font-family: ${theme.genericFonts.bodyFont};
    font-weight: ${theme.fontWeights.normal};
    line-height: ${theme.lineHeights.base};
    color: ${theme.colors.bodyText};
    background-color: ${theme.colors.bgColor}; // 2
    -webkit-text-size-adjust: 100%; // 3
    -webkit-tap-highlight-color: ${transparentize(theme.colors.black, 1)}; // 4
    -webkit-font-smoothing: auto;
  }

  // Embedded Overflow Management
  body.embedded {
    overflow: hidden;
  }

  body.embedded:hover {
    overflow: auto;
  }

  // Future-proof rule: in browsers that support :focus-visible, suppress the focus outline
  // on elements that programmatically receive focus but wouldn't normally show a visible
  // focus outline. In general, this would mean that the outline is only applied if the
  // interaction that led to the element receiving programmatic focus was a keyboard interaction,
  // or the browser has somehow determined that the user is primarily a keyboard user and/or
  // wants focus outlines to always be presented.
  // See https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible
  // and https://developer.paciellogroup.com/blog/2018/03/focus-visible-and-backwards-compatibility/

  [tabindex="-1"]:focus:not(:focus-visible) {
    outline: 0 !important;
  }

  // Lists
  // Reset margins on paragraphs
  //
  // Similarly, the top margin on <p>s get reset. However, we also reset the
  // bottom margin to use rem units instead of em.
  p,
  ol,
  ul,
  dl {
    margin: 0 0 1rem 0;
    padding: 0;
    font-size: 1rem;
    font-weight: 400;
  }

  ol ol,
  ul ul,
  ol ul,
  ul ol {
    margin-bottom: 0;
  }

  // And undo these styles for placeholder links/named anchors (without href).
  // It would be more straightforward to just use a[href] in previous block, but that
  // causes specificity issues in many other styles that are too complex to fix.
  // See https://github.com/twbs/bootstrap/issues/19402

  a:not([href]):not([class]) {
    &,
    &:hover {
      color: inherit;
      text-decoration: none;
    }
  }

  // Images and content

  img,
  svg {
    vertical-align: middle;
  }

  // 1. Remove the margin in Firefox and Safari

  input,
  button,
  select,
  optgroup,
  textarea {
    margin: 0; // 1
    font-family: inherit;
    line-height: inherit;
    font-size: inherit;
  }

  // Show the overflow in Edge

  button,
  input {
    overflow: visible;
  }

  // Set the cursor for all buttons or button-like elements
  button,
  [role="button"] {
    &:not(:disabled) {
      cursor: pointer;
    }
  }

  // 1. Prevent a WebKit bug where (2) destroys native audio and video
  //    controls in Android 4.
  // 2. Correct the inability to style clickable types in iOS and Safari.
  // 3. Opinionated: add "hand" cursor to non-disabled button elements.

  button,
  [type="button"], // 1
  [type="reset"],
  [type="submit"] {
    -webkit-appearance: button; // 2
  }

  // Hidden attribute
  //
  // Always hide an element with the hidden HTML attribute.

  [hidden] {
    display: none !important;
  }

  // Make scrollbars awesome in Chrome

  ::-webkit-scrollbar {
    background: transparent;
    border-radius: 100px;
    height: 6px;
    width: 6px;
  }

  ::-webkit-scrollbar:active {
    background: ${theme.colors.fadedText10};
  }

  :hover::-webkit-scrollbar-thumb:vertical,
  :hover::-webkit-scrollbar-thumb:horizontal {
    background: ${theme.colors.fadedText40};
    border-radius: 100px;
  }
`


================================================
File: /frontend/lib/src/theme/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export * from "./baseui"
export * from "./getColors"
export * from "./globalStyles"
export * from "./themeConfigs"
export * from "./types"
export * from "./utils"
export * from "./consts"


================================================
File: /frontend/lib/src/theme/themeConfigs.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { darkThemePrimitives, lightThemePrimitives } from "baseui"

import { baseuiDarkTheme, baseuiLightTheme } from "./baseui"
import emotionBaseTheme from "./emotionBaseTheme"
import emotionLightTheme from "./emotionLightTheme"
import emotionDarkTheme from "./emotionDarkTheme"
import { ThemeConfig } from "./types"

export const baseTheme: ThemeConfig = {
  name: "base",
  emotion: emotionBaseTheme,
  basewebTheme: baseuiLightTheme,
  primitives: lightThemePrimitives,
}

export const darkTheme: ThemeConfig = {
  name: "Dark",
  emotion: emotionDarkTheme,
  basewebTheme: baseuiDarkTheme,
  primitives: darkThemePrimitives,
}

export const lightTheme: ThemeConfig = {
  name: "Light",
  emotion: emotionLightTheme,
  basewebTheme: baseuiLightTheme,
  primitives: lightThemePrimitives,
}


================================================
File: /frontend/lib/src/theme/types.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { lightThemePrimitives } from "baseui"

import { CustomThemeConfig } from "@streamlit/lib/src/proto"

import emotionBaseTheme from "./emotionBaseTheme"
import { baseuiLightTheme } from "./baseui"

export type EmotionTheme = typeof emotionBaseTheme

export type ThemeConfig = {
  name: string
  emotion: EmotionTheme
  // For use with Baseweb's ThemeProvider. This is required in order for us to
  // create separate themes for in the children. Currently required to accommodate
  // sidebar theming.
  basewebTheme: typeof baseuiLightTheme
  primitives: typeof lightThemePrimitives
}

export type CachedTheme = {
  name: string

  themeInput?: Partial<CustomThemeConfig>
}

type IconSizes = typeof emotionBaseTheme.iconSizes
type ThemeColors = typeof emotionBaseTheme.colors
export type ThemeSizings = typeof emotionBaseTheme.sizes
export type ThemeSpacings = typeof emotionBaseTheme.spacing

export type IconSize = keyof IconSizes
export type ThemeColor = Extract<keyof ThemeColors, string>
export type ThemeSizing = keyof ThemeSizings
export type ThemeSpacing = keyof ThemeSpacings
export type PresetThemeName = "Light" | "Dark"


================================================
File: /frontend/lib/src/theme/utils.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { MockInstance } from "vitest"

import { CustomThemeConfig } from "@streamlit/lib/src/proto"
import {
  baseTheme,
  createAutoTheme,
  darkTheme,
  lightTheme,
} from "@streamlit/lib/src/theme/index"
import { fonts } from "@streamlit/lib/src/theme/primitives/typography"
import { ThemeConfig } from "@streamlit/lib/src/theme/types"
import { LocalStore } from "@streamlit/lib/src/util/storageUtils"

import { hasLightBackgroundColor } from "./getColors"
import {
  AUTO_THEME_NAME,
  bgColorToBaseString,
  computeSpacingStyle,
  createEmotionTheme,
  createTheme,
  CUSTOM_THEME_NAME,
  fontEnumToString,
  fontToEnum,
  getCachedTheme,
  getDefaultTheme,
  getHostSpecifiedTheme,
  getSystemTheme,
  isColor,
  isPresetTheme,
  removeCachedTheme,
  setCachedTheme,
  toThemeInput,
} from "./utils"

const matchMediaFillers = {
  onchange: null,
  addListener: vi.fn(), // deprecated
  removeListener: vi.fn(), // deprecated
  addEventListener: vi.fn(),
  removeEventListener: vi.fn(),
  dispatchEvent: vi.fn(),
}

const windowLocationSearch = (search: string): any => ({
  location: {
    search,
  },
})

const windowMatchMedia = (theme: "light" | "dark"): any => ({
  matchMedia: (query: any) => ({
    matches: query === `(prefers-color-scheme: ${theme})`,
    media: query,
    ...matchMediaFillers,
  }),
})

const mockWindow = (...overrides: object[]): MockInstance => {
  const localStorage = window.localStorage
  const windowSpy = vi.spyOn(window, "window", "get")

  windowSpy.mockImplementation(() => ({
    localStorage,
    ...windowLocationSearch(""),
    ...windowMatchMedia("light"),
    ...Object.assign({}, ...overrides),
  }))

  return windowSpy
}

describe("Styling utils", () => {
  describe("computeSpacingStyle", () => {
    test("pulls correct theme values", async () => {
      expect(computeSpacingStyle("sm md lg none", lightTheme.emotion)).toEqual(
        "0.5rem 0.75rem 1rem 0"
      )
      expect(computeSpacingStyle("xs  0  px  lg", lightTheme.emotion)).toEqual(
        "0.375rem 0 1px 1rem"
      )
    })
  })
})

describe("isPresetTheme", () => {
  it("returns true for the light, dark, and auto themes", () => {
    const presetThemes = [lightTheme, darkTheme, createAutoTheme()]

    presetThemes.forEach((themeConfig: ThemeConfig) => {
      expect(isPresetTheme(themeConfig)).toBe(true)
    })
  })

  it("returns false for custom themes", () => {
    const customTheme = createTheme(
      CUSTOM_THEME_NAME,
      new CustomThemeConfig({
        primaryColor: "red",
        secondaryBackgroundColor: "blue",
        font: CustomThemeConfig.FontFamily.SERIF,
      })
    )

    expect(isPresetTheme(customTheme)).toBe(false)
  })
})

describe("Cached theme helpers", () => {
  // NOTE: localStorage is weird, and calling .spyOn(window.localStorage, "setItem")
  // doesn't work. Accessing .__proto__ here isn't too bad of a crime since
  // it's test code.
  const breakLocalStorage = (): void => {
    vi
      // eslint-disable-next-line no-proto
      .spyOn(window.localStorage.__proto__, "setItem")
      .mockImplementation(() => {
        throw new Error("boom")
      })
  }

  afterEach(() => {
    vi.restoreAllMocks()
    window.localStorage.clear()
  })

  describe("getCachedTheme", () => {
    it("returns null if localStorage is not available", () => {
      breakLocalStorage()

      // eslint-disable-next-line no-proto
      const getItemSpy = vi.spyOn(window.localStorage.__proto__, "getItem")
      expect(getCachedTheme()).toBe(null)
      expect(getItemSpy).not.toHaveBeenCalled()
    })

    it("returns null if no theme is set in localStorage", () => {
      expect(getCachedTheme()).toBe(null)
    })

    it("does not find cached themes with older versions, so returns null", () => {
      // Save a cachedTheme in LocalStorage with the key of a previous version.
      window.localStorage.setItem(
        LocalStore.CACHED_THEME_BASE_KEY,
        JSON.stringify({ name: darkTheme.name })
      )
      expect(getCachedTheme()).toBe(null)
    })

    it("returns preset cached theme if localStorage is available and one is set", () => {
      window.localStorage.setItem(
        LocalStore.ACTIVE_THEME,
        JSON.stringify({ name: darkTheme.name })
      )
      expect(getCachedTheme()).toEqual(darkTheme)
    })

    it("returns a custom cached theme if localStorage is available and one is set", () => {
      const themeInput: Partial<CustomThemeConfig> = {
        primaryColor: "red",
        backgroundColor: "orange",
        secondaryBackgroundColor: "yellow",
        textColor: "green",
        font: CustomThemeConfig.FontFamily.SERIF,
      }

      const customTheme = createTheme(CUSTOM_THEME_NAME, themeInput)

      window.localStorage.setItem(
        LocalStore.ACTIVE_THEME,
        JSON.stringify({ name: CUSTOM_THEME_NAME, themeInput })
      )

      expect(getCachedTheme()).toEqual(customTheme)
    })
  })

  describe("removeCachedTheme", () => {
    it("does nothing if localStorage is not available", () => {
      breakLocalStorage()

      const removeItemSpy = vi.spyOn(
        // eslint-disable-next-line no-proto
        window.localStorage.__proto__,
        "removeItem"
      )
      removeCachedTheme()
      expect(removeItemSpy).not.toHaveBeenCalled()
    })

    it("removes theme if localStorage", () => {
      const removeItemSpy = vi.spyOn(
        // eslint-disable-next-line no-proto
        window.localStorage.__proto__,
        "removeItem"
      )

      removeCachedTheme()
      expect(removeItemSpy).toHaveBeenCalled()
    })
  })

  describe("setCachedTheme", () => {
    const themeInput: Partial<CustomThemeConfig> = {
      primaryColor: "red",
      backgroundColor: "orange",
      secondaryBackgroundColor: "yellow",
      textColor: "green",
      font: CustomThemeConfig.FontFamily.SERIF,
    }
    const customTheme = createTheme(CUSTOM_THEME_NAME, themeInput)

    it("does nothing if localStorage is not available", () => {
      breakLocalStorage()

      // eslint-disable-next-line no-proto
      const setItemSpy = vi.spyOn(window.localStorage.__proto__, "setItem")

      setCachedTheme(darkTheme)
      // This looks a bit funny and is the way it is because the way we know
      // that localStorage is broken is that setItem throws an error at us.
      expect(setItemSpy).toHaveBeenCalledTimes(1)
      expect(setItemSpy).toHaveBeenCalledWith("testData", "testData")
    })

    it("sets a preset theme with just its name if localStorage is available", () => {
      setCachedTheme(darkTheme)
      const cachedTheme = JSON.parse(
        window.localStorage.getItem(LocalStore.ACTIVE_THEME) as string
      )
      expect(cachedTheme).toEqual({ name: darkTheme.name })
    })

    it("deletes cached themes with older versions", () => {
      window.localStorage.setItem("stActiveTheme", "I should get deleted :|")

      window.localStorage.setItem(
        LocalStore.CACHED_THEME_BASE_KEY,
        "I should get deleted too :|"
      )

      setCachedTheme(customTheme)

      expect(window.localStorage.getItem("stActiveTheme")).toBe(null)
      expect(
        window.localStorage.getItem(LocalStore.CACHED_THEME_BASE_KEY)
      ).toBe(null)
    })

    it("sets a custom theme with its name and themeInput if localStorage is available", () => {
      setCachedTheme(customTheme)

      const cachedTheme = JSON.parse(
        window.localStorage.getItem(LocalStore.ACTIVE_THEME) as string
      )

      expect(cachedTheme).toEqual({
        name: customTheme.name,
        themeInput,
      })
    })
  })
})

describe("createTheme", () => {
  it("returns a theme", () => {
    const customThemeConfig = new CustomThemeConfig({
      primaryColor: "red",
      secondaryBackgroundColor: "blue",
      font: CustomThemeConfig.FontFamily.SERIF,
    })
    const customTheme = createTheme(CUSTOM_THEME_NAME, customThemeConfig)
    expect(customTheme.name).toBe(CUSTOM_THEME_NAME)
    expect(customTheme.emotion.colors.primary).toBe("red")
    expect(customTheme.emotion.colors.secondaryBg).toBe("blue")
    expect(customTheme.emotion.genericFonts.bodyFont).toBe(
      lightTheme.emotion.fonts.serif
    )
    // If it is not provided, use the default
    expect(customTheme.emotion.colors.bgColor).toBe(
      lightTheme.emotion.colors.bgColor
    )
  })

  it("returns a theme based on a different theme", () => {
    const customThemeConfig = new CustomThemeConfig({
      primaryColor: "red",
      secondaryBackgroundColor: "blue",
      font: CustomThemeConfig.FontFamily.SERIF,
    })
    const customTheme = createTheme(
      CUSTOM_THEME_NAME,
      customThemeConfig,
      darkTheme,
      // inSidebar
      true
    )
    expect(customTheme.name).toBe(CUSTOM_THEME_NAME)
    expect(customTheme.emotion.colors.primary).toBe("red")
    expect(customTheme.emotion.colors.secondaryBg).toBe("blue")
    expect(customTheme.emotion.genericFonts.bodyFont).toBe(
      darkTheme.emotion.fonts.serif
    )
    // If it is not provided, use the default
    expect(customTheme.emotion.colors.bgColor).toBe(
      darkTheme.emotion.colors.bgColor
    )
    expect(customTheme.emotion.inSidebar).toBe(true)
    expect(darkTheme.emotion.inSidebar).toBe(false)
  })

  it("handles hex values without #", () => {
    const customThemeConfig = new CustomThemeConfig({
      primaryColor: "eee",
      secondaryBackgroundColor: "fc9231",
      font: CustomThemeConfig.FontFamily.SERIF,
    })
    const customTheme = createTheme(
      CUSTOM_THEME_NAME,
      customThemeConfig,
      darkTheme
    )
    expect(customTheme.name).toBe(CUSTOM_THEME_NAME)
    expect(customTheme.emotion.colors.primary).toBe("#eee")
    expect(customTheme.emotion.colors.secondaryBg).toBe("#fc9231")
    expect(customTheme.emotion.genericFonts.bodyFont).toBe(
      customTheme.emotion.fonts.serif
    )
    // If it is not provided, use the default
    expect(customTheme.emotion.colors.bgColor).toBe(
      darkTheme.emotion.colors.bgColor
    )
  })

  it("sets unspecified theme options using the given BaseTheme", () => {
    const customTheme = createTheme(
      CUSTOM_THEME_NAME,
      new CustomThemeConfig({
        base: CustomThemeConfig.BaseTheme.DARK,
        primaryColor: "blue",
      })
    )

    expect(customTheme.emotion.colors.bgColor).toBe(
      darkTheme.emotion.colors.bgColor
    )
    expect(customTheme.emotion.colors.primary).toBe("blue")
    // Auxiliary colors should be those of the Dark theme.
    expect(customTheme.emotion.colors.warning).toBe(
      darkTheme.emotion.colors.warning
    )
  })

  it("sets auxiliary colors based on backgroundColor over the BaseTheme", () => {
    const customTheme = createTheme(
      CUSTOM_THEME_NAME,
      new CustomThemeConfig({
        backgroundColor: "black",
        base: CustomThemeConfig.BaseTheme.LIGHT,
      })
    )

    expect(customTheme.emotion.colors.bgColor).toBe("black")
    // Auxiliary colors should be picked to be ones that work well with the
    // black background even though the user set the base theme to light.
    expect(customTheme.emotion.colors.warning).toBe(
      darkTheme.emotion.colors.warning
    )
    // Theme options should be inherited from the light theme as defined by the
    // user.
    expect(customTheme.emotion.colors.secondaryBg).toBe(
      lightTheme.emotion.colors.secondaryBg
    )
  })
})

describe("getSystemTheme", () => {
  let windowSpy: MockInstance

  afterEach(() => {
    windowSpy.mockRestore()
    window.localStorage.clear()
  })

  it("returns lightTheme when matchMedia does *not* match dark", () => {
    windowSpy = mockWindow()

    expect(getSystemTheme().name).toBe("Light")
  })

  it("returns darkTheme when matchMedia does match dark", () => {
    windowSpy = mockWindow(windowMatchMedia("dark"))

    expect(getSystemTheme().name).toBe("Dark")
  })
})

describe("getHostSpecifiedTheme", () => {
  let windowSpy: MockInstance

  afterEach(() => {
    windowSpy.mockRestore()
    window.localStorage.clear()
  })

  it("sets default to the auto theme when there is no theme preference", () => {
    windowSpy = mockWindow()
    const defaultTheme = getHostSpecifiedTheme()

    expect(defaultTheme.name).toBe(AUTO_THEME_NAME)
    // Also verify that the theme is our lightTheme.
    expect(defaultTheme.emotion.colors).toEqual(lightTheme.emotion.colors)
  })

  it("sets the auto theme correctly when the OS preference is dark", () => {
    mockWindow(windowSpy, windowMatchMedia("dark"))

    const defaultTheme = getHostSpecifiedTheme()

    expect(defaultTheme.name).toBe(AUTO_THEME_NAME)
    expect(defaultTheme.emotion.colors).toEqual(darkTheme.emotion.colors)
  })

  it("sets default to the light theme when an embed query parameter is set", () => {
    windowSpy = mockWindow(
      windowLocationSearch("?embed=true&embed_options=light_theme")
    )
    const defaultTheme = getHostSpecifiedTheme()

    expect(defaultTheme.name).toBe("Light")
    // Also verify that the theme is our lightTheme.
    expect(defaultTheme.emotion.colors).toEqual(lightTheme.emotion.colors)
  })

  it("sets default to the dark theme when an embed query parameter is set", () => {
    windowSpy = mockWindow(
      windowLocationSearch("?embed=true&embed_options=dark_theme")
    )
    const defaultTheme = getHostSpecifiedTheme()

    expect(defaultTheme.name).toBe("Dark")
    // Also verify that the theme is our darkTheme.
    expect(defaultTheme.emotion.colors).toEqual(darkTheme.emotion.colors)
  })

  it("respects embed query parameter is set over system theme", () => {
    windowSpy = mockWindow(
      windowMatchMedia("dark"),
      windowLocationSearch("?embed=true&embed_options=light_theme")
    )
    const defaultTheme = getHostSpecifiedTheme()

    expect(defaultTheme.name).toBe("Light")
    // Also verify that the theme is our lightTheme.
    expect(defaultTheme.emotion.colors).toEqual(lightTheme.emotion.colors)
  })
})

describe("getDefaultTheme", () => {
  let windowSpy: MockInstance

  afterEach(() => {
    windowSpy.mockRestore()
    window.localStorage.clear()
  })

  it("sets default to the auto theme when there is no cached theme", () => {
    windowSpy = mockWindow()
    const defaultTheme = getDefaultTheme()

    expect(defaultTheme.name).toBe(AUTO_THEME_NAME)
    // Also verify that the theme is our lightTheme.
    expect(defaultTheme.emotion.colors).toEqual(lightTheme.emotion.colors)
  })

  it("sets the auto theme correctly when the OS preference is dark", () => {
    mockWindow(windowSpy, windowMatchMedia("dark"))

    const defaultTheme = getDefaultTheme()

    expect(defaultTheme.name).toBe(AUTO_THEME_NAME)
    expect(defaultTheme.emotion.colors).toEqual(darkTheme.emotion.colors)
  })

  it("sets the default to the user preference when one is set", () => {
    windowSpy = mockWindow()
    setCachedTheme(darkTheme)

    const defaultTheme = getDefaultTheme()

    expect(defaultTheme.name).toBe("Dark")
    expect(defaultTheme.emotion.colors).toEqual(darkTheme.emotion.colors)
  })

  it("sets default to the light theme when an embed query parameter is set", () => {
    windowSpy = mockWindow(
      windowLocationSearch("?embed=true&embed_options=light_theme")
    )
    const defaultTheme = getDefaultTheme()

    expect(defaultTheme.name).toBe("Light")
    // Also verify that the theme is our lightTheme.
    expect(defaultTheme.emotion.colors).toEqual(lightTheme.emotion.colors)
  })

  it("sets default to the dark theme when an embed query parameter is set", () => {
    windowSpy = mockWindow(
      windowLocationSearch("?embed=true&embed_options=dark_theme")
    )
    const defaultTheme = getDefaultTheme()

    expect(defaultTheme.name).toBe("Dark")
    // Also verify that the theme is our darkTheme.
    expect(defaultTheme.emotion.colors).toEqual(darkTheme.emotion.colors)
  })

  it("respects embed query parameter is set over system theme", () => {
    windowSpy = mockWindow(
      windowMatchMedia("dark"),
      windowLocationSearch("?embed=true&embed_options=light_theme")
    )
    const defaultTheme = getDefaultTheme()

    expect(defaultTheme.name).toBe("Light")
    // Also verify that the theme is our lightTheme.
    expect(defaultTheme.emotion.colors).toEqual(lightTheme.emotion.colors)
  })
})

describe("isColor", () => {
  // https://www.w3schools.com/cssref/css_colors_legal.asp
  it("works with valid colors", () => {
    expect(isColor("#fff")).toBe(true)
    expect(isColor("#ffffff")).toBe(true)
    expect(isColor("#ffffff0")).toBe(true)
    expect(isColor("#000")).toBe(true)
    expect(isColor("#000000")).toBe(true)
    expect(isColor("#fafafa")).toBe(true)
    expect(isColor("red")).toBe(true)
    expect(isColor("coral")).toBe(true)
    expect(isColor("transparent")).toBe(true)
    expect(isColor("rgb(0,0,0)")).toBe(true)
    expect(isColor("rgb(-1, 0, -255)")).toBe(true)
    expect(isColor("rgba(0,0,0,.5)")).toBe(true)
    expect(isColor("hsl(120,50%,40%)")).toBe(true)
    expect(isColor("hsl(120,50%,40%, .4)")).toBe(true)
    expect(isColor("currentColor")).toBe(true)
  })

  it("works with invalid colors", () => {
    expect(isColor("fff")).toBe(false)
    expect(isColor("cookies are delicious")).toBe(false)
    expect(isColor("")).toBe(false)
    expect(isColor("hsl(120,50,40)")).toBe(false)
  })
})

describe("createEmotionTheme", () => {
  it("sets to light when matchMedia does not match dark", () => {
    const themeInput: Partial<CustomThemeConfig> = {
      font: CustomThemeConfig.FontFamily.MONOSPACE,
      primaryColor: "red",
      backgroundColor: "pink",
      secondaryBackgroundColor: "blue",
      textColor: "orange",
    }

    const theme = createEmotionTheme(themeInput)

    expect(theme.colors.primary).toBe("red")
    expect(theme.colors.bgColor).toBe("pink")
    expect(theme.colors.secondaryBg).toBe("blue")
    expect(theme.colors.bodyText).toBe("orange")
    expect(theme.genericFonts.bodyFont).toBe(theme.fonts.monospace)
    expect(theme.genericFonts.headingFont).toBe(theme.fonts.monospace)
    expect(theme.genericFonts.codeFont).toBe(theme.fonts.monospace)
  })

  it("defaults to base if missing value", () => {
    const themeInput: Partial<CustomThemeConfig> = {
      primaryColor: "red",
    }

    const theme = createEmotionTheme(themeInput)

    expect(theme.colors.primary).toBe("red")
    expect(theme.colors.bgColor).toBe(baseTheme.emotion.colors.bgColor)
    expect(theme.colors.secondaryBg).toBe(baseTheme.emotion.colors.secondaryBg)
    expect(theme.colors.bodyText).toBe(baseTheme.emotion.colors.bodyText)
    expect(theme.genericFonts.bodyFont).toBe(
      baseTheme.emotion.genericFonts.bodyFont
    )
    expect(theme.genericFonts.headingFont).toBe(
      baseTheme.emotion.genericFonts.headingFont
    )
    expect(theme.genericFonts.codeFont).toBe(
      baseTheme.emotion.genericFonts.codeFont
    )
  })
})

describe("toThemeInput", () => {
  it("converts from emotion theme to what a custom component expects", () => {
    const { colors } = lightTheme.emotion
    expect(toThemeInput(lightTheme.emotion)).toEqual({
      primaryColor: colors.primary,
      backgroundColor: colors.bgColor,
      secondaryBackgroundColor: colors.secondaryBg,
      textColor: colors.bodyText,
      font: CustomThemeConfig.FontFamily.SANS_SERIF,
    })
  })
})

describe("converting font <> enum", () => {
  it("fontEnumToString converts to enum", () => {
    expect(fontEnumToString(CustomThemeConfig.FontFamily.SANS_SERIF)).toBe(
      fonts.sansSerif
    )
    expect(fontEnumToString(CustomThemeConfig.FontFamily.SERIF)).toBe(
      fonts.serif
    )
    expect(fontEnumToString(CustomThemeConfig.FontFamily.MONOSPACE)).toBe(
      fonts.monospace
    )
  })

  it("fontToEnum converts to string", () => {
    expect(fontToEnum(fonts.monospace)).toBe(
      CustomThemeConfig.FontFamily.MONOSPACE
    )
    expect(fontToEnum(fonts.sansSerif)).toBe(
      CustomThemeConfig.FontFamily.SANS_SERIF
    )
    expect(fontToEnum(fonts.serif)).toBe(CustomThemeConfig.FontFamily.SERIF)
  })
})

describe("bgColorToBaseString", () => {
  it("returns 'light' if passed undefined", () => {
    expect(bgColorToBaseString(undefined)).toBe("light")
  })

  it("returns 'light' for a light background color", () => {
    expect(bgColorToBaseString("#FFFFFF")).toBe("light")
  })

  it("returns 'dark' for a dark background color", () => {
    expect(bgColorToBaseString("#000000")).toBe("dark")
  })
})

describe("hasLightBackgroundColor", () => {
  const testCases = [
    {
      description: "works for default light theme",
      theme: lightTheme,
      expectedResult: true,
    },
    {
      description: "works for default dark theme",
      theme: darkTheme,
      expectedResult: false,
    },
    {
      description: "works for custom light theme",
      theme: createTheme(
        CUSTOM_THEME_NAME,
        new CustomThemeConfig({ backgroundColor: "yellow" })
      ),
      expectedResult: true,
    },
    {
      description: "works for custom dark theme",
      theme: createTheme(
        CUSTOM_THEME_NAME,
        new CustomThemeConfig({ backgroundColor: "navy" })
      ),
      expectedResult: false,
    },
  ]

  testCases.forEach(({ description, theme, expectedResult }) => {
    it(`${description}`, () => {
      expect(hasLightBackgroundColor(theme.emotion)).toBe(expectedResult)
    })
  })
})

describe("theme overrides", () => {
  beforeEach(async () => {
    vi.resetModules()
    window.__streamlit = undefined
  })

  afterEach(() => {
    vi.resetModules()
    window.__streamlit = undefined
  })

  it("honors the window variables set", async () => {
    window.__streamlit = {
      LIGHT_THEME: {
        primaryColor: "purple",
      },
      DARK_THEME: {
        primaryColor: "yellow",
      },
    }

    const module = await import("./utils")
    // Ensure we are not working with the same object
    expect(module.getMergedLightTheme()).not.toEqual(lightTheme)
    expect(module.getMergedDarkTheme()).not.toEqual(darkTheme)

    expect(module.getMergedLightTheme().emotion.colors.primary).toEqual(
      "purple"
    )
    expect(module.getMergedDarkTheme().emotion.colors.primary).toEqual(
      "yellow"
    )
  })

  it("maintains original theme if no global themes are specified", async () => {
    const module = await import("./utils")
    expect(module.getMergedLightTheme()).toEqual(lightTheme)
    expect(module.getMergedDarkTheme()).toEqual(darkTheme)
  })
})


================================================
File: /frontend/lib/src/theme/utils.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import camelcase from "camelcase"
import { getLuminance, parseToRgba, toHex } from "color2k"
import decamelize from "decamelize"
import cloneDeep from "lodash/cloneDeep"
import isObject from "lodash/isObject"
import merge from "lodash/merge"
import once from "lodash/once"

import {
  CustomThemeConfig,
  ICustomThemeConfig,
} from "@streamlit/lib/src/proto"
import {
  baseTheme,
  CachedTheme,
  darkTheme,
  EmotionTheme,
  lightTheme,
  ThemeConfig,
  ThemeSpacing,
} from "@streamlit/lib/src/theme"
import { logError } from "@streamlit/lib/src/util/log"
import {
  localStorageAvailable,
  LocalStore,
} from "@streamlit/lib/src/util/storageUtils"
import {
  isDarkThemeInQueryParams,
  isLightThemeInQueryParams,
} from "@streamlit/lib/src/util/utils"
import { CircularBuffer } from "@streamlit/lib/src/components/shared/Profiler/CircularBuffer"

import { createBaseUiTheme } from "./createThemeUtil"
import {
  computeDerivedColors,
  createEmotionColors,
  DerivedColors,
} from "./getColors"
import { fonts } from "./primitives/typography"

export const AUTO_THEME_NAME = "Use system setting"
export const CUSTOM_THEME_NAME = "Custom Theme"

declare global {
  interface Window {
    __streamlit?: {
      LIGHT_THEME: ICustomThemeConfig
      DARK_THEME: ICustomThemeConfig
    }
    __streamlit_profiles__?: Record<
      string,
      CircularBuffer<{
        phase: "mount" | "update" | "nested-update"
        actualDuration: number
        baseDuration: number
        startTime: number
        commitTime: number
      }>
    >
  }
}

function mergeTheme(
  theme: ThemeConfig,
  injectedTheme: ICustomThemeConfig | undefined
): ThemeConfig {
  // We confirm the injectedTheme is a valid object before merging it
  // since the type makes assumption about the implementation of the
  // injected object.
  if (injectedTheme && isObject(injectedTheme)) {
    const themeConfigProto = new CustomThemeConfig(injectedTheme)
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return createTheme(theme.name, themeConfigProto, theme)
  }

  return theme
}

export const getMergedLightTheme = once(() =>
  mergeTheme(lightTheme, window.__streamlit?.LIGHT_THEME)
)
export const getMergedDarkTheme = once(() =>
  mergeTheme(darkTheme, window.__streamlit?.DARK_THEME)
)

export const getSystemTheme = (): ThemeConfig => {
  return window.matchMedia &&
    window.matchMedia("(prefers-color-scheme: dark)").matches
    ? getMergedDarkTheme()
    : getMergedLightTheme()
}

export const createAutoTheme = (): ThemeConfig => ({
  ...getSystemTheme(),
  name: AUTO_THEME_NAME,
})

// Update auto theme in case it has changed
export const createPresetThemes = (): ThemeConfig[] => [
  createAutoTheme(),
  getMergedLightTheme(),
  getMergedDarkTheme(),
]

export const isPresetTheme = (themeConfig: ThemeConfig): boolean => {
  const presetThemeNames = createPresetThemes().map((t: ThemeConfig) => t.name)
  return presetThemeNames.includes(themeConfig.name)
}

export const fontToEnum = (font: string): CustomThemeConfig.FontFamily => {
  const fontStyle = Object.keys(fonts).find(
    (fontType: string) => fonts[fontType] === font
  )
  const defaultFont = CustomThemeConfig.FontFamily.SANS_SERIF
  if (fontStyle) {
    const parsedFontStyle = decamelize(fontStyle).toUpperCase()
    return parsedFontStyle in CustomThemeConfig.FontFamily
      ? // @ts-expect-error
        CustomThemeConfig.FontFamily[parsedFontStyle]
      : defaultFont
  }
  return defaultFont
}

export const fontEnumToString = (
  font: CustomThemeConfig.FontFamily | null | undefined
): string | undefined =>
  font !== null &&
  font !== undefined && // font can be 0 for sans serif
  font in CustomThemeConfig.FontFamily
    ? fonts[
        camelcase(
          CustomThemeConfig.FontFamily[font].toString()
        ) as keyof typeof fonts
      ]
    : undefined

export const bgColorToBaseString = (bgColor?: string): string =>
  bgColor === undefined || getLuminance(bgColor) > 0.5 ? "light" : "dark"

export const isColor = (strColor: string): boolean => {
  const s = new Option().style
  s.color = strColor
  return s.color !== ""
}

export const createEmotionTheme = (
  themeInput: Partial<ICustomThemeConfig>,
  baseThemeConfig = baseTheme
): EmotionTheme => {
  const { colors, genericFonts } = baseThemeConfig.emotion
  const { font, radii, fontSizes, ...customColors } = themeInput

  const parsedFont = fontEnumToString(font)

  const parsedColors = Object.entries(customColors).reduce(
    (colors: Record<string, string>, [key, color]) => {
      // @ts-expect-error
      if (isColor(color)) {
        // @ts-expect-error
        colors[key] = color
      } else if (isColor(`#${color}`)) {
        colors[key] = `#${color}`
      }
      return colors
    },
    {}
  )

  // TODO: create an enum for this. Updating everything if a
  // config option changes is a pain
  // Mapping from CustomThemeConfig to color primitives
  const {
    secondaryBackgroundColor: secondaryBg,
    backgroundColor: bgColor,
    primaryColor: primary,
    textColor: bodyText,
    skeletonBackgroundColor,
    widgetBackgroundColor,
    widgetBorderColor,
  } = parsedColors

  const newGenericColors = { ...colors }

  if (primary) newGenericColors.primary = primary
  if (bodyText) newGenericColors.bodyText = bodyText
  if (secondaryBg) newGenericColors.secondaryBg = secondaryBg
  if (bgColor) newGenericColors.bgColor = bgColor
  if (widgetBackgroundColor)
    newGenericColors.widgetBackgroundColor = widgetBackgroundColor
  if (widgetBorderColor) newGenericColors.widgetBorderColor = widgetBorderColor
  if (skeletonBackgroundColor)
    newGenericColors.skeletonBackgroundColor = skeletonBackgroundColor

  const conditionalOverrides: any = {}

  if (radii) {
    conditionalOverrides.radii = {
      ...baseThemeConfig.emotion.radii,
    }

    if (radii.checkboxRadius)
      conditionalOverrides.radii.md = addPxUnit(radii.checkboxRadius)
    if (radii.baseWidgetRadius)
      conditionalOverrides.radii.default = addPxUnit(radii.baseWidgetRadius)
  }

  if (fontSizes) {
    conditionalOverrides.fontSizes = {
      ...baseThemeConfig.emotion.fontSizes,
    }

    if (fontSizes.tinyFontSize) {
      conditionalOverrides.fontSizes.twoSm = addPxUnit(fontSizes.tinyFontSize)
      conditionalOverrides.fontSizes.twoSmPx = fontSizes.tinyFontSize
    }

    if (fontSizes.smallFontSize) {
      conditionalOverrides.fontSizes.sm = addPxUnit(fontSizes.smallFontSize)
      conditionalOverrides.fontSizes.smPx = fontSizes.smallFontSize
    }

    if (fontSizes.baseFontSize) {
      conditionalOverrides.fontSizes.md = addPxUnit(fontSizes.baseFontSize)
      conditionalOverrides.fontSizes.mdPx = fontSizes.baseFontSize
    }
  }

  return {
    ...baseThemeConfig.emotion,
    colors: createEmotionColors(newGenericColors),
    genericFonts: {
      ...genericFonts,
      ...(parsedFont && {
        bodyFont: themeInput.bodyFont ? themeInput.bodyFont : parsedFont,
        headingFont: themeInput.bodyFont ? themeInput.bodyFont : parsedFont,
        codeFont: themeInput.codeFont
          ? themeInput.codeFont
          : genericFonts.codeFont,
      }),
    },
    ...conditionalOverrides,
  }
}

export const toThemeInput = (
  theme: EmotionTheme
): Partial<CustomThemeConfig> => {
  const { colors, genericFonts } = theme
  return {
    primaryColor: colors.primary,
    backgroundColor: colors.bgColor,
    secondaryBackgroundColor: colors.secondaryBg,
    textColor: colors.bodyText,
    font: fontToEnum(genericFonts.bodyFont),
  }
}

export type ExportedTheme = {
  base: string
  primaryColor: string
  backgroundColor: string
  secondaryBackgroundColor: string
  textColor: string
  font: string
} & DerivedColors

export const toExportedTheme = (theme: EmotionTheme): ExportedTheme => {
  const { colors } = theme
  const themeInput = toThemeInput(theme)

  // At this point, we know that all of the fields of themeInput are populated
  // (since we went "backwards" from a theme -> themeInput), but typescript
  // doesn't know this, so we have to cast each field to string.
  return {
    primaryColor: themeInput.primaryColor as string,
    backgroundColor: themeInput.backgroundColor as string,
    secondaryBackgroundColor: themeInput.secondaryBackgroundColor as string,
    textColor: themeInput.textColor as string,

    base: bgColorToBaseString(themeInput.backgroundColor),
    font: fontEnumToString(themeInput.font) as string,

    ...computeDerivedColors(colors),
  }
}

const completeThemeInput = (
  partialInput: Partial<CustomThemeConfig>,
  baseTheme: ThemeConfig
): CustomThemeConfig => {
  return new CustomThemeConfig({
    ...toThemeInput(baseTheme.emotion),
    ...partialInput,
  })
}

export const createTheme = (
  themeName: string,
  themeInput: Partial<CustomThemeConfig>,
  baseThemeConfig?: ThemeConfig,
  inSidebar = false
): ThemeConfig => {
  if (baseThemeConfig) {
    themeInput = completeThemeInput(themeInput, baseThemeConfig)
  } else if (themeInput.base === CustomThemeConfig.BaseTheme.DARK) {
    themeInput = completeThemeInput(themeInput, darkTheme)
  } else {
    themeInput = completeThemeInput(themeInput, lightTheme)
  }

  // We use startingTheme to pick a set of "auxiliary colors" for widgets like
  // the success/info/warning/error boxes and others; these need to have their
  // colors tweaked to work well with the background.
  //
  // For our auxiliary colors, we pick colors that look reasonable based on the
  // theme's backgroundColor instead of picking them using themeInput.base.
  // This way, things will look good even if a user sets
  // themeInput.base === LIGHT and themeInput.backgroundColor === "black".
  const bgColor = themeInput.backgroundColor as string
  const startingTheme = merge(
    cloneDeep(
      baseThemeConfig
        ? baseThemeConfig
        : getLuminance(bgColor) > 0.5
        ? lightTheme
        : darkTheme
    ),
    { emotion: { inSidebar } }
  )

  const emotion = createEmotionTheme(themeInput, startingTheme)

  return {
    ...startingTheme,
    name: themeName,
    emotion,
    basewebTheme: createBaseUiTheme(emotion, startingTheme.primitives),
  }
}

export const getCachedTheme = (): ThemeConfig | null => {
  if (!localStorageAvailable()) {
    return null
  }

  const cachedThemeStr = window.localStorage.getItem(LocalStore.ACTIVE_THEME)
  if (!cachedThemeStr) {
    return null
  }

  const { name: themeName, themeInput }: CachedTheme =
    JSON.parse(cachedThemeStr)
  switch (themeName) {
    case lightTheme.name:
      return getMergedLightTheme()
    case darkTheme.name:
      return getMergedDarkTheme()
    default:
      // At this point we're guaranteed that themeInput is defined.
      return createTheme(themeName, themeInput as Partial<CustomThemeConfig>)
  }
}

const deleteOldCachedThemes = (): void => {
  const { CACHED_THEME_VERSION, CACHED_THEME_BASE_KEY } = LocalStore
  const { localStorage } = window

  // Pre-release versions of theming stored cached themes under the key
  // "stActiveTheme".
  localStorage.removeItem("stActiveTheme")

  // The first version of cached themes had keys of the form
  // `stActiveTheme-${window.location.pathname}` with no version number.
  localStorage.removeItem(CACHED_THEME_BASE_KEY)

  for (let i = 1; i <= CACHED_THEME_VERSION; i++) {
    localStorage.removeItem(`${CACHED_THEME_BASE_KEY}-v${i}`)
  }
}

export const setCachedTheme = (themeConfig: ThemeConfig): void => {
  if (!localStorageAvailable()) {
    return
  }

  deleteOldCachedThemes()

  // Do not set the theme if the app has a pre-defined theme from the embedder
  if (isLightThemeInQueryParams() || isDarkThemeInQueryParams()) {
    return
  }

  const cachedTheme: CachedTheme = {
    name: themeConfig.name,
    ...(!isPresetTheme(themeConfig) && {
      themeInput: toThemeInput(themeConfig.emotion),
    }),
  }

  window.localStorage.setItem(
    LocalStore.ACTIVE_THEME,
    JSON.stringify(cachedTheme)
  )
}

export const removeCachedTheme = (): void => {
  if (!localStorageAvailable()) {
    return
  }

  window.localStorage.removeItem(LocalStore.ACTIVE_THEME)
}

export const getHostSpecifiedTheme = (): ThemeConfig => {
  if (isLightThemeInQueryParams()) {
    return getMergedLightTheme()
  }

  if (isDarkThemeInQueryParams()) {
    return getMergedDarkTheme()
  }

  return createAutoTheme()
}

export const getDefaultTheme = (): ThemeConfig => {
  // Priority for default theme
  const cachedTheme = getCachedTheme()

  // We shouldn't ever have auto saved in our storage in case
  // OS theme changes but we explicitly check in case!
  if (cachedTheme && cachedTheme.name !== AUTO_THEME_NAME) {
    return cachedTheme
  }

  return getHostSpecifiedTheme()
}

const whiteSpace = /\s+/
export function computeSpacingStyle(
  value: string,
  theme: EmotionTheme
): string {
  if (value === "") {
    return ""
  }

  return value
    .split(whiteSpace)
    .map(marginValue => {
      if (marginValue === "0") {
        return theme.spacing.none
      }

      if (!(marginValue in theme.spacing)) {
        logError(`Invalid spacing value: ${marginValue}`)
        return theme.spacing.none
      }

      return theme.spacing[marginValue as ThemeSpacing]
    })
    .join(" ")
}

function addPxUnit(n: number): string {
  return `${n}px`
}

export function blend(color: string, background: string | undefined): string {
  if (background === undefined) return color
  const [r, g, b, a] = parseToRgba(color)
  if (a === 1) return color
  const [br, bg, bb, ba] = parseToRgba(background)
  const ao = a + ba * (1 - a)
  // (xaA + xaB·(1−aA))/aR
  const ro = Math.round((a * r + ba * br * (1 - a)) / ao)
  const go = Math.round((a * g + ba * bg * (1 - a)) / ao)
  const bo = Math.round((a * b + ba * bb * (1 - a)) / ao)
  return toHex(`rgba(${ro}, ${go}, ${bo}, ${ao})`)
}

/**
 * Convert a SCSS rem value to pixels.
 * @param scssValue: a string containing a value in rem units with or without the "rem" unit suffix
 * @returns pixel value of the given rem value
 */
export const convertRemToPx = (scssValue: string): number => {
  const remValue = parseFloat(scssValue.replace(/rem$/, ""))
  return (
    // TODO(lukasmasuch): We might want to somehow cache this value at some point.
    // However, I did experimented with the performance of calling this, and
    // it seems not like a big deal to call it many times.
    remValue *
    // We fallback to 16px if the fontSize is not defined (should only happen in tests)
    (parseFloat(getComputedStyle(document.documentElement).fontSize) || 16)
  )
}


================================================
File: /frontend/lib/src/theme/emotionBaseTheme/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { createEmotionColors } from "@streamlit/lib/src/theme/getColors"
import {
  breakpoints,
  fonts,
  fontSizes,
  fontWeights,
  genericFonts,
  iconSizes,
  lineHeights,
  radii,
  sizes,
  spacing,
  zIndices,
} from "@streamlit/lib/src/theme/primitives"

import genericColors from "./themeColors"

export default {
  inSidebar: false,
  breakpoints,
  colors: createEmotionColors(genericColors),
  fonts,
  fontSizes,
  fontWeights,
  genericFonts,
  iconSizes,
  lineHeights,
  radii,
  sizes,
  spacing,
  zIndices,
}


================================================
File: /frontend/lib/src/theme/emotionBaseTheme/themeColors.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { transparentize } from "color2k"

import { colors } from "@streamlit/lib/src/theme/primitives/colors"

const requiredThemeColors = {
  bgColor: colors.white,
  secondaryBg: colors.gray20,
  bodyText: colors.gray85,
  warning: colors.yellow110,
  warningBg: transparentize(colors.yellow80, 0.8),
  success: colors.green100,
  successBg: transparentize(colors.green80, 0.8),
  infoBg: transparentize(colors.blue70, 0.9),
  info: colors.blue100,
  danger: colors.red100,
  dangerBg: transparentize(colors.red70, 0.8),

  primary: colors.red70,
  disabled: colors.gray40,
  lightestGray: colors.gray20,
  lightGray: colors.gray30,
  gray: colors.gray60,
  darkGray: colors.gray70,
  red: colors.red80,
  blue: colors.blue80,
  green: colors.green80,
  yellow: colors.yellow80,
}

interface OptionalThemeColors {
  skeletonBackgroundColor?: string
  widgetBackgroundColor?: string
  widgetBorderColor?: string
}

const optionalThemeColors: OptionalThemeColors = {}

export default {
  ...colors,
  ...requiredThemeColors,
  ...optionalThemeColors,
}


================================================
File: /frontend/lib/src/theme/emotionDarkTheme/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import emotionBaseTheme from "@streamlit/lib/src/theme/emotionBaseTheme"
import { createEmotionColors } from "@streamlit/lib/src/theme/getColors"

import genericColors from "./themeColors"

export default {
  ...emotionBaseTheme,
  inSidebar: false,
  colors: createEmotionColors({
    ...emotionBaseTheme.colors,
    ...genericColors,
  }),
}


================================================
File: /frontend/lib/src/theme/emotionDarkTheme/themeColors.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { transparentize } from "color2k"

import { colors } from "@streamlit/lib/src/theme/primitives/colors"

export default {
  ...colors,
  bgColor: colors.gray100,
  secondaryBg: colors.gray90,
  bodyText: colors.gray10,
  navTextColor: colors.gray50,
  navActiveTextColor: colors.gray10,
  navIconColor: colors.gray70,
  sidebarControlColor: colors.gray10,
  warning: colors.yellow20,
  warningBg: transparentize(colors.yellow70, 0.8),
  success: colors.green10,
  successBg: transparentize(colors.green60, 0.8),
  info: colors.blue20,
  infoBg: transparentize(colors.blue60, 0.8),
  danger: colors.red20,
  dangerBg: transparentize(colors.red60, 0.8),
  primary: colors.red70,
  disabled: colors.gray70,
}


================================================
File: /frontend/lib/src/theme/emotionLightTheme/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import emotionBaseTheme from "@streamlit/lib/src/theme/emotionBaseTheme"
import { createEmotionColors } from "@streamlit/lib/src/theme/getColors"

import genericColors from "./themeColors"

export default {
  ...emotionBaseTheme,
  inSidebar: false,
  colors: createEmotionColors({
    ...emotionBaseTheme.colors,
    ...genericColors,
  }),
}


================================================
File: /frontend/lib/src/theme/emotionLightTheme/themeColors.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { transparentize } from "color2k"

import { colors } from "@streamlit/lib/src/theme/primitives/colors"

export default {
  ...colors,
  navTextColor: colors.gray80,
  navActiveTextColor: colors.gray90,
  navIconColor: colors.gray60,
  sidebarControlColor: colors.gray70,
  // For this one, we use a specific color,
  // outside our standard color palette,
  // to ensure contrast is good enough for accessibility
  warning: "#926C05",
  warningBg: transparentize(colors.yellow70, 0.9),
  successBg: transparentize(colors.green70, 0.9),
  danger: colors.red100,
  dangerBg: transparentize(colors.red80, 0.91),
}


================================================
File: /frontend/lib/src/theme/primitives/breakpoints.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const breakpoints = {
  // This value is used to determine whether we should hide/show the "Please enter to apply" in all widgets.
  hideWidgetDetails: 180,
  // This value is used to determine whether we should hide/show the - and + buttons in st.number_input.
  hideNumberInputControls: 120,
  sm: "576px",
  columns: "640px",
  md: "768px",
}


================================================
File: /frontend/lib/src/theme/primitives/colors.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const colors = {
  transparent: "transparent",
  black: "#000000",
  white: "#ffffff",

  gray10: "#fafafa",
  gray20: "#f0f2f6",
  gray30: "#e6eaf1",
  gray40: "#d5dae5",
  gray50: "#bfc5d3",
  gray60: "#a3a8b8",
  gray70: "#808495",
  gray80: "#555867",
  gray85: "#31333F",
  gray90: "#262730",
  gray100: "#0e1117",

  red10: "#fff0f0",
  red20: "#ffdede",
  red30: "#ffc7c7",
  red40: "#ffabab",
  red50: "#ff8c8c",
  red60: "#ff6c6c",
  red70: "#ff4b4b",
  red80: "#ff2b2b",
  red90: "#bd4043",
  red100: "#7d353b",

  orange10: "#fffae8",
  orange20: "#fff6d0",
  orange30: "#ffecb0",
  orange40: "#ffe08e",
  orange50: "#ffd16a",
  orange60: "#ffbd45",
  orange70: "#ffa421",
  orange80: "#ff8700",
  orange90: "#ed6f13",
  orange100: "#d95a00",

  yellow10: "#ffffe1",
  yellow20: "#ffffc2",
  yellow30: "#ffffa0",
  yellow40: "#ffff7d",
  yellow50: "#ffff59",
  yellow60: "#fff835",
  yellow70: "#ffe312",
  yellow80: "#faca2b",
  yellow90: "#edbb16",
  yellow100: "#dea816",
  yellow110: "#916e10",

  green10: "#dffde9",
  green20: "#c0fcd3",
  green30: "#9ef6bb",
  green40: "#7defa1",
  green50: "#5ce488",
  green60: "#3dd56d",
  green70: "#21c354",
  green80: "#09ab3b",
  green90: "#158237",
  green100: "#177233",

  blueGreen10: "#dcfffb",
  blueGreen20: "#bafff7",
  blueGreen30: "#93ffee",
  blueGreen40: "#6bfde3",
  blueGreen50: "#45f4d5",
  blueGreen60: "#20e7c5",
  blueGreen70: "#00d4b1",
  blueGreen80: "#29b09d",
  blueGreen90: "#2c867c",
  blueGreen100: "#246e69",

  lightBlue10: "#e0feff",
  lightBlue20: "#bffdff",
  lightBlue30: "#9af8ff",
  lightBlue40: "#73efff",
  lightBlue50: "#4be4ff",
  lightBlue60: "#24d4ff",
  lightBlue70: "#00c0f2",
  lightBlue80: "#00a4d4",
  lightBlue90: "#0d8cb5",
  lightBlue100: "#15799e",

  blue10: "#e4f5ff",
  blue20: "#c7ebff",
  blue30: "#a6dcff",
  blue40: "#83c9ff",
  blue50: "#60b4ff",
  blue60: "#3d9df3",
  blue70: "#1c83e1",
  blue80: "#0068c9",
  blue90: "#0054a3",
  blue100: "#004280",

  purple10: "#f5ebff",
  purple20: "#ebd6ff",
  purple30: "#dbbbff",
  purple40: "#c89dff",
  purple50: "#b27eff",
  purple60: "#9a5dff",
  purple70: "#803df5",
  purple80: "#6d3fc0",
  purple90: "#583f84",
  purple100: "#3f3163",
}


================================================
File: /frontend/lib/src/theme/primitives/iconSizes.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const iconSizes = {
  xs: "0.5rem",
  sm: "0.75rem",
  md: "0.9rem",
  base: "1rem",
  lg: "1.25rem",
  xl: "1.5rem",
  twoXL: "1.8rem",
  threeXL: "2.3rem",
}


================================================
File: /frontend/lib/src/theme/primitives/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export { breakpoints } from "./breakpoints"
export { colors } from "./colors"
export { iconSizes } from "./iconSizes"
export { radii } from "./radii"
export { sizes } from "./sizes"
export { spacing } from "./spacing"
export {
  fontSizes,
  fontWeights,
  fonts,
  genericFonts,
  lineHeights,
} from "./typography"
export { zIndices } from "./zIndices"


================================================
File: /frontend/lib/src/theme/primitives/radii.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const radii = {
  md: "0.25rem",
  // This is the default radius used in most elements:
  default: "0.5rem",
  xl: "0.75rem",
  xxl: "1rem",
  xxxl: "1.25rem",
  // Ensures that the element is fully rounded:
  full: "9999px",
}


================================================
File: /frontend/lib/src/theme/primitives/sizes.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const sizes = {
  full: "100%",
  headerHeight: "3.75rem",
  // Old header height to avoid addtl cascading visual/snapshot changes
  fullScreenHeaderHeight: "2.875rem",
  sidebarTopSpace: "6rem",
  toastWidth: "21rem",
  contentMaxWidth: "46rem",
  maxChartTooltipWidth: "30rem",
  // Used for checkboxes, radio, and toggles:
  checkbox: "1rem",
  borderWidth: "1px",
  // Used for checkboxes/toggle
  smallElementHeight: "1.5rem",
  // min height used for most input widgets
  minElementHeight: "2.5rem",
  // min height for larger input widgets like text area and audio input
  largestElementHeight: "4.25rem",
  smallLogoHeight: "1.25rem",
  defaultLogoHeight: "1.5rem",
  largeLogoHeight: "2rem",
  sliderThumb: "0.75rem",
  wideSidePadding: "5rem",
  headerDecorationHeight: "0.125rem",
  appRunningMen: "1.6rem",
  appStatusMaxWidth: "20rem",
  spinnerSize: "1.375rem",
  spinnerThickness: "0.2rem",
  tabHeight: "2.5rem",
  // Min width used for popover and dialog:
  minPopupWidth: "20rem",
  maxTooltipHeight: "18.75rem",
  chatAvatarSize: "2rem",
  // Used for the clear icon used by some Input elements
  clearIconSize: "1.5em",
  numberInputControlsWidth: "2rem",
  emptyDropdownHeight: "5.625rem",
  dropdownItemHeight: "2.5rem",
  maxDropdownHeight: "18.75rem",
  appDefaultBottomPadding: "3.5rem",
}


================================================
File: /frontend/lib/src/theme/primitives/spacing.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const spacing = {
  px: "1px",
  none: "0",
  threeXS: "0.125rem",
  twoXS: "0.25rem",
  xs: "0.375rem",
  sm: "0.5rem",
  md: "0.75rem",
  lg: "1rem",
  xl: "1.25rem",
  twoXL: "1.5rem",
  threeXL: "2rem",
  fourXL: "4rem",
}


================================================
File: /frontend/lib/src/theme/primitives/typography.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const fonts: { [key: string]: string } = {
  sansSerif: '"Source Sans Pro", sans-serif',
  monospace: '"Source Code Pro", monospace',
  serif: '"Source Serif Pro", serif',
  materialIcons: "Material Symbols Rounded",
}

export const genericFonts = {
  bodyFont: fonts.sansSerif,
  codeFont: fonts.monospace,
  headingFont: fonts.sansSerif,
  iconFont: fonts.materialIcons,
}

// Same as in variables.scss
const fontSizeTwoSmall = 12
const fontSizeSmall = 14
const fontSizeMedium = 16

export const fontSizes = {
  twoSm: `${fontSizeTwoSmall}px`, // Use px to force sm to be a round number.
  sm: `${fontSizeSmall}px`, // Use px to force sm to be a round number.
  md: "1rem",
  mdLg: "1.125rem",
  lg: "1.25rem",
  xl: "1.5rem",
  twoXL: "1.75rem",
  threeXL: "2.25rem",
  fourXL: "2.75rem",

  twoSmPx: fontSizeTwoSmall, // twoSm but as a number, in pixels
  smPx: fontSizeSmall, // sm but as a number, in pixels
  mdPx: fontSizeMedium, // med but as a number, in pixels
}

export const fontWeights = {
  normal: 400,
  bold: 600,
  extrabold: 700, // Use sparingly! Only h1 for now.
}

export const lineHeights = {
  none: 1,
  headings: 1.2,
  tight: 1.25,
  inputWidget: 1.4,
  small: 1.5,
  base: 1.6,
  menuItem: 2,
}


================================================
File: /frontend/lib/src/theme/primitives/zIndices.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const sidebar = 100
const menuButton = sidebar + 10
const balloons = 1000000
const header = balloons - 10
const bottom = sidebar - 1
const sidebarMobile = balloons - 5
const popupMenu = balloons + 40
const fullscreenWrapper = balloons + 50
// Vega tooltips should be shown even when used
// in dialogs or in fullscreen mode
const vegaTooltips = fullscreenWrapper + 10
const tablePortal = fullscreenWrapper + 60
const cacheSpinner = sidebar + 1
// Toasts should overlap chatInput container
const toast = bottom + 1

export const zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  // this is used if we want to ensure that an element
  // is shown above the parent elements.
  priority: 1,
  sidebar,
  menuButton,
  balloons,
  header,
  sidebarMobile,
  popupMenu,
  fullscreenWrapper,
  tablePortal,
  bottom,
  cacheSpinner,
  toast,
  vegaTooltips,
}


================================================
File: /frontend/lib/src/util/ErrorHandling.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export function ensureError(err: unknown): Error {
  if (err instanceof Error) {
    return err
  }

  return new Error(`${err}`)
}


================================================
File: /frontend/lib/src/util/FileHelper.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  BYTE_CONVERSION_SIZE,
  FileSize,
  getSizeDisplay,
  sizeConverter,
} from "./FileHelper"

describe("getSizeDisplay", () => {
  test("it shows unit", async () => {
    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte)).toEqual(
      "1.0KB"
    )
    expect(getSizeDisplay(BYTE_CONVERSION_SIZE ** 2, FileSize.Byte)).toEqual(
      "1.0MB"
    )
    expect(getSizeDisplay(BYTE_CONVERSION_SIZE ** 3, FileSize.Byte)).toEqual(
      "1.0GB"
    )

    expect(getSizeDisplay(10, FileSize.Gigabyte)).toEqual("10.0GB")
    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Megabyte)).toEqual(
      "1.0GB"
    )
  })

  test("it has unusual values", async () => {
    expect(() => getSizeDisplay(-100, FileSize.Byte)).toThrow(
      "Size must be greater than or equal to 0"
    )
    expect(getSizeDisplay(0, FileSize.Byte, -1)).toEqual("0B")
  })

  test("it truncates to the right amount of decimals", async () => {
    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte)).toEqual(
      "1.0KB"
    )
    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte, 0)).toEqual(
      "1KB"
    )
    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte, 3)).toEqual(
      "1.000KB"
    )
  })

  test("it rounds up to the next unit", async () => {
    expect(getSizeDisplay(500, FileSize.Byte)).toEqual("500.0B")
    expect(getSizeDisplay(800, FileSize.Byte)).toEqual("0.8KB")
    expect(getSizeDisplay(501, FileSize.Gigabyte)).toEqual("501.0GB")
  })
})

describe("sizeConverter", () => {
  test("it converts up to the bigger unit", async () => {
    expect(sizeConverter(0.5, FileSize.Kilobyte, FileSize.Megabyte)).toEqual(
      0.5 / BYTE_CONVERSION_SIZE
    )
    expect(
      sizeConverter(BYTE_CONVERSION_SIZE, FileSize.Byte, FileSize.Kilobyte)
    ).toEqual(1)
    expect(
      sizeConverter(
        BYTE_CONVERSION_SIZE ** 2,
        FileSize.Kilobyte,
        FileSize.Gigabyte
      )
    ).toEqual(1)
    expect(sizeConverter(1, FileSize.Megabyte, FileSize.Gigabyte)).toEqual(
      1 / BYTE_CONVERSION_SIZE
    )
  })

  test("it converts down to the smaller unit", async () => {
    expect(sizeConverter(0.5, FileSize.Gigabyte, FileSize.Megabyte)).toEqual(
      BYTE_CONVERSION_SIZE * 0.5
    )
    expect(
      sizeConverter(BYTE_CONVERSION_SIZE, FileSize.Gigabyte, FileSize.Kilobyte)
    ).toEqual(BYTE_CONVERSION_SIZE ** 3)
    expect(
      sizeConverter(
        BYTE_CONVERSION_SIZE ** 2,
        FileSize.Megabyte,
        FileSize.Kilobyte
      )
    ).toEqual(BYTE_CONVERSION_SIZE ** 3)
    expect(sizeConverter(1, FileSize.Kilobyte, FileSize.Byte)).toEqual(
      BYTE_CONVERSION_SIZE
    )
  })

  test("it handles unusual cases", async () => {
    expect(
      sizeConverter(BYTE_CONVERSION_SIZE, FileSize.Byte, FileSize.Byte)
    ).toEqual(BYTE_CONVERSION_SIZE)
    expect(() =>
      sizeConverter(-1, FileSize.Gigabyte, FileSize.Gigabyte)
    ).toThrow("Size must be 0 or greater")
  })
})


================================================
File: /frontend/lib/src/util/FileHelper.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { isFromWindows } from "@streamlit/lib/src/util/utils"

export enum FileSize {
  Gigabyte = "gb",
  Megabyte = "mb",
  Kilobyte = "kb",
  Byte = "b",
}

// There is a shift towards displaying storage in base 10 vs base 2
// but Windows is still displaying things in base 2. This does not handle
// all cases but for simplicity general rule is to use base 2 for Windows.
export const BYTE_CONVERSION_SIZE = isFromWindows() ? 1024 : 1000
const sizeUnitSequence = [
  FileSize.Gigabyte,
  FileSize.Megabyte,
  FileSize.Kilobyte,
  FileSize.Byte,
]

export const getSizeDisplay = (
  size: number,
  unit: FileSize,
  rounding = 1
): string => {
  if (!unit) {
    unit = FileSize.Byte
  }

  if (rounding < 0) {
    rounding = 0
  }

  if (size < 0) {
    throw new Error("Size must be greater than or equal to 0")
  }

  const sizeIndex = sizeUnitSequence.indexOf(unit)
  const nextUnitSize = size / BYTE_CONVERSION_SIZE
  if (sizeIndex && size > BYTE_CONVERSION_SIZE / 2) {
    return getSizeDisplay(
      nextUnitSize,
      sizeUnitSequence[sizeIndex - 1],
      rounding
    )
  }
  return `${size.toFixed(rounding)}${unit.toUpperCase()}`
}

export const sizeConverter = (
  size: number,
  inputUnit: FileSize,
  outputUnit: FileSize
): number => {
  if (size < 0) {
    throw Error("Size must be 0 or greater")
  }

  const inputLevel = sizeUnitSequence.findIndex(unit => unit === inputUnit)
  const outputLevel = sizeUnitSequence.findIndex(unit => unit === outputUnit)

  if (inputLevel === -1 || outputLevel === -1) {
    // Should not ever occur
    throw Error("Unexpected byte unit provided")
  }

  if (inputLevel === outputLevel) {
    return size
  }

  const levelsBetween = Math.abs(inputLevel - outputLevel)
  const byteDifference = BYTE_CONVERSION_SIZE ** levelsBetween

  if (inputLevel > outputLevel) {
    // Going from smaller to bigger
    return size / byteDifference
  }
  // Going from bigger to smaller
  return size * byteDifference
}


================================================
File: /frontend/lib/src/util/Hooks.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useIsOverflowing } from "./Hooks"

const stateSetters: Array<any> = []

vi.mock("react", async () => ({
  __esModule: true,
  ...(await vi.importActual("react")),
  useCallback: vi.fn().mockImplementation(cb => cb),
  useEffect: vi.fn().mockImplementation(cb => cb()),
  useState: vi.fn().mockImplementation(() => {
    const setValue = vi.fn()
    stateSetters.push(setValue)

    return [false, setValue]
  }),
}))

// NOTE: We can't test the return value of useIsOverflowing directly because
// it won't have changed in a single run of the function. This is why we just
// check that the state setter was called.
describe("useIsOverflowing", () => {
  it("sets state to true if the element is overflowing", () => {
    const ref = { current: { scrollHeight: 1, clientHeight: 0 } }
    // @ts-expect-error
    useIsOverflowing(ref)

    const setIsOverflowing = stateSetters.pop()
    expect(setIsOverflowing).toHaveBeenCalledWith(true)
  })

  it("sets state to false if the element is not overflowing", () => {
    const ref = { current: { scrollHeight: 1, clientHeight: 1 } }
    // @ts-expect-error
    useIsOverflowing(ref)

    const setIsOverflowing = stateSetters.pop()
    expect(setIsOverflowing).toHaveBeenCalledWith(false)
  })
})


================================================
File: /frontend/lib/src/util/Hooks.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  MutableRefObject,
  useCallback,
  useEffect,
  useRef,
  useState,
} from "react"

export const usePrevious = (value: any): any => {
  const ref = useRef()

  useEffect(() => {
    ref.current = value
  }, [value])

  // TODO: Update to match React best practices
  // eslint-disable-next-line react-compiler/react-compiler
  return ref.current
}

export const useIsOverflowing = (
  ref: MutableRefObject<HTMLElement | null>,
  expanded?: boolean
): boolean => {
  const { current } = ref
  const [isOverflowing, setIsOverflowing] = useState(false)
  const checkOverflowing = useCallback(() => {
    if (current) {
      const { scrollHeight, clientHeight } = current

      setIsOverflowing(scrollHeight > clientHeight)
    }
  }, [current])

  // We want to double check if the element is overflowing
  // when the expanded state changes or the height of the
  // element changes
  useEffect(() => {
    checkOverflowing()
    // TODO: Update to match React best practices
    // eslint-disable-next-line react-compiler/react-compiler
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [expanded, current?.clientHeight])

  // Window resizing can also affect the overflow state
  // so we need to check it as well
  useEffect(() => {
    window.addEventListener("resize", checkOverflowing)

    return () => {
      window.removeEventListener("resize", checkOverflowing)
    }
  }, [checkOverflowing])

  return isOverflowing
}


================================================
File: /frontend/lib/src/util/IFrameUtil.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Our default iframe sandbox options.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#Attributes
 */
export const DEFAULT_IFRAME_SANDBOX_POLICY = [
  // Allows for downloads to occur without a gesture from the user.
  // Experimental; limited browser support.
  // "allow-downloads-without-user-activation",

  // Allows the resource to submit forms. If this keyword is not used, form submission is blocked.
  "allow-forms",

  // Lets the resource open modal windows.
  "allow-modals",

  // Lets the resource lock the screen orientation.
  // "allow-orientation-lock",

  // Lets the resource use the Pointer Lock API.
  // "allow-pointer-lock",

  // Allows popups (such as window.open(), target="_blank", or showModalDialog()). If this keyword is not used, the popup will silently fail to open.
  "allow-popups",

  // Lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.
  "allow-popups-to-escape-sandbox",

  // Lets the resource start a presentation session.
  // "allow-presentation",

  // If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy.

  // From MDN:
  // "When the embedded document has the same origin as the embedding page, it is
  // strongly discouraged to use both allow-scripts and allow-same-origin, as
  // that lets the embedded document remove the sandbox attribute — making it no
  // more secure than not using the sandbox attribute at all."
  //
  // As of December 2020, we've turned the allow-same-origin flag *on* despite
  // the fact that it basically un-sandboxes us - this was a product decision
  // after lots of back and forth: ultimately, it un-blocks a number of use-cases
  // without making Streamlit Components any less secure than they actually were,
  // since we don't sandbox a Component's Python code.
  "allow-same-origin",

  // Lets the resource run scripts (but not create popup windows).
  "allow-scripts",

  // Lets the resource request access to the parent's storage capabilities with the Storage Access API.
  // Experimental; limited browser support.
  // "allow-storage-access-by-user-activation",

  // Lets the resource navigate the top-level browsing context (the one named _top).
  // "allow-top-navigation",

  // Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.
  // "allow-top-navigation-by-user-activation",

  // Lets the resource trigger downloads.
  "allow-downloads",
].join(" ")

/**
 * Our default iframe `allow` policy options.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#Attributes
 */
export const DEFAULT_IFRAME_FEATURE_POLICY = [
  // Controls whether the current document is allowed to gather information about the acceleration of the device through the Accelerometer interface.
  "accelerometer",

  // Controls whether the current document is allowed to gather information about the amount of light in the environment around the device through the AmbientLightSensor interface.
  "ambient-light-sensor",

  // Controls whether the current document is allowed to autoplay media requested through the HTMLMediaElement interface. When this policy is disabled and there were no user gestures, the Promise returned by HTMLMediaElement.play() will reject with a DOMException. The autoplay attribute on <audio> and <video> elements will be ignored.
  "autoplay",

  // Controls whether the use of the Battery Status API is allowed. When this policy is disabled, the Promise returned by Navigator.getBattery() will reject with a NotAllowedError DOMException.
  "battery",

  // Controls whether the current document is allowed to use video input devices. When this policy is disabled, the Promise returned by getUserMedia() will reject with a NotAllowedError DOMException.
  "camera",

  // Controls whether the current document is allowed to write to the clipboard. When this policy is disabled, attempts to write to the clipboard will be rejected.
  "clipboard-write",

  // Controls whether or not the current document is permitted to use the getDisplayMedia() method to capture screen contents. When this policy is disabled, the promise returned by getDisplayMedia() will reject with a NotAllowedError if permission is not obtained to capture the display's contents.
  // "display-capture",

  // Controls whether the current document is allowed to set document.domain. When this policy is disabled, attempting to set document.domain will fail and cause a SecurityError DOMException to be be thrown.
  "document-domain",

  // Controls whether the current document is allowed to use the Encrypted Media Extensions API (EME). When this policy is disabled, the Promise returned by Navigator.requestMediaKeySystemAccess() will reject with a DOMException.
  "encrypted-media",

  // Controls whether tasks should execute in frames while they're not being rendered (e.g. if an iframe is hidden or display: none).
  // "execution-while-not-rendered",

  // Controls whether tasks should execute in frames while they're outside of the visible viewport.
  // "execution-while-out-of-viewport",

  // Controls whether the current document is allowed to use Element.requestFullScreen(). When this policy is disabled, the returned Promise rejects with a TypeError DOMException.
  "fullscreen",

  // Controls whether the current document is allowed to use the Geolocation Interface. When this policy is disabled, calls to getCurrentPosition() and watchPosition() will cause those functions' callbacks to be invoked with a PositionError code of PERMISSION_DENIED.
  "geolocation",

  // Controls whether the current document is allowed to gather information about the orientation of the device through the Gyroscope interface.
  "gyroscope",

  // Controls whether the current document is allowed to show layout animations.
  "layout-animations",

  // Controls whether the current document is allowed to display images in legacy formats.
  "legacy-image-formats",

  // Controls whether the current document is allowed to gather information about the orientation of the device through the Magnetometer interface.
  "magnetometer",

  // Controls whether the current document is allowed to use audio input devices. When this policy is disabled, the Promise returned by MediaDevices.getUserMedia() will reject with a NotAllowedError.
  "microphone",

  // Controls whether the current document is allowed to use the Web MIDI API. When this policy is disabled, the Promise returned by Navigator.requestMIDIAccess() will reject with a DOMException.
  "midi",

  // Controls the availability of mechanisms that enables the page author to take control over the behavior of spatial navigation, or to cancel it outright.
  // "navigation-override",

  // Controls whether the current document is allowed to download and display large images.
  "oversized-images",

  // Controls whether the current document is allowed to use the Payment Request API. When this policy is enabled, the PaymentRequest() constructor will throw a SecurityError DOMException.
  "payment",

  // Controls whether the current document is allowed to play a video in a Picture-in-Picture mode via the corresponding API.
  "picture-in-picture",

  // Controls whether the current document is allowed to use the Web Authentication API to retrieve already stored public-key credentials, i.e. via navigator.credentials.get({publicKey: ..., ...}).
  "publickey-credentials-get",

  // Controls whether the current document is allowed to make synchronous XMLHttpRequest requests.
  "sync-xhr",

  // Controls whether the current document is allowed to use the WebUSB API.
  "usb",

  // Controls whether the current document is allowed to use the WebVR API. When this policy is disabled, the Promise returned by Navigator.getVRDisplays() will reject with a DOMException. Keep in mind that the WebVR standard is in the process of being replaced with WebXR.
  "vr ",

  // Controls whether the current document is allowed to use Wake Lock API to indicate that device should not enter power-saving mode.
  "wake-lock",

  // Controls whether or not the current document is allowed to use the WebXR Device API to interact with a WebXR session.
  "xr-spatial-tracking",
].join("; ")


================================================
File: /frontend/lib/src/util/Resolver.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A promise wrapper that makes resolve/reject functions public.
 */
export default class Resolver<T> {
  public readonly resolve: (value: T | PromiseLike<T>) => void

  public readonly reject: (reason?: any) => void | Promise<any>

  public readonly promise: Promise<T>

  constructor() {
    // Initialize to something so that TS is happy, then use @ts-expect-error
    // so that we can assign the actually desired values to resolve and reject.
    //
    // This is necessary because TS isn't able to deduce that resolve and
    // reject will always be set in the callback passed to the Promise
    // constructor below.
    this.resolve = () => {}
    this.reject = () => {}

    this.promise = new Promise<T>((resFn, rejFn) => {
      // @ts-expect-error
      this.resolve = resFn
      // @ts-expect-error
      this.reject = rejFn
    })
  }
}


================================================
File: /frontend/lib/src/util/Timer.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A wrapper around setTimeout that adds some useful features, like getting the
 * remaining time.
 */
export class Timer {
  private timerHandle?: number

  private duration = 0

  private startTime = 0

  private running = false

  /** True if the timer is currently running */
  public get isRunning(): boolean {
    return this.running
  }

  /** Remaining time before timeout, or 0 if the timer is not running */
  public get remainingTime(): number {
    if (!this.running) {
      return 0
    }
    const elapsed = Date.now() - this.startTime
    return Math.max(this.duration - elapsed, 0)
  }

  /**
   * Starts the Timer with the given callback.
   * If the Timer is already running, it will be canceled first.
   */
  public setTimeout(handler: () => void, time: number): void {
    this.cancel()
    this.startTime = Date.now()
    this.duration = time
    this.running = true
    this.timerHandle = window.setTimeout(() => {
      this.running = false
      handler()
    }, time)
  }

  /** Cancels the Timer. If the Timer is not already running, this is a no-op. */
  public cancel(): void {
    if (this.timerHandle !== undefined) {
      window.clearTimeout(this.timerHandle)
      this.timerHandle = undefined
      this.running = false
    }
  }
}


================================================
File: /frontend/lib/src/util/UriUtil.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  buildHttpUri,
  buildWsUri,
  getPossibleBaseUris,
  getWindowBaseUriParts,
  isValidOrigin,
} from "./UriUtil"

const location: Partial<Location> = {}

global.window = Object.create(window)
Object.defineProperty(window, "location", { value: location })

test("gets all window URI parts", () => {
  location.hostname = "the_host"
  location.port = "9988"
  location.pathname = "foo"

  const parts = getWindowBaseUriParts()
  expect(parts).toStrictEqual({
    host: "the_host",
    port: 9988,
    basePath: "foo",
  })
})

test("gets window URI parts without basePath", () => {
  location.hostname = "the_host"
  location.port = "9988"
  location.pathname = ""

  const parts = getWindowBaseUriParts()
  expect(parts).toStrictEqual({
    host: "the_host",
    port: 9988,
    basePath: "",
  })
})

test("gets window URI parts with long basePath", () => {
  location.hostname = "the_host"
  location.port = "9988"
  location.pathname = "/foo/bar"

  const parts = getWindowBaseUriParts()
  expect(parts).toStrictEqual({
    host: "the_host",
    port: 9988,
    basePath: "foo/bar",
  })
})

test("gets window URI parts with weird basePath", () => {
  location.hostname = "the_host"
  location.port = "9988"
  location.pathname = "///foo/bar//"

  const parts = getWindowBaseUriParts()
  expect(parts).toStrictEqual({
    host: "the_host",
    port: 9988,
    basePath: "foo/bar",
  })
})

test("builds HTTP URI correctly", () => {
  location.href = "http://something"
  const uri = buildHttpUri(
    {
      host: "the_host",
      port: 9988,
      basePath: "foo/bar",
    },
    "baz"
  )
  expect(uri).toBe("http://the_host:9988/foo/bar/baz")
})

test("builds HTTPS URI correctly", () => {
  location.href = "https://something"
  const uri = buildHttpUri(
    {
      host: "the_host",
      port: 9988,
      basePath: "foo/bar",
    },
    "baz"
  )
  expect(uri).toBe("https://the_host:9988/foo/bar/baz")
})

test("builds HTTP URI with no base path", () => {
  location.href = "http://something"
  const uri = buildHttpUri(
    {
      host: "the_host",
      port: 9988,
      basePath: "",
    },
    "baz"
  )
  expect(uri).toBe("http://the_host:9988/baz")
})

test("builds WS URI correctly", () => {
  location.href = "http://something"
  const uri = buildWsUri(
    {
      host: "the_host",
      port: 9988,
      basePath: "foo/bar",
    },
    "baz"
  )
  expect(uri).toBe("ws://the_host:9988/foo/bar/baz")
})

test("builds WSS URI correctly", () => {
  location.href = "https://something"
  const uri = buildWsUri(
    {
      host: "the_host",
      port: 9988,
      basePath: "foo/bar",
    },
    "baz"
  )
  expect(uri).toBe("wss://the_host:9988/foo/bar/baz")
})

test("builds WS URI with no base path", () => {
  location.href = "http://something"
  const uri = buildWsUri(
    {
      host: "the_host",
      port: 9988,
      basePath: "",
    },
    "baz"
  )
  expect(uri).toBe("ws://the_host:9988/baz")
})

describe("isValidOrigin", () => {
  it("returns false if allowedOrigin is invalid", () => {
    // allowedOrigin doesn't have a protocol
    expect(
      isValidOrigin("devel.streamlit.io", "http://devel.streamlit.io")
    ).toBe(false)
  })

  it("returns false if testOrigin is invalid", () => {
    // testOrigin doesn't have a protocol
    expect(
      isValidOrigin("http://devel.streamlit.io", "devel.streamlit.io")
    ).toBe(false)
  })

  it("returns true if testUrl's hostname is localhost w/ various ports", () => {
    expect(
      isValidOrigin(
        "http://localhost",
        // Example of localhost url used for manual testing
        "http://localhost:8000"
      )
    ).toBe(true)

    expect(
      isValidOrigin(
        "http://localhost",
        // Example of localhost url used by e2e test
        "http://localhost:35475"
      )
    ).toBe(true)
  })

  it("returns false if testUrl's hostname is localhost but protocol doesn't match", () => {
    expect(isValidOrigin("http://localhost", "https://localhost")).toBe(false)

    expect(
      isValidOrigin("https://localhost:8000", "http://localhost:8000")
    ).toBe(false)

    expect(
      isValidOrigin(
        "https:localhost",
        // Example of localhost url used for manual testing
        "http://localhost:8000"
      )
    ).toBe(false)

    expect(
      isValidOrigin(
        "http://localhost",
        // Example of localhost url used by e2e test
        "https://localhost:35475"
      )
    ).toBe(false)
  })

  it("returns false if protocols don't match", () => {
    expect(
      isValidOrigin("https://devel.streamlit.io", "http://devel.streamlit.io")
    ).toBe(false)
  })

  it("returns false if ports don't match", () => {
    expect(
      isValidOrigin(
        "https://devel.streamlit.io:8080",
        "https://devel.streamlit.io"
      )
    ).toBe(false)
  })

  it("returns true when the pattern and url are the same", () => {
    expect(
      isValidOrigin("http://devel.streamlit.io", "http://devel.streamlit.io")
    ).toBe(true)
  })

  it("returns true when the pattern and url are the same for localhost", () => {
    expect(
      isValidOrigin("http://localhost:3000", "http://localhost:3000")
    ).toBe(true)
  })

  it("should recognize wildcards in Firefox", () => {
    // In Firefox, the URL constructor crashes on URLs containing `*`,
    // for example `new URL("https://*.streamlit.app"). This used to not
    // allow to receive messages from Cloud Community apps. Make sure this
    // issue is fixed.
    const OrigURL = globalThis.URL
    try {
      globalThis.URL = function (url: string, ...rest: any[]) {
        if (url.includes("*")) {
          throw new Error("Invalid URL")
        }
        return new OrigURL(url, ...rest)
      } as any
      expect(
        isValidOrigin(
          "https://*.streamlit.app",
          "https://example.streamlit.app"
        )
      ).toBe(true)
    } finally {
      globalThis.URL = OrigURL
    }
  })

  describe("pattern matching", () => {
    it("handles the '*.' pattern", () => {
      expect(isValidOrigin("https://*.com", "https://a.com")).toBe(true)
      expect(isValidOrigin("https://*.a.com", "https://asd.a.com")).toBe(true)
      expect(
        isValidOrigin("https://www.*.a.com", "https://www.asd.a.com")
      ).toBe(true)
      expect(
        isValidOrigin("https://abc.*.*.a.com", "https://abc.def.xyz.a.com")
      ).toBe(true)
      expect(
        isValidOrigin("https://*.com", "https://example.example.com")
      ).toBe(true)

      expect(isValidOrigin("https://*.b.com", "https://www.c.com")).toBe(false)
    })

    it("handles the '{*.}?' pattern", () => {
      expect(
        isValidOrigin("https://{*.}?example.com", "https://cdn.example.com")
      ).toBe(true)
      expect(
        isValidOrigin("https://{*.}?example.com", "https://example.com")
      ).toBe(true)

      expect(
        isValidOrigin("https://{*.}?example.com", "https://www-example.com")
      ).toBe(false)
    })

    it("handles the '{cdn.}?' pattern", () => {
      expect(
        isValidOrigin("https://{cdn.}?example.com", "https://cdn.example.com")
      ).toBe(true)
      expect(
        isValidOrigin("https://{cdn.}?example.com", "https://example.com")
      ).toBe(true)

      expect(
        isValidOrigin("https://{cdn.}?example.com", "https://www.example.com")
      ).toBe(false)
      expect(
        isValidOrigin("https://{cdn.}?example.com", "https://cdn-example.com")
      ).toBe(false)
    })

    it("handles the '{www.cdn.}?' pattern", () => {
      expect(
        isValidOrigin(
          "https://{www.cdn.}?example.com",
          "https://www.cdn.example.com"
        )
      ).toBe(true)
      expect(
        isValidOrigin("https://{www.cdn.}?example.com", "https://example.com")
      ).toBe(true)

      expect(
        isValidOrigin(
          "https://{www.cdn.}?example.com",
          "https://cdn.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin(
          "https://{www.cdn.}?example.com",
          "https://www.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin(
          "https://{www.cdn.}?example.com",
          "https://www.cdn-example.com"
        )
      ).toBe(false)
    })

    it("handles the 'cdn-*' pattern", () => {
      expect(
        isValidOrigin(
          "https://cdn-*.example.com",
          "https://cdn-123.example.com"
        )
      ).toBe(true)
      expect(
        isValidOrigin("https://cdn-*.example.com", "https://cdn-.example.com")
      ).toBe(true)

      expect(
        isValidOrigin(
          "https://cdn-*.example.com",
          "https://cdn.123.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin("https://cdn-*.example.com", "https://cdn.example.com")
      ).toBe(false)
    })

    it("handles the ':id' pattern", () => {
      expect(
        isValidOrigin(
          "https://cdn-:id.example.com",
          "https://cdn-123.example.com"
        )
      ).toBe(true)

      expect(
        isValidOrigin(
          "https://cdn-:id.example.com",
          "https://cdn-.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin(
          "https://cdn-:id.example.com",
          "https://cdn.123.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin("https://cdn-:id.example.com", "https://cdn.example.com")
      ).toBe(false)
    })

    it("handles regex patterns", () => {
      expect(
        isValidOrigin(
          "https://(cdn|www).example.com",
          "https://cdn.example.com"
        )
      ).toBe(true)
      expect(
        isValidOrigin(
          "https://(cdn|www).example.com",
          "https://www.example.com"
        )
      ).toBe(true)
      expect(isValidOrigin("https://(\\w+).com", "https://example.com")).toBe(
        true
      )

      expect(
        isValidOrigin(
          "https://(cdn|www).example.com",
          "https://dev.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin(
          "https://(cdn|www).example.com",
          "https://ww.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin(
          "https://(cdn|www).example.com",
          "https://cdn.123.example.com"
        )
      ).toBe(false)
      expect(
        isValidOrigin("https://(\\w+).com", "https://example.example.com")
      ).toBe(false)
    })

    it("handles patterns in the protocol part", () => {
      expect(
        isValidOrigin("https://example.com:*", "https://example.com")
      ).toBe(true)
      expect(
        isValidOrigin("https://example.com:*", "https://example.com:8080")
      ).toBe(true)
      expect(
        isValidOrigin("https://example.com:80*", "https://example.com:8080")
      ).toBe(true)
      expect(
        isValidOrigin("https://example.com:80*", "https://example.com:8091")
      ).toBe(true)
      expect(
        isValidOrigin("https://example.com:80*", "https://example.com:80")
      ).toBe(true)

      expect(
        isValidOrigin("https://example.com:*", "https://example.www.com:8080")
      ).toBe(false)
      expect(
        isValidOrigin("https://example.com:80*", "https://example.com:3000")
      ).toBe(false)
      expect(
        isValidOrigin("https://example.com:80*", "https://example.com:91")
      ).toBe(false)
    })
  })
})

describe("getPossibleBaseUris", () => {
  let originalPathName = ""

  beforeEach(() => {
    originalPathName = window.location.pathname
  })

  afterEach(() => {
    window.location.pathname = originalPathName
  })

  const testCases = [
    {
      description: "empty pathnames",
      pathname: "",
      expectedBasePaths: [""],
    },
    {
      description: "pathnames with a single part",
      pathname: "foo",
      expectedBasePaths: ["foo", ""],
    },
    {
      description: "pathnames with two parts",
      pathname: "foo/bar",
      expectedBasePaths: ["foo/bar", "foo"],
    },
    {
      description: "pathnames with more than two parts",
      pathname: "foo/bar/baz/qux",
      expectedBasePaths: ["foo/bar/baz/qux", "foo/bar/baz"],
    },
  ]

  testCases.forEach(({ description, pathname, expectedBasePaths }) => {
    it(`handles ${description}`, () => {
      window.location.pathname = pathname

      expect(getPossibleBaseUris().map(b => b.basePath)).toEqual(
        expectedBasePaths
      )
    })
  })
})


================================================
File: /frontend/lib/src/util/UriUtil.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Remove once support for URLPattern is added to all major browsers
// https://caniuse.com/mdn-api_urlpattern
import "urlpattern-polyfill"

import take from "lodash/take"

import { IS_DEV_ENV, WEBSOCKET_PORT_DEV } from "@streamlit/lib/src/baseconsts"

/**
 * host:port tuple
 */
export interface BaseUriParts {
  host: string
  port: number
  basePath: string
}

const FINAL_SLASH_RE = /\/+$/
const INITIAL_SLASH_RE = /^\/+/

/**
 * Return the BaseUriParts for the global window
 */
export function getWindowBaseUriParts(): BaseUriParts {
  // If dev, always connect to 8501, since window.location.port is the Node
  // server's port 3000.
  // If changed, also change config.py
  const host = window.location.hostname

  let port
  if (IS_DEV_ENV) {
    port = WEBSOCKET_PORT_DEV
  } else if (window.location.port) {
    port = Number(window.location.port)
  } else {
    port = isHttps() ? 443 : 80
  }

  const basePath = window.location.pathname
    .replace(FINAL_SLASH_RE, "")
    .replace(INITIAL_SLASH_RE, "")

  return { host, port, basePath }
}

// NOTE: In the multipage apps world, there is some ambiguity around whether a
// path like "foo/bar" means
//   * the page "/" at baseUrlPath "foo/bar", or
//   * the page "/bar" at baseUrlPath "foo".
// To resolve this, we just try both possibilities for now, but this leads to
// the unfortunate consequence of the initial page load when navigating directly
// to a non-main page of an app being slower than navigating to the main page
// (as the first attempt at connecting to the server fails the healthcheck).
//
// We'll want to improve this situation in the near future, but figuring out
// the best path forward may be tricky as I wasn't able to come up with an
// easy solution covering every deployment scenario.
export function getPossibleBaseUris(): Array<BaseUriParts> {
  const baseUriParts = getWindowBaseUriParts()
  const { basePath } = baseUriParts

  if (!basePath) {
    return [baseUriParts]
  }

  const parts = basePath.split("/")
  const possibleBaseUris: Array<BaseUriParts> = []

  while (parts.length > 0) {
    possibleBaseUris.push({
      ...baseUriParts,
      basePath: parts.join("/"),
    })
    parts.pop()
  }

  possibleBaseUris.push({
    ...baseUriParts,
    basePath: "",
  })

  return take(possibleBaseUris, 2)
}

/**
 * Create a ws:// or wss:// URI for the given path.
 */
export function buildWsUri(
  { host, port, basePath }: BaseUriParts,
  path: string
): string {
  const protocol = isHttps() ? "wss" : "ws"
  const fullPath = makePath(basePath, path)
  return `${protocol}://${host}:${port}/${fullPath}`
}

/**
 * Create an HTTP URI for the given path.
 */
export function buildHttpUri(
  { host, port, basePath }: BaseUriParts,
  path: string
): string {
  const protocol = isHttps() ? "https" : "http"
  const fullPath = makePath(basePath, path)
  return `${protocol}://${host}:${port}/${fullPath}`
}

export function makePath(basePath: string, subPath: string): string {
  basePath = basePath.replace(FINAL_SLASH_RE, "").replace(INITIAL_SLASH_RE, "")
  subPath = subPath.replace(FINAL_SLASH_RE, "").replace(INITIAL_SLASH_RE, "")

  if (basePath.length === 0) {
    return subPath
  }

  return `${basePath}/${subPath}`
}

/**
 * True if we're connected to the host via HTTPS.
 */
function isHttps(): boolean {
  return window.location.href.startsWith("https://")
}

/**
 * Check if the given origin follows the allowed origin pattern, which could
 * include wildcards.
 *
 * This function is used to check whether cross-origin messages received by the
 * withHostCommunication component come from an origin that we've listed as
 * trusted. If this function returns false against the origin being tested for
 * all trusted origins in our whitelist, the cross-origin message should be
 * ignored.
 */
export function isValidOrigin(
  allowedOriginPattern: string,
  testOrigin: string
): boolean {
  let allowedUrlPattern: URLPattern
  let allowedPortLessPattern: URLPattern
  let testUrl: URL

  try {
    allowedUrlPattern = new URLPattern(allowedOriginPattern)
    allowedPortLessPattern = new URLPattern({
      protocol: allowedUrlPattern.protocol,
      hostname: allowedUrlPattern.hostname,
    })
    testUrl = new URL(testOrigin)
  } catch {
    return false
  }

  // Allow localhost w/ any port for testing of host <-> guest communication
  // using hostframe.html (facilitates manual & e2e testing)
  if (
    testUrl.hostname === "localhost" &&
    allowedPortLessPattern.test(testUrl)
  ) {
    return true
  }

  return allowedUrlPattern.test(testUrl)
}


================================================
File: /frontend/lib/src/util/assertNever.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Asserts that a given value is of type `never`. This function is useful for
 * ensuring exhaustive checks in TypeScript. If the function is called, it
 * throws an error indicating that a non-exhaustive branch was reached.
 *
 * @param {never} x - The value that should be of type `never`.
 * @throws {Error} Throws an error if a non-exhaustive branch is reached.
 * @returns {never} This function never returns a value.
 */
export const assertNever = (x: never): never => {
  throw new Error(`Reached a branch with non-exhaustive item: ${x}`)
}


================================================
File: /frontend/lib/src/util/createDownloadLinkElement.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface DownloadLinkElementParameters {
  enforceDownloadInNewTab: boolean
  url: string
  filename: string
}

const createDownloadLinkElement = ({
  enforceDownloadInNewTab,
  url,
  filename,
}: DownloadLinkElementParameters): HTMLAnchorElement => {
  const link = document.createElement("a")
  link.setAttribute("href", url)
  if (enforceDownloadInNewTab) {
    link.setAttribute("target", "_blank")
  } else {
    link.setAttribute("target", "_self")
  }
  link.setAttribute("download", filename)

  return link
}

export default createDownloadLinkElement


================================================
File: /frontend/lib/src/util/inputUtils.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { isEnterKeyPressed } from "./inputUtils"

describe("inputUtils", () => {
  it("isEnterKeyPressed should return true when Enter is pressed", () => {
    const event = {
      key: "Enter",
      keyCode: 0,
      nativeEvent: undefined as never,
    }
    expect(isEnterKeyPressed(event)).toBe(true)
  })
  it("isEnterKeyPressed should return true when keyCode is 13", () => {
    const event = {
      key: "SomeKey",
      keyCode: 13,
      nativeEvent: undefined as never,
    }
    expect(isEnterKeyPressed(event)).toBe(true)
  })
  it("isEnterKeyPressed should return true when keyCode is 10", () => {
    const event = {
      key: "SomeKey",
      keyCode: 10,
      nativeEvent: undefined as never,
    }
    expect(isEnterKeyPressed(event)).toBe(true)
  })
  it("isEnterKeyPressed should return false when key is not Enter and keycode is not an enter code", () => {
    const event = {
      key: "SomeKey",
      keyCode: 9,
      nativeEvent: undefined as never,
    }
    expect(isEnterKeyPressed(event)).toBe(false)
  })
})


================================================
File: /frontend/lib/src/util/inputUtils.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

type EnterKeyEvent = Pick<
  React.KeyboardEvent<HTMLElement>,
  "key" | "keyCode" | "nativeEvent"
>

export function isEnterKeyPressed(event: EnterKeyEvent): boolean {
  const { keyCode, key } = event

  // Using keyCode as well due to some different behaviors on Windows
  // https://bugs.chromium.org/p/chromium/issues/detail?id=79407
  return (
    (key === "Enter" || keyCode === 13 || keyCode === 10) &&
    // Do not send the sentence being composed when Enter is typed into the IME.
    !(event.nativeEvent?.isComposing === true)
  )
}


================================================
File: /frontend/lib/src/util/log.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { IS_DEV_ENV } from "@streamlit/lib/src/baseconsts"

/* eslint-disable no-console */

/**
 * Log a message to the console, but only if in dev mode.
 */
export function logMessage(...args: any[]): void {
  if (IS_DEV_ENV) {
    console.log(...args)
  }
}

/**
 * Log an warning to the console, but only if in dev mode.
 * USE ONLY FOR WARNINGS: Meaning, only things that have a small impact on the
 * user experience, if any.
 */
export function logWarning(...args: any[]): void {
  if (IS_DEV_ENV) {
    console.warn(...args)
  }
}

/**
 * Log an error to the console. ALWAYS does this, even if in prod mode, because
 * errors are _that_ important.
 * USE ONLY FOR ERRORS: Meaning, only things that somehow "break" the user
 * experience.
 */
export function logError(...args: any[]): void {
  console.error(...args)
  // TODO: Send error report to our servers when there's an error.
}

/**
 * Log a message to the console. ALWAYS does this, even if in prod mode.
 * USE SPARINGLY!
 */
export function logAlways(...args: any[]): void {
  console.log(...args)
}


================================================
File: /frontend/lib/src/util/storageUtils.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { localStorageAvailable } from "./storageUtils"

describe("localStorageAvailable", () => {
  // NOTE: localStorage is weird, and calling .spyOn(window.localStorage, "setItem")
  // doesn't work. Accessing .__proto__ here isn't too bad of a crime since
  // it's test code.
  const breakLocalStorage = (): void => {
    vi
      // eslint-disable-next-line no-proto
      .spyOn(window.localStorage.__proto__, "setItem")
      .mockImplementation(() => {
        throw new Error("boom")
      })
  }

  afterEach(() => {
    vi.restoreAllMocks()
    window.localStorage.clear()
  })

  it("returns false if a localStorage function explodes", () => {
    breakLocalStorage()
    expect(localStorageAvailable()).toBe(false)
  })

  it("returns true if all localStorage functions work", () => {
    expect(localStorageAvailable()).toBe(true)
  })
})


================================================
File: /frontend/lib/src/util/storageUtils.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Note: Cached themes before version 1 were simply stored with key equal to
// CACHED_THEME_BASE_KEY (with no version number).
const CACHED_THEME_VERSION = 1
const CACHED_THEME_BASE_KEY = `stActiveTheme-${window.location.pathname}`

export const LocalStore = {
  CACHED_THEME_VERSION,
  CACHED_THEME_BASE_KEY,

  ACTIVE_THEME: `${CACHED_THEME_BASE_KEY}-v${CACHED_THEME_VERSION}`,
}

// Method taken from
// https://stackoverflow.com/questions/16427636/check-if-localstorage-is-available
export const localStorageAvailable = (): boolean => {
  const testData = "testData"

  try {
    const { localStorage } = window
    localStorage.setItem(testData, testData)
    localStorage.getItem(testData)
    localStorage.removeItem(testData)
  } catch (e) {
    return false
  }
  return true
}


================================================
File: /frontend/lib/src/util/uploadFiles.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import zip from "lodash/zip"

import { FileUploadClient } from "@streamlit/lib/src/FileUploadClient"
import {
  WidgetInfo,
  WidgetStateManager,
} from "@streamlit/lib/src/WidgetStateManager"
import {
  FileUploaderState as FileUploaderStateProto,
  IFileURLs,
  UploadedFileInfo as UploadedFileInfoProto,
} from "@streamlit/lib/src/proto"
import { ensureError } from "@streamlit/lib/src/util/ErrorHandling"

type SuccessfulUpload = {
  fileUrl: IFileURLs
  file: File
}

type FailedUpload = {
  file: File
  error: Error
}

export const uploadFiles = async ({
  files,
  uploadClient,
  widgetMgr,
  widgetInfo,
  fragmentId,
}: {
  files: File[]
  uploadClient: FileUploadClient
  widgetMgr: WidgetStateManager
  widgetInfo: WidgetInfo
  fragmentId?: string
}): Promise<{
  successfulUploads: SuccessfulUpload[]
  failedUploads: FailedUpload[]
}> => {
  let fileUrls: IFileURLs[] = []

  try {
    fileUrls = await uploadClient.fetchFileURLs(files)
  } catch (e) {
    return {
      successfulUploads: [],
      failedUploads: files.map(file => ({ file, error: ensureError(e) })),
    }
  }

  const filesWithUrls = zip(files, fileUrls)

  const successfulUploads: SuccessfulUpload[] = []
  const failedUploads: FailedUpload[] = []

  await Promise.all(
    filesWithUrls.map(async ([file, fileUrl]) => {
      if (!file || !fileUrl || !fileUrl.uploadUrl || !fileUrl.fileId) {
        return { file, fileUrl, error: new Error("No upload URL found") }
      }

      try {
        await uploadClient.uploadFile(
          { id: fileUrl.fileId, formId: widgetInfo.formId || "" }, // TODO SEE IF DOWNSTREAM LOGIC CAN BE SIMPLIFIED
          fileUrl.uploadUrl,
          file
        )
        successfulUploads.push({ fileUrl, file })
      } catch (e) {
        const error = ensureError(e)
        failedUploads.push({ file, error })
      }
    })
  )

  widgetMgr.setFileUploaderStateValue(
    widgetInfo,
    new FileUploaderStateProto({
      uploadedFileInfo: successfulUploads.map(
        ({ file, fileUrl }) =>
          new UploadedFileInfoProto({
            fileId: fileUrl.fileId,
            fileUrls: fileUrl,
            name: file.name,
            size: file.size,
          })
      ),
    }),
    {
      fromUi: true,
    },
    fragmentId
  )

  return { successfulUploads, failedUploads }
}


================================================
File: /frontend/lib/src/util/utils.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { MockInstance } from "vitest"

import {
  EMBED_QUERY_PARAM_KEY,
  EMBED_QUERY_PARAM_VALUES,
  getCookie,
  getEmbedUrlParams,
  getLoadingScreenType,
  isColoredLineDisplayed,
  isDarkThemeInQueryParams,
  isEmbed,
  isLightThemeInQueryParams,
  isPaddingDisplayed,
  isScrollingHidden,
  isToolbarDisplayed,
  keysToSnakeCase,
  LoadingScreenType,
  preserveEmbedQueryParams,
  setCookie,
} from "./utils"

describe("getCookie", () => {
  afterEach(() => {
    document.cookie.split(";").forEach(cookie => {
      const eqPos = cookie.indexOf("=")
      const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`
    })
  })

  it("get existing cookie", () => {
    document.cookie = "flavor=chocolatechip"
    const cookie = getCookie("flavor")
    expect(cookie).toEqual("chocolatechip")
  })

  it("get missing cookie", () => {
    document.cookie = "sweetness=medium;"
    document.cookie = "flavor=chocolatechip;"
    document.cookie = "type=darkchocolate;"
    const cookie = getCookie("recipe")
    expect(cookie).toEqual(undefined)
  })

  it("find cookie in the front", () => {
    document.cookie = "flavor=chocolatechip;"
    document.cookie = "sweetness=medium;"
    document.cookie = "type=darkchocolate;"
    const cookie = getCookie("flavor")
    expect(cookie).toEqual("chocolatechip")
  })

  it("find cookie in the middle", () => {
    document.cookie = "sweetness=medium;"
    document.cookie = "flavor=chocolatechip;"
    document.cookie = "type=darkchocolate;"
    const cookie = getCookie("flavor")
    expect(cookie).toEqual("chocolatechip")
  })

  it("find cookie in the end", () => {
    document.cookie = "sweetness=medium;"
    document.cookie = "type=darkchocolate;"
    document.cookie = "flavor=chocolatechip;"
    const cookie = getCookie("flavor")
    expect(cookie).toEqual("chocolatechip")
  })
})

describe("setCookie", () => {
  afterEach(() => {
    /*
      Setting a cookie with document.cookie = "key=value" will append or modify "key"
      with "value". It does not overwrite the existing list of cookies in document.cookie.
      In order to delete the cookie, give the cookie an expiration date that has passed.
      This cleanup ensures that we delete all cookies after each test.
    */
    document.cookie.split(";").forEach(cookie => {
      const eqPos = cookie.indexOf("=")
      const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`
    })
  })

  it("set new cookie", () => {
    setCookie("flavor", "chocolatechip")
    expect(document.cookie).toEqual("flavor=chocolatechip")
  })

  it("update existing cookie", () => {
    document.cookie = "flavor=chocolatechip"
    setCookie("flavor", "sugar")
    expect(document.cookie).toEqual("flavor=sugar")
  })

  it("remove cookie", () => {
    document.cookie = "flavor=chocolatechip"
    setCookie("flavor")
    expect(document.cookie).toEqual("")
  })
})

describe("embedParamValues", () => {
  const embedParamValuesShouldHave = [
    "show_colored_line",
    "show_toolbar",
    "show_padding",
    "disable_scrolling",
    "light_theme",
    "dark_theme",
    "hide_loading_screen",
    "show_loading_screen_v1",
    "show_loading_screen_v2",
    "true",
  ]
  it("embedParamValues have correct values", () => {
    expect(EMBED_QUERY_PARAM_VALUES.length).toBe(
      embedParamValuesShouldHave.length
    )
    embedParamValuesShouldHave.forEach(value => {
      expect(EMBED_QUERY_PARAM_VALUES.includes(value.toLowerCase())).toBe(true)
    })
  })
})

describe("getEmbedUrlParams", () => {
  let windowSpy: MockInstance

  beforeEach(() => {
    windowSpy = vi.spyOn(window, "window", "get")
  })

  afterEach(() => {
    windowSpy.mockRestore()
  })

  it("getEmbedUrlParams should contain true when ?embed=true", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true",
      },
    }))
    expect(getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).has("true")).toBe(true)
  })

  it("getEmbedUrlParams should contain true when ?EMBED=TRUE", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?EMBED=TRUE",
      },
    }))
    expect(getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).has("true")).toBe(true)
  })

  it("getEmbedUrlParams is case insensitive, should contain true when ?EmBeD=TrUe", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?EmBeD=TrUe",
      },
    }))
    expect(getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).has("true")).toBe(true)
  })

  it("getEmbedUrlParams is empty, when params are invalid", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=no&embed=text&embed=zero",
      },
    }))
    expect(getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).size).toBe(0)
  })

  it("getEmbedUrlParams is empty, when there is no query string", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "",
      },
    }))
    expect(getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).size).toBe(0)
  })

  it("getEmbedUrlParams is empty, when there is query string without embed param", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?text=a&x=b&c=a",
      },
    }))
    expect(getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).size).toBe(0)
  })

  it("getEmbedUrlParams with EMBED_QUERY_PARAM_KEY reads only ?embed param", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true&embed=true&a=x",
      },
    }))
    expect(getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).size).toBe(1)
  })
})

describe("isEmbed", () => {
  let windowSpy: MockInstance

  beforeEach(() => {
    windowSpy = vi.spyOn(window, "window", "get")
  })

  afterEach(() => {
    windowSpy.mockRestore()
  })

  it("isEmbed should return true when ?embed=true", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true",
      },
    }))
    expect(isEmbed()).toBe(true)
  })

  it("isEmbed should return true when ?embed=TRUE", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=TRUE",
      },
    }))
    expect(isEmbed()).toBe(true)
  })

  it("embed Options should return false even if ?embed=true", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true",
      },
    }))

    expect(isColoredLineDisplayed()).toBe(false)
    expect(isToolbarDisplayed()).toBe(false)
    expect(isPaddingDisplayed()).toBe(false)
    expect(isScrollingHidden()).toBe(false)
    expect(isLightThemeInQueryParams()).toBe(false)
    expect(isDarkThemeInQueryParams()).toBe(false)
  })

  it("embed Options should return false even if ?embed=false", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search:
          "?embed=false&embed_options=show_colored_line,show_toolbar,show_padding,disable_scrolling",
      },
    }))

    expect(isColoredLineDisplayed()).toBe(false)
    expect(isToolbarDisplayed()).toBe(false)
    expect(isPaddingDisplayed()).toBe(false)
    expect(isScrollingHidden()).toBe(false)
  })

  it("embed Options should return false even if ?embed is not set", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search:
          "?embed_options=show_colored_line,show_toolbar,show_padding,disable_scrolling",
      },
    }))

    expect(isColoredLineDisplayed()).toBe(false)
    expect(isToolbarDisplayed()).toBe(false)
    expect(isPaddingDisplayed()).toBe(false)
    expect(isScrollingHidden()).toBe(false)
  })

  it("should specify light theme if in embed options", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed_options=light_theme",
      },
    }))

    expect(isLightThemeInQueryParams()).toBe(true)
  })

  it("should specify dark theme if in embed options", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed_options=dark_theme",
      },
    }))

    expect(isDarkThemeInQueryParams()).toBe(true)
  })

  it("should disable scrolling if in embed options", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true&embed_options=disable_scrolling",
      },
    }))

    expect(isColoredLineDisplayed()).toBe(false)
    expect(isToolbarDisplayed()).toBe(false)
    expect(isPaddingDisplayed()).toBe(false)
    expect(isScrollingHidden()).toBe(true)
    expect(isLightThemeInQueryParams()).toBe(false)
    expect(isDarkThemeInQueryParams()).toBe(false)
  })

  it("should show padding if in embed options", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true&embed_options=show_padding",
      },
    }))

    expect(isColoredLineDisplayed()).toBe(false)
    expect(isToolbarDisplayed()).toBe(false)
    expect(isPaddingDisplayed()).toBe(true)
    expect(isScrollingHidden()).toBe(false)
    expect(isLightThemeInQueryParams()).toBe(false)
    expect(isDarkThemeInQueryParams()).toBe(false)
  })

  it("should show the toolbar if in embed options", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true&embed_options=show_toolbar",
      },
    }))

    expect(isColoredLineDisplayed()).toBe(false)
    expect(isToolbarDisplayed()).toBe(true)
    expect(isPaddingDisplayed()).toBe(false)
    expect(isScrollingHidden()).toBe(false)
    expect(isLightThemeInQueryParams()).toBe(false)
    expect(isDarkThemeInQueryParams()).toBe(false)
  })

  it("should show the colored line if in embed options", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=true&embed_options=show_colored_line",
      },
    }))

    expect(isColoredLineDisplayed()).toBe(true)
    expect(isToolbarDisplayed()).toBe(false)
    expect(isPaddingDisplayed()).toBe(false)
    expect(isScrollingHidden()).toBe(false)
    expect(isLightThemeInQueryParams()).toBe(false)
    expect(isDarkThemeInQueryParams()).toBe(false)
  })

  it("isEmbed is case insensitive, so should return true when ?embed=TrUe", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?EmBeD=TrUe",
      },
    }))
    expect(isEmbed()).toBe(true)
  })

  it("isEmbed returns true, when there is at least one occurrence of ?embed=true", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "?embed=text&embed=true",
      },
    }))
    expect(isEmbed()).toBe(true)
  })

  it("isEmbed returns false, when no url param is set", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "",
      },
    }))
    expect(isEmbed()).toBe(false)
  })

  it("isEmbed returns false when embed url param is any string other than true", () => {
    windowSpy.mockImplementation(() => ({
      location: {
        search: "randomText",
      },
    }))
    expect(isEmbed()).toBe(false)
  })
})

describe("getLoadingScreenType", () => {
  it("should return v2 by default", () => {
    vi.stubGlobal("window", {
      location: {
        search: null,
      },
    })

    expect(getLoadingScreenType()).toBe(LoadingScreenType.V2)
  })

  it("should give precendence to 'hide'", () => {
    vi.stubGlobal("window", {
      location: {
        search:
          "?embed_options=hide_loading_screen&show_loading_screen_v1&show_loading_screen_v2",
      },
    })

    expect(getLoadingScreenType()).toBe(LoadingScreenType.NONE)
  })

  it("should support 'hide'", () => {
    vi.stubGlobal("window", {
      location: {
        search: "?embed_options=hide_loading_screen",
      },
    })

    expect(getLoadingScreenType()).toBe(LoadingScreenType.NONE)
  })

  it("should support 'v1'", () => {
    vi.stubGlobal("window", {
      location: {
        search: "?embed_options=show_loading_screen_v1",
      },
    })

    expect(getLoadingScreenType()).toBe(LoadingScreenType.V1)
  })

  it("should support 'v2'", () => {
    vi.stubGlobal("window", {
      location: {
        search: "?embed_options=show_loading_screen_v2",
      },
    })

    expect(getLoadingScreenType()).toBe(LoadingScreenType.V2)
  })

  describe("preserveEmbedQueryParams", () => {
    let prevWindowLocation: Location
    afterEach(() => {
      window.location = prevWindowLocation
    })

    it("should return an empty string if not in embed mode", () => {
      // @ts-expect-error
      delete window.location
      // @ts-expect-error
      window.location = {
        assign: vi.fn(),
        search: "foo=bar",
      }
      expect(preserveEmbedQueryParams()).toBe("")
    })

    it("should preserve embed query string even with no embed options and remove foo=bar", () => {
      // @ts-expect-error
      delete window.location
      // @ts-expect-error
      window.location = {
        assign: vi.fn(),
        search: "embed=true&foo=bar",
      }
      expect(preserveEmbedQueryParams()).toBe("embed=true")
    })

    it("should preserve embed query string with embed options and remove foo=bar", () => {
      // @ts-expect-error
      delete window.location
      // @ts-expect-error
      window.location = {
        assign: vi.fn(),
        search:
          "embed=true&embed_options=option1&embed_options=option2&foo=bar",
      }
      expect(preserveEmbedQueryParams()).toBe(
        "embed=true&embed_options=option1&embed_options=option2"
      )
    })
  })
})

describe("keysToSnakeCase", () => {
  it("should replace . with _", () => {
    expect(keysToSnakeCase({ "marker.size": "bob" })).toEqual({
      marker_size: "bob",
    })
  })

  it("should return decamelized keys for regular keys", () => {
    expect(keysToSnakeCase({ aliceName: "alice", bobName: "bob" })).toEqual({
      alice_name: "alice",
      bob_name: "bob",
    })
  })

  it("should return an empty dictionary when passed an empty dictionary", () => {
    expect(keysToSnakeCase({})).toEqual({})
  })
})


================================================
File: /frontend/lib/src/util/utils.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import decamelize from "decamelize"
import get from "lodash/get"
import xxhash from "xxhashjs"

import {
  Alert as AlertProto,
  Element,
  LabelVisibilityMessage as LabelVisibilityMessageProto,
  Skeleton as SkeletonProto,
} from "@streamlit/lib/src/proto"

// This prefix should be in sync with the value on the python side:
const GENERATED_ELEMENT_ID_PREFIX = "$$ID"

/**
 * Wraps a function to allow it to be called, at most, once per interval
 * (specified in milliseconds). If the wrapper function is called N times
 * within that interval, only the Nth call will go through. The function
 * will only be called after the full interval has elapsed since the last
 * call.
 */
export function debounce(delay: number, fn: any): any {
  let timerId: any

  return (...args: any[]) => {
    if (timerId) {
      clearTimeout(timerId)
    }

    timerId = setTimeout(() => {
      fn(...args)
      timerId = null
    }, delay)
  }
}

/**
 * Embed query param values, which can be set in ?embed={value}, all should be lowercase
 */
export const EMBED_QUERY_PARAM_KEY = "embed"
export const EMBED_OPTIONS_QUERY_PARAM_KEY = "embed_options"
export const EMBED_SHOW_COLORED_LINE = "show_colored_line"
export const EMBED_SHOW_TOOLBAR = "show_toolbar"
export const EMBED_SHOW_PADDING = "show_padding"
export const EMBED_DISABLE_SCROLLING = "disable_scrolling"
export const EMBED_LIGHT_THEME = "light_theme"
export const EMBED_DARK_THEME = "dark_theme"
export const EMBED_TRUE = "true"
export const EMBED_HIDE_LOADING_SCREEN = "hide_loading_screen"
export const EMBED_SHOW_LOADING_SCREEN_V1 = "show_loading_screen_v1"
export const EMBED_SHOW_LOADING_SCREEN_V2 = "show_loading_screen_v2"
export const EMBED_QUERY_PARAM_VALUES = [
  EMBED_SHOW_COLORED_LINE,
  EMBED_SHOW_TOOLBAR,
  EMBED_SHOW_PADDING,
  EMBED_DISABLE_SCROLLING,
  EMBED_LIGHT_THEME,
  EMBED_DARK_THEME,
  EMBED_HIDE_LOADING_SCREEN,
  EMBED_SHOW_LOADING_SCREEN_V1,
  EMBED_SHOW_LOADING_SCREEN_V2,
  EMBED_TRUE,
]

export enum LoadingScreenType {
  NONE,
  V1,
  V2,
}

/**
 * Returns list of defined in EMBED_QUERY_PARAM_VALUES url params of given key
 * (EMBED_QUERY_PARAM_KEY, EMBED_OPTIONS_QUERY_PARAM_KEY). Is case insensitive.
 */
export function getEmbedUrlParams(embedKey: string): Set<string> {
  const embedUrlParams = new Set<string>()
  const urlParams = new URLSearchParams(window.location.search)
  urlParams.forEach((paramValue, paramKey) => {
    paramKey = paramKey.toString().toLowerCase()
    paramValue = paramValue.toString().toLowerCase()
    if (
      paramKey === embedKey &&
      EMBED_QUERY_PARAM_VALUES.includes(paramValue)
    ) {
      embedUrlParams.add(paramValue)
    }
  })
  return embedUrlParams
}

/**
 * Returns "embed" and "embed_options" query param options in the url. Returns empty string if not embedded.
 * Example:
 *  returns "embed=true&embed_options=show_loading_screen_v2" if the url is
 *  http://localhost:3000/test?embed=true&embed_options=show_loading_screen_v2
 */
export function preserveEmbedQueryParams(): string {
  if (!isEmbed()) {
    return ""
  }

  const embedOptionsValues = new URLSearchParams(
    window.location.search
  ).getAll(EMBED_OPTIONS_QUERY_PARAM_KEY)

  // instantiate multiple key values with an array of string pairs
  // https://stackoverflow.com/questions/72571132/urlsearchparams-with-multiple-values
  const embedUrlMap: string[][] = []
  embedUrlMap.push([EMBED_QUERY_PARAM_KEY, EMBED_TRUE])
  embedOptionsValues.forEach((embedValue: string) => {
    embedUrlMap.push([EMBED_OPTIONS_QUERY_PARAM_KEY, embedValue])
  })
  return new URLSearchParams(embedUrlMap).toString()
}

/**
 * Returns true if the URL parameters contain ?embed=true (case insensitive).
 */
export function isEmbed(): boolean {
  return getEmbedUrlParams(EMBED_QUERY_PARAM_KEY).has(EMBED_TRUE)
}

/**
 * Returns true if the URL parameters contain ?embed=true&embed_options=show_colored_line (case insensitive).
 */
export function isColoredLineDisplayed(): boolean {
  return (
    isEmbed() &&
    getEmbedUrlParams(EMBED_OPTIONS_QUERY_PARAM_KEY).has(
      EMBED_SHOW_COLORED_LINE
    )
  )
}

/**
 * Returns true if the URL parameters contain ?embed=true&embed_options=show_toolbar (case insensitive).
 */
export function isToolbarDisplayed(): boolean {
  return (
    isEmbed() &&
    getEmbedUrlParams(EMBED_OPTIONS_QUERY_PARAM_KEY).has(EMBED_SHOW_TOOLBAR)
  )
}

/**
 * Returns true if the URL parameters contain ?embed=true&embed_options=disable_scrolling (case insensitive).
 */
export function isScrollingHidden(): boolean {
  return (
    isEmbed() &&
    getEmbedUrlParams(EMBED_OPTIONS_QUERY_PARAM_KEY).has(
      EMBED_DISABLE_SCROLLING
    )
  )
}

/**
 * Returns true if the URL parameters contain ?embed=true&embed_options=show_padding (case insensitive).
 */
export function isPaddingDisplayed(): boolean {
  return (
    isEmbed() &&
    getEmbedUrlParams(EMBED_OPTIONS_QUERY_PARAM_KEY).has(EMBED_SHOW_PADDING)
  )
}

/**
 * Returns true if the URL parameters contain ?embed_options=light_theme (case insensitive).
 */
export function isLightThemeInQueryParams(): boolean {
  // NOTE: We don't check for ?embed=true here, because we want to allow display without any
  // other embed options (for example in our e2e tests).
  return getEmbedUrlParams(EMBED_OPTIONS_QUERY_PARAM_KEY).has(
    EMBED_LIGHT_THEME
  )
}

/**
 * Returns true if the URL parameters contain ?embed_options=dark_theme (case insensitive).
 */
export function isDarkThemeInQueryParams(): boolean {
  // NOTE: We don't check for ?embed=true here, because we want to allow display without any
  // other embed options (for example in our e2e tests).
  return getEmbedUrlParams(EMBED_OPTIONS_QUERY_PARAM_KEY).has(EMBED_DARK_THEME)
}

/**
 * Returns true if the parent parameter indicates that we're in an iframe.
 */
export function isInChildFrame(): boolean {
  return window.parent !== window
}

/**
 * Returns a string with the type of loading screen to use while the app is
 * waiting for the backend to send displayable protos.
 */
export function getLoadingScreenType(): LoadingScreenType {
  const params = getEmbedUrlParams(EMBED_OPTIONS_QUERY_PARAM_KEY)

  return params.has(EMBED_HIDE_LOADING_SCREEN)
    ? LoadingScreenType.NONE
    : params.has(EMBED_SHOW_LOADING_SCREEN_V1)
    ? LoadingScreenType.V1
    : LoadingScreenType.V2
}

/** Return an info Element protobuf with the given text. */
export function makeElementWithInfoText(text: string): Element {
  return new Element({
    alert: {
      body: text,
      format: AlertProto.Format.INFO,
    },
  })
}

/** Return an error Element protobuf with the given text. */
export function makeElementWithErrorText(text: string): Element {
  return new Element({
    alert: {
      body: text,
      format: AlertProto.Format.ERROR,
    },
  })
}

/** Return a special internal-only Element showing an app "skeleton". */
export function makeAppSkeletonElement(): Element {
  return new Element({
    skeleton: { style: SkeletonProto.SkeletonStyle.APP },
  })
}

/**
 * A helper function to hash a string using xxHash32 algorithm.
 * Seed used: 0xDEADBEEF
 */
export function hashString(s: string): string {
  return xxhash.h32(s, 0xdeadbeef).toString(16)
}

/**
 * Coerces a possibly-null value into a non-null value, throwing an error
 * if the value is null or undefined.
 */
export function requireNonNull<T>(obj: T | null | undefined): T {
  if (isNullOrUndefined(obj)) {
    throw new Error("value is null")
  }
  return obj
}

/**
 * A type predicate that is true if the given value is not undefined.
 */
export function notUndefined<T>(value: T | undefined): value is T {
  return value !== undefined
}

/**
 * A type predicate that is true if the given value is not null.
 */
export function notNull<T>(value: T | null): value is T {
  return notNullOrUndefined(value)
}

/**
 * A type predicate that is true if the given value is neither undefined
 * nor null.
 */
export function notNullOrUndefined<T>(
  value: T | null | undefined
): value is T {
  return <T>value !== null && <T>value !== undefined
}

/**
 * A type predicate that is true if the given value is either undefined
 * or null.
 */
export function isNullOrUndefined<T>(
  value: T | null | undefined
