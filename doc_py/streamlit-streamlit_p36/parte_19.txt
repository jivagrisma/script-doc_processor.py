
    test("uint64", () => {
      const mockElement = { data: UINT64 }
      const q = new Quiver(mockElement)
      const indexType = q.columnTypes.index[0]

      expect(getTypeName(indexType)).toEqual("uint64")
    })

    test("unicode", () => {
      const mockElement = { data: UNICODE }
      const q = new Quiver(mockElement)
      const indexType = q.columnTypes.index[0]

      expect(getTypeName(indexType)).toEqual("unicode")
    })
  })
})

describe("isIntegerType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "int16",
      },
      true,
    ],
    [
      {
        pandas_type: "range",
        numpy_type: "range",
      },
      true,
    ],
    [
      {
        pandas_type: "uint64",
        numpy_type: "uint64",
      },
      true,
    ],
    [
      {
        pandas_type: "unicode",
        numpy_type: "object",
      },
      false,
    ],
    [
      {
        pandas_type: "bool",
        numpy_type: "bool",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "int8",
      },
      false,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "interval[int64, both]",
      },
      false,
    ],
  ])(
    "interprets %s as integer type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isIntegerType(arrowType)).toEqual(expected)
    }
  )
})

describe("isUnsignedIntegerType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
    [
      {
        pandas_type: "uint64",
        numpy_type: "uint64",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "uint16",
      },
      true,
    ],
    [
      {
        pandas_type: "unicode",
        numpy_type: "object",
      },
      false,
    ],
    [
      {
        pandas_type: "bool",
        numpy_type: "bool",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "uint8",
      },
      false,
    ],
  ])(
    "interprets %s as unsigned integer type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isUnsignedIntegerType(arrowType)).toEqual(expected)
    }
  )
})

describe("isBooleanType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "bool",
        numpy_type: "bool",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "bool",
      },
      true,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "bool",
      },
      false,
    ],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      false,
    ],
  ])(
    "interprets %s as boolean type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isBooleanType(arrowType)).toEqual(expected)
    }
  )
})

describe("getTimezone", () => {
  it.each([
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
        meta: { timezone: "UTC" },
      },
      "UTC",
    ],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
        meta: { timezone: "America/New_York" },
      },
      "America/New_York",
    ],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
        meta: {},
      },
      undefined,
    ],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
      },
      undefined,
    ],
  ])(
    "returns correct timezone for %o",
    (arrowType: PandasColumnType, expected: string | undefined) => {
      expect(getTimezone(arrowType)).toEqual(expected)
    }
  )
})

describe("isFloatType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "float32",
      },
      true,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "bool",
        numpy_type: "bool",
      },
      false,
    ],
  ])(
    "interprets %s as float type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isFloatType(arrowType)).toEqual(expected)
    }
  )
})

describe("isDecimalType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "object",
        numpy_type: "decimal",
      },
      true,
    ],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "decimal",
      },
      false,
    ],
  ])(
    "interprets %s as decimal type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isDecimalType(arrowType)).toEqual(expected)
    }
  )
})

describe("isNumericType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      true,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "decimal",
      },
      true,
    ],
    [
      {
        pandas_type: "uint64",
        numpy_type: "uint64",
      },
      true,
    ],
    [
      {
        pandas_type: "bool",
        numpy_type: "bool",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "unicode",
        numpy_type: "object",
      },
      false,
    ],
  ])(
    "interprets %s as numeric type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isNumericType(arrowType)).toEqual(expected)
    }
  )
})

describe("convertVectorToList", () => {
  it("converts vector to list", () => {
    const vector = makeVector(Int32Array.from([1, 2, 3]))
    const expected = [1, 2, 3]
    expect(convertVectorToList(vector)).toEqual(expected)
  })
})

describe("isDurationType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "object",
        numpy_type: "timedelta64[ns]",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "timedelta64[s]",
      },
      true,
    ],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "timedelta64[ns]",
      },
      false,
    ],
  ])(
    "interprets %s as duration type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isDurationType(arrowType)).toEqual(expected)
    }
  )
})

describe("isPeriodType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "object",
        numpy_type: "period[Y-DEC]",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "period[M]",
      },
      true,
    ],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "period[Y]",
      },
      false,
    ],
  ])(
    "interprets %s as period type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isPeriodType(arrowType)).toEqual(expected)
    }
  )
})

describe("isDatetimeType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "datetime64[s]",
      },
      true,
    ],
    [
      {
        pandas_type: "float64",
        numpy_type: "float64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "datetime64[ns]",
      },
      false,
    ],
  ])(
    "interprets %s as datetime type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isDatetimeType(arrowType)).toEqual(expected)
    }
  )
})

describe("isDateType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "date",
        numpy_type: "date",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "date",
      },
      true,
    ],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "date",
      },
      false,
    ],
  ])(
    "interprets %s as date type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isDateType(arrowType)).toEqual(expected)
    }
  )
})

describe("isTimeType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "time",
        numpy_type: "time",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "time",
      },
      true,
    ],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "time",
      },
      false,
    ],
  ])(
    "interprets %s as time type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isTimeType(arrowType)).toEqual(expected)
    }
  )
})

describe("isCategoricalType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "categorical",
        numpy_type: "category",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "categorical",
      },
      true,
    ],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
      },
      false,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
  ])(
    "interprets %s as categorical type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isCategoricalType(arrowType)).toEqual(expected)
    }
  )
})

describe("isListType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "object",
        numpy_type: "list[int64]",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "list[str]",
      },
      true,
    ],
    [
      {
        pandas_type: "datetime",
        numpy_type: "datetime64[ns]",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "list[int64]",
      },
      false,
    ],
  ])(
    "interprets %s as list type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isListType(arrowType)).toEqual(expected)
    }
  )
})

describe("isObjectType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "object",
        numpy_type: "object",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "dict",
      },
      false,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "object",
      },
      false,
    ],
  ])(
    "interprets %s as object type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isObjectType(arrowType)).toEqual(expected)
    }
  )
})

describe("isBytesType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "bytes",
        numpy_type: "bytes",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "bytes",
      },
      true,
    ],
    [
      {
        pandas_type: "unicode",
        numpy_type: "object",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "bytes",
      },
      false,
    ],
  ])(
    "interprets %s as bytes type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isBytesType(arrowType)).toEqual(expected)
    }
  )
})

describe("isStringType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "unicode",
        numpy_type: "object",
      },
      true,
    ],
    [
      {
        pandas_type: "large_string[pyarrow]",
        numpy_type: "object",
      },
      true,
    ],
    [
      {
        pandas_type: "string",
        numpy_type: "object",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "unicode",
      },
      false,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "object",
      },
      false,
    ],
  ])(
    "interprets %s as string type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isStringType(arrowType)).toEqual(expected)
    }
  )
})

describe("isEmptyType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "empty",
        numpy_type: "object",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "empty",
      },
      true,
    ],
    [
      {
        pandas_type: "null",
        numpy_type: "object",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "empty",
      },
      false,
    ],
  ])(
    "interprets %s as empty type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isEmptyType(arrowType)).toEqual(expected)
    }
  )
})

describe("isIntervalType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "object",
        numpy_type: "interval[datetime64[ns], right]",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "interval[int64, both]",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "interval[float64, left]",
      },
      true,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "interval[int64, right]",
      },
      false,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
  ])(
    "interprets %s as interval type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isIntervalType(arrowType)).toEqual(expected)
    }
  )
})

describe("isRangeIndexType", () => {
  it.each([
    [undefined, false],
    [
      {
        pandas_type: "range",
        numpy_type: "range",
      },
      true,
    ],
    [
      {
        pandas_type: "object",
        numpy_type: "range",
      },
      true,
    ],
    [
      {
        pandas_type: "int64",
        numpy_type: "int64",
      },
      false,
    ],
    [
      {
        pandas_type: "categorical",
        numpy_type: "range",
      },
      false,
    ],
  ])(
    "interprets %s as range index type: %s",
    (arrowType: PandasColumnType | undefined, expected: boolean) => {
      expect(isRangeIndexType(arrowType)).toEqual(expected)
    }
  )
})


================================================
File: /frontend/lib/src/dataframes/arrowTypeUtils.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Dictionary, Struct, StructRow, Vector } from "apache-arrow"

import { isNullOrUndefined } from "@streamlit/lib/src/util/utils"

/** Data types used by ArrowJS. */
export type DataType =
  | null
  | boolean
  | number
  | string
  | Date // datetime
  | Int32Array // int
  | Uint8Array // bytes
  | Uint32Array // Decimal
  | Vector // arrays
  | StructRow // interval
  | Dictionary // categorical
  | Struct // dict
  | bigint // period

/** The name we use for range index columns.  We have to set the name ourselves since range
 * indices are not included in the data or the arrow schema.
 */
export const PandasRangeIndexType = "range"

/** Pandas type information for single-index columns, and data columns. */
export interface PandasColumnType {
  /** The type label returned by pandas.api.types.infer_dtype */
  pandas_type: string

  /** The numpy dtype that corresponds to the types returned in df.dtypes */
  numpy_type: string

  /** Type metadata. */
  meta?: Record<string, any> | null
}

/** Metadata for the "range" index type. */
export interface PandasRangeIndex {
  kind: "range"
  name: string | null
  start: number
  step: number
  stop: number
}

/**
 * Converts an Arrow vector to a list of strings.
 *
 * @param vector The Arrow vector to convert.
 * @returns The list of strings.
 */
export function convertVectorToList(vector: Vector<any>): string[] {
  const values = []

  for (let i = 0; i < vector.length; i++) {
    values.push(vector.get(i))
  }
  return values
}

/** Returns type for a single-index column or data column. */
export function getTypeName(type: PandasColumnType): string {
  // For `PeriodType` and `IntervalType` types are kept in `numpy_type`,
  // for the rest of the indexes in `pandas_type`.
  return type.pandas_type === "object" ? type.numpy_type : type.pandas_type
}

/** Returns the timezone of the arrow type metadata. */
export function getTimezone(arrowType: PandasColumnType): string | undefined {
  // TODO(lukasmasuch): Use info from field instead:
  // return arrowType?.field?.type?.timezone
  return arrowType?.meta?.timezone
}

/** True if the arrow type is an integer type.
 * For example: int8, int16, int32, int64, uint8, uint16, uint32, uint64, range
 */
export function isIntegerType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  const typeName = getTypeName(type) ?? ""
  return (
    (typeName.startsWith("int") && !isIntervalType(type)) ||
    isRangeIndexType(type) ||
    isUnsignedIntegerType(type)
  )
}

/** True if the arrow type is an unsigned integer type. */
export function isUnsignedIntegerType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type)?.startsWith("uint")
}

/** True if the arrow type is a float type.
 * For example: float16, float32, float64, float96, float128
 */
export function isFloatType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type)?.startsWith("float")
}

/** True if the arrow type is a decimal type. */
export function isDecimalType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "decimal"
}

/** True if the arrow type is a numeric type. */
export function isNumericType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return isIntegerType(type) || isFloatType(type) || isDecimalType(type)
}

/** True if the arrow type is a boolean type. */
export function isBooleanType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "bool"
}

/** True if the arrow type is a duration type. */
export function isDurationType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type)?.startsWith("timedelta")
}

/** True if the arrow type is a period type. */
export function isPeriodType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type)?.startsWith("period")
}

/** True if the arrow type is a datetime type. */
export function isDatetimeType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type)?.startsWith("datetime")
}

/** True if the arrow type is a date type. */
export function isDateType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "date"
}

/** True if the arrow type is a time type. */
export function isTimeType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "time"
}

/** True if the arrow type is a categorical type. */
export function isCategoricalType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "categorical"
}

/** True if the arrow type is a list type. */
export function isListType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type)?.startsWith("list")
}

/** True if the arrow type is an object type. */
export function isObjectType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "object"
}

/** True if the arrow type is a bytes type. */
export function isBytesType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "bytes"
}

/** True if the arrow type is a string type. */
export function isStringType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return ["unicode", "large_string[pyarrow]"].includes(getTypeName(type))
}

/** True if the arrow type is an empty type. */
export function isEmptyType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === "empty"
}

/** True if the arrow type is a interval type. */
export function isIntervalType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type)?.startsWith("interval")
}

/** True if the arrow type is a range index type. */
export function isRangeIndexType(type?: PandasColumnType): boolean {
  if (isNullOrUndefined(type)) {
    return false
  }
  return getTypeName(type) === PandasRangeIndexType
}


================================================
File: /frontend/lib/src/dataframes/__snapshots__/Quiver.test.ts.snap
================================================
// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Quiver > Add rows > Special cases > throws an error if DataFrames have different data types 1`] = `
[Error: 
Unsupported operation. The data passed into \`add_rows()\` must have the same
index signature as the original data.

In this case, \`add_rows()\` received \`["int64"]\`
but was expecting \`["unicode"]\`.
]
`;

exports[`Quiver > Add rows > Special cases > throws an error if DataFrames have different index types 1`] = `
[Error: 
Unsupported operation. The data passed into \`add_rows()\` must have the same
index signature as the original data.

In this case, \`add_rows()\` received \`["range"]\`
but was expecting \`["unicode"]\`.
]
`;

exports[`Quiver > Add rows > Special cases > throws an error if df1 has more columns than df2 1`] = `
[Error: 
Unsupported operation. The data passed into \`add_rows()\` must have the same
data signature as the original data.

In this case, \`add_rows()\` received \`["unicode"]\`
but was expecting \`["unicode","unicode"]\`.
]
`;

exports[`Quiver > Add rows > Special cases > throws an error if one of the DataFrames has Styler 1`] = `
[Error: 
Unsupported operation. \`add_rows()\` does not support Pandas Styler objects.

If you do not need the Styler's styles, try passing the \`.data\` attribute of
the Styler object instead to concatenate just the underlying dataframe.

For example:
\`\`\`
st.add_rows(my_styler.data)
\`\`\`
]
`;

exports[`Quiver > Add rows > Special cases > throws an error if one of the DataFrames has Styler 2`] = `
[Error: 
Unsupported operation. \`add_rows()\` does not support Pandas Styler objects.

If you do not need the Styler's styles, try passing the \`.data\` attribute of
the Styler object instead to concatenate just the underlying dataframe.

For example:
\`\`\`
st.add_rows(my_styler.data)
\`\`\`
]
`;


================================================
File: /frontend/lib/src/hooks/useBasicWidgetState.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  Dispatch,
  SetStateAction,
  useCallback,
  useEffect,
  useState,
} from "react"

import {
  Source,
  WidgetStateManager,
} from "@streamlit/lib/src/WidgetStateManager"
import { useFormClearHelper } from "@streamlit/lib/src/components/widgets/Form"
import { isNullOrUndefined } from "@streamlit/lib/src/util/utils"

export type ValueWithSource<T> = {
  value: T
} & Source

// Interface for a proto that has a .formId
interface ValueElementProtoInterface {
  formId: string
}

interface BaseArgs<
  T, // Type of the value stored in WidgetStateManager.
  P extends ValueElementProtoInterface // Proto for this widget.
> {
  // Important: these callback functions need to have stable references! So
  // either declare them at the module level or wrap in useCallback.
  getStateFromWidgetMgr: (wm: WidgetStateManager, el: P) => T | undefined
  updateWidgetMgrState: (
    el: P,
    wm: WidgetStateManager,
    vws: ValueWithSource<T>,
    fragmentId?: string
  ) => void
  element: P
  widgetMgr: WidgetStateManager
  fragmentId?: string
  onFormCleared?: () => void
}

export interface UseBasicWidgetClientStateArgs<
  T, // Type of the value stored in WidgetStateManager.
  P extends ValueElementProtoInterface // Proto for this widget.
> extends BaseArgs<T, P> {
  // Important: these callback functions need to have stable references! So
  // either declare them at the module level or wrap in useCallback.
  getDefaultState: (wm: WidgetStateManager, el: P) => T
}

/**
 * A React hook that makes the simplest kinds of widgets very easy to implement.
 * Use the clientState version when the widget does not have a .setValue on its
 * proto, otherwise utilize `useBasicWidgetState`.
 */
export function useBasicWidgetClientState<
  T, // Type of the value stored in WidgetStateManager.
  P extends ValueElementProtoInterface // Proto for this widget.
>({
  getStateFromWidgetMgr,
  getDefaultState,
  updateWidgetMgrState,
  element,
  widgetMgr,
  fragmentId,
  onFormCleared,
}: UseBasicWidgetClientStateArgs<T, P>): [
  T,
  Dispatch<SetStateAction<ValueWithSource<T> | null>>
] {
  const [currentValue, setCurrentValue] = useState<T>(() => {
    // If WidgetStateManager knew a value for this widget, initialize to that.
    // Otherwise, use the default value.
    return (
      getStateFromWidgetMgr(widgetMgr, element) ??
      getDefaultState(widgetMgr, element)
    )
  })

  // This acts as an "event":
  // - It's null most of the time
  // - It only has a value the moment when the user calls setValue (internally
  //   called setNextValueWithSource). And then it's immediately set to null
  //   internally.
  const [nextValueWithSource, setNextValueWithSource] =
    useState<ValueWithSource<T> | null>({
      value: currentValue,
      fromUi: false,
    })

  // When someone calls setNextValueWithSource, update internal state and tell
  // widget manager to update its state too.
  useEffect(() => {
    if (isNullOrUndefined(nextValueWithSource)) return
    setNextValueWithSource(null) // Clear "event".

    setCurrentValue(nextValueWithSource.value)
    updateWidgetMgrState(element, widgetMgr, nextValueWithSource, fragmentId)
  }, [
    nextValueWithSource,
    updateWidgetMgrState,
    element,
    widgetMgr,
    fragmentId,
  ])

  /**
   * If we're part of a clear_on_submit form, this will be called when our
   * form is submitted. Restore our default value and update the WidgetManager.
   */
  const handleFormCleared = useCallback((): void => {
    setNextValueWithSource({
      value: getDefaultState(widgetMgr, element),
      fromUi: true,
    })
    onFormCleared?.()
  }, [
    setNextValueWithSource,
    element,
    getDefaultState,
    widgetMgr,
    onFormCleared,
  ])

  // Manage our form-clear event handler.
  useFormClearHelper({ widgetMgr, element, onFormCleared: handleFormCleared })

  return [currentValue, setNextValueWithSource]
}

// Interface for a proto that has a setValue, and .formId
interface ValueElementProtoInterfaceWithSetValue
  extends ValueElementProtoInterface {
  setValue: boolean
}

export interface UseBasicWidgetStateArgs<
  T, // Type of the value stored in WidgetStateManager.
  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.
> extends BaseArgs<T, P> {
  // Important: these callback functions need to have stable references! So
  // either declare them at the module level or wrap in useCallback.
  getDefaultStateFromProto: (el: P) => T
  getCurrStateFromProto: (el: P) => T
}

/**
 * A React hook that makes the simplest kinds of widgets very easy to implement.
 */
export function useBasicWidgetState<
  T, // Type of the value stored in WidgetStateManager.
  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.
>({
  getStateFromWidgetMgr,
  getDefaultStateFromProto,
  getCurrStateFromProto,
  updateWidgetMgrState,
  element,
  widgetMgr,
  fragmentId,
  onFormCleared,
}: UseBasicWidgetStateArgs<T, P>): [
  T,
  Dispatch<SetStateAction<ValueWithSource<T> | null>>
] {
  const getDefaultState = useCallback<(wm: WidgetStateManager, el: P) => T>(
    (wm, el) => {
      return getDefaultStateFromProto(el)
    },
    [getDefaultStateFromProto]
  )

  const [currentValue, setNextValueWithSource] = useBasicWidgetClientState({
    getStateFromWidgetMgr,
    getDefaultState,
    updateWidgetMgrState,
    element,
    widgetMgr,
    fragmentId,
    onFormCleared,
  })

  // Respond to value changes via session_state. This is also set via an
  // "event", this time using the .setValue property of the proto.
  useEffect(() => {
    if (!element.setValue) return
    // TODO: Update to match React best practices
    // eslint-disable-next-line react-compiler/react-compiler
    element.setValue = false // Clear "event".

    setNextValueWithSource({
      value: getCurrStateFromProto(element),
      fromUi: false,
    })
  }, [element, getCurrStateFromProto, setNextValueWithSource])

  return [currentValue, setNextValueWithSource]
}


================================================
File: /frontend/lib/src/hooks/useDebouncedCallback.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { renderHook } from "@testing-library/react-hooks"

import { useDebouncedCallback } from "./useDebouncedCallback"

describe("useDebouncedCallback hook", () => {
  beforeEach(() => {
    vi.useFakeTimers()
  })

  afterEach(() => {
    vi.useRealTimers()
  })

  it("should call callback after delay", () => {
    const callback = vi.fn()
    const delay = 100

    const { result } = renderHook(() => useDebouncedCallback(callback, delay))
    const { debouncedCallback } = result.current

    debouncedCallback("test")
    expect(callback).not.toHaveBeenCalled()

    vi.advanceTimersByTime(delay)
    expect(callback).toHaveBeenCalledWith("test")
  })

  it("should debounce multiple calls", () => {
    const callback = vi.fn()
    const delay = 100

    const { result } = renderHook(() => useDebouncedCallback(callback, delay))
    const { debouncedCallback } = result.current

    debouncedCallback("test1")
    debouncedCallback("test2")
    debouncedCallback("test3")

    expect(callback).not.toHaveBeenCalled()

    vi.advanceTimersByTime(delay)
    expect(callback).toHaveBeenCalledTimes(1)
    expect(callback).toHaveBeenCalledWith("test3")
  })

  it("should cancel pending callback when cancel is called", () => {
    const callback = vi.fn()
    const delay = 100

    const { result } = renderHook(() => useDebouncedCallback(callback, delay))
    const { debouncedCallback, cancel } = result.current

    debouncedCallback("test")
    cancel()

    vi.advanceTimersByTime(delay)
    expect(callback).not.toHaveBeenCalled()
  })

  it("should handle multiple arguments correctly", () => {
    const callback = vi.fn()
    const delay = 100

    const { result } = renderHook(() => useDebouncedCallback(callback, delay))
    const { debouncedCallback } = result.current

    debouncedCallback("arg1", 123, { test: true })

    vi.advanceTimersByTime(delay)
    expect(callback).toHaveBeenCalledWith("arg1", 123, { test: true })
  })

  it("should cleanup timeout on unmount", () => {
    const callback = vi.fn()
    const delay = 100

    const { result, unmount } = renderHook(() =>
      useDebouncedCallback(callback, delay)
    )
    const { debouncedCallback } = result.current

    debouncedCallback("test")
    unmount()

    vi.advanceTimersByTime(delay)
    expect(callback).not.toHaveBeenCalled()
  })
})


================================================
File: /frontend/lib/src/hooks/useDebouncedCallback.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useCallback, useEffect, useRef } from "react"

/**
 * Interface for the return value of the useDebouncedCallback hook.
 */
interface UseDebouncedCallbackReturn<A extends unknown[]> {
  /**
   * The debounced callback function.
   */
  debouncedCallback: (...args: A) => void
  /**
   * A function to cancel any pending invocation of the debounced callback.
   */
  cancel: () => void
}

/**
 * A custom hook that provides a debounced callback function and a cancel function.
 *
 * The debounced callback will only execute after a specified delay has passed
 * since the last time it was invoked. This can be useful for preventing
 * expensive operations from being called too frequently, such as API calls
 * triggered by user input.
 *
 * The cancel function can be used to cancel any pending invocation of the
 * debounced callback.
 *
 * @param {function} callback - The function to be debounced.
 * @param {number} delay - The delay in milliseconds.
 * @returns {UseDebouncedCallbackReturn<A>} An object containing the debounced callback function and the cancel function.
 *
 * @example
 * const { debouncedCallback, cancel } = useDebouncedCallback(
 *   (value) => console.log('Debounced value:', value),
 *   500
 * );
 *
 * // Call the debounced function:
 * debouncedCallback('some value');
 *
 * // Cancel any pending invocation:
 * cancel();
 */
export function useDebouncedCallback<A extends unknown[]>(
  callback: (...args: A) => void,
  delay: number
): UseDebouncedCallbackReturn<A> {
  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)
  const argsRef = useRef<A>()

  const cancel = useCallback((): void => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
      timeoutRef.current = null
    }
  }, [])

  // Clear all timeouts when the component unmounts
  useEffect(() => cancel, [cancel])

  const debouncedCallback = useCallback(
    (...args: A) => {
      argsRef.current = args

      cancel()

      timeoutRef.current = setTimeout(() => {
        if (argsRef.current) {
          callback(...argsRef.current)
          argsRef.current = undefined
        }
      }, delay)
    },
    [callback, delay, cancel]
  )

  return {
    debouncedCallback,
    cancel,
  }
}


================================================
File: /frontend/lib/src/hooks/useDownloadUrl.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { useCallback } from "react"

import { LibContext } from "@streamlit/lib/src/components/core/LibContext"
import createDownloadLinkElement from "@streamlit/lib/src/util/createDownloadLinkElement"

const useDownloadUrl = (
  url: string | null,
  filename: string
): (() => void) => {
  const {
    libConfig: { enforceDownloadInNewTab = false }, // Default to false, if no libConfig, e.g. for tests
  } = React.useContext(LibContext)

  const downloadUrl = useCallback(() => {
    if (!url) return

    const link = createDownloadLinkElement({
      enforceDownloadInNewTab,
      url,
      filename,
    })

    link.style.display = "none"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }, [url, enforceDownloadInNewTab, filename])

  return downloadUrl
}

export default useDownloadUrl


================================================
File: /frontend/lib/src/hooks/useOnInputChange.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { waitFor } from "@testing-library/react"
import { renderHook } from "@testing-library/react-hooks"

import useOnInPutChange from "./useOnInputChange"

describe("useOnInputChange", () => {
  it("should call the setDirty, setUiValue, setValueWithSource callbacks because its in a form", async () => {
    const setDirtyCallback = vi.fn()
    const setUiValueCallback = vi.fn()
    const setValueWithSource = vi.fn()

    const { result: onInputChange } = renderHook(() =>
      useOnInPutChange({
        formId: "someFormId",
        maxChars: 0,
        setDirty: setDirtyCallback,
        setUiValue: setUiValueCallback,
        setValueWithSource,
      })
    )

    onInputChange.current({ target: { value: "someValue" } })

    await waitFor(() => {
      expect(setDirtyCallback).toHaveBeenCalledWith(true)
    })
    await waitFor(() => {
      expect(setUiValueCallback).toHaveBeenCalledWith("someValue")
    })
    await waitFor(() => {
      expect(setValueWithSource).toHaveBeenCalledWith({
        value: "someValue",
        fromUi: true,
      })
    })
  })
  it("should not call the setValueWithSource callback because it is not in a form", async () => {
    const setDirtyCallback = vi.fn()
    const setUiValueCallback = vi.fn()
    const setValueWithSource = vi.fn()

    const { result: onInputChange } = renderHook(() =>
      useOnInPutChange({
        formId: undefined,
        maxChars: 0,
        setDirty: setDirtyCallback,
        setUiValue: setUiValueCallback,
        setValueWithSource,
      })
    )

    onInputChange.current({ target: { value: "someValue" } })

    await waitFor(() => {
      expect(setDirtyCallback).toHaveBeenCalledWith(true)
    })
    await waitFor(() => {
      expect(setUiValueCallback).toHaveBeenCalledWith("someValue")
    })
    await waitFor(() => {
      expect(setValueWithSource).not.toHaveBeenCalled()
    })
  })

  it("should not call any callbacks if value exceeds maxChars", async () => {
    const setDirtyCallback = vi.fn()
    const setUiValueCallback = vi.fn()
    const setValueWithSource = vi.fn()

    const { result: onInputChange } = renderHook(() =>
      useOnInPutChange({
        formId: undefined,
        maxChars: 1,
        setDirty: setDirtyCallback,
        setUiValue: setUiValueCallback,
        setValueWithSource,
      })
    )

    onInputChange.current({ target: { value: "someValue" } })

    await waitFor(() => {
      expect(setDirtyCallback).not.toHaveBeenCalled()
    })
    await waitFor(() => {
      expect(setUiValueCallback).not.toHaveBeenCalled()
    })
    await waitFor(() => {
      expect(setValueWithSource).not.toHaveBeenCalled()
    })
  })
})


================================================
File: /frontend/lib/src/hooks/useOnInputChange.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Dispatch, SetStateAction, useCallback } from "react"

import { isInForm } from "@streamlit/lib/src/util/utils"
import { ValueWithSource } from "@streamlit/lib/src/hooks/useBasicWidgetState"

type OnInputChangeEventType = {
  target: {
    value: HTMLInputElement["value"]
  }
}

interface OnInputChangeProps {
  formId: string | undefined
  maxChars: number
  setDirty: (dirty: boolean) => void
  setUiValue: (value: string) => void
  setValueWithSource: Dispatch<
    SetStateAction<ValueWithSource<string | null> | null>
  >
}

/**
 * Will return a memoized function that accepts an HTMLInputElement and will call
 * commitWidgetValue and setDirty with its value, unless the value is longer than
 * maxChars. Will also call the setValueWithSource callback if the input is in a form.
 *
 * @param formId if is in a form
 * @param maxChars if the input element's value length is greater than this, nothing will be called. Set to 0 to disable.
 * @param setDirty calls setDirty with true
 * @param setUiValue calls setUiValue with the input element's value
 * @param setValueWithSource calls setValueWithSource with the input element's value
 * @return memoized callback
 */
export default function useOnInputChange({
  formId,
  maxChars,
  setDirty,
  setUiValue,
  setValueWithSource,
}: OnInputChangeProps): (e: OnInputChangeEventType) => void {
  return useCallback(
    (e: OnInputChangeEventType): void => {
      const { value: newValue } = e.target

      if (maxChars !== 0 && newValue.length > maxChars) {
        return
      }

      setDirty(true)
      setUiValue(newValue)

      // We immediately update its widgetValue on text changes in forms
      // see here for why: https://github.com/streamlit/streamlit/issues/7101
      // The widgetValue won't be passed to the Python script until the form
      // is submitted, so this won't cause the script to re-run.
      if (isInForm({ formId })) {
        // Make sure dirty is true so that enter to submit form text shows
        setValueWithSource({ value: newValue, fromUi: true })
      }
      // If the TextInput is *not* part of a form, we mark it dirty but don't
      // update its value in the WidgetMgr. This means that individual keypresses
      // won't trigger a script re-run.
    },
    [formId, maxChars, setDirty, setUiValue, setValueWithSource]
  )
}


================================================
File: /frontend/lib/src/hooks/useRequiredContext.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Context, useContext } from "react"

export const useRequiredContext = <R,>(context: Context<R | null>): R => {
  const foundContext = useContext(context)

  if (foundContext === null || foundContext === undefined) {
    throw new Error(
      `useRequiredContext: ${context.displayName ?? "context"} not found`
    )
  }

  return foundContext
}


================================================
File: /frontend/lib/src/hooks/useScrollAnimation.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { renderHook } from "@testing-library/react-hooks"

import useScrollAnimation from "./useScrollAnimation"

describe("useScrollAnimation", () => {
  let targetElement: HTMLElement
  let onEndMock: () => void
  let scrollHeight: number
  let offsetHeight: number

  beforeEach(() => {
    targetElement = document.createElement("div")
    targetElement.scrollTop = 0
    scrollHeight = 200
    offsetHeight = 100
    Object.defineProperty(targetElement, "scrollHeight", {
      set: value => (scrollHeight = value),
      get: () => scrollHeight,
    })
    Object.defineProperty(targetElement, "offsetHeight", {
      set: value => (offsetHeight = value),
      get: () => offsetHeight,
    })
    targetElement.addEventListener = vi.fn()
    targetElement.removeEventListener = vi.fn()
    onEndMock = vi.fn()
  })

  afterEach(() => {
    vi.clearAllMocks()
  })

  it("should animate scroll", () => {
    vi.useFakeTimers()

    renderHook(() => useScrollAnimation(targetElement, onEndMock, true))

    // Simulate scroll animation
    vi.advanceTimersByTime(5)
    // Trigger the callback of requestAnimationFrame
    vi.runOnlyPendingTimers()

    // Assert the updated scrollTop value
    expect(targetElement.scrollTop).toBeGreaterThan(0)

    // Simulate reaching the end of animation
    vi.advanceTimersByTime(100)
    // Trigger the callback of requestAnimationFrame
    vi.runOnlyPendingTimers()

    // Assert that onEnd callback is called
    expect(onEndMock).toHaveBeenCalled()
  })

  it("should register and deregister the correct events", () => {
    vi.useFakeTimers()

    const { unmount } = renderHook(() =>
      useScrollAnimation(targetElement, onEndMock, true)
    )

    expect(targetElement.addEventListener).toHaveBeenCalledTimes(2)
    expect(targetElement.addEventListener).toHaveBeenCalledWith(
      "pointerdown",
      expect.any(Function),
      { passive: true }
    )
    expect(targetElement.addEventListener).toHaveBeenCalledWith(
      "wheel",
      expect.any(Function),
      { passive: true }
    )

    unmount()

    // Cleanup
    expect(targetElement.removeEventListener).toHaveBeenCalledTimes(2)
    expect(targetElement.removeEventListener).toHaveBeenCalledWith(
      "pointerdown",
      expect.any(Function)
    )
    expect(targetElement.removeEventListener).toHaveBeenCalledWith(
      "wheel",
      expect.any(Function)
    )
  })

  it("should not animate scroll if target element is null", () => {
    renderHook(() => useScrollAnimation(null, onEndMock, true))

    expect(targetElement.addEventListener).not.toHaveBeenCalled()
  })

  it("should not animate scroll if isAnimating is false", () => {
    renderHook(() => useScrollAnimation(targetElement, onEndMock, false))

    expect(targetElement.addEventListener).not.toHaveBeenCalled()
  })
})


================================================
File: /frontend/lib/src/hooks/useScrollAnimation.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useCallback, useLayoutEffect, useRef } from "react"

/**
 * Computes next step in a square-root based animation sequence. Step size is
 * square root of absolute difference between current and target values. Can be
 * used as a stepper function for other higher-level stepping functions.
 *
 * @param {number} current - Current value in animation sequence.
 * @param {number} to - Target value of animation sequence.
 * @returns {number} Next value in animation sequence.
 */
function squareStepper(current: number, to: number): number {
  const sign = Math.sign(to - current)
  const step = Math.sqrt(Math.abs(to - current))
  const next = current + step * sign

  if (sign > 0) {
    return Math.min(to, next)
  }

  return Math.max(to, next)
}

/**
 * Computes sequence of steps in animation by repeatedly applying a stepper
 * function.
 *
 * @param {number} from - Initial value in animation sequence.
 * @param {number} to - Target value of animation sequence.
 * @param {function} stepper - Function computing next value given current
 *                             and target values.
 * @param {number} index - Number of steps to compute.
 * @returns {number} Value at given index in animation sequence.
 */
function step(
  from: number,
  to: number,
  stepper: (x: number, y: number) => number,
  index: number
): number {
  let next = from

  for (let i = 0; i < index; i++) {
    next = stepper(next, to)
  }

  return next
}

/**
 * Handles scroll animation for a given target HTMLElement. Uses a square-root
 * based stepping function to compute scroll animation. Stops animation if
 * target's scrollTop has reached scrollHeight or if user interacts with target
 * (mousedown or mousewheel). Can also be cancelled by caller.
 *
 * @export
 * @param {HTMLElement | null} target - HTML element to animate scroll of. If
 *                                      null, no animation is performed.
 * @param {() => void} onEnd - Callback when animation ends or is cancelled.
 * @param {boolean} isAnimating - Boolean to start or stop animation. If false,
 *                                no animation is performed.
 * @returns {void}
 */
export default function useScrollAnimation(
  target: HTMLElement | null,
  onEnd: () => void,
  isAnimating: boolean
): void {
  const animator = useRef(0)

  const animate = useCallback(
    (from: number, index: number, start = Date.now()) => {
      cancelAnimationFrame(animator.current)

      animator.current = requestAnimationFrame(() => {
        if (target) {
          const toNumber = target.scrollHeight - target.offsetHeight
          let nextValue = step(
            from,
            toNumber,
            squareStepper,
            (Date.now() - start) / 5
          )

          if (Math.abs(toNumber - nextValue) < 1.5) {
            nextValue = toNumber
          }

          // TODO: Update to match React best practices
          // eslint-disable-next-line react-compiler/react-compiler
          target.scrollTop = nextValue

          if (toNumber === nextValue) {
            onEnd()
          } else {
            animate(from, index + 1, start)
          }
        }
      })
    },
    [animator, onEnd, target]
  )

  const handleCancelAnimation = useCallback(() => {
    cancelAnimationFrame(animator.current)
    onEnd()
  }, [onEnd])

  useLayoutEffect(() => {
    if (!target || !isAnimating) {
      return
    }
    animate(target.scrollTop, 1)

    if (target) {
      target.addEventListener("pointerdown", handleCancelAnimation, {
        passive: true,
      })
      target.addEventListener("wheel", handleCancelAnimation, {
        passive: true,
      })

      return () => {
        target.removeEventListener("pointerdown", handleCancelAnimation)
        target.removeEventListener("wheel", handleCancelAnimation)
        cancelAnimationFrame(animator.current)
      }
    }

    return () => cancelAnimationFrame(animator.current)
  }, [animate, animator, handleCancelAnimation, target, isAnimating])
}


================================================
File: /frontend/lib/src/hooks/useScrollSpy.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { act, renderHook } from "@testing-library/react-hooks"

import useScrollSpy, { debounce } from "./useScrollSpy"

describe("debounce function", () => {
  beforeEach(() => {
    vi.useFakeTimers()
  })
  it("should call the function immediately when no delay is provided", () => {
    const fn = vi.fn()
    const debouncedFn = debounce(fn, 0)

    debouncedFn("arg1", "arg2")

    expect(fn).toHaveBeenCalledTimes(1)
    expect(fn).toHaveBeenCalledWith("arg1", "arg2")
  })

  it("should delay the function call when a delay is provided", () => {
    const fn = vi.fn()
    const debouncedFn = debounce(fn, 100)
    debouncedFn("arg1", "arg2")
    expect(fn).toHaveBeenCalledTimes(1)
    expect(fn).toHaveBeenCalledWith("arg1", "arg2")

    debouncedFn("arg3", "arg4")
    expect(fn).not.toHaveBeenCalledWith("arg3", "arg4")
    vi.advanceTimersByTime(99)
    expect(fn).not.toHaveBeenCalledWith("arg3", "arg4")

    vi.advanceTimersByTime(1)
    expect(fn).toHaveBeenCalledTimes(2)
    expect(fn).toHaveBeenCalledWith("arg3", "arg4")
  })

  it("should cancel the delay when the function is called again", () => {
    const fn = vi.fn()
    const debouncedFn = debounce(fn, 100)
    debouncedFn("arg1", "arg2")
    expect(fn).toHaveBeenCalledTimes(1)
    expect(fn).toHaveBeenCalledWith("arg1", "arg2")

    debouncedFn("arg3", "arg4")
    vi.advanceTimersByTime(99)

    debouncedFn("arg5", "arg6")
    expect(fn).not.toHaveBeenCalledWith("arg5", "arg6")

    vi.advanceTimersByTime(1)
    expect(fn).toHaveBeenCalledTimes(2)
    expect(fn).toHaveBeenCalledWith("arg5", "arg6")
  })
})

describe("useScrollSpy hook", () => {
  let target: HTMLElement
  let eventHandler: ({ timeStampLow }: any) => void

  beforeEach(() => {
    vi.useFakeTimers()
    target = document.createElement("div")
    eventHandler = vi.fn()

    document.body.appendChild(target)
    vi.spyOn(target, "addEventListener")
    vi.spyOn(target, "removeEventListener")
  })

  afterEach(() => {
    document.body.removeChild(target)
    vi.clearAllMocks()
  })

  it("should set up and clean up event listeners", () => {
    const { unmount } = renderHook(() => useScrollSpy(target, eventHandler))

    expect(target.addEventListener).toHaveBeenCalledWith(
      "scroll",
      expect.any(Function),
      { passive: true }
    )
    expect(eventHandler).toHaveBeenCalledWith({
      target,
      timeStampLow: expect.any(Number),
    })

    unmount()

    expect(target.removeEventListener).toHaveBeenCalledWith(
      "scroll",
      expect.any(Function)
    )
  })

  it("should not set up event listeners if no target is provided", () => {
    renderHook(() => useScrollSpy(null, eventHandler))

    expect(target.addEventListener).not.toHaveBeenCalled()
    expect(eventHandler).not.toHaveBeenCalled()
  })

  it("should debounce events", () => {
    renderHook(() => useScrollSpy(target, eventHandler))

    const scrollEvent = new Event("scroll")
    act(() => {
      target.dispatchEvent(scrollEvent)
    })
    expect(eventHandler).toHaveBeenCalledTimes(1)

    act(() => {
      target.dispatchEvent(scrollEvent)
    })
    expect(eventHandler).toHaveBeenCalledTimes(1)

    vi.advanceTimersByTime(99)
    expect(eventHandler).toHaveBeenCalledTimes(1)

    vi.advanceTimersByTime(1)
    expect(eventHandler).toHaveBeenCalledTimes(2)
  })
})


================================================
File: /frontend/lib/src/hooks/useScrollSpy.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useCallback, useLayoutEffect, useMemo, useRef } from "react"

/**
 * Creates a debounced function that delays invoking `fn` until after `ms`
 * milliseconds have passed since the last time the debounced function was
 * invoked.
 *
 * @param fn - A function to debounce. `fn` is called after the debounced
 * function has not been called for `ms` milliseconds.
 *
 * @param ms - The delay in milliseconds before `fn` is executed.
 *
 * The debounced function behaves as follows:
 * - It will be invoked immediately if 0 is passed for `ms`.
 * - It will be invoked immediately for the first call in any case.
 * - For subsequent calls, if less than `ms` milliseconds have passed since
 * the last invocation, a new invocation of `fn` is scheduled for `ms`
 * milliseconds after the last invocation.
 * - If it is invoked and `ms` milliseconds have passed since the last
 * invocation, `fn` is executed immediately and the timestamp is updated.
 * - If a new invocation of the debounced function is scheduled and it
 * is invoked again before the scheduled invocation, the scheduled
 * invocation is canceled and a new one is scheduled `ms` milliseconds
 * after the latest invocation.
 *
 * TODO: This has very similar but different behavior than our debounce function
 * in utils.ts. This behavior ensures that the debounced function is called on
 * some interval. Our other debounce function ensures that the function is
 * delayed until the user stops calling it. We should probably unify these
 *
 * @returns A debounced version of the `fn` function.
 */
export function debounce(
  fn: (...args: any[]) => void,
  ms: number
): (...args: any[]) => void {
  if (!ms) {
    return fn
  }

  let last = 0
  let timeout: ReturnType<typeof setTimeout> | null = null

  return (...args) => {
    const now = Date.now()

    if (now - last > ms) {
      fn(...args)
      last = now
    } else {
      if (timeout) {
        clearTimeout(timeout)
      }

      timeout = setTimeout(() => {
        fn(...args)
        last = Date.now()
      }, Math.max(0, ms - now + last))
    }
  }
}
const DEFAULT_DEBOUNCE_MS = 100

/**
 * A hook to add a scroll event listener to a target element with debouncing.
 *
 * @param target - The target HTMLElement to attach the scroll listener to.
 * @param eventHandler - The callback function to execute on scroll.
 *
 * The hook behaves as follows:
 * - The eventHandler callback is wrapped in a debounce function, which
 * ensures the callback is not executed too frequently.
 * - A scroll event listener is added to the target element on mount.
 * - A 'timeStampLow' property is added to the event object before it's
 * passed to the eventHandler.
 * - The scroll event listener is removed from the target when the component
 * unmounts.
 *
 * @returns void.
 */
export default function useScrollSpy(
  target: HTMLElement | null,
  eventHandler: ({ timeStampLow }: any) => void
): void {
  const onEventRef = useRef(eventHandler)

  const debouncer = useMemo(
    () =>
      // TODO: Update to match React best practices
      // eslint-disable-next-line react-compiler/react-compiler
      debounce(event => {
        onEventRef.current(event)
      }, DEFAULT_DEBOUNCE_MS),
    [onEventRef]
  )

  const handleEvent = useCallback(
    (event: any) => {
      event.timeStampLow = Date.now()

      debouncer(event)
    },
    [debouncer]
  )

  useLayoutEffect(() => {
    if (!target) {
      return () => {}
    }

    target.addEventListener("scroll", handleEvent, { passive: true })
    handleEvent({ target })

    return () => target.removeEventListener("scroll", handleEvent)
  }, [handleEvent, target])
}


================================================
File: /frontend/lib/src/hooks/useScrollToBottom.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MockedFunction } from "vitest"
import { renderHook } from "@testing-library/react-hooks"

import { useScrollToBottom } from "./useScrollToBottom"
import useStateRef from "./useStateRef"

vi.mock("./useScrollSpy")
vi.mock("./useScrollAnimation")
vi.mock("./useStateRef")

describe("useScrollToBottom", () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it("should initialize with proper values", () => {
    const mockedUseStateRef = useStateRef as MockedFunction<typeof useStateRef>
    mockedUseStateRef.mockImplementation(initialValue => [
      initialValue,
      vi.fn(),
      { current: initialValue },
    ])
    const { result } = renderHook(() => useScrollToBottom())

    expect(result.current).not.toBeNull()
    expect(result.current.current).toBeNull()
  })
})


================================================
File: /frontend/lib/src/hooks/useScrollToBottom.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { RefObject, useCallback, useEffect, useRef } from "react"

import useScrollSpy from "./useScrollSpy"
import useScrollAnimation from "./useScrollAnimation"
import useStateRef from "./useStateRef"

export interface ScrollToBottomOptions {
  bottomThreshold?: number
  debounceMs?: number
}

const DEFAULT_BOTTOM_THRESHOLD = 1
const SCROLL_DECISION_DURATION = 34 // 2 frames
const MIN_CHECK_INTERVAL = 17 // 1 frame

function setImmediateInterval(fn: () => void, ms: number): NodeJS.Timeout {
  fn()

  return setInterval(fn, ms)
}

function isAtBottom({
  scrollHeight,
  offsetHeight,
  scrollTop,
}: HTMLElement): boolean {
  return scrollHeight - scrollTop - offsetHeight < DEFAULT_BOTTOM_THRESHOLD
}

/**
 * useScrollToBottom is a custom React hook managing automatic
 * scrolling behavior for an HTML element. It keeps the scroll view
 * at the bottom unless a user scrolls up, then stops auto-scroll.
 *
 * This hook returns a ref object attached to the HTML element.
 * It maintains several pieces of state:
 * - isSticky: a boolean for whether the scroll position should
 *   "stick" to the bottom.
 * - isAnimating: a boolean for whether the scroll view is animating.
 *
 * It has two major functions:
 * - handleScrollToBottomFinished: resets stickiness if necessary.
 * - handleScroll: adjusts isSticky based on user scroll behavior.
 *
 * The hook includes side effects with the useEffect hook:
 * - The first effect sets an interval to check the scroll position
 *   and adjust stickiness and animating state.
 * - The second effect attaches a focus event listener to update
 *   the scrollHeight value.
 */
export function useScrollToBottom<T extends HTMLElement>(): RefObject<T> {
  const scrollableRef = useRef<T>(null)
  const [isSticky, setIsSticky, isStickyRef] = useStateRef(false)
  const [isAnimating, setIsAnimating, isAnimatingRef] = useStateRef(true)

  // Internal context
  const ignoreScrollEventBeforeRef = useRef(0)
  const offsetHeightRef = useRef(0)
  const scrollHeightRef = useRef(0)

  // Once, we have determined we are at the bottom, we can reset
  // the ignoring of scroll events.
  const handleScrollToBottomFinished = useCallback(() => {
    ignoreScrollEventBeforeRef.current = Date.now()

    // handleScrollToBottomFinished may end at a position which should lose stickiness.
    // In that case, we will need to set sticky to false to stop the interval check.
    if (!isAnimatingRef.current) {
      // Essentially we are not suppose to be animating cause a scroll
      // occurred before we finished animating.
      setIsSticky(false)
    }

    setIsAnimating(false)
  }, [ignoreScrollEventBeforeRef, isAnimatingRef, setIsAnimating, setIsSticky])

  const handleScroll = useCallback(
    ({ timeStampLow }: { timeStampLow: number }) => {
      const { current: target } = scrollableRef
      const animating = isAnimatingRef.current

      // Currently, there are no reliable way to check if the "scroll" event is trigger due to
      // user gesture, programmatic scrolling, or Chrome-synthesized "scroll" event to compensate size change.
      // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.

      if (timeStampLow <= ignoreScrollEventBeforeRef.current || !target) {
        // Since we debounce "scroll" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).
        // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.
        // Thus, on a fast machine, adding elements super fast will lose the "stickiness".

        return
      }

      const atBottom = isAtBottom(target)

      // Chrome will emit "synthetic" scroll event if the container is resized or an element is added
      // We need to ignore these "synthetic" events
      const {
        offsetHeight: nextOffsetHeight,
        scrollHeight: nextScrollHeight,
      } = target
      const { current: offsetHeight } = offsetHeightRef
      const { current: scrollHeight } = scrollHeightRef
      const offsetHeightChanged = nextOffsetHeight !== offsetHeight
      const scrollHeightChanged = nextScrollHeight !== scrollHeight

      if (offsetHeightChanged) {
        offsetHeightRef.current = nextOffsetHeight
      }

      if (scrollHeightChanged) {
        scrollHeightRef.current = nextScrollHeight
      }

      // Sticky means:
      // - If it is scrolled programatically, we are still in sticky mode
      // - If it is scrolled by the user, then sticky means if we are at the end

      // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome
      if (!offsetHeightChanged && !scrollHeightChanged) {
        // We are sticky if we are animating to the end, or we are already at the end.
        // We can be "animating but not sticky" by calling "scrollTo(100)" where the container scrollHeight is 200px.
        const nextSticky = animating || atBottom

        if (isStickyRef.current !== nextSticky) {
          setIsSticky(nextSticky)
        }
      } else if (isStickyRef.current) {
        setIsAnimating(true)
        setIsSticky(true)
      }
    },
    [
      ignoreScrollEventBeforeRef,
      offsetHeightRef,
      scrollHeightRef,
      isAnimatingRef,
      isStickyRef,
      setIsAnimating,
      setIsSticky,
    ]
  )

  useEffect(() => {
    if (scrollableRef.current) {
      let stickyButNotAtEndSince = 0

      const timeout = setImmediateInterval(() => {
        const { current: target } = scrollableRef
        const animating = isAnimatingRef.current

        if (isStickyRef.current && target) {
          if (!isAtBottom(target)) {
            if (!stickyButNotAtEndSince) {
              stickyButNotAtEndSince = Date.now()
            } else if (
              Date.now() - stickyButNotAtEndSince >
              SCROLL_DECISION_DURATION
            ) {
              // Quirks: In Firefox, after user scroll down, Firefox do two things:
              //         1. Set to a new "scrollTop"
              //         2. Fire "scroll" event
              //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.
              //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.
              // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.

              // The "animating" check will make sure stickiness is not lost when elements are adding at a very fast pace.
              if (!animating) {
                setIsAnimating(true)
                setIsSticky(true)
              }

              stickyButNotAtEndSince = 0
            }
          } else {
            stickyButNotAtEndSince = 0
          }
        } else if (
          target &&
          target.scrollHeight <= target.offsetHeight &&
          !isStickyRef.current
        ) {
          // When the container is emptied, we will set sticky back to true.
          setIsSticky(true)
        }
      }, MIN_CHECK_INTERVAL)

      return () => clearInterval(timeout)
    }
  }, [
    scrollableRef,
    isSticky,
    isAnimating,
    isAnimatingRef,
    isStickyRef,
    setIsSticky,
    setIsAnimating,
  ])

  useEffect(() => {
    // We need to update the "scrollHeight" value to latest when the user do a focus inside the box.
    //
    // This is because:
    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether "scrollHeight" value is latest or not.
    // - That code only run on "scroll" event.
    // - That means, on every "scroll" event, if the "scrollHeight" value is not latest, we will skip modifying the stickiness.
    // - That means, if the user "focus" to an element that cause the scroll view to scroll to the bottom, the user agent will fire "scroll" event.
    //   Since the "scrollHeight" is not latest value, this "scroll" event will be ignored and stickiness will not be modified.
    // - That means, if the user "focus" to a newly added element that is at the end of the scroll view, the "scroll to bottom" button will continue to show.
    const target = scrollableRef.current
    if (target) {
      const handleFocus = (): void => {
        scrollHeightRef.current = target.scrollHeight
      }

      target.addEventListener("focus", handleFocus, {
        capture: true,
        passive: true,
      })

      return () => target.removeEventListener("focus", handleFocus)
    }
  }, [scrollableRef])

  // TODO: Update to match React best practices
  // eslint-disable-next-line react-compiler/react-compiler
  useScrollSpy(scrollableRef.current, handleScroll)
  useScrollAnimation(
    // TODO: Update to match React best practices
    // eslint-disable-next-line react-compiler/react-compiler
    scrollableRef.current,
    handleScrollToBottomFinished,
    isAnimating
  )

  return scrollableRef
}

export default useScrollToBottom


================================================
File: /frontend/lib/src/hooks/useStWidthHeight.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { renderHook } from "@testing-library/react-hooks"

import { useStWidthHeight } from "./useStWidthHeight"

describe("#useStWidthHeight", () => {
  describe("width", () => {
    it.each([
      [
        "should return 100% width when shouldUseContainerWidth is true",
        {
          container: { width: 200, height: 200 },
          element: { width: 100, height: 100 },
          isFullScreen: false,
          shouldUseContainerWidth: true,
        },
        "100%",
      ],
      [
        "should return 100% width when isFullScreen is true",
        {
          container: { width: 200, height: 200 },
          element: { width: 100, height: 100 },
          isFullScreen: true,
          shouldUseContainerWidth: false,
        },
        "100%",
      ],
      [
        "should return element width when both shouldUseContainerWidth and isFullScreen are false",
        {
          container: { width: 200, height: 200 },
          element: { width: 100, height: 100 },
          isFullScreen: false,
          shouldUseContainerWidth: false,
        },
        100,
      ],
      [
        "should return 100% width when both shouldUseContainerWidth and isFullScreen are true",
        {
          container: { width: 200, height: 200 },
          element: { width: 100, height: 100 },
          isFullScreen: true,
          shouldUseContainerWidth: true,
        },
        "100%",
      ],
      [
        "should return container width when element width is not provided",
        {
          container: { width: 200, height: 200 },
          element: { height: 100 },
          isFullScreen: false,
          shouldUseContainerWidth: false,
        },
        200,
      ],
      [
        "should return widthFallback when neither element nor container width is provided",
        {
          container: {},
          element: {},
          isFullScreen: false,
          shouldUseContainerWidth: false,
          widthFallback: 150,
        },
        150,
      ],
      [
        "should return auto when neither element nor container width is provided and no widthFallback is given",
        {
          container: {},
          element: {},
          isFullScreen: false,
          shouldUseContainerWidth: false,
        },
        "auto",
      ],
    ])("%s", (_, props, expectedWidth) => {
      const { result } = renderHook(() => useStWidthHeight(props))
      expect(result.current.width).toBe(expectedWidth)
    })
  })

  describe("height", () => {
    it.each([
      [
        "should return container height when isFullScreen is true and container height is provided",
        {
          container: { height: 200 },
          element: { height: 100 },
          isFullScreen: true,
          shouldUseContainerWidth: false,
        },
        200,
      ],
      [
        "should return element height when isFullScreen is false",
        {
          container: { height: 200 },
          element: { height: 100 },
          isFullScreen: false,
          shouldUseContainerWidth: false,
        },
        100,
      ],
      [
        "should return heightFallback when neither element nor container height is provided",
        {
          container: {},
          element: {},
          isFullScreen: false,
          shouldUseContainerWidth: false,
          heightFallback: 150,
        },
        150,
      ],
      [
        "should return auto when neither element nor container width is provided and no widthFallback is given",
        {
          container: {},
          element: {},
          isFullScreen: false,
          shouldUseContainerWidth: false,
        },
        "auto",
      ],
    ])("%s", (_, props, expectedHeight) => {
      const { result } = renderHook(() => useStWidthHeight(props))
      expect(result.current.height).toBe(expectedHeight)
    })
  })
})


================================================
File: /frontend/lib/src/hooks/useStWidthHeight.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { CSSProperties, useMemo } from "react"

type StWidthHeightArgs = {
  container: {
    height?: CSSProperties["height"]
    width?: CSSProperties["width"]
  }
  element: {
    height?: CSSProperties["height"]
    width?: CSSProperties["width"]
  }
  heightFallback?: CSSProperties["height"]
  isFullScreen: boolean
  shouldUseContainerWidth: boolean
  widthFallback?: CSSProperties["width"]
}

type StWidthHeightShape = {
  height: number | string
  width: number | string
}

/**
 * Determines the width and height to use for a given element based on the
 * Streamlit conditions in which it's being rendered.
 *
 * @returns {Object} An object with `width` and `height` properties.
 */
export const useStWidthHeight = ({
  container,
  element,
  heightFallback = "auto",
  isFullScreen,
  shouldUseContainerWidth,
  widthFallback = "auto",
}: StWidthHeightArgs): StWidthHeightShape => {
  const width = useMemo(() => {
    if (shouldUseContainerWidth || isFullScreen) {
      return "100%"
    }
    return element.width || container.width || widthFallback
  }, [
    container.width,
    element.width,
    isFullScreen,
    shouldUseContainerWidth,
    widthFallback,
  ])

  const height = useMemo(() => {
    if (isFullScreen && container.height) {
      return container.height
    }

    return element.height || container.height || heightFallback
  }, [isFullScreen, element.height, container.height, heightFallback])

  return { width, height }
}


================================================
File: /frontend/lib/src/hooks/useStateRef.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { act, renderHook } from "@testing-library/react-hooks"

import useStateRef from "./useStateRef" // import the hook

describe("useStateRef hook", () => {
  it("should initialize correctly with initial state", () => {
    const { result } = renderHook(() => useStateRef(10))

    const [state, , stateRef] = result.current

    // Initial state is set correctly
    expect(state).toEqual(10)
    expect(stateRef.current).toEqual(10)
  })

  it("should set state correctly", () => {
    const { result } = renderHook(() => useStateRef(10))
    const [, setState, stateRef] = result.current

    act(() => {
      setState(20)
    })

    // State is updated
    const state = result.current[0]
    expect(state).toEqual(20)
    expect(stateRef.current).toEqual(20)
  })

  it("should handle function update correctly", () => {
    const { result } = renderHook(() => useStateRef(10))
    const [, setState, stateRef] = result.current

    act(() => {
      setState(prev => prev + 10)
    })

    // State is updated
    const state = result.current[0]
    expect(state).toEqual(20)
    expect(stateRef.current).toEqual(20)
  })

  it("should maintain reference correctly when state changes", () => {
    const { result } = renderHook(() => useStateRef(10))
    const [, setValue, initialRef] = result.current

    act(() => {
      setValue(20)
    })

    // Reference has not changed
    expect(result.current[2]).toBe(initialRef)
  })

  it("should allow ref to be set independently from state", () => {
    const { result } = renderHook(() => useStateRef(10))
    const [, setState, stateRef] = result.current

    act(() => {
      stateRef.current = 20
    })

    let state = result.current[0]
    expect(state).toEqual(10)
    expect(stateRef.current).toEqual(20)

    act(() => {
      setState(20)
    })

    // State is updated
    state = result.current[0]
    expect(state).toEqual(20)
    expect(stateRef.current).toEqual(20)
  })
})


================================================
File: /frontend/lib/src/hooks/useStateRef.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  Dispatch,
  MutableRefObject,
  SetStateAction,
  useRef,
  useState,
} from "react"

/**
 * A custom React Hook that extends useState by providing a mutable ref object
 * to track the current state value.
 *
 * @template T The type of the state value.
 * @param {T} initialState The initial state value.
 * @returns {[T, Dispatch<SetStateAction<T>>, MutableRefObject<T>]} A tuple containing the
 *   current state value, a function to update the state, and a mutable ref object.
 *
 * @example
 * // Usage inside a component:
 * const [count, setCount, countRef] = useStateRef(0);
 *
 * // Accessing the current state value:
 * console.log(count); // Output: 0
 * console.log(countRef.current); // Output: 0
 *
 * // Modifying the state value and updating the ref:
 * setCount(10);
 * console.log(count); // Output: 10
 * console.log(countRef.current); // Output: 10
 *
 * // Comparing previous and current state values:
 * const previousCount = useRef(countRef.current);
 * console.log(previousCount.current); // Output: 10
 * console.log(previousCount.current === countRef.current); // Output: true
 *
 * // Sharing the state value with other components:
 * <ChildComponent countRef={countRef} />
 */
export default function useStateRef<T>(
  initialState: T
): [T, Dispatch<SetStateAction<T>>, MutableRefObject<T>] {
  const [state, setState] = useState<T>(initialState)
  const ref = useRef<T>(initialState)
  // TODO: Update to match React best practices
  // eslint-disable-next-line react-compiler/react-compiler
  ref.current = state

  return [state, setState, ref]
}


================================================
File: /frontend/lib/src/hooks/useSubmitFormViaEnterKey.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { waitFor } from "@testing-library/react"
import { renderHook } from "@testing-library/react-hooks"

import { WidgetStateManager } from "@streamlit/lib/src/WidgetStateManager"

import useSubmitFormViaEnterKey from "./useSubmitFormViaEnterKey"

const widgetMgr = new WidgetStateManager({
  sendRerunBackMsg: vi.fn(),
  formsDataChanged: vi.fn(),
})
describe("useSubmitFormViaEnterKey", () => {
  it("should call commitWidgetValue and submitForm when Enter is pressed", async () => {
    const commitWidgetValue = vi.fn()
    const allowFormEnterToSubmit = vi.fn((_: string) => true)
    const submitForm = vi.fn()
    widgetMgr.allowFormEnterToSubmit = allowFormEnterToSubmit
    widgetMgr.submitForm = submitForm

    const { result: onInputChange } = renderHook(() =>
      useSubmitFormViaEnterKey(
        "someFormId",
        commitWidgetValue,
        true,
        widgetMgr,
        "someFragmentId",
        false
      )
    )

    onInputChange.current({
      key: "Enter",
      metaKey: false,
      ctrlKey: false,
      keyCode: 0,
      nativeEvent: undefined as never,
      preventDefault: vi.fn(),
    })
    await waitFor(() => {
      expect(commitWidgetValue).toHaveBeenCalledTimes(1)
    })
    await waitFor(() => {
      expect(allowFormEnterToSubmit).toHaveBeenCalledWith("someFormId")
    })
    await waitFor(() => {
      expect(submitForm).toHaveBeenCalledWith("someFormId", "someFragmentId")
    })
  })

  it("should not call anything when Enter is not pressed", async () => {
    const commitWidgetValue = vi.fn()
    const allowFormEnterToSubmit = vi.fn((_: string) => true)
    const submitForm = vi.fn()
    widgetMgr.allowFormEnterToSubmit = allowFormEnterToSubmit
    widgetMgr.submitForm = submitForm

    const { result: onInputChange } = renderHook(() =>
      useSubmitFormViaEnterKey(
        "someFormId",
        commitWidgetValue,
        true,
        widgetMgr,
        "someFragmentId",
        false
      )
    )

    onInputChange.current({
      key: "SomeOtherKey",
      metaKey: false,
      ctrlKey: false,
      keyCode: 0,
      nativeEvent: undefined as never,
      preventDefault: vi.fn(),
    })
    await waitFor(() => {
      expect(commitWidgetValue).not.toHaveBeenCalled()
    })
    await waitFor(() => {
      expect(allowFormEnterToSubmit).not.toHaveBeenCalled()
    })
    await waitFor(() => {
      expect(submitForm).not.toHaveBeenCalled()
    })
  })

  it("should not call anything when Enter is pressed but command key is required", async () => {
    const commitWidgetValue = vi.fn()
    const allowFormEnterToSubmit = vi.fn((_: string) => true)
    const submitForm = vi.fn()
    widgetMgr.allowFormEnterToSubmit = allowFormEnterToSubmit
    widgetMgr.submitForm = submitForm

    const { result: onInputChange } = renderHook(() =>
      useSubmitFormViaEnterKey(
        "someFormId",
        commitWidgetValue,
        true,
        widgetMgr,
        "someFragmentId",
        true
      )
    )

    onInputChange.current({
      key: "Enter",
      metaKey: false,
      ctrlKey: false,
      keyCode: 0,
      nativeEvent: undefined as never,
      preventDefault: vi.fn(),
    })
    await waitFor(() => {
      expect(commitWidgetValue).not.toHaveBeenCalled()
    })
    await waitFor(() => {
      expect(allowFormEnterToSubmit).not.toHaveBeenCalled()
    })
    await waitFor(() => {
      expect(submitForm).not.toHaveBeenCalled()
    })
  })

  it.each([
    [true, true],
    [true, false],
    [false, true],
  ])(
    "should call commitWidgetValue and submitForm when Enter and command key (metaKey: %s, ctrlKey: %s) are pressed",
    async (metaKey: boolean, ctrlKey: boolean) => {
      const commitWidgetValue = vi.fn()
      const allowFormEnterToSubmit = vi.fn((_: string) => true)
      const submitForm = vi.fn()
      widgetMgr.allowFormEnterToSubmit = allowFormEnterToSubmit
      widgetMgr.submitForm = submitForm

      const { result: onInputChange } = renderHook(() =>
        useSubmitFormViaEnterKey(
          "someFormId",
          commitWidgetValue,
          true,
          widgetMgr,
          "someFragmentId",
          true
        )
      )

      onInputChange.current({
        key: "Enter",
        metaKey: metaKey,
        ctrlKey: ctrlKey,
        keyCode: 0,
        nativeEvent: undefined as never,
        preventDefault: vi.fn(),
      })
      await waitFor(() => {
        expect(commitWidgetValue).toHaveBeenCalledTimes(1)
      })
      await waitFor(() => {
        expect(allowFormEnterToSubmit).toHaveBeenCalledWith("someFormId")
      })
      await waitFor(() => {
        expect(submitForm).toHaveBeenCalledWith("someFormId", "someFragmentId")
      })
    }
  )

  it("should call commitWidgetValue but not submitForm when allowFormEnterToSubmit returns false", async () => {
    const commitWidgetValue = vi.fn()
    const allowFormEnterToSubmit = vi.fn((_: string) => false)
    const submitForm = vi.fn()
    widgetMgr.allowFormEnterToSubmit = allowFormEnterToSubmit
    widgetMgr.submitForm = submitForm

    const { result: onInputChange } = renderHook(() =>
      useSubmitFormViaEnterKey(
        "someFormId",
        commitWidgetValue,
        true,
        widgetMgr,
        "",
        false
      )
    )

    onInputChange.current({
      key: "Enter",
      metaKey: false,
      ctrlKey: false,
      keyCode: 0,
      nativeEvent: undefined as never,
      preventDefault: vi.fn(),
    })
    await waitFor(() => {
      expect(commitWidgetValue).toHaveBeenCalledTimes(1)
    })
    await waitFor(() => {
      expect(allowFormEnterToSubmit).toHaveBeenCalledWith("someFormId")
    })
    await waitFor(() => {
      expect(submitForm).not.toHaveBeenCalled()
    })
  })

  it("should neither call commitWidgetValue nor submitForm", async () => {
    const commitWidgetValue = vi.fn()
    const allowFormEnterToSubmit = vi.fn((_: string) => false)
    const submitForm = vi.fn()
    widgetMgr.allowFormEnterToSubmit = allowFormEnterToSubmit
    widgetMgr.submitForm = submitForm

    const { result: onInputChange } = renderHook(() =>
      useSubmitFormViaEnterKey(
        "",
        commitWidgetValue,
        false,
        widgetMgr,
        "",
        false
      )
    )

    onInputChange.current({
      key: "Enter",
      metaKey: false,
      ctrlKey: false,
      keyCode: 0,
      nativeEvent: undefined as never,
      preventDefault: vi.fn(),
    })
    await waitFor(() => {
      expect(commitWidgetValue).not.toHaveBeenCalled()
    })
    await waitFor(() => {
      expect(allowFormEnterToSubmit).toHaveBeenCalledWith("")
    })
    await waitFor(() => {
      expect(submitForm).not.toHaveBeenCalled()
    })
  })
})


================================================
File: /frontend/lib/src/hooks/useSubmitFormViaEnterKey.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useCallback } from "react"

import { WidgetStateManager } from "@streamlit/lib/src/WidgetStateManager"
import { isEnterKeyPressed } from "@streamlit/lib/src/util/inputUtils"

export type SubmitFormKeyboardEvent = Pick<
  React.KeyboardEvent<HTMLElement>,
  "metaKey" | "ctrlKey" | "keyCode" | "key" | "nativeEvent" | "preventDefault"
>

/**
 * Will return a memoized function that will call commitWidgetValue and submit the form
 * if the Enter key (+ optionally the command key) is pressed.
 *
 * @param formId of the form to submit
 * @param commitWidgetValue callback to call
 * @param callCommitWidgetValue whether to call commitWidgetValue
 * @param widgetMgr used to handle form submission
 * @param fragmentId
 * @param requireCommandKey if true, the metaKey or ctrlKey must be pressed to trigger the callback
 * @returns memoized callback
 */
export default function useSubmitFormViaEnterKey(
  formId: string,
  commitWidgetValue: () => void,
  callCommitWidgetValue: boolean,
  widgetMgr: WidgetStateManager,
  fragmentId?: string,
  requireCommandKey = false
): (e: SubmitFormKeyboardEvent) => void {
  return useCallback(
    (e: SubmitFormKeyboardEvent): void => {
      const isCommandKeyPressed = requireCommandKey
        ? e.metaKey || e.ctrlKey
        : true

      if (!isEnterKeyPressed(e) || !isCommandKeyPressed) {
        return
      }

      e.preventDefault()
      if (callCommitWidgetValue) {
        commitWidgetValue()
      }

      if (widgetMgr.allowFormEnterToSubmit(formId)) {
        widgetMgr.submitForm(formId, fragmentId)
      }
    },
    [
      formId,
      fragmentId,
      callCommitWidgetValue,
      commitWidgetValue,
      widgetMgr,
      requireCommandKey,
    ]
  )
}


================================================
File: /frontend/lib/src/hooks/useTimeout.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { waitFor } from "@testing-library/react"
import { renderHook } from "@testing-library/react-hooks"

import useTimeout from "./useTimeout"

describe("timeout function", () => {
  it("should call the callback function after timeout", async () => {
    const callback = vi.fn()
    const timeoutDelayMs = 50
    renderHook(() => useTimeout(callback, timeoutDelayMs))
    await waitFor(() => expect(callback).toHaveBeenCalledTimes(1), {
      timeout: 2 * timeoutDelayMs,
    })
  })

  it("should not call the callback function when cancel timeout", async () => {
    const callback = vi.fn()
    const timeoutDelayMs = 100
    const { result } = renderHook(() => useTimeout(callback, timeoutDelayMs))
    const clear = result.current
    clear()
    await new Promise(r => setTimeout(r, 2 * timeoutDelayMs))
    expect(callback).toHaveBeenCalledTimes(0)
  })
})


================================================
File: /frontend/lib/src/hooks/useTimeout.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useCallback, useEffect, useRef } from "react"

/**
 * Call setTimeout with the passed callback and timeout in milliseconds.
 * The timeout can be cleared by calling the returned clear-function.
 *
 * A new timeout will be set when the passed timeoutMs changes.
 *
 * @param callback to be called when the timeout delay is over
 * @param timeoutMs the delay in milliseconds after which the timeout callback is called
 * @returns a memoized clear (stable reference across re-runs) function to stop the timeout
 */
function useTimeout(callback: () => void, timeoutMs: number): () => void {
  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)
  const callbackRef = useRef<() => void>(callback)

  useEffect(() => {
    callbackRef.current = callback
  }, [callback])

  useEffect(() => {
    timeoutRef.current = setTimeout(callbackRef.current, timeoutMs)

    return () => {
      if (!timeoutRef.current) {
        return
      }
      clearTimeout(timeoutRef.current)
      timeoutRef.current = null
    }
  }, [timeoutMs])

  const clear = useCallback(() => {
    if (!timeoutRef.current) {
      return
    }
    clearTimeout(timeoutRef.current)
  }, [])

  return clear
}

export default useTimeout


================================================
File: /frontend/lib/src/hooks/useUpdateUiValue.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { waitFor } from "@testing-library/react"
import { renderHook } from "@testing-library/react-hooks"

import useUpdateUiValue from "./useUpdateUiValue"

describe("useUpdateUiValue", () => {
  it("should update ui value if values are different and ui value is not dirty", async () => {
    const callback = vi.fn()
    renderHook(() => useUpdateUiValue(4, 2, callback, false))
    await waitFor(() => expect(callback).toHaveBeenCalledWith(4))
  })

  it("shoud not update ui value if values are different and ui value is dirty", async () => {
    const callback = vi.fn()
    renderHook(() => useUpdateUiValue(4, 2, callback, true))
    await waitFor(() => expect(callback).not.toHaveBeenCalled())
  })

  it("shoud not update ui value if values are same", async () => {
    const callback = vi.fn()
    renderHook(() => useUpdateUiValue(4, 4, callback, false))
    await waitFor(() => expect(callback).not.toHaveBeenCalled())
  })
})


================================================
File: /frontend/lib/src/hooks/useUpdateUiValue.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Dispatch, SetStateAction, useEffect } from "react"

/**
 * Sets the ui value to the new value if they are not equal and the ui value is not dirty.
 * If the ui value is dirty, it means the user has made changes to the ui value that have not been synced to the backend.
 *
 * @param newValue the new value to set the ui value to
 * @param uiValue the current ui value
 * @param setUiValue the function to set the ui value
 * @param dirty whether the ui value is dirty (has unsynced changes)
 */
export default function useUpdateUiValue<T>(
  newValue: T,
  uiValue: T,
  setUiValue: Dispatch<SetStateAction<T>>,
  dirty: boolean
): void {
  useEffect(() => {
    // the UI did not sync its value
    if (dirty) {
      return
    }
    // If the incoming value changes, update the UI value (e.g. set via state)
    if (newValue !== uiValue) {
      setUiValue(newValue)
    }
  }, [newValue, uiValue, dirty, setUiValue])
}


================================================
File: /frontend/lib/src/hooks/useWidgetManagerElementState.test.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { FC } from "react"

import { act, renderHook } from "@testing-library/react-hooks"
import { render, screen } from "@testing-library/react"
import { userEvent } from "@testing-library/user-event"

import { WidgetStateManager } from "@streamlit/lib/src/WidgetStateManager"
import { Form } from "@streamlit/lib/src/components/widgets/Form"
import { ScriptRunState } from "@streamlit/lib/src/ScriptRunState"
import { RootStyleProvider } from "@streamlit/lib/src/RootStyleProvider"
import { getDefaultTheme } from "@streamlit/lib/src/theme"

import useWidgetManagerElementState from "./useWidgetManagerElementState"

const elementId = "elementId"

describe("useWidgetManagerElementState hook", () => {
  it("should initialize correctly with initial state", () => {
    const widgetMgr = new WidgetStateManager({
      formsDataChanged: vi.fn(),
      sendRerunBackMsg: vi.fn(),
    })

    const { result } = renderHook(() =>
      useWidgetManagerElementState<number | null>({
        widgetMgr,
        id: elementId,
        key: "key",
        defaultValue: 42,
      })
    )

    const [state] = result.current

    // Initial state is set correctly
    expect(state).toEqual(42)
    expect(widgetMgr.getElementState(elementId, "key")).toEqual(42)
  })

  it("should set state correctly", () => {
    const widgetMgr = new WidgetStateManager({
      formsDataChanged: vi.fn(),
      sendRerunBackMsg: vi.fn(),
    })

    const { result } = renderHook(() =>
      useWidgetManagerElementState<number | null>({
        widgetMgr,
        id: elementId,
        key: "key",
        defaultValue: 42,
      })
    )

    const [, setState] = result.current

    act(() => {
      setState(24)
    })

    const state = result.current[0]
    expect(state).toEqual(24)
    expect(widgetMgr.getElementState(elementId, "key")).toEqual(24)
  })

  it("should properly clear state on form clear", async () => {
    const user = userEvent.setup()
    const formId = "formId"
    const stateKey = "stateKey"
    const defaultValue = "initial"
    const newValue = "new value"
    const testInputAriaLabel = "test input"

    const widgetMgr = new WidgetStateManager({
      formsDataChanged: vi.fn(),
      sendRerunBackMsg: vi.fn(),
    })

    const TestComponent: FC = () => {
      const [state, setState] = useWidgetManagerElementState<string>({
        widgetMgr,
        id: elementId,
        formId,
        key: stateKey,
        defaultValue,
      })

      return (
        <RootStyleProvider theme={getDefaultTheme()}>
          <Form
            formId={formId}
            clearOnSubmit={true}
            enterToSubmit={false}
            width={0}
            hasSubmitButton={true}
            widgetMgr={widgetMgr}
            border={false}
            scriptRunState={ScriptRunState.NOT_RUNNING}
          >
            <input
              aria-label={testInputAriaLabel}
              type="text"
              value={state}
              onChange={e => setState(e.currentTarget.value)}
            />
          </Form>
        </RootStyleProvider>
      )
    }

    render(<TestComponent />)

    // verify default value
    const inputElement = screen.getByLabelText(
      testInputAriaLabel
    ) as HTMLInputElement
    expect(inputElement.value).toBe(defaultValue)

    expect(widgetMgr.getElementState(elementId, stateKey)).toBe(defaultValue)

    // change the input value
    await user.clear(inputElement)
    await user.type(inputElement, newValue)

    // verify new value is set
    expect(inputElement.value).toBe(newValue)
    expect(widgetMgr.getElementState(elementId, stateKey)).toBe(newValue)

    // submit the form
    // note: struggled using default html form submission, so manually triggering our submission logic here
    await act(() => {
      widgetMgr.submitForm(formId, undefined)
    })

    // verify the value is reset to the default
    expect(widgetMgr.getElementState(elementId, stateKey)).toBe(defaultValue)
    expect(inputElement.value).toBe(defaultValue)
  })
})


================================================
File: /frontend/lib/src/hooks/useWidgetManagerElementState.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useCallback, useEffect, useMemo, useState } from "react"

import { useFormClearHelper } from "@streamlit/lib/src/components/widgets/Form"
import { WidgetStateManager } from "@streamlit/lib/src/WidgetStateManager"
import {
  isNullOrUndefined,
  notNullOrUndefined,
} from "@streamlit/lib/src/util/utils"

/**
 * Think of useState, but the state is also persisted in the widget manager.
 * This allows you to have the state be persisted between mounting and unmounting of the component.
 * @param widgetMgr - The widget manager instance to use
 * @param id - The id of the widget to store the state for
 * @param key - The key of the state to store
 * @param defaultValue - The default value to use if the state is not set in the widget manager
 * @returns A tuple containing the current state and a function to set the state
 */
const useWidgetManagerElementState = <T,>({
  widgetMgr,
  id,
  formId,
  key,
  defaultValue,
}: {
  widgetMgr: WidgetStateManager
  id: string
  formId?: string
  key: string
  defaultValue: T
}): [T, (value: T) => void] => {
  useEffect(() => {
    const existingValue = widgetMgr.getElementState(id, key)
    if (isNullOrUndefined(existingValue) && notNullOrUndefined(defaultValue)) {
      widgetMgr.setElementState(id, key, defaultValue)
    }
  }, [widgetMgr, id, key, defaultValue])

  const [state, setStateInternal] = useState<T>(
    widgetMgr.getElementState(id, key) ?? defaultValue
  )

  const setState = useCallback(
    (value: T) => {
      widgetMgr.setElementState(id, key, value)
      setStateInternal(value)
    },
    [widgetMgr, id, key]
  )

  const element = useMemo(() => ({ formId: formId || "" }), [formId])
  const onFormCleared = useCallback(
    () => setState(defaultValue),
    [defaultValue, setState]
  )

  useFormClearHelper({
    element,
    widgetMgr,
    onFormCleared,
  })

  return [state, setState]
}

export default useWidgetManagerElementState


================================================
File: /frontend/lib/src/hostComm/HostCommunicationManager.test.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { MockInstance } from "vitest"

import HostCommunicationManager, {
  HOST_COMM_VERSION,
} from "@streamlit/lib/src/hostComm/HostCommunicationManager"

// Mocking "message" event listeners on the window;
// returns function to establish a listener
function mockEventListeners(): (type: string, event: any) => void {
  const listeners: { [name: string]: ((event: Event) => void)[] } = {}

  window.addEventListener = vi.fn((event: string, cb: any) => {
    listeners[event] = listeners[event] || []
    listeners[event].push(cb)
  })

  return (type: string, event: Event): void =>
    listeners[type].forEach(cb => cb(event))
}

describe("HostCommunicationManager messaging", () => {
  let hostCommunicationMgr: HostCommunicationManager

  let dispatchEvent: (type: string, event: Event) => void
  let originalHash: string

  let setAllowedOriginsFunc: MockInstance
  let openCommFunc: MockInstance
  let sendMessageToHostFunc: MockInstance

  beforeEach(() => {
    hostCommunicationMgr = new HostCommunicationManager({
      streamlitExecutionStartedAt: 100,
      themeChanged: vi.fn(),
      sendRerunBackMsg: vi.fn(),
      pageChanged: vi.fn(),
      closeModal: vi.fn(),
      stopScript: vi.fn(),
      rerunScript: vi.fn(),
      clearCache: vi.fn(),
      sendAppHeartbeat: vi.fn(),
      setInputsDisabled: vi.fn(),
      isOwnerChanged: vi.fn(),
      fileUploadClientConfigChanged: vi.fn(),
      hostMenuItemsChanged: vi.fn(),
      hostToolbarItemsChanged: vi.fn(),
      hostHideSidebarNavChanged: vi.fn(),
      sidebarChevronDownshiftChanged: vi.fn(),
      pageLinkBaseUrlChanged: vi.fn(),
      queryParamsChanged: vi.fn(),
      deployedAppMetadataChanged: vi.fn(),
      restartWebsocketConnection: vi.fn(),
      terminateWebsocketConnection: vi.fn(),
    })

    originalHash = window.location.hash
    dispatchEvent = mockEventListeners()

    setAllowedOriginsFunc = vi.spyOn(hostCommunicationMgr, "setAllowedOrigins")
    openCommFunc = vi.spyOn(hostCommunicationMgr, "openHostCommunication")
    sendMessageToHostFunc = vi.spyOn(hostCommunicationMgr, "sendMessageToHost")

    hostCommunicationMgr.setAllowedOrigins({
      allowedOrigins: ["https://devel.streamlit.test"],
      useExternalAuthToken: false,
    })
  })

  afterEach(() => {
    window.location.hash = originalHash
  })

  it("sets allowedOrigins properly & opens HostCommunication", () => {
    expect(setAllowedOriginsFunc).toHaveBeenCalledWith({
      allowedOrigins: ["https://devel.streamlit.test"],
      useExternalAuthToken: false,
    })
    // @ts-expect-error
    expect(hostCommunicationMgr.allowedOrigins).toEqual([
      "https://devel.streamlit.test",
    ])
    expect(openCommFunc).toHaveBeenCalled()
  })

  it("host should receive a GUEST_READY message", () => {
    expect(sendMessageToHostFunc).toHaveBeenCalled()

    const guestReadyMessage = sendMessageToHostFunc.mock.calls[0][0]
    expect(guestReadyMessage).toHaveProperty("type", "GUEST_READY")
    expect(guestReadyMessage).toHaveProperty("streamlitExecutionStartedAt")
    expect(guestReadyMessage).toHaveProperty(
      "guestReadyAt",
      expect.any(Number)
    )
  })

  it("can process a received CLOSE_MODAL message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "CLOSE_MODAL",
        },
        origin: "https://devel.streamlit.test",
      })
    )
    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.closeModal).toHaveBeenCalled()
  })

  it("can process a received STOP_SCRIPT message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "STOP_SCRIPT",
        },
        origin: "https://devel.streamlit.test",
      })
    )
    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.stopScript).toHaveBeenCalled()
  })

  it("can process a received RERUN_SCRIPT message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "RERUN_SCRIPT",
        },
        origin: "https://devel.streamlit.test",
      })
    )
    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.rerunScript).toHaveBeenCalled()
  })

  it("can process a received CLEAR_CACHE message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "CLEAR_CACHE",
        },
        origin: "https://devel.streamlit.test",
      })
    )

    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.clearCache).toHaveBeenCalled()
  })

  it("can process a received REQUEST_PAGE_CHANGE message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "REQUEST_PAGE_CHANGE",
          pageScriptHash: "hash1",
        },
        origin: "https://devel.streamlit.test",
      })
    )
    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.pageChanged).toHaveBeenCalledWith(
      "hash1"
    )
  })

  it("can process a received SEND_APP_HEARTBEAT message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SEND_APP_HEARTBEAT",
        },
        origin: "https://devel.streamlit.test",
      })
    )

    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.sendAppHeartbeat).toHaveBeenCalled()
  })

  it("can process a received SET_INPUTS_DISABLED message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_INPUTS_DISABLED",
          disabled: true,
        },
        origin: "https://devel.streamlit.test",
      })
    )

    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.setInputsDisabled).toHaveBeenCalledWith(
      true
    )
  })

  it("should respond to SET_IS_OWNER message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_IS_OWNER",
          isOwner: true,
        },
        origin: "https://devel.streamlit.test",
      })
    )
    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.isOwnerChanged).toHaveBeenCalledWith(
      true
    )
  })

  it("should respond to SET_MENU_ITEMS message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_MENU_ITEMS",
          items: [{ type: "separator" }],
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.hostMenuItemsChanged
    ).toHaveBeenCalledWith([{ type: "separator" }])
  })

  it("should respond to SET_METADATA message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_METADATA",
          metadata: { hostedAt: "maya", owner: "corgi", repo: "streamlit" },
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.deployedAppMetadataChanged
    ).toHaveBeenCalledWith({
      hostedAt: "maya",
      owner: "corgi",
      repo: "streamlit",
    })
  })

  it("can process a received SET_PAGE_LINK_BASE_URL message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_PAGE_LINK_BASE_URL",
          pageLinkBaseUrl: "https://share.streamlit.io/vdonato/foo/bar",
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.pageLinkBaseUrlChanged
    ).toHaveBeenCalledWith("https://share.streamlit.io/vdonato/foo/bar")
  })

  it("can process a received SET_SIDEBAR_CHEVRON_DOWNSHIFT message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_SIDEBAR_CHEVRON_DOWNSHIFT",
          sidebarChevronDownshift: 50,
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.sidebarChevronDownshiftChanged
    ).toHaveBeenCalledWith(50)
  })

  it("can process a received SET_SIDEBAR_NAV_VISIBILITY message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_SIDEBAR_NAV_VISIBILITY",
          hidden: true,
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.hostHideSidebarNavChanged
    ).toHaveBeenCalledWith(true)
  })

  it("can process a received SET_TOOLBAR_ITEMS message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_TOOLBAR_ITEMS",
          items: [
            {
              borderless: true,
              label: "",
              icon: "star.svg",
              key: "favorite",
            },
          ],
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.hostToolbarItemsChanged
    ).toHaveBeenCalledWith([
      {
        borderless: true,
        icon: "star.svg",
        key: "favorite",
        label: "",
      },
    ])
  })

  it("should respond to UPDATE_HASH message", () => {
    expect(window.location.hash).toEqual("")

    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "UPDATE_HASH",
          hash: "#somehash",
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(window.location.hash).toEqual("#somehash")
  })

  it("can process a received UPDATE_FROM_QUERY_PARAMS message", () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "UPDATE_FROM_QUERY_PARAMS",
          queryParams: "foo=bar",
        },
        origin: "https://devel.streamlit.test",
      })
    )

    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.queryParamsChanged).toHaveBeenCalledWith(
      "foo=bar"
    )
    // @ts-expect-error - props are private
    expect(hostCommunicationMgr.props.sendRerunBackMsg).toHaveBeenCalled()
  })

  it("can process a received SET_CUSTOM_THEME_CONFIG message", async () => {
    const mockCustomThemeConfig = {
      primaryColor: "#1A6CE7",
      backgroundColor: "#FFFFFF",
      secondaryBackgroundColor: "#F5F5F5",
      textColor: "#1A1D21",
      widgetBackgroundColor: "#FFFFFF",
      widgetBorderColor: "#D3DAE8",
      skeletonBackgroundColor: "#CCDDEE",
    }
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_CUSTOM_THEME_CONFIG",
          themeInfo: mockCustomThemeConfig,
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.themeChanged
    ).toHaveBeenCalledWith(undefined, mockCustomThemeConfig)
  })

  it("can process a received SET_CUSTOM_THEME_CONFIG message with a dark theme name", async () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_CUSTOM_THEME_CONFIG",
          themeName: "Dark",
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.themeChanged
    ).toHaveBeenCalledWith("Dark", undefined)
  })

  it("can process a received SET_CUSTOM_THEME_CONFIG message with a light theme name", async () => {
    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "SET_CUSTOM_THEME_CONFIG",
          themeName: "Light",
        },
        origin: "https://devel.streamlit.test",
      })
    )

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.themeChanged
    ).toHaveBeenCalledWith("Light", undefined)
  })

  it("can process a received SET_FILE_UPLOAD_CLIENT_CONFIG message", () => {
    const message = new MessageEvent("message", {
      data: {
        stCommVersion: HOST_COMM_VERSION,
        type: "SET_FILE_UPLOAD_CLIENT_CONFIG",
        prefix: "https://someprefix.com/hello/",
        headers: {
          header1: "header1value",
          header2: "header2value",
        },
      },
      origin: "https://devel.streamlit.test",
    })
    dispatchEvent("message", message)

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.fileUploadClientConfigChanged
    ).toHaveBeenCalledWith({
      prefix: "https://someprefix.com/hello/",
      headers: {
        header1: "header1value",
        header2: "header2value",
      },
    })
  })

  it("can process a received RESTART_WEBSOCKET_CONNECTION message", () => {
    const message = new MessageEvent("message", {
      data: {
        stCommVersion: HOST_COMM_VERSION,
        type: "RESTART_WEBSOCKET_CONNECTION",
      },
      origin: "https://devel.streamlit.test",
    })
    dispatchEvent("message", message)

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.restartWebsocketConnection
    ).toHaveBeenCalled()
  })

  it("can process a received TERMINATE_WEBSOCKET_CONNECTION message", () => {
    const message = new MessageEvent("message", {
      data: {
        stCommVersion: HOST_COMM_VERSION,
        type: "TERMINATE_WEBSOCKET_CONNECTION",
      },
      origin: "https://devel.streamlit.test",
    })
    dispatchEvent("message", message)

    expect(
      // @ts-expect-error - props are private
      hostCommunicationMgr.props.terminateWebsocketConnection
    ).toHaveBeenCalled()
  })
})

describe("Test different origins", () => {
  let hostCommunicationMgr: HostCommunicationManager
  let dispatchEvent: any

  beforeEach(() => {
    hostCommunicationMgr = new HostCommunicationManager({
      streamlitExecutionStartedAt: 100,
      themeChanged: vi.fn(),
      sendRerunBackMsg: vi.fn(),
      pageChanged: vi.fn(),
      closeModal: vi.fn(),
      stopScript: vi.fn(),
      rerunScript: vi.fn(),
      clearCache: vi.fn(),
      sendAppHeartbeat: vi.fn(),
      setInputsDisabled: vi.fn(),
      fileUploadClientConfigChanged: vi.fn(),
      isOwnerChanged: vi.fn(),
      hostMenuItemsChanged: vi.fn(),
      hostToolbarItemsChanged: vi.fn(),
      hostHideSidebarNavChanged: vi.fn(),
      sidebarChevronDownshiftChanged: vi.fn(),
      pageLinkBaseUrlChanged: vi.fn(),
      queryParamsChanged: vi.fn(),
      deployedAppMetadataChanged: vi.fn(),
      restartWebsocketConnection: vi.fn(),
      terminateWebsocketConnection: vi.fn(),
    })

    dispatchEvent = mockEventListeners()
  })

  afterEach(() => {
    window.location.hash = ""
  })

  it("exact pattern", () => {
    hostCommunicationMgr.setAllowedOrigins({
      allowedOrigins: ["http://share.streamlit.io"],
      useExternalAuthToken: false,
    })

    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "UPDATE_HASH",
          hash: "#somehash",
        },
        origin: "http://share.streamlit.io",
      })
    )

    expect(window.location.hash).toEqual("#somehash")
  })

  it("wildcard pattern", () => {
    hostCommunicationMgr.setAllowedOrigins({
      allowedOrigins: ["http://*.streamlitapp.com"],
      useExternalAuthToken: false,
    })

    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "UPDATE_HASH",
          hash: "#otherhash",
        },
        origin: "http://cool-cucumber-fa9ds9f.streamlitapp.com",
      })
    )

    expect(window.location.hash).toEqual("#otherhash")
  })

  it("ignores non-matching origins", () => {
    hostCommunicationMgr.setAllowedOrigins({
      allowedOrigins: ["http://share.streamlit.io"],
      useExternalAuthToken: false,
    })

    dispatchEvent(
      "message",
      new MessageEvent("message", {
        data: {
          stCommVersion: HOST_COMM_VERSION,
          type: "UPDATE_HASH",
          hash: "#corgi",
        },
        origin: "http://example.com",
      })
    )

    expect(window.location.hash).toEqual("")
  })
})

describe("HostCommunicationManager external auth token handling", () => {
  let hostCommunicationMgr: HostCommunicationManager

  beforeEach(() => {
    hostCommunicationMgr = new HostCommunicationManager({
      streamlitExecutionStartedAt: 100,
      themeChanged: vi.fn(),
      sendRerunBackMsg: vi.fn(),
      pageChanged: vi.fn(),
      closeModal: vi.fn(),
      stopScript: vi.fn(),
      rerunScript: vi.fn(),
      clearCache: vi.fn(),
      sendAppHeartbeat: vi.fn(),
      setInputsDisabled: vi.fn(),
      fileUploadClientConfigChanged: vi.fn(),
      isOwnerChanged: vi.fn(),
      hostMenuItemsChanged: vi.fn(),
      hostToolbarItemsChanged: vi.fn(),
      hostHideSidebarNavChanged: vi.fn(),
      sidebarChevronDownshiftChanged: vi.fn(),
      pageLinkBaseUrlChanged: vi.fn(),
      queryParamsChanged: vi.fn(),
      deployedAppMetadataChanged: vi.fn(),
      restartWebsocketConnection: vi.fn(),
      terminateWebsocketConnection: vi.fn(),
    })
  })

  it("resolves promise to undefined immediately if useExternalAuthToken is false", async () => {
    const setAllowedOriginsFunc = vi.spyOn(
      hostCommunicationMgr,
      "setAllowedOrigins"
    )

    hostCommunicationMgr.setAllowedOrigins({
      allowedOrigins: ["http://devel.streamlit.test"],
      useExternalAuthToken: false,
    })

    expect(setAllowedOriginsFunc).toHaveBeenCalled()
    // @ts-expect-error - deferredAuthToken is private
    await expect(hostCommunicationMgr.deferredAuthToken.promise).resolves.toBe(
      undefined
    )
  })

  it("waits to receive SET_AUTH_TOKEN message before resolving promise if useExternalAuthToken is true", async () => {
    const dispatchEvent = mockEventListeners()

    hostCommunicationMgr.setAllowedOrigins({
      allowedOrigins: ["http://devel.streamlit.test"],
      useExternalAuthToken: true,
    })
    // Asynchronously send a SET_AUTH_TOKEN message to the
    // HostCommunicationManager, which won't proceed past the `await`
    // statement below until the message is received and handled.
    setTimeout(() => {
      dispatchEvent(
        "message",
        new MessageEvent("message", {
          data: {
            stCommVersion: HOST_COMM_VERSION,
            type: "SET_AUTH_TOKEN",
            authToken: "i am an auth token",
          },
          origin: "http://devel.streamlit.test",
        })
      )
    })

    // @ts-expect-error - deferredAuthToken is private
    await expect(hostCommunicationMgr.deferredAuthToken.promise).resolves.toBe(
      "i am an auth token"
    )

    // Reset the auth token and do everything again to confirm that we don't
    // incorrectly resolve to an old value after resetAuthToken is called.
    hostCommunicationMgr.resetAuthToken()

    // Simulate the browser tab disconnecting and reconnecting, which from the
    // HostCommunication's perspective is only seen as a new call to
    // setAllowedOrigins.
    hostCommunicationMgr.setAllowedOrigins({
      allowedOrigins: ["http://devel.streamlit.test"],
      useExternalAuthToken: true,
    })

    setTimeout(() => {
      dispatchEvent(
        "message",
        new MessageEvent("message", {
          data: {
            stCommVersion: HOST_COMM_VERSION,
            type: "SET_AUTH_TOKEN",
            authToken: "i am a NEW auth token",
          },
          origin: "http://devel.streamlit.test",
        })
      )
    })

    // @ts-expect-error - deferredAuthToken is private
    await expect(hostCommunicationMgr.deferredAuthToken.promise).resolves.toBe(
      "i am a NEW auth token"
    )
  })
})


================================================
File: /frontend/lib/src/hostComm/HostCommunicationManager.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { ICustomThemeConfig, WidgetStates } from "@streamlit/lib/src/proto"
import { isValidOrigin } from "@streamlit/lib/src/util/UriUtil"
import { PresetThemeName } from "@streamlit/lib/src/theme/types"
import Resolver from "@streamlit/lib/src/util/Resolver"

import {
  AppConfig,
  DeployedAppMetadata,
  IGuestToHostMessage,
  IHostToGuestMessage,
  IMenuItem,
  IToolbarItem,
  VersionedMessage,
} from "./types"

export const HOST_COMM_VERSION = 1

export interface HostCommunicationProps {
  readonly streamlitExecutionStartedAt: number
  readonly sendRerunBackMsg: (
    widgetStates?: WidgetStates,
    pageScriptHash?: string
  ) => void
  readonly closeModal: () => void
  readonly stopScript: () => void
  readonly rerunScript: () => void
  readonly clearCache: () => void
  readonly sendAppHeartbeat: () => void
  readonly setInputsDisabled: (inputsDisabled: boolean) => void
  readonly themeChanged: (
    themeName?: PresetThemeName,
    themeInfo?: ICustomThemeConfig
  ) => void
  readonly pageChanged: (pageScriptHash: string) => void
  readonly isOwnerChanged: (isOwner: boolean) => void
  readonly fileUploadClientConfigChanged: (payload: {
    prefix: string
    headers: Record<string, string>
  }) => void
  readonly hostMenuItemsChanged: (menuItems: IMenuItem[]) => void
  readonly hostToolbarItemsChanged: (toolbarItems: IToolbarItem[]) => void
  readonly hostHideSidebarNavChanged: (hideSidebarNav: boolean) => void
  readonly sidebarChevronDownshiftChanged: (
    sidebarChevronDownshift: number
  ) => void
  readonly pageLinkBaseUrlChanged: (pageLinkBaseUrl: string) => void
  readonly queryParamsChanged: (queryParams: string) => void
  readonly deployedAppMetadataChanged: (
    deployedAppMetadata: DeployedAppMetadata
  ) => void
  readonly restartWebsocketConnection: () => void
  readonly terminateWebsocketConnection: () => void
}

/**
 * Manages host communication & messaging
 */
export default class HostCommunicationManager {
  private readonly props: HostCommunicationProps

  private allowedOrigins: string[]

  private deferredAuthToken: Resolver<string | undefined>

  constructor(props: HostCommunicationProps) {
    this.props = props

    this.allowedOrigins = []
    this.deferredAuthToken = new Resolver()
  }

  /**
   * Adds a listener for messages from the host
   * sends message that guest is ready to receive messages
   */
  public openHostCommunication = (): void => {
    window.addEventListener("message", this.receiveHostMessage)
    this.sendMessageToHost({
      type: "GUEST_READY",
      streamlitExecutionStartedAt: this.props.streamlitExecutionStartedAt,
      guestReadyAt: Date.now(),
    })
  }

  /**
   * Cleans up message event listener
   */
  public closeHostCommunication = (): void => {
    window.removeEventListener("message", this.receiveHostMessage)
  }

  /**
   * Function to reset deferredAuthToken once the resource waiting on the token
   * (that is, the WebsocketConnection singleton) has successfully received it.
   *
   * This should be called in a .then() handler attached to deferredAuthToken.promise.
   */
  public resetAuthToken = (): void => {
    this.deferredAuthToken = new Resolver()
  }

  /**
   * Function returning a promise that resolves to the auth token sent by the host
   * Used by connectionManager
   */
  public claimAuthToken = (): Promise<string | undefined> => {
    return this.deferredAuthToken.promise
  }

  /**
   * Sets the allowed origins configuration.
   */
  public setAllowedOrigins = ({
    allowedOrigins,
    useExternalAuthToken,
  }: AppConfig): void => {
    if (!useExternalAuthToken) {
      this.deferredAuthToken.resolve(undefined)
    }
    if (!allowedOrigins?.length) {
      return
    }
    this.allowedOrigins = allowedOrigins

    this.openHostCommunication()
  }

  /**
   * Register a function to deliver a message to the Host
   * that is on the same origin as the Guest
   */
  public sendMessageToSameOriginHost = (
    message: IGuestToHostMessage
  ): void => {
    window.parent.postMessage(
      {
        stCommVersion: HOST_COMM_VERSION,
        ...message,
      } as VersionedMessage<IGuestToHostMessage>,
      window.location.origin
    )
  }

  /**
   * Register a function to deliver a message to the Host
   */
  public sendMessageToHost = (message: IGuestToHostMessage): void => {
    window.parent.postMessage(
      {
        stCommVersion: HOST_COMM_VERSION,
        ...message,
      } as VersionedMessage<IGuestToHostMessage>,
      "*"
    )
  }

  /**
   * Register a function to handle a message from the Host
   */
  public receiveHostMessage = (event: MessageEvent): void => {
    const message: VersionedMessage<IHostToGuestMessage> | any = event.data

    // Messages coming from the parent frame of a deployed Streamlit app
    // may not be coming from a trusted source (even if we've set the CSP
    // frame-anscestors header, it doesn't hurt to be extra safe). We avoid
    // processing messages received from origins we haven't explicitly
    // labeled as trusted here to lower the probability that we end up
    // processing malicious input.
    if (
      message.stCommVersion !== HOST_COMM_VERSION ||
      !this.allowedOrigins.find(allowed =>
        isValidOrigin(allowed, event.origin)
      )
    ) {
      return
    }

    if (message.type === "CLOSE_MODAL") {
      this.props.closeModal()
    }

    if (message.type === "STOP_SCRIPT") {
      this.props.stopScript()
    }

    if (message.type === "RERUN_SCRIPT") {
      this.props.rerunScript()
    }

    if (message.type === "CLEAR_CACHE") {
      this.props.clearCache()
    }

    if (message.type === "REQUEST_PAGE_CHANGE") {
      this.props.pageChanged(message.pageScriptHash)
    }

    if (message.type === "SEND_APP_HEARTBEAT") {
      this.props.sendAppHeartbeat()
    }

    if (message.type === "SET_INPUTS_DISABLED") {
      this.props.setInputsDisabled(message.disabled)
    }

    if (message.type === "SET_AUTH_TOKEN") {
      // NOTE: The edge case (that should technically never happen) where
      // useExternalAuthToken is false but we still receive this message
      // type isn't an issue here because resolving a promise a second time
      // is a no-op, and we already resolved the promise to undefined
      // above.
      this.deferredAuthToken.resolve(message.authToken)
    }

    if (message.type === "SET_FILE_UPLOAD_CLIENT_CONFIG") {
      const { prefix, headers } = message
      this.props.fileUploadClientConfigChanged({
        prefix,
        headers,
      })
    }

    if (message.type === "SET_IS_OWNER") {
      this.props.isOwnerChanged(message.isOwner)
    }

    if (message.type === "SET_MENU_ITEMS") {
      this.props.hostMenuItemsChanged(message.items)
    }

    if (message.type === "SET_METADATA") {
      this.props.deployedAppMetadataChanged(message.metadata)
    }

    if (message.type === "SET_PAGE_LINK_BASE_URL") {
      this.props.pageLinkBaseUrlChanged(message.pageLinkBaseUrl)
    }

    if (message.type === "SET_SIDEBAR_CHEVRON_DOWNSHIFT") {
      this.props.sidebarChevronDownshiftChanged(
        message.sidebarChevronDownshift
      )
    }

    if (message.type === "SET_SIDEBAR_NAV_VISIBILITY") {
      this.props.hostHideSidebarNavChanged(message.hidden)
    }

    if (message.type === "SET_TOOLBAR_ITEMS") {
      this.props.hostToolbarItemsChanged(message.items)
    }

    if (message.type === "UPDATE_FROM_QUERY_PARAMS") {
      this.props.queryParamsChanged(message.queryParams)
      this.props.sendRerunBackMsg()
    }

    if (message.type === "UPDATE_HASH") {
      window.location.hash = message.hash
    }

    if (message.type === "SET_CUSTOM_THEME_CONFIG") {
      this.props.themeChanged(message.themeName, message.themeInfo)
    }

    if (message.type === "RESTART_WEBSOCKET_CONNECTION") {
      this.props.restartWebsocketConnection()
    }

    if (message.type === "TERMINATE_WEBSOCKET_CONNECTION") {
      this.props.terminateWebsocketConnection()
    }
  }
}


================================================
File: /frontend/lib/src/hostComm/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export { default } from "./HostCommunicationManager"


================================================
File: /frontend/lib/src/hostComm/types.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  IAppPage,
  ICustomThemeConfig,
  MetricsEvent,
} from "@streamlit/lib/src/proto"
import { ExportedTheme } from "@streamlit/lib/src/theme"
import { ScriptRunState } from "@streamlit/lib/src/ScriptRunState"
import { LibConfig } from "@streamlit/lib/src/components/core/LibContext"
import { PresetThemeName } from "@streamlit/lib/src/theme/types"

export type DeployedAppMetadata = {
  hostedAt?: string
  creatorId?: string
  owner?: string
  branch?: string
  repo?: string
  mainModule?: string
  isOwner?: boolean
}

export type IToolbarItem = {
  borderless?: boolean
  icon?: string
  key: string
  label?: string
}

export type IMenuItem =
  | {
      type: "text"
      label: string
      key: string
    }
  | {
      type: "separator"
    }

export type IHostToGuestMessage = {
  stCommVersion: number
} & (
  | {
      type: "CLOSE_MODALS"
    }
  | {
      type: "REQUEST_PAGE_CHANGE"
      pageScriptHash: string
    }
  | {
      type: "SET_INPUTS_DISABLED"
      disabled: boolean
    }
  | {
      type: "SET_AUTH_TOKEN"
      authToken: string
    }
  | {
      type: "SET_IS_OWNER"
      isOwner: boolean
    }
  | {
      type: "SET_MENU_ITEMS"
      items: IMenuItem[]
    }
  | {
      type: "SET_METADATA"
      metadata: DeployedAppMetadata
    }
  | {
      type: "SET_PAGE_LINK_BASE_URL"
      pageLinkBaseUrl: string
    }
  | {
      type: "SET_SIDEBAR_CHEVRON_DOWNSHIFT"
      sidebarChevronDownshift: number
    }
  | {
      type: "SET_SIDEBAR_NAV_VISIBILITY"
      hidden: boolean
    }
  | {
      type: "SET_TOOLBAR_ITEMS"
      items: IToolbarItem[]
    }
  | {
      type: "UPDATE_FROM_QUERY_PARAMS"
      queryParams: string
    }
  | {
      type: "UPDATE_HASH"
      hash: string
    }
  | {
      type: "STOP_SCRIPT"
    }
  | {
      type: "RERUN_SCRIPT"
    }
  | {
      type: "CLEAR_CACHE"
    }
  | {
      type: "SET_CUSTOM_THEME_CONFIG"
      themeName?: PresetThemeName
      // TODO: Consider removing themeInfo once stakeholders no longer use it
      themeInfo?: ICustomThemeConfig
    }
  | {
      type: "SEND_APP_HEARTBEAT"
    }
  | {
      type: "RESTART_WEBSOCKET_CONNECTION"
    }
  | {
      type: "TERMINATE_WEBSOCKET_CONNECTION"
    }
)

export type IGuestToHostMessage =
  | {
      type: "GUEST_READY"
      streamlitExecutionStartedAt: number
      guestReadyAt: number
    }
  | {
      type: "MENU_ITEM_CALLBACK"
      key: string
    }
  | {
      type: "TOOLBAR_ITEM_CALLBACK"
      key: string
    }
  | {
      type: "SET_APP_PAGES"
      appPages: IAppPage[]
    }
  | {
      type: "SET_CURRENT_PAGE_NAME"
      currentPageName: string
      currentPageScriptHash: string
    }
  | {
      type: "SET_PAGE_FAVICON"
      favicon: string
    }
  | {
      type: "SET_PAGE_TITLE"
      title: string
    }
  | {
      type: "SET_QUERY_PARAM"
      queryParams: string
    }
  | {
      type: "SET_THEME_CONFIG"
      themeInfo: ExportedTheme
    }
  | {
      type: "UPDATE_HASH"
      hash: string
    }
  | {
      type: "SCRIPT_RUN_STATE_CHANGED"
      scriptRunState: ScriptRunState
    }
  | {
      type: "REDIRECT_TO_URL"
      url: string
    }
  | {
      type: "CUSTOM_PARENT_MESSAGE"
      message: string
    }
  | {
      type: "WEBSOCKET_DISCONNECTED"
      attemptingToReconnect: boolean
      // TODO(vdonato): Maybe provide a reason the disconnect happened. This
      // could either be a WS disconnect code or a flag signifying the host
      // requested this websocket disconnect.
    }
  | {
      type: "WEBSOCKET_CONNECTED"
    }
  | {
      type: "METRICS_EVENT"
      eventName: string
      data: MetricsEvent
    }

export type VersionedMessage<Message> = {
  stCommVersion: number
} & Message

/**
 * The app config contains various configurations that the host platform can
 * use to configure streamlit-app frontend behavior. This should to be treated as part of the public
 * API, and changes need to be backwards-compatible meaning that an old host configuration
 * should still work with a new frontend versions.
 *
 * TODO(lukasmasuch): Potentially refactor HostCommunicationManager and move this type
 * to AppContext.tsx.
 */
export type AppConfig = {
  /**
   * A list of origins that we're allowed to receive cross-iframe messages
   * from via the browser's window.postMessage API.
   */
  allowedOrigins?: string[]
  /**
   * Whether to wait until we've received a SET_AUTH_TOKEN message before
   * resolving deferredAuthToken.promise. The WebsocketConnection class waits
   * for this promise to resolve before attempting to establish a connection
   * with the Streamlit server.
   */
  useExternalAuthToken?: boolean
  /**
   * Enables custom string messages to be sent to the host
   */
  enableCustomParentMessages?: boolean
}

export type MetricsConfig = {
  /**
   * URL to send metrics data to via POST request.
   * Setting to "postMessage" sends metrics events via postMessage to host.
   * Setting to "off" disables metrics collection.
   * If undefined, metricsUrl requested from centralized config file.
   */
  metricsUrl?: string | "postMessage" | "off"
}

/**
 * The response structure of the `_stcore/host-config` endpoint.
 * This combines streamlit-lib specific configuration options with
 * streamlit-app specific options (e.g. allowed message origins).
 */
export type IHostConfigResponse = LibConfig & AppConfig & MetricsConfig


================================================
File: /frontend/lib/src/mocks/mockTheme.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A mock theme definition for use in unit tests. */

import { lightThemePrimitives } from "baseui"
import { transparentize } from "color2k"

import { ThemeConfig } from "@streamlit/lib/src/theme"
import { createBaseUiTheme } from "@streamlit/lib/src/theme/createThemeUtil"
import { createEmotionColors } from "@streamlit/lib/src/theme/getColors"
import {
  breakpoints,
  colors,
  fonts,
  fontSizes,
  fontWeights,
  genericFonts,
  iconSizes,
  lineHeights,
  radii,
  sizes,
  spacing,
  zIndices,
} from "@streamlit/lib/src/theme/primitives"

const requiredThemeColors = {
  bgColor: colors.white,
  secondaryBg: colors.gray20,
  bodyText: colors.gray85,
  warning: colors.yellow110,
  warningBg: transparentize(colors.yellow80, 0.8),
  success: colors.green100,
  successBg: transparentize(colors.green80, 0.8),
  infoBg: transparentize(colors.blue70, 0.9),
  info: colors.blue100,
  danger: colors.red100,
  dangerBg: transparentize(colors.red70, 0.8),

  primary: colors.red70,
  disabled: colors.gray40,
  lightestGray: colors.gray20,
  lightGray: colors.gray30,
  gray: colors.gray60,
  darkGray: colors.gray70,
  red: colors.red80,
  blue: colors.blue80,
  green: colors.green80,
  yellow: colors.yellow80,
}

interface OptionalThemeColors {
  skeletonBackgroundColor?: string
  widgetBackgroundColor?: string
  widgetBorderColor?: string
}

const optionalThemeColors: OptionalThemeColors = {}

const genericColors = {
  ...colors,
  ...requiredThemeColors,
  ...optionalThemeColors,
}

const emotionMockTheme = {
  inSidebar: false,
  breakpoints,
  colors: createEmotionColors(genericColors),
  fonts,
  fontSizes,
  fontWeights,
  genericFonts,
  iconSizes,
  lineHeights,
  radii,
  sizes,
  spacing,
  zIndices,
}

const baseuiMockTheme = createBaseUiTheme(
  emotionMockTheme,
  lightThemePrimitives
)

export const mockTheme: ThemeConfig = {
  name: "MockTheme",
  emotion: emotionMockTheme,
  basewebTheme: baseuiMockTheme,
  primitives: lightThemePrimitives,
}


================================================
File: /frontend/lib/src/mocks/mocks.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  SessionInfo,
  Props as SessionInfoProps,
} from "@streamlit/lib/src/SessionInfo"
import { StreamlitEndpoints } from "@streamlit/lib/src/StreamlitEndpoints"
import { IAppPage } from "@streamlit/lib/src/proto"

/** Create mock SessionInfo.props */
export function mockSessionInfoProps(
  overrides: Partial<SessionInfoProps> = {}
): SessionInfoProps {
  return {
    appId: "mockAppId",
    sessionId: "mockSessionId",
    streamlitVersion: "mockStreamlitVersion",
    pythonVersion: "mockPythonVersion",
    installationId: "mockInstallationId",
    installationIdV3: "mockInstallationIdV3",
    maxCachedMessageAge: 123,
    isHello: false,
    ...overrides,
  }
}

/** Create a SessionInfo instance, with a mocked set of current props. */
export function mockSessionInfo(
  overrides: Partial<SessionInfoProps> = {}
): SessionInfo {
  const sessionInfo = new SessionInfo()
  sessionInfo.setCurrent(mockSessionInfoProps(overrides))
  return sessionInfo
}

/** Return a mock StreamlitEndpoints implementation. */
export function mockEndpoints(
  overrides: Partial<StreamlitEndpoints> = {}
): StreamlitEndpoints {
  return {
    buildComponentURL: vi.fn(),
    buildMediaURL: vi.fn(),
    buildFileUploadURL: vi.fn(),
    buildAppPageURL: vi
      .fn()
      .mockImplementation(
        (pageLinkBaseURL: string, page: IAppPage, pageIndex: number) => {
          return `http://mock/app/page/${page.pageName}.${pageIndex}`
        }
      ),
    uploadFileUploaderFile: vi
      .fn()
      .mockRejectedValue(new Error("unimplemented mock endpoint")),
    deleteFileAtURL: vi
      .fn()
      .mockRejectedValue(new Error("unimplemented mock endpoint")),
    fetchCachedForwardMsg: vi
      .fn()
      .mockRejectedValue(new Error("unimplemented mock endpoint")),
    ...overrides,
  }
}

export function mockConvertRemToPx(scssVar: string): number {
  return Number(scssVar.replace("rem", "")) * 16
}


================================================
File: /frontend/lib/src/mocks/arrow/differentColumnTypes.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for 2 dataframes
// with different column types.
//
// df1 = pd.DataFrame([["baz", "1"], ["qux", "2"]], columns=[1, 2], index=["i1", "i2"])
// df2 = pd.DataFrame([["foo", "1"], ["bar", "2"]], columns=["c1", "c2"], index=["i1", "i2"])

export const DIFFERENT_COLUMN_TYPES = new Uint8Array([
  255, 255, 255, 255, 72, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 120, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 80, 2, 0, 0, 4, 0, 0, 0, 67, 2, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48,
  95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100,
  101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110,
  115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49, 34, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49,
  34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34, 44, 32,
  34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34,
  44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108,
  44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
  95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95,
  34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123,
  34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114,
  111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34,
  52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118,
  101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 50, 46, 52, 34, 125, 0,
  6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3, 0, 0, 0, 116, 0, 0, 0, 60,
  0, 0, 0, 4, 0, 0, 0, 168, 255, 255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 36, 0, 0,
  0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110, 100, 101, 120, 95,
  108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0, 0, 168, 255, 255, 255, 220,
  255, 255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
  1, 0, 0, 0, 50, 0, 0, 0, 204, 255, 255, 255, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0,
  12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0,
  0, 255, 255, 255, 255, 24, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6,
  0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 72, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 172, 0, 0, 0,
  16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0,
  0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
  40, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 64, 0,
  0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
  6, 0, 0, 0, 0, 0, 0, 0, 98, 97, 122, 113, 117, 120, 0, 0, 0, 0, 0, 0, 1, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 49, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
  0, 4, 0, 0, 0, 0, 0, 0, 0, 105, 49, 105, 50, 0, 0, 0, 0, 255, 255, 255, 255,
  0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/empty.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for an empty dataframe.
//
// st._arrow_table(pd.DataFrame())

export const EMPTY = new Uint8Array([
  255, 255, 255, 255, 40, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 172, 1, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 132, 1, 0, 0, 4, 0, 0, 0, 118, 1, 0, 0, 123,
  34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58,
  32, 91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95,
  48, 95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110,
  100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 101, 109, 112, 116, 121, 34, 44,
  32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111,
  98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109,
  110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48,
  95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 101, 109, 112, 116, 121, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123,
  34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114,
  111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34,
  52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118,
  101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 50, 46, 52, 34, 125, 0,
  0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 16,
  0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 1, 16,
  0, 0, 0, 40, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110,
  100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0, 0, 4, 0, 4,
  0, 4, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/fewerColumns.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for 2 dataframes
// with different column dimensions.
//
// df1 = pd.DataFrame([["foo"], ["bar"]], columns=["c1"], index=["i1", "i2"])
// df2 = pd.DataFrame([["foo", 1], ["bar", 2]], columns=["c1", "c2"], index=["i1", "i2"])

export const FEWER_COLUMNS = new Uint8Array([
  255, 255, 255, 255, 208, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 40, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 243, 1, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48,
  95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100,
  101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34,
  44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 123, 34, 101, 110, 99, 111, 100, 105, 110, 103, 34, 58, 32,
  34, 85, 84, 70, 45, 56, 34, 125, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109,
  110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49,
  34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  34, 99, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110,
  117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106,
  101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58,
  32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101,
  108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98,
  106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111,
  114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34,
  112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105,
  111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49,
  46, 50, 46, 52, 34, 125, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 2,
  0, 0, 0, 76, 0, 0, 0, 4, 0, 0, 0, 204, 255, 255, 255, 0, 0, 1, 5, 16, 0, 0,
  0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110, 100,
  101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0, 0, 204, 255,
  255, 255, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0,
  0, 1, 5, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99,
  49, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 216, 0, 0,
  0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0,
  0, 0, 3, 4, 0, 24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12,
  0, 4, 0, 8, 0, 10, 0, 0, 0, 124, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 6, 0,
  0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
  0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
  6, 0, 0, 0, 0, 0, 0, 0, 102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 105, 49, 105, 50, 0, 0, 0, 0, 255, 255, 255,
  255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { CATEGORICAL } from "./types/categorical"
import { CATEGORICAL_COLUMN } from "./types/categoricalColumn"
import { CATEGORICAL_INTERVAL } from "./types/categoricalInterval"
import { DATE, DATETIME, DATETIMETZ } from "./types/datetime"
import { DECIMAL } from "./types/decimal"
import { DICTIONARY } from "./types/dictionary"
import { FLOAT64 } from "./types/float64"
import { INT64 } from "./types/int64"
import { INTERVAL_DATETIME64 } from "./types/intervalDatetime64"
import { INTERVAL_FLOAT64 } from "./types/intervalFloat64"
import { INTERVAL_INT64 } from "./types/intervalInt64"
import { INTERVAL_UINT64 } from "./types/intervalUint64"
import { PERIOD } from "./types/period"
import { RANGE } from "./types/range"
import { UINT64 } from "./types/uint64"
import { UNICODE } from "./types/unicode"
import { EMPTY } from "./empty"
import { MULTI } from "./multi"
import { NAMED_INDEX } from "./namedIndex"
import { DISPLAY_VALUES, STYLER } from "./styler"
import { FEWER_COLUMNS } from "./fewerColumns"
import { DIFFERENT_COLUMN_TYPES } from "./differentColumnTypes"
import { VEGA_LITE } from "./vegaLite"
import { TEN_BY_TEN } from "./tenByTen"
import { TALL, VERY_TALL } from "./tall"
import { SMALL, WIDE } from "./wide"
import { TIMEDELTA } from "./types/timedelta"

export {
  // Types
  CATEGORICAL,
  CATEGORICAL_COLUMN,
  CATEGORICAL_INTERVAL,
  DATE,
  DATETIME,
  DATETIMETZ,
  DECIMAL,
  DICTIONARY,
  FLOAT64,
  INT64,
  INTERVAL_DATETIME64,
  INTERVAL_FLOAT64,
  INTERVAL_INT64,
  INTERVAL_UINT64,
  PERIOD,
  RANGE,
  UINT64,
  UNICODE,
  TIMEDELTA,
  // Special cases
  EMPTY,
  MULTI,
  STYLER,
  DISPLAY_VALUES,
  FEWER_COLUMNS,
  DIFFERENT_COLUMN_TYPES,
  VEGA_LITE,
  NAMED_INDEX,
  // Specific sizes
  TEN_BY_TEN,
  TALL,
  VERY_TALL,
  SMALL,
  WIDE,
}


================================================
File: /frontend/lib/src/mocks/arrow/multi.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `MultiIndex` for both `index` and `columns` attributes.
//
// arrays = [[1, 2], ["red", "blue"]]
// pd.DataFrame(
//     [["foo", "1"], ["bar", "2"]],
//     index=pd.MultiIndex.from_arrays(arrays, names=("number", "color")),
//     columns=pd.MultiIndex.from_arrays(arrays, names=("number", "color")),
// )

export const MULTI = new Uint8Array([
  255, 255, 255, 255, 168, 4, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 144, 3, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
  0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 104, 3, 0, 0, 4, 0, 0, 0, 90, 3, 0, 0, 123,
  34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58,
  32, 91, 34, 110, 117, 109, 98, 101, 114, 34, 44, 32, 34, 99, 111, 108, 111,
  114, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101,
  120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34,
  110, 117, 109, 98, 101, 114, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95,
  110, 97, 109, 101, 34, 58, 32, 34, 110, 117, 109, 98, 101, 114, 34, 44, 32,
  34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 99, 111, 108, 111, 114, 34, 44, 32, 34,
  102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 99, 111, 108,
  111, 114, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99,
  116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123,
  34, 101, 110, 99, 111, 100, 105, 110, 103, 34, 58, 32, 34, 85, 84, 70, 45,
  56, 34, 125, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58,
  32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 40, 39, 49, 39, 44, 32,
  39, 114, 101, 100, 39, 41, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110,
  97, 109, 101, 34, 58, 32, 34, 40, 39, 49, 39, 44, 32, 39, 114, 101, 100, 39,
  41, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 40, 39,
  50, 39, 44, 32, 39, 98, 108, 117, 101, 39, 41, 34, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 40, 39, 50, 39, 44, 32, 39,
  98, 108, 117, 101, 39, 41, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44,
  32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111,
  98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 34, 110, 117, 109, 98, 101, 114, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 110, 117, 109, 98, 101, 114, 34,
  44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109,
  101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32,
  123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 111, 108, 111, 114, 34, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 99,
  111, 108, 111, 114, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98,
  106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111,
  114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34,
  112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105,
  111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49,
  46, 50, 46, 52, 34, 125, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0,
  4, 0, 0, 0, 176, 0, 0, 0, 108, 0, 0, 0, 48, 0, 0, 0, 4, 0, 0, 0, 112, 255,
  255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0,
  0, 0, 99, 111, 108, 111, 114, 0, 0, 0, 88, 255, 255, 255, 152, 255, 255, 255,
  0, 0, 1, 2, 16, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
  110, 117, 109, 98, 101, 114, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0,
  0, 1, 64, 0, 0, 0, 208, 255, 255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 32, 0, 0, 0,
  4, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 40, 39, 50, 39, 44, 32, 39, 98, 108,
  117, 101, 39, 41, 0, 0, 0, 192, 255, 255, 255, 16, 0, 20, 0, 8, 0, 6, 0, 7,
  0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 36, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 40, 39, 49, 39, 44, 32, 39, 114, 101, 100,
  39, 41, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255,
  72, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0,
  12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0,
  24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 204, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0,
  0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 24, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0,
  2, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
  0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
  0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 102,
  111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
  49, 50, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 114, 101, 100, 98, 108, 117,
  101, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/namedIndex.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that contains columns with decimal values.
//
// df = pd.DataFrame(
//   [
//       ["foo", 1],
//       ["bar", 2],
//   ],
//   columns=["c1", "c2"],
// )
// df.index.name = "INDEX"

export const NAMED_INDEX = new Uint8Array([
  255, 255, 255, 255, 240, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 72, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 32, 2, 0, 0, 4, 0, 0, 0, 19, 2, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34,
  44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 34, 73, 78, 68, 69, 88, 34, 44,
  32, 34, 115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111,
  112, 34, 58, 32, 50, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93,
  44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101,
  115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108,
  108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98,
  106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 123, 34, 101, 110, 99, 111, 100, 105, 110, 103, 34, 58, 32, 34, 85,
  84, 70, 45, 56, 34, 125, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110,
  115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34,
  44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
  99, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99,
  116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110,
  117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99,
  50, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 34, 99, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32,
  123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114,
  114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32,
  34, 49, 48, 46, 48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 53, 46, 51,
  34, 125, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 2, 0, 0, 0, 76, 0,
  0, 0, 4, 0, 0, 0, 204, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0,
  4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 50, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8,
  0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0,
  0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 2, 0, 0, 0, 99, 49, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255,
  255, 255, 255, 200, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5,
  0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 108, 0, 0, 0, 16, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16,
  0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0,
  0, 102, 111, 111, 98, 97, 114, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/styler.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe that has a Styler.
//
// pd.DataFrame(
//     [[1, 2], [3, 4]],
// ).style.highlight_max()

export const STYLER = new Uint8Array([
  255, 255, 255, 255, 216, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 44, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 4, 2, 0, 0, 4, 0, 0, 0, 244, 1, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34,
  44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34,
  58, 32, 50, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32,
  34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34,
  58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 34, 49, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34,
  58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121,
  97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110,
  34, 58, 32, 34, 52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 50,
  46, 52, 34, 125, 0, 0, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 2,
  0, 0, 0, 68, 0, 0, 0, 4, 0, 0, 0, 212, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0,
  0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 196, 255,
  255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0,
  0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0,
  0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 184, 0, 0, 0, 20, 0, 0, 0,
  0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0,
  24, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0,
  10, 0, 0, 0, 92, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])

export const DISPLAY_VALUES = new Uint8Array([
  255, 255, 255, 255, 200, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 48, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 8, 2, 0, 0, 4, 0, 0, 0, 250, 1, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34,
  44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34,
  58, 32, 50, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32,
  34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34,
  58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111,
  100, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 49, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111,
  100, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34,
  99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97,
  114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34,
  118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34,
  125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105,
  111, 110, 34, 58, 32, 34, 49, 46, 50, 46, 52, 34, 125, 0, 0, 6, 0, 0, 0, 112,
  97, 110, 100, 97, 115, 0, 0, 2, 0, 0, 0, 60, 0, 0, 0, 4, 0, 0, 0, 220, 255,
  255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0,
  0, 0, 49, 0, 0, 0, 204, 255, 255, 255, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0,
  0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255,
  255, 255, 255, 216, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5,
  0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 124, 0, 0, 0, 16, 0,
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
  0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 49, 51, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0,
  255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/tall.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for dataframes that are
// tall enough to require vertical scroll bars.
//
// TALL = pd.DataFrame([[i] for i in range(0, 12)], index=range(0, 12))
// VERY_TALL = pd.DataFrame([[i] for i in range(0, 100)], index=range(0, 100))

export const TALL = new Uint8Array([
  255, 255, 255, 255, 64, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 200, 1, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 6, 0, 0, 0, 112, 97,
  110, 100, 97, 115, 0, 0, 146, 1, 0, 0, 123, 34, 105, 110, 100, 101, 120, 95,
  99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 107, 105, 110,
  100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34, 44, 32, 34, 110, 97, 109,
  101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 115, 116, 97, 114, 116, 34,
  58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34, 58, 32, 49, 50, 44, 32, 34,
  115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32, 34, 99, 111, 108, 117,
  109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99,
  111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110,
  117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116,
  54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110,
  117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58,
  32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97,
  114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34,
  58, 32, 34, 55, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 52, 46,
  49, 34, 125, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0,
  12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0,
  0, 0, 0, 0, 1, 64, 0, 0, 0, 255, 255, 255, 255, 136, 0, 0, 0, 20, 0, 0, 0, 0,
  0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24,
  0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10,
  0, 0, 0, 60, 0, 0, 0, 16, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
  0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
  0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
  0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0,
  255, 255, 255, 255, 0, 0, 0, 0,
])

export const VERY_TALL = new Uint8Array([
  255, 255, 255, 255, 64, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 200, 1, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 6, 0, 0, 0, 112, 97,
  110, 100, 97, 115, 0, 0, 147, 1, 0, 0, 123, 34, 105, 110, 100, 101, 120, 95,
  99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 107, 105, 110,
  100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34, 44, 32, 34, 110, 97, 109,
  101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 115, 116, 97, 114, 116, 34,
  58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34, 58, 32, 49, 48, 48, 44, 32,
  34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32, 34, 99, 111, 108,
  117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34, 58, 32, 91, 123,
  34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105,
  101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32,
  34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34,
  99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34,
  58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121,
  97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110,
  34, 58, 32, 34, 55, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 52,
  46, 49, 34, 125, 0, 1, 0, 0, 0, 20, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0,
  12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0,
  0, 0, 0, 0, 1, 64, 0, 0, 0, 255, 255, 255, 255, 136, 0, 0, 0, 20, 0, 0, 0, 0,
  0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24,
  0, 0, 0, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10,
  0, 0, 0, 60, 0, 0, 0, 16, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
  0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
  0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0,
  0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0,
  15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0,
  18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,
  21, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
  24, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0,
  27, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0,
  30, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
  33, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
  36, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0,
  39, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
  42, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
  45, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
  48, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
  51, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
  54, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0,
  57, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
  60, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
  63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0,
  66, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
  69, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
  72, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
  75, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
  78, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
  81, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0,
  84, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
  87, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
  90, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
  93, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
  96, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
  99, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/tenByTen.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that is 10x10.
//
// pd.DataFrame(
//    [range(i, i + 10) for i in range(0, 100, 10)],
//    index=range(10),
// )
export const TEN_BY_TEN = new Uint8Array([
  255, 255, 255, 255, 112, 7, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 68, 5, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 6, 0, 0, 0, 112, 97,
  110, 100, 97, 115, 0, 0, 13, 5, 0, 0, 123, 34, 105, 110, 100, 101, 120, 95,
  99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 107, 105, 110,
  100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34, 44, 32, 34, 110, 97, 109,
  101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 115, 116, 97, 114, 116, 34,
  58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34, 58, 32, 49, 48, 44, 32, 34,
  115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32, 34, 99, 111, 108, 117,
  109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99,
  111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110,
  117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116,
  54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110,
  117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49,
  34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  34, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44,
  32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108,
  125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34, 44, 32, 34,
  102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101,
  116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123,
  34, 110, 97, 109, 101, 34, 58, 32, 34, 51, 34, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 51, 34, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54,
  52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97,
  116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109,
  101, 34, 58, 32, 34, 52, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110,
  97, 109, 101, 34, 58, 32, 34, 52, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 34, 53, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101,
  34, 58, 32, 34, 53, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 54, 34,
  44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
  54, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 55, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 55, 34, 44, 32,
  34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 56, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 56, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 34, 57, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 57, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34,
  58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121,
  97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110,
  34, 58, 32, 34, 55, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 52,
  46, 49, 34, 125, 0, 0, 0, 10, 0, 0, 0, 196, 1, 0, 0, 132, 1, 0, 0, 84, 1, 0,
  0, 36, 1, 0, 0, 244, 0, 0, 0, 196, 0, 0, 0, 148, 0, 0, 0, 100, 0, 0, 0, 52,
  0, 0, 0, 4, 0, 0, 0, 116, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0,
  0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 57, 0, 0, 0, 100, 254, 255, 255, 0, 0,
  0, 1, 64, 0, 0, 0, 160, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0,
  4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 56, 0, 0, 0, 144, 254, 255, 255, 0, 0, 0,
  1, 64, 0, 0, 0, 204, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 55, 0, 0, 0, 188, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 248, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 54, 0, 0, 0, 232, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 36, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 53, 0, 0, 0, 20, 255, 255, 255, 0, 0, 0, 1, 64,
  0, 0, 0, 80, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 52, 0, 0, 0, 64, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 124, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 1, 0, 0, 0, 51, 0, 0, 0, 108, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 168, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 152, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 212, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 196, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1,
  2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0,
  8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0,
  255, 255, 255, 255, 56, 2, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0,
  5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 32, 3, 0, 0, 0, 0,
  0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 92, 1, 0, 0, 16, 0,
  0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
  80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 80,
  0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
  0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 64, 1,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 80, 0, 0,
  0, 0, 0, 0, 0, 144, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 1, 0,
  0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 224, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 224, 1, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 48, 2, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 2, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
  0, 0, 0, 128, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 2, 0, 0, 0,
  0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 208, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 208, 2, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0,
  0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
  0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
  0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0,
  0, 80, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
  11, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0,
  41, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
  71, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 32, 0,
  0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
  0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
  0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0,
  0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
  0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
  0, 93, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0,
  24, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
  54, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
  84, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 15,
  0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 45, 0,
  0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
  0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
  0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
  0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0,
  0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
  0, 7, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0,
  37, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0,
  67, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
  97, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 28,
  0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 58, 0,
  0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
  0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0,
  0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
  0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
  0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255,
  0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/vegaLite.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// to be used in a VegaLite chart.
//
// data = np.random.randn(10, 3)
// df = pd.DataFrame(data, columns=["a", "b", "c"])

export const VEGA_LITE = new Uint8Array([
  255, 255, 255, 255, 120, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 176, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
  0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 136, 2, 0, 0, 4, 0, 0, 0, 120, 2, 0, 0,
  123, 34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34,
  58, 32, 91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103,
  101, 34, 44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111,
  112, 34, 58, 32, 49, 48, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120,
  101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98,
  106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 123, 34, 101, 110, 99, 111, 100, 105, 110, 103, 34, 58, 32, 34, 85,
  84, 70, 45, 56, 34, 125, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110,
  115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 97, 34, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 97,
  34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 102, 108, 111, 97, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 102, 108, 111, 97, 116, 54, 52,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 98, 34,
  44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
  98, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 102, 108, 111, 97, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 102, 108, 111, 97, 116, 54,
  52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110,
  117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99,
  34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  34, 99, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 102, 108, 111, 97, 116, 54, 52, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 102, 108, 111, 97,
  116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34,
  58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121,
  97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110,
  34, 58, 32, 34, 52, 46, 48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 50,
  46, 52, 34, 125, 0, 0, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 3,
  0, 0, 0, 108, 0, 0, 0, 48, 0, 0, 0, 4, 0, 0, 0, 176, 255, 255, 255, 0, 0, 1,
  3, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 99, 0, 0, 0,
  162, 255, 255, 255, 0, 0, 2, 0, 216, 255, 255, 255, 0, 0, 1, 3, 16, 0, 0, 0,
  20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 98, 0, 0, 0, 202, 255, 255,
  255, 0, 0, 2, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0,
  0, 0, 0, 0, 1, 3, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
  0, 97, 0, 6, 0, 8, 0, 6, 0, 6, 0, 0, 0, 0, 0, 2, 0, 255, 255, 255, 255, 232,
  0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12,
  0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24,
  0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 124, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
  160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0,
  80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 207, 229, 243, 142, 57, 252,
  63, 78, 49, 227, 105, 89, 237, 1, 64, 233, 149, 50, 211, 31, 103, 238, 63,
  102, 41, 103, 240, 62, 71, 218, 63, 19, 234, 144, 201, 107, 90, 232, 63, 228,
  149, 229, 144, 235, 90, 213, 63, 132, 145, 1, 29, 77, 9, 212, 63, 102, 41,
  111, 139, 113, 234, 228, 63, 189, 197, 191, 28, 117, 40, 2, 64, 56, 164, 25,
  241, 163, 245, 199, 191, 83, 137, 204, 250, 44, 156, 217, 63, 218, 61, 177,
  124, 132, 225, 253, 63, 54, 132, 211, 73, 172, 95, 195, 191, 237, 225, 170,
  13, 5, 112, 194, 63, 144, 179, 147, 8, 24, 38, 191, 63, 59, 153, 77, 117,
  191, 231, 247, 63, 240, 133, 126, 150, 192, 84, 235, 191, 108, 144, 114, 26,
  118, 169, 235, 63, 13, 58, 13, 241, 20, 69, 247, 191, 199, 135, 90, 127, 67,
  134, 248, 63, 171, 201, 34, 82, 210, 81, 239, 63, 130, 140, 165, 66, 220, 69,
  239, 191, 89, 180, 200, 248, 140, 108, 186, 191, 247, 133, 253, 75, 180, 68,
  247, 63, 203, 117, 34, 85, 65, 104, 220, 63, 182, 106, 176, 64, 160, 66, 202,
  191, 58, 58, 176, 236, 133, 108, 4, 192, 217, 47, 92, 219, 208, 191, 231,
  191, 93, 117, 165, 14, 169, 109, 167, 63, 14, 0, 109, 87, 126, 130, 247, 63,
  255, 255, 255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/wide.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for dataframes for testing
// horizontal scroll
// SMALL = pd.DataFrame([[0]], index=[0])
// WIDE = pd.DataFrame([range(0, 21)], index=[0])

export const SMALL = new Uint8Array([
  255, 255, 255, 255, 200, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 12, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 6, 0, 0, 0, 112, 97,
  110, 100, 97, 115, 0, 0, 215, 1, 0, 0, 123, 34, 105, 110, 100, 101, 120, 95,
  99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 34, 95, 95, 105, 110, 100,
  101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 93, 44, 32, 34,
  99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34, 58,
  32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32,
  34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110,
  97, 109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101,
  118, 101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111,
  114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34,
  112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105,
  111, 110, 34, 58, 32, 34, 55, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49,
  46, 52, 46, 49, 34, 125, 0, 2, 0, 0, 0, 84, 0, 0, 0, 4, 0, 0, 0, 196, 255,
  255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17,
  0, 0, 0, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95,
  48, 95, 95, 0, 0, 0, 196, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0, 20,
  0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 2, 16, 0, 0,
  0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 8, 0, 12, 0,
  8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255,
  255, 184, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0,
  12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 92, 0, 0, 0, 16, 0, 0, 0, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
])
export const WIDE = new Uint8Array([
  255, 255, 255, 255, 88, 14, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 224, 9, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
  0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 6, 0, 0, 0, 112,
  97, 110, 100, 97, 115, 0, 0, 169, 9, 0, 0, 123, 34, 105, 110, 100, 101, 120,
  95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 34, 95, 95, 105, 110,
  100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 93, 44, 32,
  34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34,
  58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 34, 49, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34,
  50, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 34, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 51, 34, 44, 32,
  34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 51, 34,
  44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109,
  101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32,
  123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 52, 34, 44, 32, 34, 102, 105,
  101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 52, 34, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110,
  97, 109, 101, 34, 58, 32, 34, 53, 34, 44, 32, 34, 102, 105, 101, 108, 100,
  95, 110, 97, 109, 101, 34, 58, 32, 34, 53, 34, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34,
  44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 34, 54, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 34, 54, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110,
  117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116,
  54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110,
  117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 55,
  34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  34, 55, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112,
  121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44,
  32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108,
  125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 56, 34, 44, 32, 34,
  102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 56, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101,
  116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123,
  34, 110, 97, 109, 101, 34, 58, 32, 34, 57, 34, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 57, 34, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54,
  52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97,
  116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109,
  101, 34, 58, 32, 34, 49, 48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95,
  110, 97, 109, 101, 34, 58, 32, 34, 49, 48, 34, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34,
  44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 34, 49, 49, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 49, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 34, 49, 50, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
  101, 34, 58, 32, 34, 49, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34,
  49, 51, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34,
  58, 32, 34, 49, 51, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117,
  108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49, 52,
  34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  34, 49, 52, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49, 53, 34, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49,
  53, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125,
  44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49, 54, 34, 44, 32, 34,
  102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49, 54, 34,
  44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109,
  101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32,
  123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 49, 55, 34, 44, 32, 34, 102, 105,
  101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49, 55, 34, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110,
  97, 109, 101, 34, 58, 32, 34, 49, 56, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 49, 56, 34, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54,
  52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58,
  32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97,
  116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109,
  101, 34, 58, 32, 34, 49, 57, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95,
  110, 97, 109, 101, 34, 58, 32, 34, 49, 57, 34, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34,
  44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  105, 110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97,
  34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 34, 50, 48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 50, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118,
  101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
  110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
  116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
  110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34,
  58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121,
  97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110,
  34, 58, 32, 34, 55, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100,
  97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 52,
  46, 49, 34, 125, 0, 0, 0, 22, 0, 0, 0, 20, 4, 0, 0, 212, 3, 0, 0, 164, 3, 0,
  0, 116, 3, 0, 0, 68, 3, 0, 0, 20, 3, 0, 0, 228, 2, 0, 0, 180, 2, 0, 0, 132,
  2, 0, 0, 84, 2, 0, 0, 36, 2, 0, 0, 244, 1, 0, 0, 196, 1, 0, 0, 148, 1, 0, 0,
  100, 1, 0, 0, 52, 1, 0, 0, 4, 1, 0, 0, 212, 0, 0, 0, 164, 0, 0, 0, 116, 0, 0,
  0, 68, 0, 0, 0, 4, 0, 0, 0, 84, 252, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 36,
  0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95, 95, 105, 110, 100, 101,
  120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0, 0, 0, 84, 252, 255, 255,
  0, 0, 0, 1, 64, 0, 0, 0, 144, 252, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 50, 48, 0, 0, 128, 252, 255, 255,
  0, 0, 0, 1, 64, 0, 0, 0, 188, 252, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 57, 0, 0, 172, 252, 255, 255,
  0, 0, 0, 1, 64, 0, 0, 0, 232, 252, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 56, 0, 0, 216, 252, 255, 255,
  0, 0, 0, 1, 64, 0, 0, 0, 20, 253, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 55, 0, 0, 4, 253, 255, 255, 0,
  0, 0, 1, 64, 0, 0, 0, 64, 253, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0,
  0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 54, 0, 0, 48, 253, 255, 255, 0, 0,
  0, 1, 64, 0, 0, 0, 108, 253, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0,
  4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 53, 0, 0, 92, 253, 255, 255, 0, 0, 0,
  1, 64, 0, 0, 0, 152, 253, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 52, 0, 0, 136, 253, 255, 255, 0, 0, 0,
  1, 64, 0, 0, 0, 196, 253, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 51, 0, 0, 180, 253, 255, 255, 0, 0, 0,
  1, 64, 0, 0, 0, 240, 253, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 50, 0, 0, 224, 253, 255, 255, 0, 0, 0,
  1, 64, 0, 0, 0, 28, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 49, 0, 0, 12, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 72, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 49, 48, 0, 0, 56, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 116, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 57, 0, 0, 0, 100, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 160, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 56, 0, 0, 0, 144, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 204, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 55, 0, 0, 0, 188, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 248, 254, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 54, 0, 0, 0, 232, 254, 255, 255, 0, 0, 0, 1,
  64, 0, 0, 0, 36, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 53, 0, 0, 0, 20, 255, 255, 255, 0, 0, 0, 1, 64,
  0, 0, 0, 80, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 52, 0, 0, 0, 64, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 124, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 1, 0, 0, 0, 51, 0, 0, 0, 108, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 168, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 152, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 212, 255, 255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0,
  0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 196, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0,
  0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1,
  2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0,
  8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 255, 255, 255,
  255, 120, 4, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0,
  12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 220, 2, 0, 0, 16, 0, 0, 0, 1,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
  0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
  0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 40, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0,
  0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0,
  0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
  0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
  8, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
  0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
  0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
  0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
  0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
  0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 136, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
  152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
  8, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  160, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 22, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0,
  7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10,
  0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0,
  0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
  0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0,
  0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255,
  255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/categorical.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `CategoricalIndex` for both `index` and `columns` attributes.
//
// pd.DataFrame(
//     [["foo", 100], ["bar", 200]],
//     index=pd.CategoricalIndex(
//         ["i1", "i2"],
//         categories=["i1", "i2", "i3"],
//     ),
//     columns=pd.CategoricalIndex(
//         ["c1", "c2"],
//         categories=["c1", "c2", "c3"],
//     ),
// )

export const CATEGORICAL = new Uint8Array([
  255, 255, 255, 255, 216, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 200, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
  0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 160, 2, 0, 0, 4, 0, 0, 0, 145, 2, 0, 0,
  123, 34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34,
  58, 32, 91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108,
  95, 48, 95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105,
  110, 100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 99, 97, 116, 101, 103, 111, 114,
  105, 99, 97, 108, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 56, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 123, 34, 110, 117, 109, 95, 99, 97, 116, 101,
  103, 111, 114, 105, 101, 115, 34, 58, 32, 51, 44, 32, 34, 111, 114, 100, 101,
  114, 101, 100, 34, 58, 32, 102, 97, 108, 115, 101, 125, 125, 93, 44, 32, 34,
  99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34,
  44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116,
  97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101,
  34, 58, 32, 34, 99, 50, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 99, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
  34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105,
  110, 116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
  58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58,
  32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118,
  101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  116, 121, 112, 101, 34, 58, 32, 34, 99, 97, 116, 101, 103, 111, 114, 105, 99,
  97, 108, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 105, 110, 116, 56, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97,
  116, 97, 34, 58, 32, 123, 34, 110, 117, 109, 95, 99, 97, 116, 101, 103, 111,
  114, 105, 101, 115, 34, 58, 32, 51, 44, 32, 34, 111, 114, 100, 101, 114, 101,
  100, 34, 58, 32, 102, 97, 108, 115, 101, 125, 125, 93, 44, 32, 34, 99, 114,
  101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121,
  34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101,
  114, 115, 105, 111, 110, 34, 58, 32, 34, 52, 46, 48, 46, 49, 34, 125, 44, 32,
  34, 112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34,
  58, 32, 34, 49, 46, 50, 46, 52, 34, 125, 0, 0, 0, 6, 0, 0, 0, 112, 97, 110,
  100, 97, 115, 0, 0, 3, 0, 0, 0, 180, 0, 0, 0, 108, 0, 0, 0, 20, 0, 0, 0, 16,
  0, 24, 0, 8, 0, 6, 0, 7, 0, 12, 0, 16, 0, 20, 0, 16, 0, 0, 0, 0, 0, 1, 5, 20,
  0, 0, 0, 68, 0, 0, 0, 44, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95,
  95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0,
  0, 0, 8, 0, 8, 0, 0, 0, 4, 0, 8, 0, 0, 0, 4, 0, 0, 0, 208, 255, 255, 255, 0,
  0, 0, 1, 8, 0, 0, 0, 152, 255, 255, 255, 204, 255, 255, 255, 0, 0, 1, 2, 16,
  0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 50, 0, 0, 8, 0,
  12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0, 20, 0, 8, 0,
  6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 24, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 49, 0, 0, 4, 0, 4, 0, 4, 0, 0,
  0, 0, 0, 0, 0, 255, 255, 255, 255, 168, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12,
  0, 20, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 2, 4, 0, 20, 0, 0, 0, 24,
  0, 0, 0, 0, 0, 0, 0, 8, 0, 10, 0, 0, 0, 4, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0,
  10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 76, 0, 0, 0, 16, 0, 0, 0, 3, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
  0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0,
  105, 49, 105, 50, 105, 51, 0, 0, 255, 255, 255, 255, 248, 0, 0, 0, 20, 0, 0,
  0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4,
  0, 24, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8,
  0, 10, 0, 0, 0, 140, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0,
  0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
  0, 16, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  40, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 102, 111, 111, 98, 97, 114, 0, 0, 100, 0, 0,
  0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 255, 255,
  255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/categoricalColumn.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses a categorical column.
//
// df = pd.DataFrame([["foo", 100], ["bar", 200]], columns=["c1", "c2"])
// df["c1"] = df["c1"].astype("category")

export const CATEGORICAL_COLUMN = new Uint8Array([
  255, 255, 255, 255, 64, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5, 0,
  8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 108, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8, 0,
  12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 68, 2, 0, 0, 4, 0, 0, 0, 53, 2, 0, 0, 123, 34,
  105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34,
  44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34,
  115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34,
  58, 32, 50, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32,
  34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34,
  58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
  32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117,
  108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
  58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116,
  34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123, 34,
  101, 110, 99, 111, 100, 105, 110, 103, 34, 58, 32, 34, 85, 84, 70, 45, 56,
  34, 125, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32,
  91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 99, 49, 34, 44,
  32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34,
  99, 97, 116, 101, 103, 111, 114, 105, 99, 97, 108, 34, 44, 32, 34, 110, 117,
  109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 56, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 123, 34, 110,
  117, 109, 95, 99, 97, 116, 101, 103, 111, 114, 105, 101, 115, 34, 58, 32, 50,
  44, 32, 34, 111, 114, 100, 101, 114, 101, 100, 34, 58, 32, 102, 97, 108, 115,
  101, 125, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 99, 50,
  34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32,
  34, 99, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109,
  112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34,
  44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108,
  108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123,
  34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114,
  111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34,
  49, 48, 46, 48, 46, 49, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
  118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 53, 46, 51, 34,
  125, 0, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 2, 0, 0, 0, 84,
  0, 0, 0, 20, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16,
  0, 0, 0, 0, 0, 1, 2, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 99, 50, 0, 0, 176, 255, 255, 255, 0, 0, 0, 1, 64, 0, 0, 0, 16, 0, 24,
  0, 8, 0, 6, 0, 7, 0, 12, 0, 16, 0, 20, 0, 16, 0, 0, 0, 0, 0, 1, 5, 20, 0, 0,
  0, 64, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 99, 49, 0,
  0, 8, 0, 8, 0, 0, 0, 4, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0,
  8, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 255, 255, 255,
  255, 168, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 6, 0, 5, 0, 8, 0,
  12, 0, 12, 0, 0, 0, 0, 2, 4, 0, 20, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0,
  10, 0, 0, 0, 4, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0,
  8, 0, 10, 0, 0, 0, 76, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 98, 97, 114, 102, 111, 111,
  0, 0, 255, 255, 255, 255, 184, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22,
  0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 24, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 92, 0, 0,
  0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
  0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
  0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 255, 255,
  255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/categoricalInterval.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses CategoricalDtype and stores Interval as values
//
// import pandas as pd
//
// metric_df = pd.DataFrame(
//   data=[
//     [pd.Interval(23.535, 256.5)],
//     [pd.Interval(23.535, 256.5)],
//     [pd.Interval(23.535, 256.5)],
//     [pd.Interval(256.5, 489.0)],
//     [pd.Interval(23.535, 256.5)],
//     [pd.Interval(256.5, 489.0)],
//     [pd.Interval(256.5, 489.0)],
//   ],
//   dtype=pd.CategoricalDtype(
//     categories=[
//       pd.Interval(23.535, 256.5),
//       pd.Interval(256.5, 489.0)
//     ],
//     ordered=True
//   ),
// )

export const CATEGORICAL_INTERVAL = new Uint8Array([
  255, 255, 255, 255, 168, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 232, 1, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 148,
  253, 255, 255, 200, 1, 0, 0, 4, 0, 0, 0, 184, 1, 0, 0, 123, 34, 105, 110,
  100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34,
  107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103, 101, 34, 44, 32, 34,
  110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 115, 116, 97,
  114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111, 112, 34, 58, 32, 55, 44,
  32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125, 93, 44, 32, 34, 99, 111,
  108, 117, 109, 110, 95, 105, 110, 100, 101, 120, 101, 115, 34, 58, 32, 91,
  123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108,
  44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32,
  34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116,
  121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 109,
  101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44,
  32, 34, 99, 111, 108, 117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97,
  109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95,
  110, 97, 109, 101, 34, 58, 32, 34, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 99, 97, 116, 101, 103, 111, 114,
  105, 99, 97, 108, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112,
  101, 34, 58, 32, 34, 105, 110, 116, 56, 34, 44, 32, 34, 109, 101, 116, 97,
  100, 97, 116, 97, 34, 58, 32, 123, 34, 110, 117, 109, 95, 99, 97, 116, 101,
  103, 111, 114, 105, 101, 115, 34, 58, 32, 50, 44, 32, 34, 111, 114, 100, 101,
  114, 101, 100, 34, 58, 32, 116, 114, 117, 101, 125, 125, 93, 44, 32, 34, 99,
  114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114,
  121, 34, 58, 32, 34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118,
  101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 57, 46, 48, 46, 48, 34, 125,
  44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111,
  110, 34, 58, 32, 34, 49, 46, 53, 46, 48, 34, 125, 0, 0, 0, 0, 6, 0, 0, 0,
  112, 97, 110, 100, 97, 115, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 0, 0, 18, 0, 28,
  0, 8, 0, 6, 0, 7, 0, 12, 0, 16, 0, 20, 0, 24, 0, 18, 0, 0, 0, 0, 0, 1, 13,
  32, 0, 0, 0, 252, 0, 0, 0, 212, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 2, 0, 0, 0,
  40, 1, 0, 0, 232, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 2, 0, 0, 0, 76, 0, 0, 0,
  4, 0, 0, 0, 196, 255, 255, 255, 28, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0, 112,
  97, 110, 100, 97, 115, 46, 105, 110, 116, 101, 114, 118, 97, 108, 0, 20, 0,
  0, 0, 65, 82, 82, 79, 87, 58, 101, 120, 116, 101, 110, 115, 105, 111, 110,
  58, 110, 97, 109, 101, 0, 0, 0, 0, 8, 0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 56,
  0, 0, 0, 4, 0, 0, 0, 40, 0, 0, 0, 123, 34, 115, 117, 98, 116, 121, 112, 101,
  34, 58, 32, 34, 100, 111, 117, 98, 108, 101, 34, 44, 32, 34, 99, 108, 111,
  115, 101, 100, 34, 58, 32, 34, 114, 105, 103, 104, 116, 34, 125, 0, 0, 0, 0,
  24, 0, 0, 0, 65, 82, 82, 79, 87, 58, 101, 120, 116, 101, 110, 115, 105, 111,
  110, 58, 109, 101, 116, 97, 100, 97, 116, 97, 0, 0, 10, 0, 12, 0, 0, 0, 8, 0,
  7, 0, 10, 0, 0, 0, 0, 0, 0, 1, 12, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0,
  0, 0, 0, 0, 1, 8, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 212, 255, 255, 255, 0, 0,
  1, 3, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 114, 105,
  103, 104, 116, 0, 0, 0, 198, 255, 255, 255, 0, 0, 2, 0, 16, 0, 20, 0, 8, 0,
  6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 3, 16, 0, 0, 0, 28, 0,
  0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 108, 101, 102, 116, 0, 0, 6, 0, 8,
  0, 6, 0, 6, 0, 0, 0, 0, 0, 2, 0, 255, 255, 255, 255, 232, 0, 0, 0, 20, 0, 0,
  0, 0, 0, 0, 0, 12, 0, 20, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 2, 4,
  0, 20, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 8, 0, 10, 0, 0, 0, 4, 0, 8, 0, 0, 0,
  16, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 108, 0, 0,
  0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 41, 92, 143, 194, 245, 136, 55, 64, 0, 0, 0, 0, 0, 8, 112, 64, 0,
  0, 0, 0, 0, 8, 112, 64, 0, 0, 0, 0, 0, 144, 126, 64, 255, 255, 255, 255, 136,
  0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12,
  0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0,
  12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 60, 0, 0, 0, 16, 0, 0, 0, 7, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 255, 255,
  255, 255, 0, 0, 0, 0,
])


================================================
File: /frontend/lib/src/mocks/arrow/types/datetime.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `DatetimeIndex` for both `index` and `columns` attributes.
//
// pd.DataFrame(
//     [
//         [date(2020, 1, 2), date(2020, 10, 20)],
//     ],
//     index=pd.Series(pd.date_range("2000-01-01", periods=2, freq="Y")),
//     columns=pd.Series(pd.date_range("2000-01-01", periods=2, freq="Y")),
// )

export const DATE = new Uint8Array([
  255, 255, 255, 255, 216, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 216, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
  0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 176, 2, 0, 0, 4, 0, 0, 0, 160, 2, 0, 0,
  123, 34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34,
  58, 32, 91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108,
  95, 48, 95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105,
  110, 100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105,
  109, 101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109,
  101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97,
  116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108,
  117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  34, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48,
  48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 34, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58,
  48, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 100, 97, 116, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44,
  32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108,
  125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 50, 48, 48, 49, 45,
  49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 32, 34, 102,
  105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 48, 48, 49,
  45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 32, 34,
  112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97,
  116, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 111, 98, 106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116,
  97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34,
  110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101,
  108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 95, 95, 105, 110, 100, 101,
  120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 34, 44, 32, 34, 112, 97,
  110, 100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101,
  116, 105, 109, 101, 34, 44, 32, 34, 110, 117, 109, 112, 121, 95, 116, 121,
  112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109, 101, 54, 52, 91,
  110, 115, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58,
  32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114,
  34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112,
  121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111,
  110, 34, 58, 32, 34, 52, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46,
  50, 46, 52, 34, 125, 0, 0, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0,
  0, 3, 0, 0, 0, 140, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 144, 255, 255, 255, 0,
  0, 1, 10, 16, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 95,
  95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108, 95, 48, 95, 95, 0,
  0, 0, 126, 255, 255, 255, 0, 0, 3, 0, 200, 255, 255, 255, 0, 0, 1, 8, 16, 0,
  0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 50, 48, 48, 49, 45,
  49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 0, 182, 255, 255,
  255, 0, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0,
  0, 0, 0, 0, 1, 8, 16, 0, 0, 0, 44, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0,
  0, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48,
  48, 0, 0, 0, 6, 0, 8, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,
  255, 255, 232, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8,
  0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 124, 0, 0, 0, 16, 0, 0, 0,
  2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
  0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
  0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 71, 0, 0, 87, 71, 0, 0, 123,
  72, 0, 0, 123, 72, 0, 0, 0, 0, 230, 127, 162, 86, 147, 13, 0, 0, 137, 173,
  117, 96, 3, 14, 255, 255, 255, 255, 0, 0, 0, 0,
])

// Raw data (in Apache Arrow format) for a dataframe
// that uses `DatetimeIndex` for both `index` and `columns` attributes.
//
// df = pd.DataFrame(
//   [
//       [
//           datetime(2020, 1, 2, 5, 0, 0),
//           datetime(2020, 10, 20, 5, 0, 0),
//       ],
//   ],
//   index=pd.Series(pd.date_range("2000-01-01", periods=2, freq="Y")),
//   columns=pd.Series(pd.date_range("2000-01-01", periods=2, freq="Y")),
// )

export const DATETIME = new Uint8Array([
  255, 255, 255, 255, 240, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
  0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
  0, 8, 0, 10, 0, 0, 0, 240, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
  0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 200, 2, 0, 0, 4, 0, 0, 0, 185, 2, 0, 0,
  123, 34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34,
  58, 32, 91, 34, 95, 95, 105, 110, 100, 101, 120, 95, 108, 101, 118, 101, 108,
  95, 48, 95, 95, 34, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105,
  110, 100, 101, 120, 101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34,
  58, 32, 110, 117, 108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97,
  109, 101, 34, 58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97,
  115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105,
  109, 101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 110, 117, 109, 112, 121,
  95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109,
  101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97,
  116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108,
  117, 109, 110, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32,
  34, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58, 48,
  48, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58,
  32, 34, 50, 48, 48, 48, 45, 49, 50, 45, 51, 49, 32, 48, 48, 58, 48, 48, 58,
  48, 48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101,
  34, 58, 32, 34, 100, 97, 116, 101, 116, 105, 109, 101, 34, 44, 32, 34, 110,
  117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116,
  101, 116, 105, 109, 101, 54, 52, 91, 110, 115, 93, 34, 44, 32, 34, 109, 101,
  116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108, 125, 44, 32, 123,
  34, 110, 97, 109, 101, 34, 58, 32, 34, 50, 48, 48, 49, 45, 49, 50, 45, 51,
  49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 32, 34, 102, 105, 101, 108,
  100, 95, 110, 97, 109, 101, 34, 58, 32, 34, 50, 48, 48, 49, 45, 49, 50, 45,
  51, 49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 32, 34, 112, 97, 110,
  100, 97, 115, 95, 116, 121, 112, 101, 34, 58, 32, 34, 100, 97, 116, 101, 116,
