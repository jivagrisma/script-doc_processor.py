Directory structure:
└── streamlit-streamlit/
    ├── README.md
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── Makefile
    ├── NOTICES
    ├── SECURITY.md
    ├── .editorconfig
    ├── .nvmrc
    ├── .pre-commit-config.yaml
    ├── .ruff.toml
    ├── component-lib/
    │   ├── README.md
    │   ├── RELEASE_NOTES.md
    │   ├── babel.config.js
    │   ├── jest.config.ts
    │   ├── package.json
    │   ├── tsconfig.json
    │   ├── yarn.lock
    │   └── src/
    │       ├── ArrowTable.test.ts
    │       ├── ArrowTable.ts
    │       ├── StreamlitReact.test.tsx
    │       ├── StreamlitReact.tsx
    │       ├── index.ts
    │       ├── mock_data.ts
    │       ├── setupTests.ts
    │       ├── streamlit.test.ts
    │       ├── streamlit.ts
    │       └── test_utils.ts
    ├── e2e_playwright/
    │   ├── README.md
    │   ├── __init__.py
    │   ├── app_hotkeys.py
    │   ├── app_hotkeys_test.py
    │   ├── auth.py
    │   ├── auth_test.py
    │   ├── compilation_error_dialog.py
    │   ├── compilation_error_dialog_test.py
    │   ├── config_arrow_truncation.py
    │   ├── config_arrow_truncation_test.py
    │   ├── config_static_serving.py
    │   ├── config_static_serving_test.py
    │   ├── conftest.py
    │   ├── deploy_dialog.py
    │   ├── deploy_dialog_test.py
    │   ├── fast_rerun_safety.py
    │   ├── fast_rerun_safety_test.py
    │   ├── forward_msg_cache.py
    │   ├── forward_msg_cache_test.py
    │   ├── hello_app.py
    │   ├── hello_app_test.py
    │   ├── help_tooltip.py
    │   ├── help_tooltip_test.py
    │   ├── host_config.py
    │   ├── host_config_test.py
    │   ├── hostframe_app.py
    │   ├── hostframe_app_test.py
    │   ├── i18n.py
    │   ├── i18n_test.py
    │   ├── iframe_resizer.py
    │   ├── iframe_resizer_test.py
    │   ├── label_markdown.py
    │   ├── label_markdown_test.py
    │   ├── lazy_loaded_modules.py
    │   ├── lazy_loaded_modules_test.py
    │   ├── main_menu.py
    │   ├── main_menu_test.py
    │   ├── pytest.ini
    │   ├── st_add_rows.py
    │   ├── st_add_rows_test.py
    │   ├── st_alert.py
    │   ├── st_alert_test.py
    │   ├── st_altair_chart.py
    │   ├── st_altair_chart_basic_select.py
    │   ├── st_altair_chart_basic_select_test.py
    │   ├── st_altair_chart_test.py
    │   ├── st_area_chart.py
    │   ├── st_area_chart_test.py
    │   ├── st_audio.py
    │   ├── st_audio_input.py
    │   ├── st_audio_input_test.py
    │   ├── st_audio_test.py
    │   ├── st_balloons.py
    │   ├── st_balloons_test.py
    │   ├── st_bar_chart.py
    │   ├── st_bar_chart_test.py
    │   ├── st_bokeh_chart.py
    │   ├── st_bokeh_chart_test.py
    │   ├── st_both_query_params_error.py
    │   ├── st_both_query_params_error_test.py
    │   ├── st_button.py
    │   ├── st_button_test.py
    │   ├── st_cache_data.py
    │   ├── st_cache_data_test.py
    │   ├── st_cache_resource.py
    │   ├── st_cache_resource_test.py
    │   ├── st_camera_input.py
    │   ├── st_camera_input_test.py
    │   ├── st_caption.py
    │   ├── st_caption_test.py
    │   ├── st_chat_input.py
    │   ├── st_chat_input_file_uploader_regression.py
    │   ├── st_chat_input_file_uploader_regression_test.py
    │   ├── st_chat_input_test.py
    │   ├── st_chat_message.py
    │   ├── st_chat_message_test.py
    │   ├── st_checkbox.py
    │   ├── st_checkbox_test.py
    │   ├── st_code.py
    │   ├── st_code_test.py
    │   ├── st_color_picker.py
    │   ├── st_color_picker_test.py
    │   ├── st_columns.py
    │   ├── st_columns_test.py
    │   ├── st_components_v1.py
    │   ├── st_components_v1_import_legacy_file.py
    │   ├── st_components_v1_import_legacy_file_test.py
    │   ├── st_components_v1_import_via_st.py
    │   ├── st_components_v1_import_via_st_test.py
    │   ├── st_components_v1_test.py
    │   ├── st_container.py
    │   ├── st_container_test.py
    │   ├── st_data_editor_column_types.py
    │   ├── st_data_editor_column_types_test.py
    │   ├── st_data_editor_config.py
    │   ├── st_data_editor_config_test.py
    │   ├── st_data_editor_index_types.py
    │   ├── st_data_editor_index_types_test.py
    │   ├── st_data_editor_input_data.py
    │   ├── st_data_editor_input_data_test.py
    │   ├── st_dataframe_column_types.py
    │   ├── st_dataframe_column_types_test.py
    │   ├── st_dataframe_config.py
    │   ├── st_dataframe_config_test.py
    │   ├── st_dataframe_dimensions.py
    │   ├── st_dataframe_dimensions_test.py
    │   ├── st_dataframe_index_types.py
    │   ├── st_dataframe_index_types_test.py
    │   ├── st_dataframe_input_data.py
    │   ├── st_dataframe_input_data_test.py
    │   ├── st_dataframe_interactions.py
    │   ├── st_dataframe_interactions_test.py
    │   ├── st_dataframe_selections.py
    │   ├── st_dataframe_selections_test.py
    │   ├── st_dataframe_stable_rendering.py
    │   ├── st_dataframe_stable_rendering_test.py
    │   ├── st_dataframe_styler_support.py
    │   ├── st_dataframe_styler_support_test.py
    │   ├── st_date_input.py
    │   ├── st_date_input_test.py
    │   ├── st_dialog.py
    │   ├── st_dialog_test.py
    │   ├── st_divider.py
    │   ├── st_divider_test.py
    │   ├── st_download_button.py
    │   ├── st_download_button_test.py
    │   ├── st_echo.py
    │   ├── st_echo_test.py
    │   ├── st_empty.py
    │   ├── st_empty_test.py
    │   ├── st_exception.py
    │   ├── st_exception_test.py
    │   ├── st_expander.py
    │   ├── st_expander_nested.py
    │   ├── st_expander_nested_test.py
    │   ├── st_expander_state.py
    │   ├── st_expander_state_test.py
    │   ├── st_expander_test.py
    │   ├── st_experimental_audio_input.py
    │   ├── st_experimental_audio_input_test.py
    │   ├── st_experimental_get_query_params.py
    │   ├── st_experimental_get_query_params_test.py
    │   ├── st_experimental_set_query_params.py
    │   ├── st_experimental_set_query_params_test.py
    │   ├── st_feedback.py
    │   ├── st_feedback_test.py
    │   ├── st_file_uploader.py
    │   ├── st_file_uploader_test.py
    │   ├── st_form.py
    │   ├── st_form_container_association.py
    │   ├── st_form_container_association_test.py
    │   ├── st_form_test.py
    │   ├── st_fragment_basics.py
    │   ├── st_fragment_basics_test.py
    │   ├── st_fragment_chat_response.py
    │   ├── st_fragment_chat_response_test.py
    │   ├── st_fragment_dynamic_containers.py
    │   ├── st_fragment_dynamic_containers_test.py
    │   ├── st_fragment_dynamic_form.py
    │   ├── st_fragment_dynamic_form_test.py
    │   ├── st_fragment_mixed_execution_flow.py
    │   ├── st_fragment_mixed_execution_flow_test.py
    │   ├── st_fragment_multiple_fragments.py
    │   ├── st_fragment_multiple_fragments_test.py
    │   ├── st_fragment_queue.py
    │   ├── st_fragment_queue_test.py
    │   ├── st_fragment_run_every.py
    │   ├── st_fragment_run_every_test.py
    │   ├── st_fragments_nested.py
    │   ├── st_fragments_nested_test.py
    │   ├── st_graphviz_chart.py
    │   ├── st_graphviz_chart_test.py
    │   ├── st_heading.py
    │   ├── st_heading_test.py
    │   ├── st_help.py
    │   ├── st_help_test.py
    │   ├── st_html.py
    │   ├── st_html_test.py
    │   ├── st_image.py
    │   ├── st_image_test.py
    │   ├── st_json.py
    │   ├── st_json_test.py
    │   ├── st_line_chart.py
    │   ├── st_line_chart_test.py
    │   ├── st_link_button.py
    │   ├── st_link_button_test.py
    │   ├── st_magic.py
    │   ├── st_magic_test.py
    │   ├── st_map.py
    │   ├── st_map_ensure_no_stale_maps.py
    │   ├── st_map_ensure_no_stale_maps_test.py
    │   ├── st_map_test.py
    │   ├── st_markdown.py
    │   ├── st_markdown_test.py
    │   ├── st_metric.py
    │   ├── st_metric_test.py
    │   ├── st_multiselect.py
    │   ├── st_multiselect_test.py
    │   ├── st_number_input.py
    │   ├── st_number_input_test.py
    │   ├── st_pills.py
    │   ├── st_pills_test.py
    │   ├── st_plotly_chart.py
    │   ├── st_plotly_chart_select.py
    │   ├── st_plotly_chart_select_test.py
    │   ├── st_plotly_chart_test.py
    │   ├── st_popover.py
    │   ├── st_popover_test.py
    │   ├── st_progress.py
    │   ├── st_progress_test.py
    │   ├── st_pydeck_chart.py
    │   ├── st_pydeck_chart_select.py
    │   ├── st_pydeck_chart_select_test.py
    │   ├── st_pydeck_chart_test.py
    │   ├── st_pyplot.py
    │   ├── st_pyplot_test.py
    │   ├── st_query_params.py
    │   ├── st_query_params_test.py
    │   ├── st_radio.py
    │   ├── st_radio_test.py
    │   ├── st_rerun.py
    │   ├── st_rerun_test.py
    │   ├── st_scatter_chart.py
    │   ├── st_scatter_chart_test.py
    │   ├── st_secrets.py
    │   ├── st_secrets_test.py
    │   ├── st_segmented_control.py
    │   ├── st_segmented_control_test.py
    │   ├── st_select_slider.py
    │   ├── st_select_slider_test.py
    │   ├── st_selectbox.py
    │   ├── st_selectbox_test.py
    │   ├── st_session_state.py
    │   ├── st_session_state_test.py
    │   ├── st_set_page_config.py
    │   ├── st_set_page_config_test.py
    │   ├── st_sidebar.py
    │   ├── st_sidebar_test.py
    │   ├── st_slider.py
    │   ├── st_slider_test.py
    │   ├── st_snow.py
    │   ├── st_snow_test.py
    │   ├── st_spinner.py
    │   ├── st_spinner_test.py
    │   ├── st_status.py
    │   ├── st_status_test.py
    │   ├── st_stop.py
    │   ├── st_stop_test.py
    │   ├── st_table.py
    │   ├── st_table_test.py
    │   ├── st_tabs.py
    │   ├── st_tabs_selection.py
    │   ├── st_tabs_selection_test.py
    │   ├── st_tabs_test.py
    │   ├── st_text.py
    │   ├── st_text_area.py
    │   ├── st_text_area_test.py
    │   ├── st_text_input.py
    │   ├── st_text_input_test.py
    │   ├── st_text_test.py
    │   ├── st_time_input.py
    │   ├── st_time_input_test.py
    │   ├── st_toast.py
    │   ├── st_toast_test.py
    │   ├── st_toggle.py
    │   ├── st_toggle_test.py
    │   ├── st_vega_lite_chart.py
    │   ├── st_vega_lite_chart_test.py
    │   ├── st_video.py
    │   ├── st_video_test.py
    │   ├── st_write_charts.py
    │   ├── st_write_charts_test.py
    │   ├── st_write_images.py
    │   ├── st_write_images_test.py
    │   ├── st_write_markdown.py
    │   ├── st_write_markdown_test.py
    │   ├── st_write_objects.py
    │   ├── st_write_objects_test.py
    │   ├── st_write_stream.py
    │   ├── st_write_stream_test.py
    │   ├── websocket_disconnect.py
    │   ├── websocket_disconnect_test.py
    │   ├── websocket_reconnects.py
    │   ├── websocket_reconnects_test.py
    │   ├── widget_state.py
    │   ├── widget_state_test.py
    │   ├── .gitignore
    │   ├── __snapshots__/
    │   │   └── linux/
    │   │       ├── compilation_error_dialog_test/
    │   │       ├── deploy_dialog_test/
    │   │       ├── hello_app_test/
    │   │       ├── host_config_test/
    │   │       ├── hostframe_app_test/
    │   │       ├── i18n_test/
    │   │       ├── iframe_resizer_test/
    │   │       ├── label_markdown_test/
    │   │       ├── main_menu_test/
    │   │       ├── mpa_basics_test/
    │   │       ├── mpa_configure_sidebar_test/
    │   │       ├── mpa_v2_basics_test/
    │   │       ├── mpa_v2_custom_theme_test/
    │   │       ├── st_add_rows_test/
    │   │       ├── st_alert_test/
    │   │       ├── st_altair_chart_basic_select_test/
    │   │       ├── st_altair_chart_test/
    │   │       ├── st_area_chart_test/
    │   │       ├── st_audio_input_test/
    │   │       ├── st_bar_chart_test/
    │   │       ├── st_button_test/
    │   │       ├── st_camera_input_test/
    │   │       ├── st_caption_test/
    │   │       ├── st_chat_input_test/
    │   │       ├── st_chat_message_test/
    │   │       ├── st_checkbox_test/
    │   │       ├── st_code_test/
    │   │       ├── st_color_picker_test/
    │   │       ├── st_columns_test/
    │   │       ├── st_components_v1_test/
    │   │       ├── st_container_test/
    │   │       ├── st_data_editor_column_types_test/
    │   │       ├── st_data_editor_config_test/
    │   │       ├── st_data_editor_index_types_test/
    │   │       ├── st_data_editor_input_data_test/
    │   │       ├── st_dataframe_column_types_test/
    │   │       ├── st_dataframe_config_test/
    │   │       ├── st_dataframe_index_types_test/
    │   │       ├── st_dataframe_input_data_test/
    │   │       ├── st_dataframe_interactions_test/
    │   │       ├── st_dataframe_selections_test/
    │   │       ├── st_dataframe_styler_support_test/
    │   │       ├── st_date_input_test/
    │   │       ├── st_dialog_test/
    │   │       ├── st_divider_test/
    │   │       ├── st_download_button_test/
    │   │       ├── st_echo_test/
    │   │       ├── st_empty_test/
    │   │       ├── st_exception_test/
    │   │       ├── st_expander_test/
    │   │       ├── st_feedback_test/
    │   │       ├── st_file_uploader_test/
    │   │       ├── st_form_test/
    │   │       ├── st_fragment_chat_response_test/
    │   │       ├── st_graphviz_chart_test/
    │   │       ├── st_heading_test/
    │   │       ├── st_help_test/
    │   │       ├── st_html_test/
    │   │       ├── st_image_test/
    │   │       ├── st_json_test/
    │   │       ├── st_line_chart_test/
    │   │       ├── st_link_button_test/
    │   │       ├── st_map_test/
    │   │       ├── st_markdown_test/
    │   │       ├── st_metric_test/
    │   │       ├── st_multiselect_test/
    │   │       ├── st_number_input_test/
    │   │       ├── st_pills_test/
    │   │       ├── st_plotly_chart_select_test/
    │   │       ├── st_plotly_chart_test/
    │   │       ├── st_popover_test/
    │   │       ├── st_progress_test/
    │   │       ├── st_pydeck_chart_select_test/
    │   │       ├── st_pydeck_chart_test/
    │   │       ├── st_pyplot_test/
    │   │       ├── st_radio_test/
    │   │       ├── st_scatter_chart_test/
    │   │       ├── st_segmented_control_test/
    │   │       ├── st_select_slider_test/
    │   │       ├── st_selectbox_test/
    │   │       ├── st_sidebar_test/
    │   │       ├── st_slider_test/
    │   │       ├── st_status_test/
    │   │       ├── st_table_test/
    │   │       ├── st_tabs_selection_test/
    │   │       ├── st_tabs_test/
    │   │       ├── st_text_area_test/
    │   │       ├── st_text_input_test/
    │   │       ├── st_text_test/
    │   │       ├── st_time_input_test/
    │   │       ├── st_toast_test/
    │   │       ├── st_toggle_test/
    │   │       ├── st_vega_lite_chart_test/
    │   │       ├── st_video_test/
    │   │       ├── st_write_markdown_test/
    │   │       ├── st_write_stream_test/
    │   │       └── websocket_disconnect_test/
    │   ├── custom_components/
    │   │   ├── __init__.py
    │   │   ├── popular_components.py
    │   │   └── popular_components_test.py
    │   ├── multipage_apps/
    │   │   ├── __init__.py
    │   │   ├── mpa_basics.py
    │   │   ├── mpa_basics_test.py
    │   │   ├── mpa_configure_sidebar.py
    │   │   ├── mpa_configure_sidebar_test.py
    │   │   ├── mpa_v2_custom_theme.py
    │   │   ├── mpa_v2_custom_theme_test.py
    │   │   ├── mpa_v2_transition.py
    │   │   ├── mpa_v2_transition_test.py
    │   │   └── pages/
    │   │       ├── 02_page2.py
    │   │       ├── 03_page3.py
    │   │       ├── 04_page_with_duplicate_name.py
    │   │       ├── 05_page_with_duplicate_name.py
    │   │       ├── 06_page_6.py
    │   │       ├── 07_page_7.py
    │   │       ├── 08_slow_page.py
    │   │       ├── 09_logo_page.py
    │   │       ├── 10_small_logo_page.py
    │   │       ├── 11_large_logo_page.py
    │   │       ├── 12_page12.py
    │   │       └── 13_page13.py
    │   ├── multipage_apps_v2/
    │   │   ├── __init__.py
    │   │   ├── mpa_v2_basics.py
    │   │   ├── mpa_v2_basics_test.py
    │   │   ├── mpa_v2_initial_load.py
    │   │   ├── mpa_v2_initial_load_test.py
    │   │   ├── mpa_v2_title.py
    │   │   ├── mpa_v2_title_test.py
    │   │   ├── page_2.py
    │   │   ├── page_3.py
    │   │   ├── page_5.py
    │   │   ├── page_6_slow_page.py
    │   │   └── 🦒_page_4.py
    │   ├── shared/
    │   │   ├── __init__.py
    │   │   ├── app_utils.py
    │   │   ├── data_mocks.py
    │   │   ├── dataframe_utils.py
    │   │   ├── git_utils.py
    │   │   ├── oidc_mock_server.py
    │   │   ├── performance.py
    │   │   ├── pydeck_utils.py
    │   │   └── toolbar_utils.py
    │   ├── static/
    │   ├── test_assets/
    │   │   ├── alt_secrets.toml
    │   │   ├── alt_secrets2.toml
    │   │   ├── hostframe.html
    │   │   ├── sintel-de.vtt
    │   │   ├── sintel-en.vtt
    │   │   ├── sintel-short.webm
    │   │   └── test_div.html
    │   └── .streamlit/
    │       └── secrets.toml
    ├── frontend/
    │   ├── hostframe.html
    │   ├── package.json
    │   ├── tsconfig.dev.json
    │   ├── tsconfig.json
    │   ├── vitest.setup.ts
    │   ├── yarn.lock
    │   ├── .eslintrc.js
    │   ├── .prettierignore
    │   ├── .prettierrc
    │   ├── app/
    │   │   ├── index.html
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── vite.config.ts
    │   │   ├── .eslintrc.cjs
    │   │   ├── performance/
    │   │   │   ├── apps/
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── blank_app.py
    │   │   │   │   ├── crud_app.py
    │   │   │   │   ├── dashboard_app.py
    │   │   │   │   └── multipage/
    │   │   │   │       ├── multipage_app.py
    │   │   │   │       ├── multipage_app.py
    │   │   │   │       └── pages/
    │   │   │   └── lighthouse/
    │   │   │       ├── LighthouseOrchestrator.mjs
    │   │   │       ├── constants.mjs
    │   │   │       ├── run.mjs
    │   │   │       └── .gitignore
    │   │   ├── public/
    │   │   └── src/
    │   │       ├── App.test.tsx
    │   │       ├── App.tsx
    │   │       ├── FontPreload.test.tsx
    │   │       ├── MetricsManager.test.ts
    │   │       ├── MetricsManager.ts
    │   │       ├── SessionEventDispatcher.ts
    │   │       ├── StreamlitLib.test.tsx
    │   │       ├── ThemedApp.test.tsx
    │   │       ├── ThemedApp.tsx
    │   │       ├── emotion.d.ts
    │   │       ├── index.tsx
    │   │       ├── showDevelopmentOptions.ts
    │   │       ├── styled-components.ts
    │   │       ├── urls.ts
    │   │       ├── vite-env.d.ts
    │   │       ├── assets/
    │   │       │   ├── css/
    │   │       │   │   ├── fonts.scss
    │   │       │   │   ├── icon-fonts.scss
    │   │       │   │   └── theme.scss
    │   │       │   ├── fonts/
    │   │       │   │   ├── MaterialSymbols/
    │   │       │   │   │   └── MaterialSymbols-Rounded.woff2
    │   │       │   │   ├── Source_Code_Pro/
    │   │       │   │   │   ├── Source-Code-Pro.LICENSE
    │   │       │   │   │   ├── SourceCodePro-Black.woff2
    │   │       │   │   │   ├── SourceCodePro-BlackItalic.woff2
    │   │       │   │   │   ├── SourceCodePro-Bold.woff2
    │   │       │   │   │   ├── SourceCodePro-BoldItalic.woff2
    │   │       │   │   │   ├── SourceCodePro-ExtraLight.woff2
    │   │       │   │   │   ├── SourceCodePro-ExtraLightItalic.woff2
    │   │       │   │   │   ├── SourceCodePro-Italic.woff2
    │   │       │   │   │   ├── SourceCodePro-Light.woff2
    │   │       │   │   │   ├── SourceCodePro-LightItalic.woff2
    │   │       │   │   │   ├── SourceCodePro-Medium.woff2
    │   │       │   │   │   ├── SourceCodePro-MediumItalic.woff2
    │   │       │   │   │   ├── SourceCodePro-Regular.woff2
    │   │       │   │   │   ├── SourceCodePro-SemiBold.woff2
    │   │       │   │   │   └── SourceCodePro-SemiBoldItalic.woff2
    │   │       │   │   ├── Source_Sans_Pro/
    │   │       │   │   │   ├── Source-Sans-Pro.LICENSE
    │   │       │   │   │   ├── SourceSansPro-Black.woff2
    │   │       │   │   │   ├── SourceSansPro-BlackItalic.woff2
    │   │       │   │   │   ├── SourceSansPro-Bold.woff2
    │   │       │   │   │   ├── SourceSansPro-BoldItalic.woff2
    │   │       │   │   │   ├── SourceSansPro-ExtraLight.woff2
    │   │       │   │   │   ├── SourceSansPro-ExtraLightItalic.woff2
    │   │       │   │   │   ├── SourceSansPro-Italic.woff2
    │   │       │   │   │   ├── SourceSansPro-Light.woff2
    │   │       │   │   │   ├── SourceSansPro-LightItalic.woff2
    │   │       │   │   │   ├── SourceSansPro-Regular.woff2
    │   │       │   │   │   ├── SourceSansPro-SemiBold.woff2
    │   │       │   │   │   └── SourceSansPro-SemiBoldItalic.woff2
    │   │       │   │   └── Source_Serif_Pro/
    │   │       │   │       ├── Source-Serif-Pro.LICENSE
    │   │       │   │       ├── SourceSerifPro-Black.woff2
    │   │       │   │       ├── SourceSerifPro-BlackItalic.woff2
    │   │       │   │       ├── SourceSerifPro-Bold.woff2
    │   │       │   │       ├── SourceSerifPro-BoldItalic.woff2
    │   │       │   │       ├── SourceSerifPro-ExtraLight.woff2
    │   │       │   │       ├── SourceSerifPro-ExtraLightItalic.woff2
    │   │       │   │       ├── SourceSerifPro-Italic.woff2
    │   │       │   │       ├── SourceSerifPro-Light.woff2
    │   │       │   │       ├── SourceSerifPro-LightItalic.woff2
    │   │       │   │       ├── SourceSerifPro-Regular.woff2
    │   │       │   │       ├── SourceSerifPro-SemiBold.woff2
    │   │       │   │       └── SourceSerifPro-SemiBoldItalic.woff2
    │   │       │   ├── img/
    │   │       │   │   ├── Material-Icons.LICENSE
    │   │       │   │   └── Open-Iconic.LICENSE
    │   │       │   └── svg/
    │   │       ├── components/
    │   │       │   ├── AppContext.tsx
    │   │       │   ├── AppView/
    │   │       │   │   ├── AppView.test.tsx
    │   │       │   │   ├── AppView.tsx
    │   │       │   │   ├── ScrollToBottomContainer.tsx
    │   │       │   │   ├── index.tsx
    │   │       │   │   └── styled-components.ts
    │   │       │   ├── Countdown/
    │   │       │   │   ├── Countdown.test.tsx
    │   │       │   │   ├── Countdown.tsx
    │   │       │   │   ├── index.tsx
    │   │       │   │   └── styled-components.ts
    │   │       │   ├── DeployButton/
    │   │       │   │   ├── DeployButton.tsx
    │   │       │   │   ├── index.tsx
    │   │       │   │   └── styled-components.tsx
    │   │       │   ├── EventContainer/
    │   │       │   │   ├── EventContainer.test.tsx
    │   │       │   │   ├── EventContainer.tsx
    │   │       │   │   └── index.tsx
    │   │       │   ├── FontFaceDeclaration/
    │   │       │   │   ├── FontFaceDeclaration.tsx
    │   │       │   │   └── index.tsx
    │   │       │   ├── Header/
    │   │       │   │   ├── Header.tsx
    │   │       │   │   ├── index.tsx
    │   │       │   │   └── styled-components.ts
    │   │       │   ├── MainMenu/
    │   │       │   │   ├── MainMenu.test.tsx
    │   │       │   │   ├── MainMenu.tsx
    │   │       │   │   ├── index.tsx
    │   │       │   │   ├── mainMenuTestHelpers.ts
    │   │       │   │   └── styled-components.ts
    │   │       │   ├── Sidebar/
    │   │       │   │   ├── NavSection.tsx
    │   │       │   │   ├── Sidebar.test.tsx
    │   │       │   │   ├── Sidebar.tsx
    │   │       │   │   ├── SidebarNav.test.tsx
    │   │       │   │   ├── SidebarNav.tsx
    │   │       │   │   ├── SidebarNavLink.tsx
    │   │       │   │   ├── ThemedSidebar.test.tsx
    │   │       │   │   ├── ThemedSidebar.tsx
    │   │       │   │   ├── index.tsx
    │   │       │   │   └── styled-components.ts
    │   │       │   ├── StatusWidget/
    │   │       │   │   ├── StatusWidget.test.tsx
    │   │       │   │   ├── StatusWidget.tsx
    │   │       │   │   ├── index.tsx
    │   │       │   │   └── styled-components.ts
    │   │       │   ├── StreamlitDialog/
    │   │       │   │   ├── SettingsDialog.test.tsx
    │   │       │   │   ├── SettingsDialog.tsx
    │   │       │   │   ├── StreamlitDialog.test.tsx
    │   │       │   │   ├── StreamlitDialog.tsx
    │   │       │   │   ├── ThemeCreatorDialog.test.tsx
    │   │       │   │   ├── ThemeCreatorDialog.tsx
    │   │       │   │   ├── UserSettings.ts
    │   │       │   │   ├── index.tsx
    │   │       │   │   ├── styled-components.ts
    │   │       │   │   ├── DeployDialog/
    │   │       │   │   │   ├── DeployCard.tsx
    │   │       │   │   │   ├── DeployDialog.tsx
    │   │       │   │   │   ├── DeployListElement.tsx
    │   │       │   │   │   ├── DeployModal.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.tsx
    │   │       │   │   └── DeployErrorDialogs/
    │   │       │   │       ├── DetachedHead.test.tsx
    │   │       │   │       ├── DetachedHead.tsx
    │   │       │   │       ├── ModuleIsNotAdded.test.tsx
    │   │       │   │       ├── ModuleIsNotAdded.tsx
    │   │       │   │       ├── NoRepositoryDetected.test.tsx
    │   │       │   │       ├── NoRepositoryDetected.tsx
    │   │       │   │       ├── index.ts
    │   │       │   │       ├── styled-components.tsx
    │   │       │   │       ├── types.ts
    │   │       │   │       └── __snapshots__/
    │   │       │   │           ├── DetachedHead.test.tsx.snap
    │   │       │   │           └── NoRepositoryDetected.test.tsx.snap
    │   │       │   └── ToolbarActions/
    │   │       │       ├── ToolbarActions.test.tsx
    │   │       │       ├── ToolbarActions.tsx
    │   │       │       ├── index.tsx
    │   │       │       └── styled-components.ts
    │   │       ├── connection/
    │   │       │   ├── ConnectionManager.ts
    │   │       │   ├── ConnectionState.ts
    │   │       │   ├── DefaultStreamlitEndpoints.test.ts
    │   │       │   ├── DefaultStreamlitEndpoints.ts
    │   │       │   ├── WebsocketConnection.test.tsx
    │   │       │   └── WebsocketConnection.tsx
    │   │       ├── hocs/
    │   │       │   └── withScreencast/
    │   │       │       ├── index.tsx
    │   │       │       ├── withScreencast.test.tsx
    │   │       │       ├── withScreencast.tsx
    │   │       │       └── components/
    │   │       │           ├── index.tsx
    │   │       │           ├── ScreencastDialog/
    │   │       │           │   ├── ScreencastDialog.test.tsx
    │   │       │           │   ├── ScreencastDialog.tsx
    │   │       │           │   ├── index.tsx
    │   │       │           │   └── styled-components.ts
    │   │       │           ├── UnsupportedBrowserDialog/
    │   │       │           │   ├── UnsupportedBrowserDialog.test.tsx
    │   │       │           │   ├── UnsupportedBrowserDialog.tsx
    │   │       │           │   ├── index.tsx
    │   │       │           │   └── styled-components.ts
    │   │       │           └── VideoRecordedDialog/
    │   │       │               ├── VideoRecordedDialog.test.tsx
    │   │       │               ├── VideoRecordedDialog.tsx
    │   │       │               ├── index.tsx
    │   │       │               └── styled-components.ts
    │   │       └── util/
    │   │           ├── AppNavigation.test.ts
    │   │           ├── AppNavigation.ts
    │   │           ├── ScreenCastRecorder.ts
    │   │           ├── getBrowserInfo.test.ts
    │   │           ├── getBrowserInfo.ts
    │   │           ├── useThemeManager.test.ts
    │   │           └── useThemeManager.ts
    │   ├── eslint-plugin-streamlit-custom/
    │   │   ├── index.js
    │   │   ├── no-hardcoded-theme-values.js
    │   │   ├── no-hardcoded-theme-values.test.js
    │   │   ├── package.json
    │   │   ├── use-strict-null-equality-checks.js
    │   │   └── use-strict-null-equality-checks.test.js
    │   ├── lib/
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsconfig.prod.json
    │   │   ├── vite-env.d.ts
    │   │   ├── vite.config.ts
    │   │   └── src/
    │   │       ├── AppNode.test.ts
    │   │       ├── AppNode.ts
    │   │       ├── FileUploadClient.test.ts
    │   │       ├── FileUploadClient.ts
    │   │       ├── ForwardMessageCache.test.ts
    │   │       ├── ForwardMessageCache.ts
    │   │       ├── RootStyleProvider.tsx
    │   │       ├── ScriptRunState.ts
    │   │       ├── SessionInfo.test.ts
    │   │       ├── SessionInfo.ts
    │   │       ├── StreamlitEndpoints.ts
    │   │       ├── WidgetStateManager.test.ts
    │   │       ├── WidgetStateManager.ts
    │   │       ├── baseconsts.ts
    │   │       ├── declarations.d.ts
    │   │       ├── index.ts
    │   │       ├── react-app-env.d.ts
    │   │       ├── styled-components.ts
    │   │       ├── test_util.tsx
    │   │       ├── urls.ts
    │   │       ├── assets/
    │   │       │   └── img/
    │   │       │       ├── balloons/
    │   │       │       ├── snow/
    │   │       │       └── streamlit-logo/
    │   │       ├── components/
    │   │       │   ├── core/
    │   │       │   │   ├── IsDialogContext.ts
    │   │       │   │   ├── IsSidebarContext.ts
    │   │       │   │   ├── LibContext.tsx
    │   │       │   │   ├── ThemeProvider.tsx
    │   │       │   │   ├── Block/
    │   │       │   │   │   ├── Block.test.tsx
    │   │       │   │   │   ├── Block.tsx
    │   │       │   │   │   ├── ElementNodeRenderer.test.tsx
    │   │       │   │   │   ├── ElementNodeRenderer.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   ├── styled-components.ts
    │   │       │   │   │   ├── utils.test.ts
    │   │       │   │   │   └── utils.ts
    │   │       │   │   ├── Maybe/
    │   │       │   │   │   ├── Maybe.test.tsx
    │   │       │   │   │   ├── Maybe.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   └── Portal/
    │   │       │   │       ├── PortalContext.tsx
    │   │       │   │       ├── PortalProvider.tsx
    │   │       │   │       └── RenderInPortalIfExists.tsx
    │   │       │   ├── elements/
    │   │       │   │   ├── AlertElement/
    │   │       │   │   │   ├── AlertElement.test.tsx
    │   │       │   │   │   ├── AlertElement.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.tsx
    │   │       │   │   ├── ArrowTable/
    │   │       │   │   │   ├── ArrowTable.test.tsx
    │   │       │   │   │   ├── ArrowTable.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── ArrowVegaLiteChart/
    │   │       │   │   │   ├── ArrowVegaLiteChart.test.tsx
    │   │       │   │   │   ├── ArrowVegaLiteChart.tsx
    │   │       │   │   │   ├── CustomTheme.tsx
    │   │       │   │   │   ├── arrowUtils.test.ts
    │   │       │   │   │   ├── arrowUtils.ts
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   ├── styled-components.ts
    │   │       │   │   │   ├── useVegaElementPreprocessor.test.ts
    │   │       │   │   │   ├── useVegaElementPreprocessor.ts
    │   │       │   │   │   ├── useVegaEmbed.test.ts
    │   │       │   │   │   ├── useVegaEmbed.ts
    │   │       │   │   │   ├── useVegaLiteSelections.test.ts
    │   │       │   │   │   └── useVegaLiteSelections.ts
    │   │       │   │   ├── Audio/
    │   │       │   │   │   ├── Audio.test.tsx
    │   │       │   │   │   ├── Audio.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── Balloons/
    │   │       │   │   │   ├── Balloons.test.tsx
    │   │       │   │   │   ├── Balloons.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── BokehChart/
    │   │       │   │   │   ├── BokehChart.test.tsx
    │   │       │   │   │   ├── BokehChart.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── ChatMessage/
    │   │       │   │   │   ├── ChatMessage.test.tsx
    │   │       │   │   │   ├── ChatMessage.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── CodeBlock/
    │   │       │   │   │   ├── CopyButton.test.tsx
    │   │       │   │   │   ├── CopyButton.tsx
    │   │       │   │   │   ├── StreamlitSyntaxHighlighter.test.tsx
    │   │       │   │   │   ├── StreamlitSyntaxHighlighter.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── DeckGlJsonChart/
    │   │       │   │   │   ├── DeckGlJsonChart.test.tsx
    │   │       │   │   │   ├── DeckGlJsonChart.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   ├── styled-components.ts
    │   │       │   │   │   ├── types.ts
    │   │       │   │   │   ├── useDeckGl.tsx
    │   │       │   │   │   ├── utils/
    │   │       │   │   │   │   ├── colors.test.ts
    │   │       │   │   │   │   ├── colors.ts
    │   │       │   │   │   │   └── jsonConverter.ts
    │   │       │   │   │   └── withMapboxToken/
    │   │       │   │   │       ├── MapboxTokenError.tsx
    │   │       │   │   │       ├── index.tsx
    │   │       │   │   │       ├── withMapboxToken.test.tsx
    │   │       │   │   │       └── withMapboxToken.tsx
    │   │       │   │   ├── Dialog/
    │   │       │   │   │   ├── Dialog.test.tsx
    │   │       │   │   │   ├── Dialog.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── DocString/
    │   │       │   │   │   ├── DocString.test.tsx
    │   │       │   │   │   ├── DocString.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── ExceptionElement/
    │   │       │   │   │   ├── ExceptionElement.test.tsx
    │   │       │   │   │   ├── ExceptionElement.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Expander/
    │   │       │   │   │   ├── Expander.test.tsx
    │   │       │   │   │   ├── Expander.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Favicon/
    │   │       │   │   │   ├── Favicon.test.tsx
    │   │       │   │   │   ├── Favicon.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── GraphVizChart/
    │   │       │   │   │   ├── GraphVizChart.test.tsx
    │   │       │   │   │   ├── GraphVizChart.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Html/
    │   │       │   │   │   ├── Html.test.tsx
    │   │       │   │   │   ├── Html.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── IFrame/
    │   │       │   │   │   ├── IFrame.test.tsx
    │   │       │   │   │   ├── IFrame.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── ImageList/
    │   │       │   │   │   ├── ImageList.test.tsx
    │   │       │   │   │   ├── ImageList.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Json/
    │   │       │   │   │   ├── Json.test.tsx
    │   │       │   │   │   ├── Json.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── LinkButton/
    │   │       │   │   │   ├── BaseLinkButton.tsx
    │   │       │   │   │   ├── LinkButton.test.tsx
    │   │       │   │   │   ├── LinkButton.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Markdown/
    │   │       │   │   │   ├── Markdown.test.tsx
    │   │       │   │   │   ├── Markdown.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── Metric/
    │   │       │   │   │   ├── Metric.test.tsx
    │   │       │   │   │   ├── Metric.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── PageLink/
    │   │       │   │   │   ├── PageLink.test.tsx
    │   │       │   │   │   ├── PageLink.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Particles/
    │   │       │   │   │   ├── Particles.test.tsx
    │   │       │   │   │   ├── Particles.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── PlotlyChart/
    │   │       │   │   │   ├── CustomTheme.tsx
    │   │       │   │   │   ├── PlotlyChart.test.tsx
    │   │       │   │   │   ├── PlotlyChart.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── mock.ts
    │   │       │   │   ├── Popover/
    │   │       │   │   │   ├── Popover.test.tsx
    │   │       │   │   │   ├── Popover.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Progress/
    │   │       │   │   │   ├── Progress.test.tsx
    │   │       │   │   │   ├── Progress.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Skeleton/
    │   │       │   │   │   ├── AppSkeleton.test.tsx
    │   │       │   │   │   ├── AppSkeleton.tsx
    │   │       │   │   │   ├── Skeleton.test.tsx
    │   │       │   │   │   ├── Skeleton.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Snow/
    │   │       │   │   │   ├── Snow.test.tsx
    │   │       │   │   │   ├── Snow.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Spinner/
    │   │       │   │   │   ├── Spinner.test.tsx
    │   │       │   │   │   ├── Spinner.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Tabs/
    │   │       │   │   │   ├── Tabs.test.tsx
    │   │       │   │   │   ├── Tabs.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── TextElement/
    │   │       │   │   │   ├── TextElement.test.tsx
    │   │       │   │   │   ├── TextElement.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Toast/
    │   │       │   │   │   ├── Toast.test.tsx
    │   │       │   │   │   ├── Toast.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.tsx
    │   │       │   │   └── Video/
    │   │       │   │       ├── Video.test.tsx
    │   │       │   │       ├── Video.tsx
    │   │       │   │       ├── index.tsx
    │   │       │   │       └── styled-components.ts
    │   │       │   ├── shared/
    │   │       │   │   ├── AlertContainer/
    │   │       │   │   │   ├── AlertContainer.test.tsx
    │   │       │   │   │   ├── AlertContainer.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── BaseButton/
    │   │       │   │   │   ├── BaseButton.test.tsx
    │   │       │   │   │   ├── BaseButton.tsx
    │   │       │   │   │   ├── BaseButtonTooltip.tsx
    │   │       │   │   │   ├── DynamicButtonLabel.test.tsx
    │   │       │   │   │   ├── DynamicButtonLabel.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── BaseColorPicker/
    │   │       │   │   │   ├── BaseColorPicker.test.tsx
    │   │       │   │   │   ├── BaseColorPicker.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Dropdown/
    │   │       │   │   │   ├── Selectbox.test.tsx
    │   │       │   │   │   ├── Selectbox.tsx
    │   │       │   │   │   ├── VirtualDropdown.test.tsx
    │   │       │   │   │   ├── VirtualDropdown.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── ElementFullscreen/
    │   │       │   │   │   ├── ElementFullscreenContext.tsx
    │   │       │   │   │   ├── ElementFullscreenWrapper.tsx
    │   │       │   │   │   ├── testUtils.tsx
    │   │       │   │   │   └── useFullscreen.tsx
    │   │       │   │   ├── ErrorBoundary/
    │   │       │   │   │   ├── ErrorBoundary.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── ErrorElement/
    │   │       │   │   │   ├── ErrorElement.test.tsx
    │   │       │   │   │   ├── ErrorElement.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── FullScreenWrapper/
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   ├── styled-components.tsx
    │   │       │   │   │   ├── withFullScreenWrapper.test.tsx
    │   │       │   │   │   └── withFullScreenWrapper.tsx
    │   │       │   │   ├── Icon/
    │   │       │   │   │   ├── DynamicIcon.test.tsx
    │   │       │   │   │   ├── DynamicIcon.tsx
    │   │       │   │   │   ├── Icon.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   ├── styled-components.ts
    │   │       │   │   │   └── Material/
    │   │       │   │   │       ├── MaterialFontIcon.tsx
    │   │       │   │   │       └── styled-components.ts
    │   │       │   │   ├── InputInstructions/
    │   │       │   │   │   ├── InputInstructions.test.tsx
    │   │       │   │   │   ├── InputInstructions.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Modal/
    │   │       │   │   │   ├── Modal.test.tsx
    │   │       │   │   │   ├── Modal.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Profiler/
    │   │       │   │   │   ├── CircularBuffer.test.ts
    │   │       │   │   │   ├── CircularBuffer.ts
    │   │       │   │   │   ├── Profiler.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── ProgressBar/
    │   │       │   │   │   ├── ProgressBar.test.tsx
    │   │       │   │   │   ├── ProgressBar.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── Radio/
    │   │       │   │   │   ├── Radio.test.tsx
    │   │       │   │   │   ├── Radio.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── StreamlitMarkdown/
    │   │       │   │   │   ├── Heading.test.tsx
    │   │       │   │   │   ├── Heading.tsx
    │   │       │   │   │   ├── StreamlitMarkdown.test.tsx
    │   │       │   │   │   ├── StreamlitMarkdown.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── TextElements/
    │   │       │   │   │   ├── Text.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── Toolbar/
    │   │       │   │   │   ├── Toolbar.test.tsx
    │   │       │   │   │   ├── Toolbar.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   ├── Tooltip/
    │   │       │   │   │   ├── OverflowTooltip.test.tsx
    │   │       │   │   │   ├── OverflowTooltip.tsx
    │   │       │   │   │   ├── Tooltip.test.tsx
    │   │       │   │   │   ├── Tooltip.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.tsx
    │   │       │   │   ├── TooltipIcon/
    │   │       │   │   │   ├── TooltipIcon.test.tsx
    │   │       │   │   │   ├── TooltipIcon.tsx
    │   │       │   │   │   ├── index.tsx
    │   │       │   │   │   └── styled-components.ts
    │   │       │   │   └── WindowDimensions/
    │   │       │   │       ├── Provider.test.tsx
    │   │       │   │       ├── Provider.tsx
    │   │       │   │       ├── index.tsx
    │   │       │   │       └── useWindowDimensions.tsx
    │   │       │   └── widgets/
    │   │       │       ├── AudioInput/
    │   │       │       │   ├── AudioInput.tsx
    │   │       │       │   ├── AudioInputActionButtons.test.tsx
    │   │       │       │   ├── AudioInputActionButtons.tsx
    │   │       │       │   ├── AudioInputErrorState.tsx
    │   │       │       │   ├── NoMicPermissions.tsx
    │   │       │       │   ├── Placeholder.tsx
    │   │       │       │   ├── constants.ts
    │   │       │       │   ├── convertAudioToWav.ts
    │   │       │       │   ├── formatTime.test.ts
    │   │       │       │   ├── formatTime.ts
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── BaseWidget/
    │   │       │       │   ├── WidgetLabel.test.tsx
    │   │       │       │   ├── WidgetLabel.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── Button/
    │   │       │       │   ├── Button.test.tsx
    │   │       │       │   ├── Button.tsx
    │   │       │       │   └── index.tsx
    │   │       │       ├── ButtonGroup/
    │   │       │       │   ├── ButtonGroup.test.tsx
    │   │       │       │   ├── ButtonGroup.tsx
    │   │       │       │   └── index.tsx
    │   │       │       ├── CameraInput/
    │   │       │       │   ├── CameraInput.test.tsx
    │   │       │       │   ├── CameraInput.tsx
    │   │       │       │   ├── CameraInputButton.test.tsx
    │   │       │       │   ├── CameraInputButton.tsx
    │   │       │       │   ├── SwitchFacingModeButton.tsx
    │   │       │       │   ├── WebcamComponent.test.tsx
    │   │       │       │   ├── WebcamComponent.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── ChatInput/
    │   │       │       │   ├── ChatInput.test.tsx
    │   │       │       │   ├── ChatInput.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── Checkbox/
    │   │       │       │   ├── Checkbox.test.tsx
    │   │       │       │   ├── Checkbox.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.tsx
    │   │       │       ├── ColorPicker/
    │   │       │       │   ├── ColorPicker.test.tsx
    │   │       │       │   ├── ColorPicker.tsx
    │   │       │       │   └── index.tsx
    │   │       │       ├── CustomComponent/
    │   │       │       │   ├── ComponentInstance.test.tsx
    │   │       │       │   ├── ComponentInstance.tsx
    │   │       │       │   ├── ComponentRegistry.test.ts
    │   │       │       │   ├── ComponentRegistry.ts
    │   │       │       │   ├── componentUtils.test.ts
    │   │       │       │   ├── componentUtils.tsx
    │   │       │       │   ├── enums.ts
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── DataFrame/
    │   │       │       │   ├── DataFrame.test.tsx
    │   │       │       │   ├── DataFrame.tsx
    │   │       │       │   ├── EditingState.test.ts
    │   │       │       │   ├── EditingState.ts
    │   │       │       │   ├── Tooltip.test.tsx
    │   │       │       │   ├── Tooltip.tsx
    │   │       │       │   ├── arrowUtils.test.ts
    │   │       │       │   ├── arrowUtils.ts
    │   │       │       │   ├── index.tsx
    │   │       │       │   ├── styled-components.ts
    │   │       │       │   ├── columns/
    │   │       │       │   │   ├── ChartColumn.test.ts
    │   │       │       │   │   ├── ChartColumn.ts
    │   │       │       │   │   ├── CheckboxColumn.test.ts
    │   │       │       │   │   ├── CheckboxColumn.ts
    │   │       │       │   │   ├── DateTimeColumn.test.ts
    │   │       │       │   │   ├── DateTimeColumn.ts
    │   │       │       │   │   ├── ImageColumn.test.ts
    │   │       │       │   │   ├── ImageColumn.ts
    │   │       │       │   │   ├── LinkColumn.test.ts
    │   │       │       │   │   ├── LinkColumn.ts
    │   │       │       │   │   ├── ListColumn.test.ts
    │   │       │       │   │   ├── ListColumn.ts
    │   │       │       │   │   ├── NumberColumn.test.ts
    │   │       │       │   │   ├── NumberColumn.ts
    │   │       │       │   │   ├── ObjectColumn.test.ts
    │   │       │       │   │   ├── ObjectColumn.ts
    │   │       │       │   │   ├── ProgressColumn.test.ts
    │   │       │       │   │   ├── ProgressColumn.ts
    │   │       │       │   │   ├── SelectboxColumn.test.ts
    │   │       │       │   │   ├── SelectboxColumn.ts
    │   │       │       │   │   ├── TextColumn.test.ts
    │   │       │       │   │   ├── TextColumn.ts
    │   │       │       │   │   ├── index.ts
    │   │       │       │   │   ├── utils.test.ts
    │   │       │       │   │   ├── utils.ts
    │   │       │       │   │   └── cells/
    │   │       │       │   │       ├── ImageCellEditor.test.tsx
    │   │       │       │   │       └── ImageCellEditor.tsx
    │   │       │       │   └── hooks/
    │   │       │       │       ├── index.ts
    │   │       │       │       ├── useColumnLoader.test.ts
    │   │       │       │       ├── useColumnLoader.ts
    │   │       │       │       ├── useColumnPinning.test.ts
    │   │       │       │       ├── useColumnPinning.ts
    │   │       │       │       ├── useColumnReordering.test.ts
    │   │       │       │       ├── useColumnReordering.ts
    │   │       │       │       ├── useColumnSizer.test.ts
    │   │       │       │       ├── useColumnSizer.ts
    │   │       │       │       ├── useColumnSort.test.ts
    │   │       │       │       ├── useColumnSort.ts
    │   │       │       │       ├── useCustomRenderer.test.ts
    │   │       │       │       ├── useCustomRenderer.ts
    │   │       │       │       ├── useCustomTheme.ts
    │   │       │       │       ├── useDataEditor.test.ts
    │   │       │       │       ├── useDataEditor.ts
    │   │       │       │       ├── useDataExporter.test.ts
    │   │       │       │       ├── useDataExporter.ts
    │   │       │       │       ├── useDataLoader.test.ts
    │   │       │       │       ├── useDataLoader.ts
    │   │       │       │       ├── useRowHover.test.ts
    │   │       │       │       ├── useRowHover.ts
    │   │       │       │       ├── useSelectionHandler.test.ts
    │   │       │       │       ├── useSelectionHandler.ts
    │   │       │       │       ├── useTableSizer.test.ts
    │   │       │       │       ├── useTableSizer.ts
    │   │       │       │       ├── useTooltips.test.ts
    │   │       │       │       └── useTooltips.ts
    │   │       │       ├── DateInput/
    │   │       │       │   ├── DateInput.test.tsx
    │   │       │       │   ├── DateInput.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── useIntlLocale.tsx
    │   │       │       ├── DownloadButton/
    │   │       │       │   ├── DownloadButton.test.tsx
    │   │       │       │   ├── DownloadButton.tsx
    │   │       │       │   └── index.tsx
    │   │       │       ├── FileUploader/
    │   │       │       │   ├── FileDropzone.test.tsx
    │   │       │       │   ├── FileDropzone.tsx
    │   │       │       │   ├── FileDropzoneInstructions.test.tsx
    │   │       │       │   ├── FileDropzoneInstructions.tsx
    │   │       │       │   ├── FileUploader.test.tsx
    │   │       │       │   ├── FileUploader.tsx
    │   │       │       │   ├── UploadFileInfo.ts
    │   │       │       │   ├── UploadedFile.test.tsx
    │   │       │       │   ├── UploadedFile.tsx
    │   │       │       │   ├── UploadedFiles.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   ├── styled-components.ts
    │   │       │       │   └── withPagination/
    │   │       │       │       ├── Pagination.test.tsx
    │   │       │       │       ├── Pagination.tsx
    │   │       │       │       ├── index.tsx
    │   │       │       │       ├── styled-components.ts
    │   │       │       │       ├── withPagination.test.tsx
    │   │       │       │       └── withPagination.tsx
    │   │       │       ├── Form/
    │   │       │       │   ├── Form.test.tsx
    │   │       │       │   ├── Form.tsx
    │   │       │       │   ├── FormClearHelper.ts
    │   │       │       │   ├── FormSubmitButton.test.tsx
    │   │       │       │   ├── FormSubmitButton.tsx
    │   │       │       │   ├── FormSubmitContent.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── Multiselect/
    │   │       │       │   ├── Multiselect.test.tsx
    │   │       │       │   ├── Multiselect.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── NumberInput/
    │   │       │       │   ├── NumberInput.test.tsx
    │   │       │       │   ├── NumberInput.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── Radio/
    │   │       │       │   ├── Radio.test.tsx
    │   │       │       │   ├── Radio.tsx
    │   │       │       │   └── index.tsx
    │   │       │       ├── Selectbox/
    │   │       │       │   ├── Selectbox.test.tsx
    │   │       │       │   ├── Selectbox.tsx
    │   │       │       │   └── index.tsx
    │   │       │       ├── Slider/
    │   │       │       │   ├── Slider.test.tsx
    │   │       │       │   ├── Slider.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       ├── TextArea/
    │   │       │       │   ├── TextArea.test.tsx
    │   │       │       │   ├── TextArea.tsx
    │   │       │       │   └── index.tsx
    │   │       │       ├── TextInput/
    │   │       │       │   ├── TextInput.test.tsx
    │   │       │       │   ├── TextInput.tsx
    │   │       │       │   ├── index.tsx
    │   │       │       │   └── styled-components.ts
    │   │       │       └── TimeInput/
    │   │       │           ├── TimeInput.test.tsx
    │   │       │           ├── TimeInput.tsx
    │   │       │           ├── index.tsx
    │   │       │           └── styled-components.ts
    │   │       ├── dataframes/
    │   │       │   ├── Quiver.test.ts
    │   │       │   ├── Quiver.ts
    │   │       │   ├── arrowConcatUtils.ts
    │   │       │   ├── arrowFormatUtils.test.ts
    │   │       │   ├── arrowFormatUtils.ts
    │   │       │   ├── arrowParseUtils.ts
    │   │       │   ├── arrowTypeUtils.test.ts
    │   │       │   ├── arrowTypeUtils.ts
    │   │       │   └── __snapshots__/
    │   │       │       └── Quiver.test.ts.snap
    │   │       ├── hooks/
    │   │       │   ├── useBasicWidgetState.ts
    │   │       │   ├── useDebouncedCallback.test.ts
    │   │       │   ├── useDebouncedCallback.ts
    │   │       │   ├── useDownloadUrl.ts
    │   │       │   ├── useOnInputChange.test.ts
    │   │       │   ├── useOnInputChange.ts
    │   │       │   ├── useRequiredContext.tsx
    │   │       │   ├── useScrollAnimation.test.ts
    │   │       │   ├── useScrollAnimation.ts
    │   │       │   ├── useScrollSpy.test.ts
    │   │       │   ├── useScrollSpy.ts
    │   │       │   ├── useScrollToBottom.test.ts
    │   │       │   ├── useScrollToBottom.ts
    │   │       │   ├── useStWidthHeight.test.ts
    │   │       │   ├── useStWidthHeight.ts
    │   │       │   ├── useStateRef.test.ts
    │   │       │   ├── useStateRef.ts
    │   │       │   ├── useSubmitFormViaEnterKey.test.ts
    │   │       │   ├── useSubmitFormViaEnterKey.ts
    │   │       │   ├── useTimeout.test.ts
    │   │       │   ├── useTimeout.tsx
    │   │       │   ├── useUpdateUiValue.test.ts
    │   │       │   ├── useUpdateUiValue.ts
    │   │       │   ├── useWidgetManagerElementState.test.tsx
    │   │       │   └── useWidgetManagerElementState.tsx
    │   │       ├── hostComm/
    │   │       │   ├── HostCommunicationManager.test.tsx
    │   │       │   ├── HostCommunicationManager.tsx
    │   │       │   ├── index.ts
    │   │       │   └── types.ts
    │   │       ├── mocks/
    │   │       │   ├── mockTheme.ts
    │   │       │   ├── mocks.ts
    │   │       │   └── arrow/
    │   │       │       ├── differentColumnTypes.ts
    │   │       │       ├── empty.ts
    │   │       │       ├── fewerColumns.ts
    │   │       │       ├── index.ts
    │   │       │       ├── multi.ts
    │   │       │       ├── namedIndex.ts
    │   │       │       ├── styler.ts
    │   │       │       ├── tall.ts
    │   │       │       ├── tenByTen.ts
    │   │       │       ├── vegaLite.ts
    │   │       │       ├── wide.ts
    │   │       │       └── types/
    │   │       │           ├── categorical.ts
    │   │       │           ├── categoricalColumn.ts
    │   │       │           ├── categoricalInterval.ts
    │   │       │           ├── datetime.ts
    │   │       │           ├── decimal.ts
    │   │       │           ├── dictionary.ts
    │   │       │           ├── float64.ts
    │   │       │           ├── int64.ts
    │   │       │           ├── intervalDatetime64.ts
    │   │       │           ├── intervalFloat64.ts
    │   │       │           ├── intervalInt64.ts
    │   │       │           ├── intervalUint64.ts
    │   │       │           ├── period.ts
    │   │       │           ├── range.ts
    │   │       │           ├── timedelta.ts
    │   │       │           ├── uint64.ts
    │   │       │           └── unicode.ts
    │   │       ├── profiler/
    │   │       │   ├── PerformanceEvents.ts
    │   │       │   ├── RerunAnalyzer.ts
    │   │       │   └── Utils.ts
    │   │       ├── theme/
    │   │       │   ├── baseui.ts
    │   │       │   ├── consts.ts
    │   │       │   ├── createThemeUtil.ts
    │   │       │   ├── emotion.d.ts
    │   │       │   ├── getColors.ts
    │   │       │   ├── globalStyles.ts
    │   │       │   ├── index.ts
    │   │       │   ├── themeConfigs.ts
    │   │       │   ├── types.ts
    │   │       │   ├── utils.test.ts
    │   │       │   ├── utils.ts
    │   │       │   ├── emotionBaseTheme/
    │   │       │   │   ├── index.ts
    │   │       │   │   └── themeColors.ts
    │   │       │   ├── emotionDarkTheme/
    │   │       │   │   ├── index.ts
    │   │       │   │   └── themeColors.ts
    │   │       │   ├── emotionLightTheme/
    │   │       │   │   ├── index.ts
    │   │       │   │   └── themeColors.ts
    │   │       │   └── primitives/
    │   │       │       ├── breakpoints.ts
    │   │       │       ├── colors.ts
    │   │       │       ├── iconSizes.ts
    │   │       │       ├── index.ts
    │   │       │       ├── radii.ts
    │   │       │       ├── sizes.ts
    │   │       │       ├── spacing.ts
    │   │       │       ├── typography.ts
    │   │       │       └── zIndices.ts
    │   │       ├── util/
    │   │       │   ├── ErrorHandling.ts
    │   │       │   ├── FileHelper.test.ts
    │   │       │   ├── FileHelper.ts
    │   │       │   ├── Hooks.test.ts
    │   │       │   ├── Hooks.ts
    │   │       │   ├── IFrameUtil.ts
    │   │       │   ├── Resolver.ts
    │   │       │   ├── Timer.ts
    │   │       │   ├── UriUtil.test.ts
    │   │       │   ├── UriUtil.ts
    │   │       │   ├── assertNever.ts
    │   │       │   ├── createDownloadLinkElement.ts
    │   │       │   ├── inputUtils.test.ts
    │   │       │   ├── inputUtils.ts
    │   │       │   ├── log.ts
    │   │       │   ├── storageUtils.test.ts
    │   │       │   ├── storageUtils.ts
    │   │       │   ├── uploadFiles.ts
    │   │       │   ├── utils.test.ts
    │   │       │   ├── utils.ts
    │   │       │   ├── withTimezones.ts
    │   │       │   └── performance/
    │   │       │       ├── fns.ts
    │   │       │       ├── index.ts
    │   │       │       └── types.ts
    │   │       └── vendor/
    │   │           ├── dom-helpers.ts
    │   │           ├── react-bootstrap-LICENSE.txt
    │   │           ├── twemoji-LICENSE.txt
    │   │           ├── twemoji.ts
    │   │           └── bokeh/
    │   │               ├── bokeh-LICENSE.txt
    │   │               ├── bokeh-api-2.4.3.esm.min.d.ts
    │   │               ├── bokeh-gl-2.4.3.esm.min.d.ts
    │   │               ├── bokeh-mathjax-2.4.3.esm.min.d.ts
    │   │               ├── bokeh-tables-2.4.3.esm.min.d.ts
    │   │               ├── bokeh-widgets-2.4.3.esm.min.d.ts
    │   │               ├── bokeh.esm.d.ts
    │   │               └── bokeh.esm.js
    │   └── patches/
    │       └── @protobufjs+inquire+1.1.0.patch
    ├── lib/
    │   ├── MANIFEST.in
    │   ├── Pipfile
    │   ├── dev-requirements.txt
    │   ├── integration-requirements.txt
    │   ├── min-constraints-gen.txt
    │   ├── mypy.ini
    │   ├── pytest.ini
    │   ├── setup.py
    │   ├── test-requirements.txt
    │   ├── .coveragerc
    │   ├── bin/
    │   │   └── streamlit.cmd
    │   ├── conda-recipe/
    │   │   ├── LICENSE
    │   │   └── meta.yaml
    │   ├── streamlit/
    │   │   ├── __init__.py
    │   │   ├── __main__.py
    │   │   ├── auth_util.py
    │   │   ├── cli_util.py
    │   │   ├── column_config.py
    │   │   ├── config.py
    │   │   ├── config_option.py
    │   │   ├── config_util.py
    │   │   ├── cursor.py
    │   │   ├── dataframe_util.py
    │   │   ├── delta_generator.py
    │   │   ├── delta_generator_singletons.py
    │   │   ├── deprecation_util.py
    │   │   ├── development.py
    │   │   ├── emojis.py
    │   │   ├── env_util.py
    │   │   ├── error_util.py
    │   │   ├── errors.py
    │   │   ├── file_util.py
    │   │   ├── git_util.py
    │   │   ├── logger.py
    │   │   ├── material_icon_names.py
    │   │   ├── net_util.py
    │   │   ├── platform.py
    │   │   ├── py.typed
    │   │   ├── source_util.py
    │   │   ├── string_util.py
    │   │   ├── temporary_directory.py
    │   │   ├── time_util.py
    │   │   ├── type_util.py
    │   │   ├── url_util.py
    │   │   ├── user_info.py
    │   │   ├── util.py
    │   │   ├── version.py
    │   │   ├── commands/
    │   │   │   ├── __init__.py
    │   │   │   ├── echo.py
    │   │   │   ├── execution_control.py
    │   │   │   ├── experimental_query_params.py
    │   │   │   ├── logo.py
    │   │   │   ├── navigation.py
    │   │   │   └── page_config.py
    │   │   ├── components/
    │   │   │   ├── __init__.py
    │   │   │   ├── lib/
    │   │   │   │   ├── __init__.py
    │   │   │   │   └── local_component_registry.py
    │   │   │   ├── types/
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── base_component_registry.py
    │   │   │   │   └── base_custom_component.py
    │   │   │   └── v1/
    │   │   │       ├── __init__.py
    │   │   │       ├── component_arrow.py
    │   │   │       ├── component_registry.py
    │   │   │       ├── components.py
    │   │   │       └── custom_component.py
    │   │   ├── connections/
    │   │   │   ├── __init__.py
    │   │   │   ├── base_connection.py
    │   │   │   ├── snowflake_connection.py
    │   │   │   ├── snowpark_connection.py
    │   │   │   ├── sql_connection.py
    │   │   │   └── util.py
    │   │   ├── elements/
    │   │   │   ├── __init__.py
    │   │   │   ├── alert.py
    │   │   │   ├── arrow.py
    │   │   │   ├── balloons.py
    │   │   │   ├── bokeh_chart.py
    │   │   │   ├── code.py
    │   │   │   ├── deck_gl_json_chart.py
    │   │   │   ├── dialog_decorator.py
    │   │   │   ├── doc_string.py
    │   │   │   ├── empty.py
    │   │   │   ├── exception.py
    │   │   │   ├── form.py
    │   │   │   ├── graphviz_chart.py
    │   │   │   ├── heading.py
    │   │   │   ├── html.py
    │   │   │   ├── iframe.py
    │   │   │   ├── image.py
    │   │   │   ├── json.py
    │   │   │   ├── layouts.py
    │   │   │   ├── map.py
    │   │   │   ├── markdown.py
    │   │   │   ├── media.py
    │   │   │   ├── metric.py
    │   │   │   ├── plotly_chart.py
    │   │   │   ├── progress.py
    │   │   │   ├── pyplot.py
    │   │   │   ├── snow.py
    │   │   │   ├── spinner.py
    │   │   │   ├── text.py
    │   │   │   ├── toast.py
    │   │   │   ├── vega_charts.py
    │   │   │   ├── write.py
    │   │   │   ├── lib/
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── built_in_chart_utils.py
    │   │   │   │   ├── color_util.py
    │   │   │   │   ├── column_config_utils.py
    │   │   │   │   ├── column_types.py
    │   │   │   │   ├── dialog.py
    │   │   │   │   ├── dicttools.py
    │   │   │   │   ├── event_utils.py
    │   │   │   │   ├── file_uploader_utils.py
    │   │   │   │   ├── form_utils.py
    │   │   │   │   ├── image_utils.py
    │   │   │   │   ├── js_number.py
    │   │   │   │   ├── mutable_status_container.py
    │   │   │   │   ├── options_selector_utils.py
    │   │   │   │   ├── pandas_styler_utils.py
    │   │   │   │   ├── policies.py
    │   │   │   │   ├── streamlit_plotly_theme.py
    │   │   │   │   ├── subtitle_utils.py
    │   │   │   │   └── utils.py
    │   │   │   └── widgets/
    │   │   │       ├── __init__.py
    │   │   │       ├── audio_input.py
    │   │   │       ├── button.py
    │   │   │       ├── button_group.py
    │   │   │       ├── camera_input.py
    │   │   │       ├── chat.py
    │   │   │       ├── checkbox.py
    │   │   │       ├── color_picker.py
    │   │   │       ├── data_editor.py
    │   │   │       ├── file_uploader.py
    │   │   │       ├── multiselect.py
    │   │   │       ├── number_input.py
    │   │   │       ├── radio.py
    │   │   │       ├── select_slider.py
    │   │   │       ├── selectbox.py
    │   │   │       ├── slider.py
    │   │   │       ├── text_widgets.py
    │   │   │       └── time_widgets.py
    │   │   ├── external/
    │   │   │   ├── __init__.py
    │   │   │   └── langchain/
    │   │   │       ├── __init__.py
    │   │   │       └── streamlit_callback_handler.py
    │   │   ├── hello/
    │   │   │   ├── __init__.py
    │   │   │   ├── animation_demo.py
    │   │   │   ├── dataframe_demo.py
    │   │   │   ├── hello.py
    │   │   │   ├── mapping_demo.py
    │   │   │   ├── plotting_demo.py
    │   │   │   ├── streamlit_app.py
    │   │   │   └── utils.py
    │   │   ├── navigation/
    │   │   │   ├── __init__.py
    │   │   │   └── page.py
    │   │   ├── proto/
    │   │   │   └── __init__.py
    │   │   ├── runtime/
    │   │   │   ├── __init__.py
    │   │   │   ├── app_session.py
    │   │   │   ├── connection_factory.py
    │   │   │   ├── context.py
    │   │   │   ├── credentials.py
    │   │   │   ├── forward_msg_cache.py
    │   │   │   ├── forward_msg_queue.py
    │   │   │   ├── fragment.py
    │   │   │   ├── media_file_manager.py
    │   │   │   ├── media_file_storage.py
    │   │   │   ├── memory_media_file_storage.py
    │   │   │   ├── memory_session_storage.py
    │   │   │   ├── memory_uploaded_file_manager.py
    │   │   │   ├── metrics_util.py
    │   │   │   ├── pages_manager.py
    │   │   │   ├── runtime.py
    │   │   │   ├── runtime_util.py
    │   │   │   ├── script_data.py
    │   │   │   ├── secrets.py
    │   │   │   ├── session_manager.py
    │   │   │   ├── stats.py
    │   │   │   ├── uploaded_file_manager.py
    │   │   │   ├── websocket_session_manager.py
    │   │   │   ├── caching/
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── cache_data_api.py
    │   │   │   │   ├── cache_errors.py
    │   │   │   │   ├── cache_resource_api.py
    │   │   │   │   ├── cache_type.py
    │   │   │   │   ├── cache_utils.py
    │   │   │   │   ├── cached_message_replay.py
    │   │   │   │   ├── hashing.py
    │   │   │   │   ├── legacy_cache_api.py
    │   │   │   │   └── storage/
    │   │   │   │       ├── __init__.py
    │   │   │   │       ├── cache_storage_protocol.py
    │   │   │   │       ├── dummy_cache_storage.py
    │   │   │   │       ├── in_memory_cache_storage_wrapper.py
    │   │   │   │       └── local_disk_cache_storage.py
    │   │   │   ├── scriptrunner/
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── exec_code.py
    │   │   │   │   ├── magic.py
    │   │   │   │   ├── magic_funcs.py
    │   │   │   │   ├── script_cache.py
    │   │   │   │   └── script_runner.py
    │   │   │   ├── scriptrunner_utils/
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── exceptions.py
    │   │   │   │   ├── script_requests.py
    │   │   │   │   └── script_run_context.py
    │   │   │   └── state/
    │   │   │       ├── __init__.py
    │   │   │       ├── common.py
    │   │   │       ├── query_params.py
    │   │   │       ├── query_params_proxy.py
    │   │   │       ├── safe_session_state.py
    │   │   │       ├── session_state.py
    │   │   │       ├── session_state_proxy.py
    │   │   │       └── widgets.py
    │   │   ├── testing/
    │   │   │   ├── __init__.py
    │   │   │   └── v1/
    │   │   │       ├── __init__.py
    │   │   │       ├── app_test.py
    │   │   │       ├── element_tree.py
    │   │   │       ├── local_script_runner.py
    │   │   │       └── util.py
    │   │   ├── vendor/
    │   │   │   ├── __init__.py
    │   │   │   └── pympler/
    │   │   │       ├── __init__.py
    │   │   │       └── asizeof.py
    │   │   ├── watcher/
    │   │   │   ├── __init__.py
    │   │   │   ├── event_based_path_watcher.py
    │   │   │   ├── folder_black_list.py
    │   │   │   ├── local_sources_watcher.py
    │   │   │   ├── path_watcher.py
    │   │   │   ├── polling_path_watcher.py
    │   │   │   └── util.py
    │   │   └── web/
    │   │       ├── __init__.py
    │   │       ├── bootstrap.py
    │   │       ├── cache_storage_manager_config.py
    │   │       ├── cli.py
    │   │       └── server/
    │   │           ├── __init__.py
    │   │           ├── app_static_file_handler.py
    │   │           ├── authlib_tornado_integration.py
    │   │           ├── browser_websocket_handler.py
    │   │           ├── component_request_handler.py
    │   │           ├── media_file_handler.py
    │   │           ├── oauth_authlib_routes.py
    │   │           ├── oidc_mixin.py
    │   │           ├── routes.py
    │   │           ├── server.py
    │   │           ├── server_util.py
    │   │           ├── stats_request_handler.py
    │   │           ├── upload_file_request_handler.py
    │   │           └── websocket_headers.py
    │   └── tests/
    │       ├── __init__.py
    │       ├── conftest.py
    │       ├── delta_generator_test_case.py
    │       ├── exception_capturing_thread.py
    │       ├── testutil.py
    │       └── streamlit/
    │           ├── __init__.py
    │           ├── auth_util_test.py
    │           ├── cli_util_test.py
    │           ├── components_test.py
    │           ├── config_option_test.py
    │           ├── config_test.py
    │           ├── config_util_test.py
    │           ├── data_test_cases.py
    │           ├── dataframe_coercion_test.py
    │           ├── dataframe_util_test.py
    │           ├── delta_generator_singletons_test.py
    │           ├── delta_generator_test.py
    │           ├── deprecation_util_test.py
    │           ├── element_mocks.py
    │           ├── error_util_test.py
    │           ├── file_uploader_utils_test.py
    │           ├── file_util_test.py
    │           ├── form_test.py
    │           ├── form_utils_test.py
    │           ├── git_util_test.py
    │           ├── logger_test.py
    │           ├── message_mocks.py
    │           ├── net_util_test.py
    │           ├── platform_test.py
    │           ├── proto_compatibility_test.py
    │           ├── repr_test.py
    │           ├── source_util_test.py
    │           ├── spinner_test.py
    │           ├── stop_test.py
    │           ├── streamlit_test.py
    │           ├── string_util_test.py
    │           ├── temporary_directory_test.py
    │           ├── time_util_test.py
    │           ├── toast_test.py
    │           ├── type_util_test.py
    │           ├── url_util_test.py
    │           ├── user_info_test.py
    │           ├── util_test.py
    │           ├── write_test.py
    │           ├── commands/
    │           │   ├── __init__.py
    │           │   ├── execution_control_test.py
    │           │   ├── experimental_query_params_test.py
    │           │   ├── logo_test.py
    │           │   ├── navigation_test.py
    │           │   └── page_config_test.py
    │           ├── component_test_data/
    │           │   ├── __init__.py
    │           │   ├── outer_module.py
    │           │   └── nested/
    │           │       ├── __init__.py
    │           │       └── inner_module.py
    │           ├── connections/
    │           │   ├── __init__.py
    │           │   ├── base_connection_test.py
    │           │   ├── snowflake_connection_test.py
    │           │   ├── snowpark_connection_test.py
    │           │   ├── sql_connection_test.py
    │           │   └── util_test.py
    │           ├── data_mocks/
    │           │   ├── __init__.py
    │           │   ├── dask_mocks.py
    │           │   ├── modin_mocks.py
    │           │   ├── pyspark_connect_mocks.py
    │           │   ├── pyspark_mocks.py
    │           │   ├── ray_mocks.py
    │           │   ├── snowpandas_mocks.py
    │           │   └── snowpark_mocks.py
    │           ├── echo_test_data/
    │           │   ├── __init__.py
    │           │   ├── multiline_param_echo.py
    │           │   └── root_level_echo.py
    │           ├── elements/
    │           │   ├── __init__.py
    │           │   ├── alert_test.py
    │           │   ├── arrow_add_rows_test.py
    │           │   ├── arrow_dataframe_dimensions_test.py
    │           │   ├── arrow_dataframe_test.py
    │           │   ├── arrow_table_test.py
    │           │   ├── audio_input_test.py
    │           │   ├── audio_test.py
    │           │   ├── balllons_test.py
    │           │   ├── bokeh_test.py
    │           │   ├── button_group_test.py
    │           │   ├── button_test.py
    │           │   ├── cache_spinner_test.py
    │           │   ├── camera_input_test.py
    │           │   ├── chat_test.py
    │           │   ├── checkbox_test.py
    │           │   ├── code_test.py
    │           │   ├── color_picker_test.py
    │           │   ├── data_editor_test.py
    │           │   ├── date_input_test.py
    │           │   ├── divider_test.py
    │           │   ├── doc_string_test.py
    │           │   ├── download_button_test.py
    │           │   ├── echo_test.py
    │           │   ├── element_policies_test.py
    │           │   ├── empty_test.py
    │           │   ├── exception_test.py
    │           │   ├── file_uploader_test.py
    │           │   ├── graphviz_test.py
    │           │   ├── heading_test.py
    │           │   ├── help_test.py
    │           │   ├── html_test.py
    │           │   ├── image_test.py
    │           │   ├── json_test.py
    │           │   ├── latex_test.py
    │           │   ├── layouts_test.py
    │           │   ├── link_button_test.py
    │           │   ├── map_test.py
    │           │   ├── markdown_test.py
    │           │   ├── media_test.py
    │           │   ├── metric_test.py
    │           │   ├── multiselect_test.py
    │           │   ├── number_input_test.py
    │           │   ├── page_link_test.py
    │           │   ├── plotly_chart_test.py
    │           │   ├── progress_test.py
    │           │   ├── pydeck_test.py
    │           │   ├── pyplot_test.py
    │           │   ├── radio_test.py
    │           │   ├── select_slider_test.py
    │           │   ├── selectbox_test.py
    │           │   ├── slider_test.py
    │           │   ├── test_html.js
    │           │   ├── text_area_test.py
    │           │   ├── text_input_test.py
    │           │   ├── text_test.py
    │           │   ├── time_input_test.py
    │           │   ├── vega_charts_test.py
    │           │   ├── video_test.py
    │           │   ├── lib/
    │           │   │   ├── __init__.py
    │           │   │   ├── color_util_test.py
    │           │   │   ├── column_config_utils_test.py
    │           │   │   ├── column_types_test.py
    │           │   │   ├── dicttools_test.py
    │           │   │   ├── index_test.py
    │           │   │   ├── options_selector_utils_test.py
    │           │   │   └── subtitle_utils_test.py
    │           │   └── support_files/
    │           │       ├── __init__.py
    │           │       └── exception_test_utils.py
    │           ├── external/
    │           │   ├── __init__.py
    │           │   ├── pydantic_integration.py
    │           │   └── langchain/
    │           │       ├── __init__.py
    │           │       ├── capturing_callback_handler.py
    │           │       └── streamlit_callback_handler_test.py
    │           ├── navigation/
    │           │   ├── __init__.py
    │           │   └── page_test.py
    │           ├── runtime/
    │           │   ├── __init__.py
    │           │   ├── app_session_test.py
    │           │   ├── connection_factory_test.py
    │           │   ├── context_tests.py
    │           │   ├── credentials_test.py
    │           │   ├── forward_msg_cache_test.py
    │           │   ├── forward_msg_queue_test.py
    │           │   ├── fragment_test.py
    │           │   ├── media_file_manager_test.py
    │           │   ├── memory_media_file_storage_test.py
    │           │   ├── memory_session_storage_test.py
    │           │   ├── metrics_util_test.py
    │           │   ├── pages_manager_test.py
    │           │   ├── runtime_test.py
    │           │   ├── runtime_test_case.py
    │           │   ├── runtime_threading_test.py
    │           │   ├── runtime_util_test.py
    │           │   ├── script_data_test.py
    │           │   ├── secrets_test.py
    │           │   ├── stats_test.py
    │           │   ├── uploaded_file_manager_test.py
    │           │   ├── websocket_session_manager_test.py
    │           │   ├── caching/
    │           │   │   ├── __init__.py
    │           │   │   ├── cache_data_api_test.py
    │           │   │   ├── cache_errors_test.py
    │           │   │   ├── cache_resource_api_test.py
    │           │   │   ├── common_cache_test.py
    │           │   │   ├── hashing_test.py
    │           │   │   ├── legacy_cache_api_test.py
    │           │   │   ├── storage/
    │           │   │   │   ├── __init__.py
    │           │   │   │   ├── dummy_cache_storage_test.py
    │           │   │   │   ├── in_memory_cache_storage_wrapper_test.py
    │           │   │   │   └── local_disk_cache_storage_test.py
    │           │   │   └── test_data/
    │           │   │       └── arrow_replay.py
    │           │   ├── scriptrunner/
    │           │   │   ├── __init__.py
    │           │   │   ├── code_exec_test.py
    │           │   │   ├── magic_test.py
    │           │   │   ├── script_cache_test.py
    │           │   │   ├── script_runner_test.py
    │           │   │   └── test_data/
    │           │   │       ├── compile_error.py.txt
    │           │   │       ├── good_script.py
    │           │   │       ├── good_script2.py
    │           │   │       ├── good_script_latin_encoding.py.txt
    │           │   │       ├── good_script_no_encoding.py.txt
    │           │   │       ├── infinite_loop.py
    │           │   │       ├── runtime_error.py
    │           │   │       └── widgets_script.py
    │           │   ├── scriptrunner_utils/
    │           │   │   ├── __init__.py
    │           │   │   ├── script_requests_test.py
    │           │   │   └── script_run_context_test.py
    │           │   └── state/
    │           │       ├── __init__.py
    │           │       ├── query_params_proxy_test.py
    │           │       ├── query_params_test.py
    │           │       ├── session_state_proxy_test.py
    │           │       ├── session_state_test.py
    │           │       ├── strategies.py
    │           │       ├── widgets_test.py
    │           │       └── test_data/
    │           │           └── linked_sliders.py
    │           ├── test_data/
    │           │   ├── cached_widget_replay.py
    │           │   └── widgets_script.py
    │           ├── testing/
    │           │   ├── app_test_test.py
    │           │   ├── element_tree_test.py
    │           │   └── test_data/
    │           │       ├── main.py
    │           │       └── pages/
    │           │           └── page1.py
    │           ├── typing/
    │           │   ├── readme.md
    │           │   ├── __init__.py
    │           │   ├── dataframe_types.py
    │           │   ├── date_input_types.py
    │           │   ├── feedback.py
    │           │   ├── number_input_types.py
    │           │   ├── pills.py
    │           │   ├── radio_types.py
    │           │   ├── segmented_control.py
    │           │   ├── select_slider_types.py
    │           │   ├── selectbox_types.py
    │           │   └── slider_types.py
    │           ├── watcher/
    │           │   ├── __init__.py
    │           │   ├── event_based_path_watcher_test.py
    │           │   ├── folder_black_list_test.py
    │           │   ├── local_sources_watcher_test.py
    │           │   ├── path_watcher_test.py
    │           │   ├── polling_path_watcher_test.py
    │           │   ├── util_test.py
    │           │   └── test_data/
    │           │       ├── __init__.py
    │           │       ├── dummy_module1.py
    │           │       ├── dummy_module2.py
    │           │       ├── misbehaved_module.py
    │           │       ├── nested_module_child.py
    │           │       ├── nested_module_parent.py
    │           │       └── namespace_package/
    │           │           └── empty_file.py
    │           └── web/
    │               ├── __init__.py
    │               ├── bootstrap_test.py
    │               ├── cli_test.py
    │               └── server/
    │                   ├── __init__.py
    │                   ├── app_static_file_handler_test.py
    │                   ├── authlib_tornado_integration_test.py
    │                   ├── browser_websocket_handler_test.py
    │                   ├── component_request_handler_test.py
    │                   ├── media_file_handler_test.py
    │                   ├── oauth_authlib_routes_test.py
    │                   ├── oidc_mixin_test.py
    │                   ├── routes_test.py
    │                   ├── server_test.py
    │                   ├── server_test_case.py
    │                   ├── server_util_test.py
    │                   ├── stats_handler_test.py
    │                   ├── upload_file_request_handler_test.py
    │                   └── websocket_headers_test.py
    ├── proto/
    │   └── streamlit/
    │       └── proto/
    │           ├── Alert.proto
    │           ├── AppPage.proto
    │           ├── Arrow.proto
    │           ├── ArrowNamedDataSet.proto
    │           ├── ArrowVegaLiteChart.proto
    │           ├── Audio.proto
    │           ├── AudioInput.proto
    │           ├── AuthRedirect.proto
    │           ├── AutoRerun.proto
    │           ├── BackMsg.proto
    │           ├── Balloons.proto
    │           ├── Block.proto
    │           ├── BokehChart.proto
    │           ├── Button.proto
    │           ├── ButtonGroup.proto
    │           ├── CameraInput.proto
    │           ├── ChatInput.proto
    │           ├── Checkbox.proto
    │           ├── ClientState.proto
    │           ├── Code.proto
    │           ├── ColorPicker.proto
    │           ├── Common.proto
    │           ├── Components.proto
    │           ├── DataFrame.proto
    │           ├── DateInput.proto
    │           ├── DeckGlJsonChart.proto
    │           ├── Delta.proto
    │           ├── DocString.proto
    │           ├── DownloadButton.proto
    │           ├── Element.proto
    │           ├── Empty.proto
    │           ├── Exception.proto
    │           ├── Favicon.proto
    │           ├── FileUploader.proto
    │           ├── ForwardMsg.proto
    │           ├── GitInfo.proto
    │           ├── GraphVizChart.proto
    │           ├── Heading.proto
    │           ├── Html.proto
    │           ├── IFrame.proto
    │           ├── Image.proto
    │           ├── Json.proto
    │           ├── LabelVisibilityMessage.proto
    │           ├── LinkButton.proto
    │           ├── Logo.proto
    │           ├── Markdown.proto
    │           ├── Metric.proto
    │           ├── MetricsEvent.proto
    │           ├── MultiSelect.proto
    │           ├── NamedDataSet.proto
    │           ├── Navigation.proto
    │           ├── NewSession.proto
    │           ├── NumberInput.proto
    │           ├── PageConfig.proto
    │           ├── PageInfo.proto
    │           ├── PageLink.proto
    │           ├── PageNotFound.proto
    │           ├── PageProfile.proto
    │           ├── PagesChanged.proto
    │           ├── ParentMessage.proto
    │           ├── PlotlyChart.proto
    │           ├── Progress.proto
    │           ├── Radio.proto
    │           ├── RootContainer.proto
    │           ├── Selectbox.proto
    │           ├── SessionEvent.proto
    │           ├── SessionStatus.proto
    │           ├── Skeleton.proto
    │           ├── Slider.proto
    │           ├── Snow.proto
    │           ├── Spinner.proto
    │           ├── Text.proto
    │           ├── TextArea.proto
    │           ├── TextInput.proto
    │           ├── TimeInput.proto
    │           ├── Toast.proto
    │           ├── VegaLiteChart.proto
    │           ├── Video.proto
    │           ├── WidgetStates.proto
    │           └── openmetrics_data_model.proto
    ├── scripts/
    │   ├── append_license.sh
    │   ├── audit_frontend_licenses.py
    │   ├── check_license_headers.py
    │   ├── cli_regression_tests.py
    │   ├── cli_smoke_tests.py
    │   ├── create_release.py
    │   ├── create_release_branch.sh
    │   ├── ensure_relative_imports.sh
    │   ├── get_min_versions.py
    │   ├── get_release_branch.py
    │   ├── license-template.txt
    │   ├── pypi_nightly_create_tag.py
    │   ├── run_bare_execution_tests.py
    │   ├── run_in_subdirectory.py
    │   ├── slack_notifications.py
    │   ├── update_e2e_snapshots.py
    │   ├── update_emojis.py
    │   ├── update_material_icon_font_and_names.py
    │   ├── update_name.py
    │   └── update_version.py
    └── .github/
        ├── CODEOWNERS
        ├── codeql-config.yml
        ├── dependabot.yml
        ├── pull_request_template.md
        ├── release.yml
        ├── repo_meta.yaml
        ├── ISSUE_TEMPLATE/
        │   ├── bug_report.yml
        │   ├── config.yml
        │   ├── feature_request.yml
        │   └── thank_streamlit_team.yml
        ├── actions/
        │   ├── branch/
        │   │   └── action.yml
        │   ├── build_info/
        │   │   └── action.yml
        │   ├── make_init/
        │   │   └── action.yml
        │   └── preview_branch/
        │       └── action.yml
        ├── scripts/
        │   └── build_info.py
        └── workflows/
            ├── cli-regression.yml
            ├── codeql-analysis.yml
            ├── community-voting.yml
            ├── component-template-e2e-tests.yml
            ├── conda-build.yml
            ├── enforce-pre-commit.yml
            ├── ensure-relative-imports.yml
            ├── js-tests.yml
            ├── nightly.yml
            ├── performance-lighthouse.yml
            ├── playwright-changed-files.yml
            ├── playwright-custom-components.yml
            ├── playwright-performance.yml
            ├── playwright.yml
            ├── pr-preview.yml
            ├── python-bare-executions.yml
            ├── python-min-deps.yml
            ├── python-tests.yml
            ├── release.yml
            ├── require-labels.yml
            └── semgrep.yml

================================================
File: /README.md
================================================
<br>

<img src="https://user-images.githubusercontent.com/7164864/217935870-c0bc60a3-6fc0-4047-b011-7b4c59488c91.png" alt="Streamlit logo" style="margin-top:50px"></img>

# Welcome to Streamlit 👋

**A faster way to build and share data apps.**

## What is Streamlit?

Streamlit lets you transform Python scripts into interactive web apps in minutes, instead of weeks. Build dashboards, generate reports, or create chat apps. Once you’ve created an app, you can use our [Community Cloud platform](https://streamlit.io/cloud) to deploy, manage, and share your app.

### Why choose Streamlit?

- **Simple and Pythonic:** Write beautiful, easy-to-read code.
- **Fast, interactive prototyping:** Let others interact with your data and provide feedback quickly.
- **Live editing:** See your app update instantly as you edit your script.
- **Open-source and free:** Join a vibrant community and contribute to Streamlit's future.

## Installation

Open a terminal and run:

```bash
$ pip install streamlit
$ streamlit hello
```

If this opens our sweet _Streamlit Hello_ app in your browser, you're all set! If not, head over to [our docs](https://docs.streamlit.io/get-started) for specific installs.

The app features a bunch of examples of what you can do with Streamlit. Jump to the [quickstart](#quickstart) section to understand how that all works.

<img src="https://user-images.githubusercontent.com/7164864/217936487-1017784e-68ec-4e0d-a7f6-6b97525ddf88.gif" alt="Streamlit Hello" width=500 href="none"></img>

## Quickstart

### A little example

Create a new file `streamlit_app.py` with the following code:
```python
import streamlit as st
x = st.slider("Select a value")
st.write(x, "squared is", x * x)
```

Now run it to open the app!
```
$ streamlit run streamlit_app.py
```

<img src="https://user-images.githubusercontent.com/7164864/215172915-cf087c56-e7ae-449a-83a4-b5fa0328d954.gif" width=300 alt="Little example"></img>

### Give me more!

Streamlit comes in with [a ton of additional powerful elements](https://docs.streamlit.io/develop/api-reference) to spice up your data apps and delight your viewers. Some examples:

<table border="0">
  <tr>
    <td>
      <a target="_blank" href="https://docs.streamlit.io/develop/api-reference/widgets">
        <img src="https://user-images.githubusercontent.com/7164864/217936099-12c16f8c-7fe4-44b1-889a-1ac9ee6a1b44.png" style="max-height:150px; width:auto; display:block;">
      </a>
    </td>
    <td>
      <a target="_blank" href="https://docs.streamlit.io/develop/api-reference/data/st.dataframe">
        <img src="https://user-images.githubusercontent.com/7164864/215110064-5eb4e294-8f30-4933-9563-0275230e52b5.gif" style="max-height:150px; width:auto; display:block;">
      </a>
    </td>
    <td>
      <a target="_blank" href="https://docs.streamlit.io/develop/api-reference/charts">
        <img src="https://user-images.githubusercontent.com/7164864/215174472-bca8a0d7-cf4b-4268-9c3b-8c03dad50bcd.gif" style="max-height:150px; width:auto; display:block;">
      </a>
    </td>
    <td>
      <a target="_blank" href="https://docs.streamlit.io/develop/api-reference/layout">
        <img src="https://user-images.githubusercontent.com/7164864/217936149-a35c35be-0d96-4c63-8c6a-1c4b52aa8f60.png" style="max-height:150px; width:auto; display:block;">
      </a>
    </td>
    <td>
      <a target="_blank" href="https://docs.streamlit.io/develop/concepts/multipage-apps">
        <img src="https://user-images.githubusercontent.com/7164864/215173883-eae0de69-7c1d-4d78-97d0-3bc1ab865e5b.gif" style="max-height:150px; width:auto; display:block;">
      </a>
    </td>
    <td>
      <a target="_blank" href="https://streamlit.io/gallery">
        <img src="https://user-images.githubusercontent.com/7164864/215109229-6ae9111f-e5c1-4f0b-b3a2-87a79268ccc9.gif" style="max-height:150px; width:auto; display:block;">
      </a>
    </td>
  </tr>
  <tr>
    <td>Input widgets</td>
    <td>Dataframes</td>
    <td>Charts</td>
    <td>Layout</td>
    <td>Multi-page apps</td>
    <td>Fun</td>
  </tr>
</table>


Our vibrant creators community also extends Streamlit capabilities using  🧩 [Streamlit Components](https://streamlit.io/components).

## Get inspired

There's so much you can build with Streamlit:
- 🤖  [LLMs & chatbot apps](https://streamlit.io/gallery?category=llms)
- 🧬  [Science & technology apps](https://streamlit.io/gallery?category=science-technology)
- 💬  [NLP & language apps](https://streamlit.io/gallery?category=nlp-language)
- 🏦  [Finance & business apps](https://streamlit.io/gallery?category=finance-business)
- 🗺  [Geography & society apps](https://streamlit.io/gallery?category=geography-society)
- and more!

**Check out [our gallery!](https://streamlit.io/gallery)** 🎈

## Community Cloud

Deploy, manage and share your apps for free using our [Community Cloud](https://streamlit.io/cloud)! Sign-up [here](https://share.streamlit.io/signup). <br><br>
<img src="https://user-images.githubusercontent.com/7164864/214965336-64500db3-0d79-4a20-8052-2dda883902d2.gif" width="400"></img>

## Resources

- Explore our [docs](https://docs.streamlit.io) to learn how Streamlit works.
- Ask questions and get help in our [community forum](https://discuss.streamlit.io).
- Read our [blog](https://blog.streamlit.io) for tips from developers and creators.
- Extend Streamlit's capabilities by installing or creating your own [Streamlit Components](https://streamlit.io/components).
- Help others find and play with your app by using the Streamlit GitHub badge in your repository:
```markdown
[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](URL_TO_YOUR_APP)
```
[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://share.streamlit.io/streamlit/roadmap)

## Contribute

🎉 Thanks for your interest in helping improve Streamlit! 🎉

Before contributing, please read our guidelines here: https://github.com/streamlit/streamlit/wiki/Contributing

## License

Streamlit is completely free and open-source and licensed under the [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) license.


================================================
File: /CODE_OF_CONDUCT.md
================================================
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, sex characteristics, gender identity and expression,
level of experience, education, socio-economic status, nationality, personal
appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or
  advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic
  address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at hello@streamlit.io. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see
https://www.contributor-covenant.org/faq


================================================
File: /CONTRIBUTING.md
================================================
🎉 Thanks for your interest in helping improve Streamlit! 🎉

Before contributing, please read our guidelines here: https://github.com/streamlit/streamlit/wiki/Contributing


================================================
File: /LICENSE
================================================
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.



================================================
File: /Makefile
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Make uses /bin/sh by default, but we are using some bash features.  On Ubuntu
# /bin/sh is POSIX compliant, ie it's not bash.  So let's be explicit:
SHELL=/bin/bash

INSTALL_DEV_REQS ?= true
INSTALL_TEST_REQS ?= true
USE_CONSTRAINTS_FILE ?= true
PYTHON_VERSION := $(shell python --version | cut -d " " -f 2 | cut -d "." -f 1-2)
GITHUB_REPOSITORY ?= streamlit/streamlit
CONSTRAINTS_BRANCH ?= constraints-develop
CONSTRAINTS_URL ?= https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${CONSTRAINTS_BRANCH}/constraints-${PYTHON_VERSION}.txt

# Black magic to get module directories
PYTHON_MODULES := $(foreach initpy, $(foreach dir, $(wildcard lib/*), $(wildcard $(dir)/__init__.py)), $(realpath $(dir $(initpy))))

# Check if Python is installed and can be executed, otherwise show an error message in red (but continue)
ifeq ($(PYTHON_VERSION),)
error_message="Error: Python version is not detected. Please ensure Python is installed and accessible in your PATH."
error_message_red_colored=$(shell echo -e "\033[0;31m ${error_message} \033[0m")
$(warning ${error_message_red_colored})
endif

.PHONY: help
help:
	@# Magic line used to create self-documenting makefiles.
	@# Note that this means the documenting comment just before the command (but after the .PHONY) must be all one line, and should begin with a capital letter and end with a period.
	@# See https://stackoverflow.com/a/35730928
	@awk '/^#/{c=substr($$0,3);next}c&&/^[[:alpha:]][[:alnum:]_-]+:/{print substr($$1,1,index($$1,":")),c}1{c=0}' Makefile | column -s: -t

.PHONY: all
# Get dependencies, build frontend, install Streamlit into Python environment.
all: init frontend install

.PHONY: all-devel
# Get dependencies and install Streamlit into Python environment -- but do not build the frontend.
all-devel: init develop pre-commit-install
	@echo ""
	@echo "    The frontend has *not* been rebuilt."
	@echo "    If you need to make a wheel file or test S3 sharing, run:"
	@echo ""
	@echo "    make frontend"
	@echo ""

.PHONY: mini-devel
# Get minimal dependencies for development and install Streamlit into Python environment -- but do not build the frontend.
mini-devel: mini-init develop pre-commit-install

.PHONY: build-deps
# An even smaller installation than mini-devel. Installs the bare minimum necessary to build Streamlit (by leaving out some dependencies necessary for the development process). Does not build the frontend.
build-deps: mini-init develop

.PHONY: init
# Install all Python and JS dependencies.
init: python-init-all react-init protobuf

.PHONY: mini-init
# Install minimal Python and JS dependencies for development.
mini-init: python-init-dev-only react-init protobuf

.PHONY: frontend
# Build frontend into static files.
frontend: react-build

.PHONY: install
# Install Streamlit into your Python environment.
install:
	cd lib ; python setup.py install

.PHONY: develop
# Install Streamlit as links in your Python environment, pointing to local workspace.
develop:
	INSTALL_DEV_REQS=false INSTALL_TEST_REQS=false make python-init

.PHONY: python-init-all
# Install Streamlit and all (test and dev) requirements.
python-init-all:
	INSTALL_DEV_REQS=true INSTALL_TEST_REQS=true make python-init

.PHONY: python-init-dev-only
# Install Streamlit and dev requirements.
python-init-dev-only:
	INSTALL_DEV_REQS=true INSTALL_TEST_REQS=false make python-init

.PHONY: python-init-test-only
# Install Streamlit and test requirements.
python-init-test-only: lib/test-requirements.txt
	INSTALL_DEV_REQS=false INSTALL_TEST_REQS=true make python-init

.PHONY: python-init
python-init:
	pip_args=("--editable" "./lib");\
	if [ "${USE_CONSTRAINTS_FILE}" = "true" ] ; then\
		pip_args+=(--constraint "${CONSTRAINTS_URL}"); \
	fi;\
	if [ "${INSTALL_DEV_REQS}" = "true" ] ; then\
		pip_args+=("--requirement" "lib/dev-requirements.txt"); \
	fi;\
	if [ "${INSTALL_TEST_REQS}" = "true" ] ; then\
		pip_args+=("--requirement" "lib/test-requirements.txt"); \
	fi;\
	if command -v "uv" > /dev/null; then \
		echo "Running command: uv pip install $${pip_args[@]}"; \
		uv pip install $${pip_args[@]}; \
	else \
		echo "Running command: pip install $${pip_args[@]}"; \
		pip install $${pip_args[@]}; \
	fi;\
	if [ "${INSTALL_TEST_REQS}" = "true" ] ; then\
		python -m playwright install --with-deps; \
	fi;\

.PHONY: pylint
# Verify that our Python files are properly formatted and that there are no lint errors.
pylint:
	# Checks if the formatting is correct:
	ruff format --check
	# Run linter:
	ruff check

.PHONY: pyformat
# Fix Python files that are not properly formatted.
pyformat:
	# Sort imports ( see https://docs.astral.sh/ruff/formatter/#sorting-imports )
	ruff check --select I --fix
	# Run code formatter
	ruff format

.PHONY: pytest
# Run Python unit tests.
pytest:
	cd lib; \
		PYTHONPATH=. \
		pytest -v \
			-l tests/ \
			$(PYTHON_MODULES)

# Run Python integration tests.
# This requires the integration-requirements to be installed.
pytest-integration:
	cd lib; \
		PYTHONPATH=. \
		pytest -v \
			--require-integration \
			-l tests/ \
			$(PYTHON_MODULES)

.PHONY: mypy
# Run Mypy static type checker.
mypy:
	mypy --config-file=lib/mypy.ini --namespace-packages lib/streamlit/ lib/tests/streamlit/typing/ scripts/

.PHONY: bare-execution-tests
# Run all our e2e tests in "bare" mode and check for non-zero exit codes.
bare-execution-tests:
	PYTHONPATH=. \
	python3 scripts/run_bare_execution_tests.py

.PHONY: cli-smoke-tests
# Verify that CLI boots as expected when called with `python -m streamlit`.
cli-smoke-tests:
	python3 scripts/cli_smoke_tests.py

.PHONY: cli-regression-tests
# Verify that CLI boots as expected when called with `python -m streamlit`.
cli-regression-tests: install
	pytest scripts/cli_regression_tests.py

.PHONY: distribution
# Create Python distribution files in dist/.
distribution:
	# Get rid of the old build and dist folders to make sure that we clean old js and css.
	rm -rfv lib/build lib/dist
	cd lib ; python3 setup.py bdist_wheel --universal sdist

.PHONY: package
# Build lib and frontend, and then run 'distribution'.
package: build-deps frontend distribution

.PHONY: conda-distribution
# Create conda distribution files in lib/conda-recipe/dist.
conda-distribution:
	rm -rf lib/conda-recipe/dist
	mkdir lib/conda-recipe/dist
	# This can take upwards of 20 minutes to complete in a fresh conda installation! (Dependency solving is slow.)
	# NOTE: Running the following command requires both conda and conda-build to
	# be installed.
	GIT_HASH=$$(git rev-parse --short HEAD) conda build lib/conda-recipe --output-folder lib/conda-recipe/dist

.PHONY: conda-package
# Build lib and (maybe) frontend assets, and then run 'conda-distribution'.
conda-package: build-deps
	if [ "${SNOWPARK_CONDA_BUILD}" = "1" ] ; then\
		echo "Creating Snowpark conda build, so skipping building frontend assets."; \
	else \
		make frontend; \
	fi
	make conda-distribution;

.PHONY: clean
# Remove all generated files.
clean:
	cd lib; rm -rf build dist  .eggs *.egg-info
	rm -rf lib/conda-recipe/dist
	find . -name '*.pyc' -type f -delete || true
	find . -name __pycache__ -type d -delete || true
	find . -name .pytest_cache -exec rm -rfv {} \; || true
	rm -rf .mypy_cache
	rm -rf .ruff_cache
	rm -f lib/streamlit/proto/*_pb2.py*
	rm -rf lib/streamlit/static
	rm -f lib/Pipfile.lock
	rm -rf frontend/app/build
	rm -rf frontend/node_modules
	rm -rf frontend/app/performance/lighthouse/reports
	rm -rf frontend/app/node_modules
	rm -rf frontend/lib/node_modules
	rm -rf frontend/test_results
	rm -f frontend/lib/src/proto.js
	rm -f frontend/lib/src/proto.d.ts
	rm -rf frontend/public/reports
	rm -rf frontend/lib/dist
	rm -rf ~/.cache/pre-commit
	rm -rf e2e_playwright/test-results
	rm -rf e2e_playwright/performance-results
	find . -name .streamlit -not -path './e2e_playwright/.streamlit' -type d -exec rm -rfv {} \; || true
	cd lib; rm -rf .coverage .coverage\.*

MIN_PROTOC_VERSION = 3.20
.PHONY: check-protoc
# Ensure protoc is installed and is >= MIN_PROTOC_VERSION.
check-protoc:
	@if ! command -v protoc &> /dev/null ; then \
		echo "protoc not installed."; \
		exit 1; \
	fi; \
	\
	PROTOC_VERSION=$$(protoc --version | cut -d ' ' -f 2); \
	\
	if [[ $$(echo -e "$$PROTOC_VERSION\n$(MIN_PROTOC_VERSION)" | sort -V | head -n1) != $(MIN_PROTOC_VERSION) ]]; then \
		echo "Error: protoc version $${PROTOC_VERSION} is < $(MIN_PROTOC_VERSION)"; \
		exit 1; \
	else \
		echo "protoc version $${PROTOC_VERSION} is >= than $(MIN_PROTOC_VERSION)"; \
	fi

.PHONY: protobuf
# Recompile Protobufs for Python and the frontend.
protobuf: check-protoc
	protoc \
		--proto_path=proto \
		--python_out=lib \
		--mypy_out=lib \
		proto/streamlit/proto/*.proto

	@# JS protobuf generation. The --es6 flag generates a proper es6 module.
	cd frontend/ ; ( \
		echo "/* eslint-disable */" ; \
		echo ; \
		yarn --silent pbjs \
			../proto/streamlit/proto/*.proto \
			--path ../proto -t static-module --wrap es6 \
	) > ./lib/src/proto.js

	@# Typescript type declarations for our generated protobufs
	cd frontend/ ; ( \
		echo "/* eslint-disable */" ; \
		echo ; \
		yarn --silent pbts ./lib/src/proto.js \
	) > ./lib/src/proto.d.ts

.PHONY: react-init
# React init.
react-init:
	cd frontend/ ; yarn install --frozen-lockfile

.PHONY: react-build
# React build.
react-build:
	cd frontend/ ; yarn run build
	rsync -av --delete --delete-excluded --exclude=reports \
		frontend/app/build/ lib/streamlit/static/

.PHONY: frontend-build-with-profiler
frontend-build-with-profiler:
	cd frontend/ ; yarn run buildWithProfiler
	rsync -av --delete --delete-excluded --exclude=reports \
		frontend/app/build/ lib/streamlit/static/

.PHONY: frontend-lib
# Build the frontend library.
frontend-lib:
	cd frontend/ ; yarn run buildLib;

.PHONY: frontend-app
# Build the frontend app. One must build the frontend lib first before building the app.
frontend-app:
	cd frontend/ ; yarn run buildApp

.PHONY: jslint
# Verify that our JS/TS code is formatted and that there are no lint errors.
jslint:
	cd frontend/ ; yarn run formatCheck
	cd frontend/ ; yarn run lint

.PHONY: tstypecheck
# Typecheck the JS/TS code.
tstypecheck:
	cd frontend/ ; yarn run typecheck

.PHONY: jsformat
# Fix formatting issues in our JavaScript & TypeScript files.
jsformat:
	cd frontend/ ; yarn run format

.PHONY: jstest
# Run JS unit tests.
jstest:
	cd frontend; TESTPATH=$(TESTPATH) yarn run test

.PHONY: jstestcoverage
# Run JS unit tests and generate a coverage report.
jstestcoverage:
	cd frontend; TESTPATH=$(TESTPATH) yarn run testcoverage

.PHONY: playwright
# Run playwright E2E tests (without custom component tests).
custom_components_test_folder = ./custom_components
playwright:
	cd e2e_playwright; \
	rm -rf ./test-results; \
	pytest --ignore ${custom_components_test_folder} --browser webkit --browser chromium --browser firefox --video retain-on-failure --screenshot only-on-failure --output ./test-results/ -n auto --reruns 1 --reruns-delay 1 --rerun-except "Missing snapshot" --durations=5 -r aR -v -m "not performance"

.PHONY: playwright-performance
playwright-performance:
	cd e2e_playwright; \
	rm -rf ./test-results; \
	pytest --browser chromium --output ./test-results/ -n 1 --reruns 1 --reruns-delay 1 --rerun-except "Missing snapshot" --durations=5 -r aR -v -m "performance" --count=10

.PHONY: playwright-custom-components
# Run playwright custom component E2E tests.
playwright-custom-components:
	cd e2e_playwright; \
	rm -rf ./test-results; \
	pip_args="extra-streamlit-components streamlit-ace streamlit-antd-components streamlit-aggrid streamlit-autorefresh streamlit-chat streamlit-echarts streamlit-folium streamlit-option-menu streamlit-url-fragment"; \
	if command -v "uv" > /dev/null; then \
		echo "Running command: uv pip install $${pip_args}"; \
		uv pip install $${pip_args}; \
	else \
		echo "Running command: pip install $${pip_args}"; \
		pip install $${pip_args}; \
	fi; \
	pytest ${custom_components_test_folder} --browser webkit --browser chromium --browser firefox --video retain-on-failure --screenshot only-on-failure --output ./test-results/ -n auto --reruns 1 --reruns-delay 1 --rerun-except "Missing snapshot" --durations=5 -r aR -v

.PHONY: update-snapshots
# Update e2e playwright snapshots based on the latest completed CI run.
update-snapshots:
	python ./scripts/update_e2e_snapshots.py

.PHONY: update-snapshots-changed
# Update e2e playwright snapshots of changed files based on the latest completed CI run.
update-snapshots-changed:
	python ./scripts/update_e2e_snapshots.py --changed

.PHONY: update-material-icons
# Update material icon names and font file based on latest google material symbol rounded font version.
update-material-icons:
	python ./scripts/update_material_icon_font_and_names.py


.PHONY: loc
# Count the number of lines of code in the project.
loc:
	find . -iname '*.py' -or -iname '*.js'  | \
		egrep -v "(node_modules)|(_pb2)|(lib\/streamlit\/proto)|(dist\/)" | \
		xargs wc

.PHONY: distribute
# Upload the package to PyPI.
distribute:
	cd lib/dist; \
		twine upload $$(ls -t *.whl | head -n 1); \
		twine upload $$(ls -t *.tar.gz | head -n 1)

.PHONY: notices
# Rebuild the NOTICES file.
notices:
	cd frontend; \
		yarn licenses generate-disclaimer --silent --production --ignore-platform > ../NOTICES

	@# When `yarn licenses` is run in a yarn workspace, it misnames the project as
	@# "WORKSPACE AGGREGATOR 2B7C80A7 6734 4A68 BB93 8CC72B9A5DEA". We fix that here.
	@# There also isn't a portable way to invoke `sed` to edit files in-place, so we have
	@# sed create a NOTICES.bak backup file that we immediately delete afterwards.
	sed -i'.bak' 's/PORTIONS OF THE .*PRODUCT/PORTIONS OF THE STREAMLIT PRODUCT/' NOTICES
	rm -f NOTICES.bak

	./scripts/append_license.sh frontend/app/src/assets/fonts/Source_Code_Pro/Source-Code-Pro.LICENSE
	./scripts/append_license.sh frontend/app/src/assets/fonts/Source_Sans_Pro/Source-Sans-Pro.LICENSE
	./scripts/append_license.sh frontend/app/src/assets/fonts/Source_Serif_Pro/Source-Serif-Pro.LICENSE
	./scripts/append_license.sh frontend/app/src/assets/img/Material-Icons.LICENSE
	./scripts/append_license.sh frontend/app/src/assets/img/Open-Iconic.LICENSE
	./scripts/append_license.sh frontend/lib/src/vendor/bokeh/bokeh-LICENSE.txt
	./scripts/append_license.sh frontend/lib/src/vendor/twemoji-LICENSE.txt
	./scripts/append_license.sh frontend/lib/src/vendor/react-bootstrap-LICENSE.txt

.PHONY: headers
# Update the license header on all source files.
headers:
	pre-commit run insert-license --all-files --hook-stage manual
	pre-commit run license-headers --all-files --hook-stage manual

.PHONY: gen-min-dep-constraints
# Write the minimum versions of our dependencies to a constraints file.
gen-min-dep-constraints:
	make develop >/dev/null
	python scripts/get_min_versions.py >lib/min-constraints-gen.txt

.PHONY: pre-commit-install
# Pre-commit install.
pre-commit-install:
	pre-commit install

.PHONY: ensure-relative-imports
# Ensure relative imports exist within the lib/dist folder when doing yarn buildLibProd.
ensure-relative-imports:
	./scripts/ensure_relative_imports.sh

.PHONY: performance-lighthouse
# Run Lighthouse performance tests
performance-lighthouse:
	cd frontend/app; \
	yarn run lighthouse:run

.PHONY frontend-lib-prod:
# Build the production version for @streamlit/lib.
frontend-lib-prod:
	cd frontend/ ; yarn run buildLibProd;

.PHONY streamlit-lib-prod:
# Build the production version for @streamlit/lib while also doing a make init so it's a single command.
streamlit-lib-prod:
	make mini-init;
	make frontend-lib-prod;



================================================
File: /SECURITY.md
================================================
# Security Policy

## Supported Versions

| Version   | Supported |
| --------- | --------- |
| >= 1.11.1 | ✅        |

</br>

Please refer to the Snowflake [HackerOne program](https://hackerone.com/snowflake?type=team) for our security policies and for reporting any security vulnerabilities.


================================================
File: /.editorconfig
================================================
# https://editorconfig.org/

root = true

[*]
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true
end_of_line = lf
charset = utf-8
max_line_length = 79

[*.py]
indent_size = 4
max_line_length = 88

# The JSON files contain newlines inconsistently
[*.json]
insert_final_newline = ignore

[**/node_modules/**]
indent_style = ignore
indent_size = ignore

[**.min.js]
indent_style = ignore
insert_final_newline = ignore

[Makefile]
indent_style = tab


================================================
File: /.nvmrc
================================================
lts/*


================================================
File: /.pre-commit-config.yaml
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Pre-commit configuration file,
# when Streamlit's pre-commit detects that one of the linters has failed,
# it automatically lints the files and does not allow the commit to pass.
# Please review the changes after lint has failed and commit them again,
# the second commit should pass,
# because the files were linted after trying to do the first commit.
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    # Ruff version.
    rev: v0.8.0
    hooks:
      # Run the linter.
      - id: ruff
        args: [--fix]
        files: \.py$|\.pyi$
      # Run the formatter.
      - id: ruff-format
        files: \.py$|\.pyi$
  - repo: local
    hooks:
      # Script ./scripts/run_in_subdirectory.py was used to work around a
      # known problem with hooks in subdirectories when pass_filenames option
      # is set to true
      # See: https://github.com/pre-commit/pre-commit/issues/1417
      - id: prettier
        name: Prettier
        # NOTE: This hook currently does not work on Windows due to "yarn" not being an executable and win32api.CreateProcess
        # turning `subprocess.run(["yarn", "prettier", "--write"])` into a call to `yarn.exe prettier --write` which does not exist
        entry: ./scripts/run_in_subdirectory.py frontend/ yarn prettier --write
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        exclude: /vendor/
        language: node
        pass_filenames: true
      - id: prettier-yaml
        name: Prettier-yaml
        # NOTE: This hook currently does not work on Windows due to "yarn" not being an executable and win32api.CreateProcess
        # turning `subprocess.run(["yarn", "prettier", "--write"])` into a call to `yarn.exe prettier --write` which does not exist
        entry: ./scripts/run_in_subdirectory.py frontend yarn prettier ../.github --write
        files: ^.github/.*\.(yml|yaml)$
        language: node
        pass_filenames: false
      - id: license-headers
        name: Checks that all files have the required license headers
        entry: ./scripts/check_license_headers.py
        language: system
        always_run: true
        pass_filenames: false
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.5
    hooks:
      - id: insert-license
        name: Add license for all (S)CSS/JS(X)/TS(X) files
        files: \.(s?css|jsx?|tsx?)$
        args:
          - --comment-style
          - "/**| *| */"
          - --license-filepath
          - scripts/license-template.txt
          - --fuzzy-match-generates-todo
        exclude: |
          (?x)
          /vendor/
          |^vendor/
          |^component-lib/declarations/apache-arrow
          |^frontend/app/src/assets/css/variables\.scss
          |^lib/tests/streamlit/elements/test_html\.js
          |^e2e_playwright/test_assets/
      - id: insert-license
        name: Add license for all Proto files
        files: \.proto$
        args:
          - --comment-style
          - "/**!| *| */"
          - --license-filepath
          - scripts/license-template.txt
          - --fuzzy-match-generates-todo
        exclude: |
          (?x)
          /vendor/
          |^vendor/
          |^component-lib/declarations/apache-arrow
          |^proto/streamlit/proto/openmetrics_data_model\.proto
      - id: insert-license
        name: Add license for all shell files
        files: \.sh$
        args:
          - --comment-style
          - "|#|"
          - --license-filepath
          - scripts/license-template.txt
          - --fuzzy-match-generates-todo
        exclude: |
          (?x)
          /vendor/
          |^vendor/
          |^component-lib/declarations/apache-arrow
      - id: insert-license
        name: Add license for all Python files
        files: \.py$|\.pyi$
        args:
          - --comment-style
          - "|#|"
          - --license-filepath
          - scripts/license-template.txt
          - --fuzzy-match-generates-todo
        exclude: |
          (?x)
          /vendor/
          |^vendor/
          |^component-lib/declarations/apache-arrow
      - id: insert-license
        name: Add license for all HTML files
        files: \.html$
        args:
          - --comment-style
          - "<!--||-->"
          - --license-filepath
          - scripts/license-template.txt
          - --fuzzy-match-generates-todo
        exclude: |
          (?x)
          /vendor/
          |^vendor/
          |^component-lib/declarations/apache-arrow
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        exclude: |
          (?x)
          ^frontend/app/src/assets/
          |^NOTICES$
          |^proto/streamlit/proto/openmetrics_data_model.proto$
          |\.snap$
      - id: check-added-large-files
      - id: check-json
        exclude: .vscode/launch.json
      - id: check-toml
      - id: check-yaml
        exclude: lib/conda-recipe/meta.yaml


================================================
File: /.ruff.toml
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# In addition to the standard set of exclusions, omit all tests:
extend-exclude = ["lib/streamlit/proto", "lib/streamlit/emojis.py", "e2e_playwright/compilation_error_dialog.py"]
include = [
  "lib/**/*.py",
  "lib/**/*.pyi",
  "e2e_playwright/**/*.py",
  "scripts/**/*.py",
]
target-version = 'py38'
line-length = 88

[format]
docstring-code-format = true
docstring-code-line-length = "dynamic"

[lint]
select = [
  "B",      # flake8-bugbear
  "C4",     # Helps you write better list/set/dict comprehensions.
  "E",      # pycodestyle errors
  "FA",     # Verifies files use from __future__ import annotations if a type is used in the module that can be rewritten using PEP 563.
  "F",      # pyflakes
  "G",      # Better usage of built-in logging
  "I",      # isort - Import sorting
  "ISC",    # Encourage correct string literal concatenation.
  "LOG",    # Checks for issues using the standard library logging module.
  "NPY",    # Linting rules for numpy
  "PLC",    # pycodestyle conventions
  "PYI",    # Linting rules for type annotations.
  "Q",      # Linting rules for quites
  "RUF100", # Unused noqa directive
  "T20",    # Check for Print statements in python files.
  "TCH",    # Move type only imports to type-checking condition.
  "TID",    # Helps you write tidier imports.
  "UP",     # pyupgrade
  "W",      # pycodestyle warnings
]
ignore = [
  "B008",    # Checks for function calls in default function arguments.
  "B904",    # Checks for raise statements in exception handlers that lack a from clause.
  "E501",    # Checks for lines that exceed the specified maximum character length.
  "ISC001",  # Checks for implicitly concatenated strings on a single line.
  "NPY002",  # Checks for the use of legacy np.random function calls.
  "PYI036",  # Checks for incorrect function signatures on __exit__ and __aexit__ methods.
  "PYI041",  # Checks for parameter annotations that contain redundant unions between builtin numeric types (e.g., int | float).
  "PYI051",  # Checks for redundant unions between a Literal and a builtin supertype of that Literal.
  "UP031",   # Checks for printf-style string formatting, and offers to replace it with str.format calls.
  "PLC0208", # Checks for iterations over set literals.
  "G004",    # Checks for usage of f-strings in logging messages
]
# Do not lint files in tests, scripts, and vendor directory:
exclude = [
  "lib/streamlit/vendor/**",
  "scripts/**",
  ".github/**"
]

[lint.per-file-ignores]
"e2e_playwright/**" = ["T20", "B018"]
"lib/streamlit/__init__.py" = ["E402", "PLC0414"]

[lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[lint.isort]
known-first-party = ["streamlit", "shared", "tests", "e2e_playwright"]

[lint.flake8-comprehensions]
# Allow dict calls that make use of keyword arguments (e.g., dict(a=1, b=2)).
allow-dict-calls-with-keyword-arguments = true


================================================
File: /component-lib/README.md
================================================
# Streamlit Component Library

An npm package that provides support code for creating [Streamlit Components](https://docs.streamlit.io/develop/concepts/custom-components).

The fastest way to start writing a Streamlit Component is to use our [Component Template repo](https://github.com/streamlit/component-template), which contains templates and example code.


================================================
File: /component-lib/RELEASE_NOTES.md
================================================
<!--
  Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

# Release notes

# 2.0.0

This release has no significant changes to our API, but we bump the major version as
the [`apache-arrow`](https://www.npmjs.com/package/apache-arrow) library is updated, which may affect users of the library. For details, see: [Apache Arrow Releases](https://arrow.apache.org/release/).

Moreover, it is worth adding that:

- The new version of `apache-arrow` requires a newer version of Typescript to work, but thanks to that you can also use `create-react-script` 5 and newer and the latest versions of NodeJS.
- We dropped use of [`event-target-shim`](https://www.npmjs.com/package/event-target-shim) as modern browsers no longer need it.

## List of commits

- [`21e7beeae`](https://github.com/streamlit/streamlit/commit/21e7beeae) Bump dependencies of component-lib (#6830)
- [`1e6a3e45e`](https://github.com/streamlit/streamlit/commit/1e6a3e45e) Add tests for component-lib (#6580)
- [`e43f64c72`](https://github.com/streamlit/streamlit/commit/e43f64c72) fix: upgrade command-line-args from 5.0.2 to 5.2.1 (#6258)
- [`3bb2243ec`](https://github.com/streamlit/streamlit/commit/3bb2243ec) fix: upgrade flatbuffers from 1.11.0 to 1.12.0 (#6259)
- [`fe8fd4f5c`](https://github.com/streamlit/streamlit/commit/fe8fd4f5c) fix: upgrade multiple dependencies with Snyk (#6262)
- [`0dfd31940`](https://github.com/streamlit/streamlit/commit/0dfd31940) Update license headers (#5143)
- [`76859d67b`](https://github.com/streamlit/streamlit/commit/76859d67b) fix: Allow renderData.args to be typed (#5205)
- [`c8f2db61f`](https://github.com/streamlit/streamlit/commit/c8f2db61f) Fix typos (#5082)
- [`f85a0feac`](https://github.com/streamlit/streamlit/commit/f85a0feac) Fix build issues due to linting errors (#4637)
- [`a91272018`](https://github.com/streamlit/streamlit/commit/a91272018) Bump ansi-regex from 4.1.0 to 4.1.1 in /component-lib (#4558)
- [`d44b16290`](https://github.com/streamlit/streamlit/commit/d44b16290) Update years in all license headers (#4291)


================================================
File: /component-lib/babel.config.js
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = {
  presets: [
    ['@babel/preset-env', {targets: {node: 'current'}}],
    '@babel/preset-typescript',
    ['@babel/preset-react', {runtime: 'automatic'}],
  ],
};


================================================
File: /component-lib/jest.config.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * For a detailed explanation regarding each configuration property and type check, visit:
 * https://jestjs.io/docs/configuration
 */

export default {
  // All imported modules in your tests should be mocked automatically
  // automock: false,

  // Stop running tests after `n` failures
  // bail: 0,

  // The directory where Jest should store its cached dependency information
  // cacheDirectory: "/private/var/folders/_7/mm9vqb4d5jsbb9v9xsfxy4600000gn/T/jest_dx",

  // Automatically clear mock calls, instances, contexts and results before every test
  clearMocks: true,

  // Indicates whether the coverage information should be collected while executing the test
  collectCoverage: true,

  // An array of glob patterns indicating a set of files for which coverage information should be collected
  collectCoverageFrom: ["src/**/*.{ts,tsx}"],

  // The directory where Jest should output its coverage files
  coverageDirectory: "coverage",

  // An array of regexp pattern strings used to skip coverage collection
  // coveragePathIgnorePatterns: [
  //   "/node_modules/"
  // ],

  // Indicates which provider should be used to instrument code for coverage
  coverageProvider: "v8",

  // A list of reporter names that Jest uses when writing coverage reports
  // coverageReporters: [
  //   "json",
  //   "text",
  //   "lcov",
  //   "clover"
  // ],

  // An object that configures minimum threshold enforcement for coverage results
  // coverageThreshold: undefined,

  // A path to a custom dependency extractor
  // dependencyExtractor: undefined,

  // Make calling deprecated APIs throw helpful error messages
  // errorOnDeprecated: false,

  // The default configuration for fake timers
  // fakeTimers: {
  //   "enableGlobally": false
  // },

  // Force coverage collection from ignored files using an array of glob patterns
  // forceCoverageMatch: [],

  // A path to a module which exports an async function that is triggered once before all test suites
  // globalSetup: undefined,

  // A path to a module which exports an async function that is triggered once after all test suites
  // globalTeardown: undefined,

  // A set of global variables that need to be available in all test environments
  // globals: {},

  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.
  // maxWorkers: "50%",

  // An array of directory names to be searched recursively up from the requiring module's location
  // moduleDirectories: [
  //   "node_modules"
  // ],

  // An array of file extensions your modules use
  // moduleFileExtensions: [
  //   "js",
  //   "mjs",
  //   "cjs",
  //   "jsx",
  //   "ts",
  //   "tsx",
  //   "json",
  //   "node"
  // ],

  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module
  // moduleNameMapper: {},

  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader
  // modulePathIgnorePatterns: [],

  // Activates notifications for test results
  // notify: false,

  // An enum that specifies notification mode. Requires { notify: true }
  // notifyMode: "failure-change",

  // A preset that is used as a base for Jest's configuration
  // preset: undefined,

  // Run tests from one or more projects
  // projects: undefined,

  // Use this configuration option to add custom reporters to Jest
  // reporters: undefined,

  // Automatically reset mock state before every test
  // resetMocks: false,

  // Reset the module registry before running each individual test
  // resetModules: false,

  // A path to a custom resolver
  // resolver: undefined,

  // Automatically restore mock state and implementation before every test
  // restoreMocks: false,

  // The root directory that Jest should scan for tests and modules within
  // rootDir: undefined,

  // A list of paths to directories that Jest should use to search for files in
  // roots: [
  //   "<rootDir>"
  // ],

  // Allows you to use a custom runner instead of Jest's default test runner
  // runner: "jest-runner",

  // The paths to modules that run some code to configure or set up the testing environment before each test
  // setupFiles: [],

  // A list of paths to modules that run some code to configure or set up the testing framework before each test
  setupFilesAfterEnv: [
    "<rootDir>/src/setupTests.ts",
    "@testing-library/jest-dom/extend-expect",
  ],

  // The number of seconds after which a test is considered as slow and reported as such in the results.
  // slowTestThreshold: 5,

  // A list of paths to snapshot serializer modules Jest should use for snapshot testing
  // snapshotSerializers: [],

  // The test environment that will be used for testing
  testEnvironment: "jsdom",

  // Options that will be passed to the testEnvironment
  // testEnvironmentOptions: {},

  // Adds a location field to test results
  // testLocationInResults: false,

  // The glob patterns Jest uses to detect test files
  // testMatch: [
  //   "**/__tests__/**/*.[jt]s?(x)",
  //   "**/?(*.)+(spec|test).[tj]s?(x)"
  // ],

  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped
  // testPathIgnorePatterns: [
  //   "/node_modules/"
  // ],

  // The regexp pattern or array of patterns that Jest uses to detect test files
  // testRegex: [],

  // This option allows the use of a custom results processor
  // testResultsProcessor: undefined,

  // This option allows use of a custom test runner
  // testRunner: "jest-circus/runner",

  // A map from regular expressions to paths to transformers
  // transform: undefined,

  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation
  // transformIgnorePatterns: [
  //   "/node_modules/",
  //   "\\.pnp\\.[^\\/]+$"
  // ],

  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them
  // unmockedModulePathPatterns: undefined,

  // Indicates whether each individual test should be reported during the run
  // verbose: undefined,

  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode
  // watchPathIgnorePatterns: [],

  // Whether to use watchman for file crawling
  // watchman: true,
};


================================================
File: /component-lib/package.json
================================================
{
  "name": "streamlit-component-lib",
  "version": "2.0.0",
  "description": "Support code for Streamlit Components",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc",
    "test": "jest ./src"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/streamlit/streamlit.git"
  },
  "keywords": [
    "streamlit"
  ],
  "author": "Streamlit",
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/streamlit/streamlit/issues"
  },
  "homepage": "https://github.com/streamlit/streamlit#readme",
  "dependencies": {
    "apache-arrow": "^11.0.0",
    "hoist-non-react-statics": "^3.3.2",
    "react": "^16.14.0",
    "react-dom": "^16.14.0"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.21.4",
    "@babel/preset-react": "^7.18.6",
    "@babel/preset-typescript": "^7.21.4",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "<13",
    "@types/hoist-non-react-statics": "^3.3.1",
    "@types/jest": "^29.5.0",
    "@types/node": "^12.0.0",
    "@types/react": "16.14.41",
    "@types/react-dom": "^16.9.0",
    "babel-jest": "^29.5.0",
    "jest": "^29.5.0",
    "jest-environment-jsdom": "^29.5.0",
    "ts-node": "^10.9.1",
    "typescript": "^5.0.4"
  },
  "resolutions": {
    "@types/hoist-non-react-statics/**/@types/react": "16.14.41",
    "@testing-library/react/**/@types/react": "16.14.41"
  }
}


================================================
File: /component-lib/tsconfig.json
================================================
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "baseUrl": "src",
    "declaration": true,
    "declarationDir": "./dist",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "jsx": "react",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "moduleResolution": "node",
    "outDir": "./dist",
    "resolveJsonModule": true,
    "strict": true,
    "target": "es5"
  },
  "include": ["src"]
}


================================================
File: /component-lib/src/ArrowTable.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { ArrowTable } from "./ArrowTable";
import { EXAMPLE_DF } from "./mock_data";

const range = (startAt = 0, endAt = 0) =>
  Array(endAt - startAt)
    .fill(0)
    .map((_, i) => i + startAt);

describe("ArrowTable", () => {
  const table = new ArrowTable(
    EXAMPLE_DF.data,
    EXAMPLE_DF.index,
    EXAMPLE_DF.columns
  );

  test("basic getters should returns values for basic table", () => {
    expect(table.rows).toEqual(6);
    expect(table.columns).toEqual(4);
    expect(table.headerRows).toEqual(1);
    expect(table.headerColumns).toEqual(1);
    expect(table.dataRows).toEqual(5);
    expect(table.dataColumns).toEqual(3);
    expect(table.uuid).toEqual(undefined);
    expect(table.caption).toEqual(undefined);
    expect(table.styles).toEqual(undefined);
    expect(table.table).toBeDefined();
    expect(table.index).toBeDefined();
    expect(table.columnTable).toBeDefined();
  });

  test.each([
    {
      rowIndex: 0,
      columnIndex: 0,
      expectedResult: {
        classNames: "blank",
        content: "",
        type: "blank",
      },
    },
    {
      rowIndex: 0,
      columnIndex: 1,
      expectedResult: {
        classNames: "col_heading level0 col0",
        content: "First Name",
        type: "columns",
      },
    },
    {
      rowIndex: 1,
      columnIndex: 0,
      expectedResult: {
        classNames: "row_heading level0 row0",
        content: BigInt(0),
        id: "T_undefinedlevel0_row0",
        type: "index",
      },
    },
    {
      rowIndex: 1,
      columnIndex: 1,
      expectedResult: {
        classNames: "data row0 col0",
        content: "Jason",
        id: "T_undefinedrow0_col0",
        type: "data",
      },
    },
    {
      rowIndex: 5,
      columnIndex: 3,
      expectedResult: {
        classNames: "data row4 col2",
        content: BigInt(73),
        id: "T_undefinedrow4_col2",
        type: "data",
      },
    },
  ])(
    "getCell should return cell metadata",
    ({ rowIndex, columnIndex, expectedResult }) => {
      expect(table.getCell(rowIndex, columnIndex)).toEqual(expectedResult);
    }
  );

  test("getCell should return cell content", () => {
    const celContents = range(0, table.rows).map((rowIndex) =>
      range(0, table.columns).map(
        (columnIndex) => table.getCell(rowIndex, columnIndex).content
      )
    );

    expect(celContents).toEqual([
      ["", "First Name", "Last Name", "Age"],
      [BigInt(0), "Jason", "Miller", BigInt(42)],
      [BigInt(1), "Molly", "Jacobson", BigInt(52)],
      [BigInt(2), "Tina", "Ali", BigInt(36)],
      [BigInt(3), "Jake", "Milner", BigInt(24)],
      [BigInt(4), "Amy", "Smith", BigInt(73)],
    ]);
  });

  test("serialize should returns Uint8Array", () => {
    const { data, index, columns } = table.serialize();

    expect(data).toBeInstanceOf(Uint8Array);
    expect(index).toBeInstanceOf(Uint8Array);
    expect(columns).toBeInstanceOf(Uint8Array);

    const new_table = new ArrowTable(data, index, columns);
    expect(new_table.rows).toEqual(6);
    expect(new_table.columns).toEqual(4);
    expect(new_table.headerRows).toEqual(1);
    expect(new_table.headerColumns).toEqual(1);
  });
});


================================================
File: /component-lib/src/ArrowTable.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  tableToIPC,
  tableFromIPC,
  Table,
  Type,
  Vector,
  StructRow,
} from "apache-arrow";

export type CellType = "blank" | "index" | "columns" | "data";

/** Data types used by ArrowJS. */
export type DataType =
  | null
  | boolean
  | number
  | string
  | Date // datetime
  | Int32Array // int
  | Uint8Array // bytes
  | Vector // arrays
  | StructRow; // interval

export interface ArrowDataframeProto {
  data: ArrowTableProto;
  height: string;
  width: string;
}

export interface ArrowTableProto {
  data: Uint8Array;
  index: Uint8Array;
  columns: Uint8Array;
  styler?: Styler;
}

export interface Cell {
  classNames: string;
  content: DataType;
  id?: string;
  type: CellType;
}

export interface Styler {
  caption?: string;
  displayValuesTable: Table;
  styles?: string;
  uuid: string;
}

export class ArrowTable {
  private readonly dataTable: Table;
  private readonly indexTable: Table;
  private readonly columnsTable: Table;
  private readonly styler?: Styler;

  constructor(
    dataBuffer: Uint8Array,
    indexBuffer: Uint8Array,
    columnsBuffer: Uint8Array,
    styler?: any
  ) {
    this.dataTable = tableFromIPC(dataBuffer);
    this.indexTable = tableFromIPC(indexBuffer);
    this.columnsTable = tableFromIPC(columnsBuffer);
    this.styler = styler
      ? {
          caption: styler.caption,
          displayValuesTable: tableFromIPC(styler.displayValues),
          styles: styler.styles,
          uuid: styler.uuid,
        }
      : undefined;
  }

  get rows(): number {
    return this.indexTable.numRows + this.columnsTable.numCols;
  }

  get columns(): number {
    return this.indexTable.numCols + this.columnsTable.numRows;
  }

  get headerRows(): number {
    return this.rows - this.dataRows;
  }

  get headerColumns(): number {
    return this.columns - this.dataColumns;
  }

  get dataRows(): number {
    return this.dataTable.numRows;
  }

  get dataColumns(): number {
    return this.dataTable.numCols;
  }

  get uuid(): string | undefined {
    return this.styler && this.styler.uuid;
  }

  get caption(): string | undefined {
    return this.styler && this.styler.caption;
  }

  get styles(): string | undefined {
    return this.styler && this.styler.styles;
  }

  get table(): Table {
    return this.dataTable;
  }

  get index(): Table {
    return this.indexTable;
  }

  get columnTable(): Table {
    return this.columnsTable;
  }

  public getCell = (rowIndex: number, columnIndex: number): Cell => {
    const isBlankCell =
      rowIndex < this.headerRows && columnIndex < this.headerColumns;
    const isIndexCell =
      rowIndex >= this.headerRows && columnIndex < this.headerColumns;
    const isColumnsCell =
      rowIndex < this.headerRows && columnIndex >= this.headerColumns;

    if (isBlankCell) {
      const classNames = ["blank"];
      if (columnIndex > 0) {
        classNames.push("level" + rowIndex);
      }

      return {
        type: "blank",
        classNames: classNames.join(" "),
        content: "",
      };
    } else if (isColumnsCell) {
      const dataColumnIndex = columnIndex - this.headerColumns;
      const classNames = [
        "col_heading",
        "level" + rowIndex,
        "col" + dataColumnIndex,
      ];

      return {
        type: "columns",
        classNames: classNames.join(" "),
        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),
      };
    } else if (isIndexCell) {
      const dataRowIndex = rowIndex - this.headerRows;
      const classNames = [
        "row_heading",
        "level" + columnIndex,
        "row" + dataRowIndex,
      ];

      return {
        type: "index",
        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,
        classNames: classNames.join(" "),
        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),
      };
    } else {
      const dataRowIndex = rowIndex - this.headerRows;
      const dataColumnIndex = columnIndex - this.headerColumns;
      const classNames = [
        "data",
        "row" + dataRowIndex,
        "col" + dataColumnIndex,
      ];
      const content = this.styler
        ? this.getContent(
            this.styler.displayValuesTable,
            dataRowIndex,
            dataColumnIndex
          )
        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex);

      return {
        type: "data",
        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,
        classNames: classNames.join(" "),
        content,
      };
    }
  };

  public getContent = (
    table: Table,
    rowIndex: number,
    columnIndex: number
  ): DataType => {
    const column = table.getChildAt(columnIndex);
    if (column === null) {
      return "";
    }

    const columnTypeId = this.getColumnTypeId(table, columnIndex);
    switch (columnTypeId) {
      case Type.Timestamp: {
        return this.nanosToDate(column.get(rowIndex));
      }
      default: {
        return column.get(rowIndex);
      }
    }
  };

  /**
   * Serialize arrow table.
   */
  public serialize(): ArrowTableProto {
    return {
      data: tableToIPC(this.dataTable),
      index: tableToIPC(this.indexTable),
      columns: tableToIPC(this.columnsTable),
    };
  }

  /**
   * Returns apache-arrow specific typeId of column.
   */
  private getColumnTypeId(table: Table, columnIndex: number): Type {
    return table.schema.fields[columnIndex].type.typeId;
  }

  private nanosToDate(nanos: number): Date {
    return new Date(nanos / 1e6);
  }
}


================================================
File: /component-lib/src/StreamlitReact.test.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  ComponentProps,
  StreamlitComponentBase,
  withStreamlitConnection,
} from "./StreamlitReact";
import * as React from "react";
import { render } from "@testing-library/react";
import { tick } from "./test_utils";
import { EXAMPLE_DF } from "./mock_data";
import { ArrowTable } from "./ArrowTable";
import { Streamlit } from "./streamlit";

class StaticComponent extends StreamlitComponentBase {
  render() {
    return <>Static component</>;
  }
}

describe("StreamlitReact", () => {
  test("the component should be empty initially", () => {
    const StreamlitComponent = withStreamlitConnection(StaticComponent);
    expect(document.body.innerHTML).toEqual("");

    render(<StreamlitComponent />);

    expect(document.body.innerHTML).toEqual("<div></div>");
  });

  test("the component should be visible after initialization", async () => {
    const StreamlitComponent = withStreamlitConnection(StaticComponent);
    expect(document.body.innerHTML).toEqual("");

    const { getByText } = render(<StreamlitComponent />);
    window.postMessage({ type: "streamlit:render", args: {} }, "*");
    await tick();

    expect(getByText("Static component")).toBeInTheDocument();
  });

  test("the component should receive arguments from the parent frame", async () => {
    interface ComponentArgument {
      firstArg: string;
    }

    class ComponentWithArguments extends StreamlitComponentBase<
      {},
      ComponentArgument
    > {
      render(): JSX.Element {
        return <p>{this.props.args.firstArg}</p>;
      }
    }

    const Component = withStreamlitConnection(ComponentWithArguments);
    const { getByText } = render(<Component />);
    window.postMessage(
      { type: "streamlit:render", args: { firstArg: "Argument text 123" } },
      "*"
    );
    await tick();

    expect(getByText("Argument text 123")).toBeInTheDocument();
  });

  test("the component should receive dataframe from the parent frame", async () => {
    interface ComponentArgument {
      firstArg: ArrowTable;
    }
    class DataframeComponent extends StreamlitComponentBase<ComponentArgument> {
      render() {
        const firstArg = this.props.args.firstArg;
        const { content } = firstArg.getCell(1, 1);
        return <>{String(content)}</>;
      }
    }

    const Component = withStreamlitConnection(DataframeComponent);
    const { getByText } = render(<Component />);

    window.postMessage(
      {
        type: "streamlit:render",
        args: {},
        dfs: [
          {
            key: "firstArg",
            value: {
              data: {
                data: EXAMPLE_DF.data,
                index: EXAMPLE_DF.index,
                columns: EXAMPLE_DF.columns,
              },
            },
          },
        ],
      },
      "*"
    );
    await tick();

    expect(getByText("Jason")).toBeInTheDocument();
  });

  test("the component error should be visible", async () => {
    class BrokenComponent extends StreamlitComponentBase {
      render(): React.ReactNode {
        throw new Error("Error in component");
      }
    }
    jest.spyOn(console, "error").mockImplementation(() => {});

    const Component = withStreamlitConnection(BrokenComponent);
    const { getByText } = render(<Component />);
    window.postMessage(
      {
        type: "streamlit:render",
        args: {},
      },
      "*"
    );
    await tick();

    expect(getByText("Component Error")).toBeInTheDocument();
    expect(getByText("Error in component")).toBeInTheDocument();
    expect(jest.mocked(console.error).mock.calls).toHaveLength(2);
  });

  test("the component should update the frame height intiailly", async () => {
    jest.spyOn(Streamlit, "setFrameHeight");

    const Component = withStreamlitConnection(StaticComponent);
    const { getByText } = render(<Component />);
    window.postMessage(
      {
        type: "streamlit:render",
        args: {},
      },
      "*"
    );
    await tick();

    expect(jest.mocked(Streamlit.setFrameHeight).mock.calls).toHaveLength(1);
    expect(getByText("Static component")).toBeInTheDocument();
  });

  test("the component should update the frame height after updating the arguments", async () => {
    jest.spyOn(Streamlit, "setFrameHeight");

    const Component = withStreamlitConnection(StaticComponent);
    render(<Component />);
    for (const value of [1, 2, 3]) {
      window.postMessage(
        {
          type: "streamlit:render",
          args: { value },
        },
        "*"
      );
      await tick();
    }

    expect(jest.mocked(Streamlit.setFrameHeight).mock.calls).toHaveLength(3);
  });
});


================================================
File: /component-lib/src/StreamlitReact.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import hoistNonReactStatics from "hoist-non-react-statics";
import React, { ReactNode } from "react";
import { RenderData, Streamlit, Theme } from "./streamlit";

/**
 * Props passed to custom Streamlit components.
 */
export interface ComponentProps<ArgType = any> {
  /** Named dictionary of arguments passed from Python. */
  args: ArgType;

  /** The component's width. */
  width: number;

  /**
   * True if the component should be disabled.
   * All components get disabled while the app is being re-run,
   * and become re-enabled when the re-run has finished.
   */
  disabled: boolean;

  /** Theme definition dictionary passed from the main client.*/
  theme?: Theme;
}

/**
 * Optional Streamlit React-based component base class.
 *
 * You are not required to extend this base class to create a Streamlit
 * component. If you decide not to extend it, you should implement the
 * `componentDidMount` and `componentDidUpdate` functions in your own class,
 * so that your plugin properly resizes.
 */
export class StreamlitComponentBase<
  S = {},
  ArgType = any
> extends React.PureComponent<ComponentProps<ArgType>, S> {
  public componentDidMount(): void {
    // After we're rendered for the first time, tell Streamlit that our height
    // has changed.
    Streamlit.setFrameHeight();
  }

  public componentDidUpdate(): void {
    // After we're updated, tell Streamlit that our height may have changed.
    Streamlit.setFrameHeight();
  }
}

/**
 * Wrapper for React-based Streamlit components.
 *
 * Bootstraps the communication interface between Streamlit and the component.
 */
export function withStreamlitConnection<ArgType = any>(
  WrappedComponent: React.ComponentType<ComponentProps>
): React.ComponentType {
  interface WrapperProps {}

  interface WrapperState {
    renderData?: RenderData<ArgType>;
    componentError?: Error;
  }

  class ComponentWrapper extends React.PureComponent<
    WrapperProps,
    WrapperState
  > {
    public constructor(props: WrapperProps) {
      super(props);
      this.state = {
        renderData: undefined,
        componentError: undefined,
      };
    }

    /**
     * Error boundary function. This will be called if our wrapped
     * component throws an error. We store the caught error in our state,
     * and display it in the next render().
     */
    public static getDerivedStateFromError = (
      error: Error
    ): Partial<WrapperState> => {
      return { componentError: error };
    };

    public componentDidMount = (): void => {
      // Set up event listeners, and signal to Streamlit that we're ready.
      // We won't render the component until we receive the first RENDER_EVENT.
      Streamlit.events.addEventListener(
        Streamlit.RENDER_EVENT,
        this.onRenderEvent as EventListener
      );
      Streamlit.setComponentReady();
    };

    public componentDidUpdate = (): void => {
      // If our child threw an error, we display it in render(). In this
      // case, the child won't be mounted and therefore won't call
      // `setFrameHeight` on its own. We do it here so that the rendered
      // error will be visible.
      if (this.state.componentError != null) {
        Streamlit.setFrameHeight();
      }
    };

    public componentWillUnmount = (): void => {
      Streamlit.events.removeEventListener(
        Streamlit.RENDER_EVENT,
        this.onRenderEvent as EventListener
      );
    };

    /**
     * Streamlit is telling this component to redraw.
     * We save the render data in State, so that it can be passed to the
     * component in our own render() function.
     */
    private onRenderEvent = (
      event: CustomEvent<RenderData<ArgType>>
    ): void => {
      // Update our state with the newest render data
      this.setState({ renderData: event.detail });
    };

    public render(): ReactNode {
      // If our wrapped component threw an error, display it.
      if (this.state.componentError != null) {
        return (
          <div>
            <h1>Component Error</h1>
            <span>{this.state.componentError.message}</span>
          </div>
        );
      }

      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.
      if (this.state.renderData == null) {
        return null;
      }

      return (
        <WrappedComponent
          width={window.innerWidth}
          disabled={this.state.renderData.disabled}
          args={this.state.renderData.args}
          theme={this.state.renderData.theme}
        />
      );
    }
  }

  return hoistNonReactStatics(ComponentWrapper, WrappedComponent);
}


================================================
File: /component-lib/src/index.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Workaround for type-only exports:
// https://stackoverflow.com/questions/53728230/cannot-re-export-a-type-when-using-the-isolatedmodules-with-ts-3-2-2
import { ComponentProps as ComponentProps_ } from "./StreamlitReact";
import { RenderData as RenderData_, Theme as Theme_ } from "./streamlit";

export {
  StreamlitComponentBase,
  withStreamlitConnection,
} from "./StreamlitReact";
export { ArrowTable } from "./ArrowTable";
export { Streamlit } from "./streamlit";
export type ComponentProps = ComponentProps_;
export type RenderData<ArgType = any> = RenderData_<ArgType>;
export type Theme = Theme_;


================================================
File: /component-lib/src/mock_data.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Raw data (in Apache Arrow format) for a dataframe
// that uses `Int64Index` for both `index` and `columns` attributes.
//
// raw_data = {
//   "First Name": ["Jason", "Molly", "Tina", "Jake", "Amy"],
//   "Last Name": ["Miller", "Jacobson", "Ali", "Milner", "Smith"],
//   "Age": [42, 52, 36, 24, 73],
// }
//
// df = pd.DataFrame(raw_data, columns=["First Name", "Last Name", "Age"])

export const EXAMPLE_DF = {
  data: new Uint8Array([
    255, 255, 255, 255, 96, 3, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
    0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
    0, 8, 0, 10, 0, 0, 0, 148, 2, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
    0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 108, 2, 0, 0, 4, 0, 0, 0, 95, 2, 0, 0,
    123, 34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34,
    58, 32, 91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103,
    101, 34, 44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
    32, 34, 115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111,
    112, 34, 58, 32, 53, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125,
    93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120,
    101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
    108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34,
    58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
    116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
    110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
    116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58,
    32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110,
    115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34,
    44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
    48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
    58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117,
    109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101,
    99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
    110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34, 58, 32,
    34, 49, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34,
    58, 32, 34, 49, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121,
    112, 101, 34, 58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34,
    110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98,
    106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
    58, 32, 110, 117, 108, 108, 125, 44, 32, 123, 34, 110, 97, 109, 101, 34,
    58, 32, 34, 50, 34, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109,
    101, 34, 58, 32, 34, 50, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
    116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
    110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98,
    106, 101, 99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34,
    58, 32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116,
    111, 114, 34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32,
    34, 112, 121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115,
    105, 111, 110, 34, 58, 32, 34, 49, 49, 46, 48, 46, 48, 34, 125, 44, 32, 34,
    112, 97, 110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58,
    32, 34, 49, 46, 51, 46, 53, 34, 125, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97,
    115, 0, 0, 3, 0, 0, 0, 116, 0, 0, 0, 60, 0, 0, 0, 4, 0, 0, 0, 168, 255,
    255, 255, 0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 50, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64,
    0, 0, 0, 220, 255, 255, 255, 0, 0, 1, 5, 16, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 204, 255, 255, 255, 16, 0, 20, 0,
    8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0,
    24, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 4, 0, 4, 0,
    4, 0, 0, 0, 255, 255, 255, 255, 8, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0,
    22, 0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 144,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0,
    156, 0, 0, 0, 16, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
    0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 48,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 24,
    0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 104,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 40,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0,
    14, 0, 0, 0, 18, 0, 0, 0, 21, 0, 0, 0, 74, 97, 115, 111, 110, 77, 111, 108,
    108, 121, 84, 105, 110, 97, 74, 97, 107, 101, 65, 109, 121, 0, 0, 0, 0, 0,
    0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 17, 0, 0, 0, 23, 0, 0, 0, 28, 0, 0, 0, 77,
    105, 108, 108, 101, 114, 74, 97, 99, 111, 98, 115, 111, 110, 65, 108, 105,
    77, 105, 108, 110, 101, 114, 83, 109, 105, 116, 104, 0, 0, 0, 0, 42, 0, 0,
    0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
    0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
  ]),
  index: new Uint8Array([
    255, 255, 255, 255, 64, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
    0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
    0, 8, 0, 10, 0, 0, 0, 200, 1, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
    0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 160, 1, 0, 0, 4, 0, 0, 0, 146, 1, 0, 0,
    123, 34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34,
    58, 32, 91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103,
    101, 34, 44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
    32, 34, 115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111,
    112, 34, 58, 32, 53, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125,
    93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120,
    101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
    108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34,
    58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
    116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
    110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
    116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58,
    32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110,
    115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34,
    44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
    48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
    58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34, 110, 117, 109, 112, 121,
    95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32,
    34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32, 110, 117, 108, 108,
    125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114, 34, 58, 32, 123, 34,
    108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112, 121, 97, 114, 114,
    111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32,
    34, 49, 49, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97, 110, 100, 97,
    115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34, 49, 46, 51, 46,
    53, 34, 125, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97, 115, 0, 0, 1, 0, 0,
    0, 20, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0, 0, 0, 16, 0, 16, 0,
    0, 0, 0, 0, 1, 2, 16, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 48, 0, 0, 0, 8, 0, 12, 0, 8, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 1, 64, 0,
    0, 0, 255, 255, 255, 255, 136, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22,
    0, 6, 0, 5, 0, 8, 0, 12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 40, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 60, 0,
    0, 0, 16, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
    0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255,
    0, 0, 0, 0,
  ]),
  columns: new Uint8Array([
    255, 255, 255, 255, 56, 2, 0, 0, 16, 0, 0, 0, 0, 0, 10, 0, 14, 0, 6, 0, 5,
    0, 8, 0, 10, 0, 0, 0, 0, 1, 4, 0, 16, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4,
    0, 8, 0, 10, 0, 0, 0, 204, 1, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 8,
    0, 12, 0, 4, 0, 8, 0, 8, 0, 0, 0, 164, 1, 0, 0, 4, 0, 0, 0, 149, 1, 0, 0,
    123, 34, 105, 110, 100, 101, 120, 95, 99, 111, 108, 117, 109, 110, 115, 34,
    58, 32, 91, 123, 34, 107, 105, 110, 100, 34, 58, 32, 34, 114, 97, 110, 103,
    101, 34, 44, 32, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117, 108, 108, 44,
    32, 34, 115, 116, 97, 114, 116, 34, 58, 32, 48, 44, 32, 34, 115, 116, 111,
    112, 34, 58, 32, 51, 44, 32, 34, 115, 116, 101, 112, 34, 58, 32, 49, 125,
    93, 44, 32, 34, 99, 111, 108, 117, 109, 110, 95, 105, 110, 100, 101, 120,
    101, 115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 110, 117,
    108, 108, 44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34,
    58, 32, 110, 117, 108, 108, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95,
    116, 121, 112, 101, 34, 58, 32, 34, 105, 110, 116, 54, 52, 34, 44, 32, 34,
    110, 117, 109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 105, 110,
    116, 54, 52, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58,
    32, 110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 111, 108, 117, 109, 110,
    115, 34, 58, 32, 91, 123, 34, 110, 97, 109, 101, 34, 58, 32, 34, 48, 34,
    44, 32, 34, 102, 105, 101, 108, 100, 95, 110, 97, 109, 101, 34, 58, 32, 34,
    48, 34, 44, 32, 34, 112, 97, 110, 100, 97, 115, 95, 116, 121, 112, 101, 34,
    58, 32, 34, 117, 110, 105, 99, 111, 100, 101, 34, 44, 32, 34, 110, 117,
    109, 112, 121, 95, 116, 121, 112, 101, 34, 58, 32, 34, 111, 98, 106, 101,
    99, 116, 34, 44, 32, 34, 109, 101, 116, 97, 100, 97, 116, 97, 34, 58, 32,
    110, 117, 108, 108, 125, 93, 44, 32, 34, 99, 114, 101, 97, 116, 111, 114,
    34, 58, 32, 123, 34, 108, 105, 98, 114, 97, 114, 121, 34, 58, 32, 34, 112,
    121, 97, 114, 114, 111, 119, 34, 44, 32, 34, 118, 101, 114, 115, 105, 111,
    110, 34, 58, 32, 34, 49, 49, 46, 48, 46, 48, 34, 125, 44, 32, 34, 112, 97,
    110, 100, 97, 115, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 32, 34,
    49, 46, 51, 46, 53, 34, 125, 0, 0, 0, 6, 0, 0, 0, 112, 97, 110, 100, 97,
    115, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 16, 0, 20, 0, 8, 0, 6, 0, 7, 0, 12, 0,
    0, 0, 16, 0, 16, 0, 0, 0, 0, 0, 1, 5, 16, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 255, 255, 255,
    255, 152, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 12, 0, 22, 0, 6, 0, 5, 0, 8, 0,
    12, 0, 12, 0, 0, 0, 0, 3, 4, 0, 24, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    10, 0, 24, 0, 12, 0, 4, 0, 8, 0, 10, 0, 0, 0, 76, 0, 0, 0, 16, 0, 0, 0, 3,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0,
    0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0,
    0, 22, 0, 0, 0, 70, 105, 114, 115, 116, 32, 78, 97, 109, 101, 76, 97, 115,
    116, 32, 78, 97, 109, 101, 65, 103, 101, 0, 0, 255, 255, 255, 255, 0, 0, 0,
    0,
  ]),
};


================================================
File: /component-lib/src/setupTests.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { TextEncoder, TextDecoder } from "util";

global.TextEncoder = TextEncoder;
// @ts-expect-error
global.TextDecoder = TextDecoder;

beforeEach(() => {
  // The Streamlit class defines several static fields. To avoid side effects,
  // we restore them to their original state.
  const { Streamlit } = require("./streamlit");

  Object.defineProperty(Streamlit, "registeredMessageListener", {
    value: false,
    configurable: true,
    writable: true,
  });
  Object.defineProperty(Streamlit, "lastFrameHeight", {
    value: null,
    configurable: true,
    writable: true,
  });
});


================================================
File: /component-lib/src/streamlit.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Streamlit, Theme } from "./streamlit";
import { ArrowTable } from "./ArrowTable";
import { EXAMPLE_DF } from "./mock_data";
import { tick } from "./test_utils";

describe("Streamlit", () => {
  test("setComponentReady register listeners only once", () => {
    jest.spyOn(window, "addEventListener");

    Streamlit.setComponentReady();
    Streamlit.setComponentReady();

    expect(jest.mocked(window.addEventListener).mock.calls).toHaveLength(1);
  });

  test("setComponentReady sends message to parent window", () => {
    jest.spyOn(window.parent, "postMessage");

    Streamlit.setComponentReady();
    Streamlit.setComponentReady();

    expect(jest.mocked(window.parent.postMessage).mock.calls).toEqual([
      [
        {
          apiVersion: 1,
          isStreamlitMessage: true,
          type: "streamlit:componentReady",
        },
        "*",
      ],
      [
        {
          apiVersion: 1,
          isStreamlitMessage: true,
          type: "streamlit:componentReady",
        },
        "*",
      ],
    ]);
  });

  test("setFrameHeight sends height to parent window", () => {
    jest.spyOn(window.parent, "postMessage");
    Object.defineProperty(document.body, "scrollHeight", {
      value: 42,
      configurable: true,
    });

    Streamlit.setFrameHeight();

    expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
      {
        height: 42,
        isStreamlitMessage: true,
        type: "streamlit:setFrameHeight",
      },
      "*",
    ]);
    // @ts-expect-error
    delete document.body.scrollHeight;
  });

  test("setFrameHeight sends height to parent window only if changed", () => {
    jest.spyOn(window.parent, "postMessage");
    let scrollHeight = 42;
    Object.defineProperty(document.body, "scrollHeight", {
      get: () => scrollHeight,
      configurable: true,
    });

    Streamlit.setFrameHeight();
    expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);

    // Assert that the value is not sent again if height does not change
    Streamlit.setFrameHeight();
    expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);

    // Ensure that the NEW value is sent again
    scrollHeight = 420;
    Streamlit.setFrameHeight();
    expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(2);
    expect(
      jest.mocked(window.parent.postMessage).mock.calls[1][0].height
    ).toEqual(scrollHeight);
  });

  test("setComponentValue should support arrowTable", () => {
    jest.spyOn(window.parent, "postMessage");

    const table = new ArrowTable(
      EXAMPLE_DF.data,
      EXAMPLE_DF.index,
      EXAMPLE_DF.columns
    );
    Streamlit.setComponentValue(table);

    expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);

    const parentMessage = jest.mocked(window.parent.postMessage).mock
      .calls[0][0];
    // Assert content of message except value. The value is too complex for
    // a simple assertion, so we will validate it separately
    const value = parentMessage.value;
    delete parentMessage.value;
    expect(parentMessage).toEqual({
      dataType: "dataframe",
      isStreamlitMessage: true,
      type: "streamlit:setComponentValue",
    });
    // Assert that the table has the expected characteristic.
    const newTable = new ArrowTable(value.data, value.index, value.columns);
    expect(newTable.rows).toEqual(6);
    expect(newTable.columns).toEqual(4);
    expect(newTable.headerRows).toEqual(1);
    expect(newTable.headerColumns).toEqual(1);
  });

  test("setComponentValue should support JSON values", () => {
    jest.spyOn(window.parent, "postMessage");
    Streamlit.setComponentValue("123");

    expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);

    expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
      {
        dataType: "json",
        isStreamlitMessage: true,
        type: "streamlit:setComponentValue",
        value: "123",
      },
      "*",
    ]);
  });

  test("setComponentValue should support array buffers", () => {
    jest.spyOn(window.parent, "postMessage");
    const value = new Uint8Array([1, 2]).buffer;
    Streamlit.setComponentValue(value);

    expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
    expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
      {
        dataType: "bytes",
        isStreamlitMessage: true,
        type: "streamlit:setComponentValue",
        value: new Uint8Array([1, 2]),
      },
      "*",
    ]);
  });

  test("setComponentValue should support typed arrays", () => {
    jest.spyOn(window.parent, "postMessage");
    const value = new Uint8Array([1, 2]);
    Streamlit.setComponentValue(value);

    expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
    expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
      {
        dataType: "bytes",
        isStreamlitMessage: true,
        type: "streamlit:setComponentValue",
        value: new Uint8Array([1, 2]),
      },
      "*",
    ]);
  });

  test("data from the parent frame is received and propagated as an event", async () => {
    const streamlitEventsListener = jest.fn();
    Streamlit.events.addEventListener(
      "streamlit:render",
      streamlitEventsListener
    );
    Streamlit.setComponentReady();

    window.postMessage({ type: "streamlit:render", args: {} }, "*");
    await tick();

    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
    const renderEvent = streamlitEventsListener.mock.calls[0][0];
    expect(renderEvent.detail).toEqual({
      args: {},
      disabled: false,
      theme: undefined,
    });
  });

  test("The parent frame can set the theme", async () => {
    const streamlitEventsListener = jest.fn();
    Streamlit.events.addEventListener(
      "streamlit:render",
      streamlitEventsListener
    );
    Streamlit.setComponentReady();

    const theme: Theme = {
      base: "red",
      primaryColor: "blue",
      backgroundColor: "green",
      secondaryBackgroundColor: "purple",
      textColor: "black",
      font: "Courier New",
    };

    window.postMessage(
      { type: "streamlit:render", args: {}, theme: theme },
      "*"
    );
    await tick();

    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
    const renderEvent = streamlitEventsListener.mock.calls[0][0];
    expect(renderEvent.detail.theme).toEqual(theme);

    expect(
      getComputedStyle(document.documentElement).getPropertyValue(
        "--primary-color"
      )
    ).toEqual(theme.primaryColor);
    expect(
      getComputedStyle(document.documentElement).getPropertyValue(
        "--background-color"
      )
    ).toEqual(theme.backgroundColor);
    expect(
      getComputedStyle(document.documentElement).getPropertyValue(
        "--secondary-background-color"
      )
    ).toEqual(theme.secondaryBackgroundColor);
    expect(
      getComputedStyle(document.documentElement).getPropertyValue(
        "--text-color"
      )
    ).toEqual(theme.textColor);

    expect(
      document.getElementById(Streamlit.INJECTED_STYLE_ELEMENT_ID)
    ).toBeInstanceOf(HTMLStyleElement);
    expect(
      document.querySelectorAll(`style#${Streamlit.INJECTED_STYLE_ELEMENT_ID}`)
    ).toHaveLength(1);

    window.postMessage(
      { type: "streamlit:render", args: {}, theme: theme },
      "*"
    );
    await tick();

    expect(
      document.querySelectorAll(`style#${Streamlit.INJECTED_STYLE_ELEMENT_ID}`)
    ).toHaveLength(1);
  });

  test("The parent frame can sent plain arguments", async () => {
    const streamlitEventsListener = jest.fn();
    Streamlit.events.addEventListener(
      "streamlit:render",
      streamlitEventsListener
    );
    Streamlit.setComponentReady();

    window.postMessage(
      {
        type: "streamlit:render",
        args: { textValue: "smile", numberValue: 42 },
      },
      "*"
    );
    await tick();

    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
    const renderEvent = streamlitEventsListener.mock.calls[0][0];
    expect(renderEvent.detail.args).toEqual({
      numberValue: 42,
      textValue: "smile",
    });
  });

  test("The parent frame can sent dataframe", async () => {
    const streamlitEventsListener = jest.fn();
    Streamlit.events.addEventListener(
      "streamlit:render",
      streamlitEventsListener
    );
    Streamlit.setComponentReady();

    window.postMessage(
      {
        type: "streamlit:render",
        args: {},
        dfs: [
          {
            key: "first-df",
            value: {
              data: {
                data: EXAMPLE_DF.data,
                index: EXAMPLE_DF.index,
                columns: EXAMPLE_DF.columns,
              },
            },
          },
        ],
      },
      "*"
    );
    await tick();

    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
    const renderEvent = streamlitEventsListener.mock.calls[0][0];
    const arrowTable = renderEvent.detail.args["first-df"];
    expect(arrowTable.rows).toEqual(6);
    expect(arrowTable.columns).toEqual(4);
    expect(arrowTable.headerRows).toEqual(1);
    expect(arrowTable.headerColumns).toEqual(1);
  });

  test("The parent frame can disable component", async () => {
    const streamlitEventsListener = jest.fn();
    Streamlit.events.addEventListener(
      "streamlit:render",
      streamlitEventsListener
    );
    Streamlit.setComponentReady();

    window.postMessage(
      { type: "streamlit:render", args: {}, disabled: true },
      "*"
    );
    await tick();

    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
    const renderEvent = streamlitEventsListener.mock.calls[0][0];
    expect(renderEvent.detail.disabled).toEqual(true);
  });
});


================================================
File: /component-lib/src/streamlit.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Safari doesn't support the EventTarget class, so we use a shim.
import { ArrowDataframeProto, ArrowTable } from "./ArrowTable";

/** Object defining the currently set theme. */
export interface Theme {
  base: string;
  primaryColor: string;
  backgroundColor: string;
  secondaryBackgroundColor: string;
  textColor: string;
  font: string;
}

/** Data sent in the custom Streamlit render event. */
export interface RenderData<ArgType = any> {
  args: ArgType;
  disabled: boolean;
  theme?: Theme;
}

// Types that Streamlit.setComponentValue accepts
type ComponentValue = ArrowTable | TypedArray | ArrayBuffer | any;

/** Messages from Component -> Streamlit */
enum ComponentMessageType {
  // A component sends this message when it's ready to receive messages
  // from Streamlit. Streamlit won't send any messages until it gets this.
  // Data: { apiVersion: number }
  COMPONENT_READY = "streamlit:componentReady",

  // The component has a new widget value. Send it back to Streamlit, which
  // will then re-run the app.
  // Data: { value: any }
  SET_COMPONENT_VALUE = "streamlit:setComponentValue",

  // The component has a new height for its iframe.
  // Data: { height: number }
  SET_FRAME_HEIGHT = "streamlit:setFrameHeight",
}

/**
 * Streamlit communication API.
 *
 * Components can send data to Streamlit via the functions defined here,
 * and receive data from Streamlit via the `events` property.
 */
export class Streamlit {
  /**
   * The Streamlit component API version we're targeting.
   * There's currently only 1!
   */
  public static readonly API_VERSION = 1;

  public static readonly RENDER_EVENT = "streamlit:render";

  public static readonly INJECTED_STYLE_ELEMENT_ID =
    "__streamlit_injected_styles";

  /** Dispatches events received from Streamlit. */
  public static readonly events = new EventTarget();

  private static registeredMessageListener = false;
  private static lastFrameHeight?: number;

  /**
   * Tell Streamlit that the component is ready to start receiving data.
   * Streamlit will defer emitting RENDER events until it receives the
   * COMPONENT_READY message.
   */
  public static setComponentReady = (): void => {
    if (!Streamlit.registeredMessageListener) {
      // Register for message events if we haven't already
      window.addEventListener("message", Streamlit.onMessageEvent);
      Streamlit.registeredMessageListener = true;
    }

    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {
      apiVersion: Streamlit.API_VERSION,
    });
  };

  /**
   * Report the component's height to Streamlit.
   * This should be called every time the component changes its DOM - that is,
   * when it's first loaded, and any time it updates.
   */
  public static setFrameHeight = (height?: number): void => {
    if (height === undefined) {
      // `height` is optional. If undefined, it defaults to scrollHeight,
      // which is the entire height of the element minus its border,
      // scrollbar, and margin.
      height = document.body.scrollHeight;
    }

    if (height === Streamlit.lastFrameHeight) {
      // Don't bother updating if our height hasn't changed.
      return;
    }

    Streamlit.lastFrameHeight = height;
    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height });
  };

  /**
   * Set the component's value. This value will be returned to the Python
   * script, and the script will be re-run.
   *
   * For example:
   *
   * JavaScript:
   * Streamlit.setComponentValue("ahoy!")
   *
   * Python:
   * value = st.my_component(...)
   * st.write(value) # -> "ahoy!"
   *
   * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be
   * serializable to JSON.
   */
  public static setComponentValue = (value: ComponentValue): void => {
    let dataType;
    if (value instanceof ArrowTable) {
      dataType = "dataframe";
      value = value.serialize();
    } else if (isTypedArray(value)) {
      // All typed arrays get sent as Uint8Array, because that's what our
      // protobuf library uses for the "bytes" field type.
      dataType = "bytes";
      value = new Uint8Array(value.buffer);
    } else if (value instanceof ArrayBuffer) {
      dataType = "bytes";
      value = new Uint8Array(value);
    } else {
      dataType = "json";
    }
    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {
      value,
      dataType,
    });
  };

  /** Receive a ForwardMsg from the Streamlit app */
  private static onMessageEvent = (event: MessageEvent): void => {
    const type = event.data["type"];
    switch (type) {
      case Streamlit.RENDER_EVENT:
        Streamlit.onRenderMessage(event.data);
        break;
    }
  };

  /**
   * Handle an untyped Streamlit render event and redispatch it as a
   * StreamlitRenderEvent.
   */
  private static onRenderMessage = <ArgType = any>(data: {
    args: ArgType;
    dfs?: ArgsDataframe[];
    disabled?: boolean;
    theme?: Theme;
  }): void => {
    let args = data["args"];
    if (args == null) {
      console.error(
        `Got null args in onRenderMessage. This should never happen`
      );
      args = {} as ArgType;
    }

    // Parse our dataframe arguments with arrow, and merge them into our args dict
    const dataframeArgs =
      data["dfs"] && data["dfs"].length > 0
        ? Streamlit.argsDataframeToObject(data["dfs"])
        : {};

    args = {
      ...args,
      ...dataframeArgs,
    };

    const disabled = Boolean(data["disabled"]);
    const theme = data["theme"];
    if (theme) {
      _injectTheme(theme);
    }

    // Dispatch a render event!
    const eventData = { disabled, args, theme };
    const event = new CustomEvent<RenderData<ArgType>>(
      Streamlit.RENDER_EVENT,
      {
        detail: eventData,
      }
    );
    Streamlit.events.dispatchEvent(event);
  };

  private static argsDataframeToObject = (
    argsDataframe: ArgsDataframe[]
  ): object => {
    const argsDataframeArrow = argsDataframe.map(
      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]
    );
    return Object.fromEntries(argsDataframeArrow);
  };

  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {
    const { data, index, columns, styler } = df.data;
    return new ArrowTable(data, index, columns, styler);
  };

  /** Post a message to the Streamlit app. */
  private static sendBackMsg = (type: string, data?: any): void => {
    window.parent.postMessage(
      {
        isStreamlitMessage: true,
        type: type,
        ...data,
      },
      "*"
    );
  };
}

const _injectTheme = (theme: Theme) => {
  let style = document.getElementById(Streamlit.INJECTED_STYLE_ELEMENT_ID);
  if (!style) {
    style = document.createElement("style");
    style.id = Streamlit.INJECTED_STYLE_ELEMENT_ID;
    document.head.appendChild(style);
  }
  style.innerHTML = `
    :root {
      --primary-color: ${theme.primaryColor};
      --background-color: ${theme.backgroundColor};
      --secondary-background-color: ${theme.secondaryBackgroundColor};
      --text-color: ${theme.textColor};
      --font: ${theme.font};
    }

    body {
      background-color: var(--background-color);
      color: var(--text-color);
    }
  `;
};

interface ArgsDataframe {
  key: string;
  value: ArrowDataframeProto;
}

// The TypedArray JavaScript types
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays
type TypedArray =
  | Int8Array
  | Uint8Array
  | Uint8ClampedArray
  | Int16Array
  | Uint16Array
  | Int32Array
  | Uint32Array
  | Float32Array
  | Float64Array
  | BigInt64Array
  | BigUint64Array;

/** True if the value is a TypedArray. */
function isTypedArray(value: any): value is TypedArray {
  let isBigIntArray = false;
  try {
    isBigIntArray =
      value instanceof BigInt64Array || value instanceof BigUint64Array;
  } catch (e) {
    // Ignore cause Safari does not support this
    // https://caniuse.com/mdn-javascript_builtins_bigint64array
  }

  return (
    value instanceof Int8Array ||
    value instanceof Uint8Array ||
    value instanceof Uint8ClampedArray ||
    value instanceof Int16Array ||
    value instanceof Uint16Array ||
    value instanceof Int32Array ||
    value instanceof Uint32Array ||
    value instanceof Float32Array ||
    value instanceof Float64Array ||
    isBigIntArray
  );
}


================================================
File: /component-lib/src/test_utils.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// A function that doesn't do anything, but allows you to release
// handlers so that pending events can be executed.
//
// MDN explains this as well:
//
// postMessage() schedules the MessageEvent to be dispatched only after all pending execution
// contexts have finished. For example, if postMessage() is invoked in an event handler,
// that event handler will run to completion, as will any remaining handlers for that same
// event, before the MessageEvent is dispatched.
// Source: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
export const tick = () =>
  new Promise((resolve) => setTimeout(() => resolve(0), 0));


================================================
File: /e2e_playwright/README.md
================================================
# Playwright e2e Tests

You can find documentation on how to use and implement Playwright end-to-end tests in [our Wiki](https://github.com/streamlit/streamlit/wiki/Running-e2e-tests-and-updating-snapshots#playwright-e2e-tests).


================================================
File: /e2e_playwright/__init__.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


================================================
File: /e2e_playwright/app_hotkeys.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import streamlit as st

if "counter" not in st.session_state:
    st.session_state.counter = 0

st.session_state.counter += 1

st.text_input("text_input")

st.write("Script runs:", st.session_state.counter)


================================================
File: /e2e_playwright/app_hotkeys_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import wait_for_app_run
from e2e_playwright.shared.app_utils import (
    expect_prefixed_markdown,
)


def test_shows_clear_cache_dialog_when_c_is_pressed(app: Page):
    app.keyboard.type("c")
    expect(app.get_by_role("dialog")).to_be_visible()
    expect(app.get_by_role("dialog")).to_contain_text("Clear caches")


modifier_keys = ["Control", "Meta"]


def test_does_not_show_clear_cache_when_modifier_c_is_pressed(app: Page):
    for key in modifier_keys:
        app.keyboard.press(f"{key}+c")
    expect(app.get_by_test_id("stClearCacheDialog")).not_to_be_visible()


def test_does_not_clear_cache_dialog_when_c_is_pressed_inside_text_input(app: Page):
    app.get_by_test_id("stTextInput").type("c")
    expect(app.get_by_test_id("stClearCacheDialog")).not_to_be_visible()


def test_reruns_when_r_is_pressed(app: Page):
    expect_prefixed_markdown(app, "Script runs:", "1", exact_match=False)
    app.keyboard.type("r")
    wait_for_app_run(app)
    expect_prefixed_markdown(app, "Script runs:", "2", exact_match=False)


def test_does_not_rerun_when_r_is_pressed_inside_text_input(
    app: Page,
):
    app.get_by_test_id("stTextInput").locator("input").press("r")
    wait_for_app_run(app)
    expect_prefixed_markdown(app, "Script runs:", "1", exact_match=False)


================================================
File: /e2e_playwright/auth.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

import streamlit as st

x = st.button("TEST LOGIN")

if x:
    st.login("testprovider")


if st.experimental_user.get("is_logged_in"):
    st.markdown(f"YOU ARE LOGGED IN: {st.experimental_user.email}")
    st.markdown(st.experimental_user["name"])


================================================
File: /e2e_playwright/auth_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

import time
from tempfile import NamedTemporaryFile
from typing import Generator

import pytest
from playwright.sync_api import Page, expect

from e2e_playwright.conftest import (
    AsyncSubprocess,
    find_available_port,
    wait_for_app_run,
)
from e2e_playwright.shared.app_utils import get_button, get_markdown

AUTH_SECRETS_TEMPLATE = """
[auth]
redirect_uri = "http://localhost:{app_port}/oauth2callback"
cookie_secret = "your_cookie_secret_here"

[auth.testprovider]
client_id = "test-client-id"
client_secret = "test-client-secret"
server_metadata_url = "http://localhost:{oidc_server_port}/.well-known/openid-configuration"
"""


@pytest.fixture(scope="module")
def oidc_server_port() -> int:
    """Fixture that returns the port of the OIDC server."""
    return find_available_port()


@pytest.fixture(scope="module")
def fake_oidc_server(
    request, oidc_server_port: int
) -> Generator[AsyncSubprocess, None, None]:
    """Fixture that starts and stops the OIDC app server."""

    is_success = getattr(request, "param", "success")

    oidc_server_proc = AsyncSubprocess(
        [
            "python",
            "shared/oidc_mock_server.py",
            "--port",
            str(oidc_server_port),
            "--success" if is_success == "success" else "--failure",
        ],
        cwd=".",
    )

    oidc_server_proc.start()
    time.sleep(1)
    yield oidc_server_proc
    oidc_server_stdout = oidc_server_proc.terminate()
    print(oidc_server_stdout, flush=True)


@pytest.fixture(scope="module")
def prepare_secrets_file(app_port: int, oidc_server_port: int) -> None:
    """Fixture that inject the correct port to auth_secrets.toml file redirect_uri."""
    # Read in the file
    rendered_secrets = AUTH_SECRETS_TEMPLATE.format(
        app_port=app_port, oidc_server_port=oidc_server_port
    )
    with NamedTemporaryFile(suffix=".toml", delete=False) as tmp_secrets_file:
        tmp_secrets_file.write(rendered_secrets.encode())
        tmp_secrets_file.flush()
        yield tmp_secrets_file.name


@pytest.fixture(scope="module")
def app_server_extra_args(prepare_secrets_file) -> list[str]:
    """Fixture that returns extra arguments to pass to the Streamlit app server."""
    return [
        "--secrets.files",
        prepare_secrets_file,
    ]


@pytest.mark.parametrize("fake_oidc_server", ["success"], indirect=True)
def test_login_successful(app: Page, fake_oidc_server, prepare_secrets_file):
    """Test authentication flow with test provider."""
    button_element = get_button(app, "TEST LOGIN")
    button_element.click()
    app.wait_for_timeout(2_000)

    text = get_markdown(app, "authtest@example.com")
    expect(text).to_be_visible()
    wait_for_app_run(app)

    text = get_markdown(app, "John Doe")
    expect(text).to_be_visible()


@pytest.mark.parametrize("fake_oidc_server", ["failure"], indirect=True)
def test_login_failure(app: Page, fake_oidc_server, prepare_secrets_file):
    """Test authentication flow with error response from oidc server."""
    button_element = get_button(app, "TEST LOGIN")
    button_element.click()
    app.wait_for_timeout(2_000)
    wait_for_app_run(app)

    text = app.get_by_test_id("stMarkdownContainer").filter(has_text="John Doe")
    expect(text).not_to_be_attached()


================================================
File: /e2e_playwright/compilation_error_dialog.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import streamlit as st

# some invalid syntax so that we trigger the compilation error dialog
# if st.button("Trigger compilation error"):
123 foo # noqa: E999


================================================
File: /e2e_playwright/compilation_error_dialog_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import ImageCompareFunction


def test_compilation_error_dialog(
    page: Page, app_port: int, assert_snapshot: ImageCompareFunction
):
    # Do the navigation manually because our app fixture waits for the app to run, but
    # with the compilation error the app never runs
    page.goto(f"http://localhost:{app_port}/")
    dialog = page.get_by_role("dialog")
    expect(dialog).to_be_visible(timeout=10000)
    # make sure that the close-x button is not focused
    dialog.blur(timeout=0)
    assert_snapshot(dialog, name="compilation_error-dialog")


================================================
File: /e2e_playwright/config_arrow_truncation.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import numpy as np
import pandas as pd

import streamlit as st

np.random.seed(0)

df = pd.DataFrame(np.random.randn(50000, 20), columns=("col %d" % i for i in range(20)))

st.dataframe(df)


================================================
File: /e2e_playwright/config_arrow_truncation_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

import pytest
from playwright.sync_api import Page, expect


@pytest.fixture(scope="module")
@pytest.mark.early
def configure_arrow_truncation():
    """Configure arrow truncation and max message size."""
    os.environ["STREAMLIT_SERVER_ENABLE_ARROW_TRUNCATION"] = "True"
    os.environ["STREAMLIT_SERVER_MAX_MESSAGE_SIZE"] = "3"
    yield
    del os.environ["STREAMLIT_SERVER_ENABLE_ARROW_TRUNCATION"]
    del os.environ["STREAMLIT_SERVER_MAX_MESSAGE_SIZE"]


def test_shows_limitation_message(app: Page, configure_arrow_truncation):
    caption_elements = app.get_by_test_id("stCaptionContainer")
    expect(caption_elements).to_have_count(1)
    expect(caption_elements.nth(0)).to_have_text(
        "⚠️ Showing 12k out of 50k rows due to data size limitations. "
    )


================================================
File: /e2e_playwright/config_static_serving.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

if not st.get_option("server.enableStaticServing"):
    st.error(
        "**ERROR**. This test needs to be run with `--server.enableStaticServing`."
    )

st.markdown(
    """
Images served via static serving:

![Streamlit](./app/static/streamlit-logo.png)
"""
)


================================================
File: /e2e_playwright/config_static_serving_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.shared.app_utils import (
    get_markdown,
    wait_for_all_images_to_be_loaded,
)


def test_should_serve_existing_asset(app: Page, app_port: int):
    """Test that the static serving feature serves an existing asset."""
    response = app.request.get(
        f"http://localhost:{app_port}/app/static/streamlit-logo.png"
    )
    expect(response).to_be_ok()
    # Assert is safe here since we don't need to wait for something here:
    assert response.status == 200


def test_should_return_error_on_non_existing_asset(app: Page, app_port: int):
    """Test that the static serving feature returns error code for non-existing asset."""
    response = app.request.get(
        f"http://localhost:{app_port}/app/static/notexisting.jpeg"
    )
    expect(response).not_to_be_ok()
    # Assert is safe here since we don't need to wait for something here:
    assert response.status == 404


def test_static_served_image_embedded_in_markdown(app: Page):
    """Test that an image served via the static serving can be embedded into markdown."""
    markdown_element = get_markdown(app, "Images served via static serving:")
    image_element = markdown_element.locator("img")
    expect(image_element).to_be_visible()
    wait_for_all_images_to_be_loaded(app)


================================================
File: /e2e_playwright/conftest.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Global pytest fixtures for e2e tests.
This file is automatically run by pytest before tests are executed.
"""

from __future__ import annotations

import hashlib
import os
import re
import shlex
import shutil
import socket
import subprocess
import sys
import time
from dataclasses import dataclass
from io import BytesIO
from pathlib import Path
from random import randint
from tempfile import TemporaryFile
from typing import TYPE_CHECKING, Any, Callable, Generator, Literal, Protocol
from urllib import parse

import pytest
import requests
from PIL import Image
from playwright.sync_api import (
    ElementHandle,
    FrameLocator,
    Locator,
    Page,
    Response,
    Route,
)
from pytest import FixtureRequest

from e2e_playwright.shared.git_utils import get_git_root
from e2e_playwright.shared.performance import (
    is_supported_browser,
    measure_performance,
    start_capture_traces,
)

if TYPE_CHECKING:
    from types import ModuleType


def pytest_configure(config: pytest.Config):
    config.addinivalue_line(
        "markers", "no_perf: mark test to not use performance profiling"
    )


def reorder_early_fixtures(metafunc: pytest.Metafunc):
    """Put fixtures with `pytest.mark.early` first during execution

    This allows patch of configurations before the application is initialized

    Copied from: https://github.com/pytest-dev/pytest/issues/1216#issuecomment-456109892
    """
    for fixturedef in metafunc._arg2fixturedefs.values():
        fixturedef = fixturedef[0]
        for mark in getattr(fixturedef.func, "pytestmark", []):
            if mark.name == "early":
                order = metafunc.fixturenames
                order.insert(0, order.pop(order.index(fixturedef.argname)))
                break


def pytest_generate_tests(metafunc: pytest.Metafunc):
    reorder_early_fixtures(metafunc)


class AsyncSubprocess:
    """A context manager. Wraps subprocess. Popen to capture output safely."""

    def __init__(self, args, cwd=None, env=None):
        self.args = args
        self.cwd = cwd
        self.env = env or {}
        self._proc = None
        self._stdout_file = None

    def terminate(self):
        """Terminate the process and return its stdout/stderr in a string."""
        if self._proc is not None:
            self._proc.terminate()
            self._proc.wait()
            self._proc = None

        # Read the stdout file and close it
        stdout = None
        if self._stdout_file is not None:
            self._stdout_file.seek(0)
            stdout = self._stdout_file.read()
            self._stdout_file.close()
            self._stdout_file = None

        return stdout

    def __enter__(self):
        self.start()
        return self

    def start(self):
        # Start the process and capture its stdout/stderr output to a temp
        # file. We do this instead of using subprocess.PIPE (which causes the
        # Popen object to capture the output to its own internal buffer),
        # because large amounts of output can cause it to deadlock.
        self._stdout_file = TemporaryFile("w+")
        print(f"Running: {shlex.join(self.args)}")
        self._proc = subprocess.Popen(
            self.args,
            cwd=self.cwd,
            stdout=self._stdout_file,
            stderr=subprocess.STDOUT,
            text=True,
            env={**os.environ.copy(), **self.env},
        )

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self._proc is not None:
            self._proc.terminate()
            self._proc = None
        if self._stdout_file is not None:
            self._stdout_file.close()
            self._stdout_file = None


def resolve_test_to_script(test_module: ModuleType) -> str:
    """Resolve the test module to the corresponding test script filename."""
    assert test_module.__file__ is not None
    return test_module.__file__.replace("_test.py", ".py")


def hash_to_range(
    text: str,
    min: int = 10000,
    max: int = 65535,
) -> int:
    sha256_hash = hashlib.sha256(text.encode("utf-8")).hexdigest()
    return min + (int(sha256_hash, 16) % (max - min + 1))


def is_port_available(port: int, host: str) -> bool:
    """Check if a port is available on the given host."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        return sock.connect_ex((host, port)) != 0


def find_available_port(
    min_port: int = 10000,
    max_port: int = 65535,
    max_tries: int = 50,
    host: str = "localhost",
) -> int:
    """Find an available port on the given host."""
    for _ in range(max_tries):
        selected_port = randint(min_port, max_port)
        if is_port_available(selected_port, host):
            return selected_port
    raise RuntimeError("Unable to find an available port.")


def is_app_server_running(port: int, host: str = "localhost") -> bool:
    """Check if the app server is running."""
    try:
        return (
            requests.get(f"http://{host}:{port}/_stcore/health", timeout=1).text == "ok"
        )
    except Exception:
        return False


def wait_for_app_server_to_start(port: int, timeout: int = 5) -> bool:
    """Wait for the app server to start.

    Parameters
    ----------
    port : int
        The port on which the app server is running.

    timeout : int
        The number of minutes to wait for the app server to start.

    Returns
    -------
    bool
        True if the app server is started, False otherwise.
    """

    print(f"Waiting for app to start... {port}")
    start_time = time.time()
    while not is_app_server_running(port):
        time.sleep(3)
        if time.time() - start_time > 60 * timeout:
            return False
    return True


# region Fixtures


@pytest.fixture(scope="module")
def app_port(worker_id: str) -> int:
    """Fixture that returns an available port on localhost."""
    if worker_id and worker_id != "master":
        # This is run with xdist, we try to get a port by hashing the worker ID
        port = hash_to_range(worker_id)
        if is_port_available(port, "localhost"):
            return port
    # Find a random available port:
    return find_available_port()


@pytest.fixture(scope="module")
def app_server_extra_args() -> list[str]:
    """Fixture that returns extra arguments to pass to the Streamlit app server."""
    return []


@pytest.fixture(scope="module", autouse=True)
def app_server(
    app_port: int,
    app_server_extra_args: list[str],
    request: FixtureRequest,
) -> Generator[AsyncSubprocess, None, None]:
    """Fixture that starts and stops the Streamlit app server."""
    streamlit_proc = AsyncSubprocess(
        [
            "streamlit",
            "run",
            resolve_test_to_script(request.module),
            "--server.headless",
            "true",
            "--global.developmentMode",
            "false",
            "--global.e2eTest",
            "true",
            "--server.port",
            str(app_port),
            "--browser.gatherUsageStats",
            "false",
            "--server.fileWatcherType",
            "none",
            "--server.enableStaticServing",
            "true",
            *app_server_extra_args,
        ],
        cwd=".",
    )
    streamlit_proc.start()
    if not wait_for_app_server_to_start(app_port):
        streamlit_stdout = streamlit_proc.terminate()
        print(streamlit_stdout, flush=True)
        raise RuntimeError("Unable to start Streamlit app")
    yield streamlit_proc
    streamlit_stdout = streamlit_proc.terminate()
    print(streamlit_stdout, flush=True)


@pytest.fixture(scope="function")
def app(page: Page, app_port: int) -> Page:
    """Fixture that opens the app."""
    page.goto(f"http://localhost:{app_port}/")
    start_capture_traces(page)
    wait_for_app_loaded(page)
    return page


@pytest.fixture(scope="function")
def app_with_query_params(
    page: Page, app_port: int, request: FixtureRequest
) -> tuple[Page, dict]:
    """Fixture that opens the app with additional query parameters.
    The query parameters are passed as a dictionary in the 'param' key of the request.
    """
    query_params = request.param
    query_string = parse.urlencode(query_params, doseq=True)
    url = f"http://localhost:{app_port}/?{query_string}"
    page.goto(url)
    wait_for_app_loaded(page)

    return page, query_params


@dataclass
class IframedPageAttrs:
    # id attribute added to the iframe html tag
    element_id: str | None = None
    # query params to be appended to the iframe src URL
    src_query_params: dict[str, str] | None = None
    # additional HTML body
    additional_html_head: str | None = None
    # html content to load. Following placeholders are replaced during the test:
    # - $APP_URL: the URL of the Streamlit app
    html_content: str | None = None


@dataclass
class IframedPage:
    # the page to configure
    page: Page
    # opens the configured page via the iframe URL and returns the frame_locator
    # pointing to the iframe
    open_app: Callable[[IframedPageAttrs | None], FrameLocator]


@pytest.fixture(scope="function")
def iframed_app(page: Page, app_port: int) -> IframedPage:
    """Fixture that returns an IframedPage.

    The page object can be used to configure additional routes, for example to override
    the host-config. The open_app function triggers the opening of the app in an iframe.
    """
    # we are going to intercept the request, so the address and html-file is arbitrarily
    # chosen and does not even exist
    fake_iframe_server_origin = "http://localhost:1345"
    fake_iframe_server_route = f"{fake_iframe_server_origin}/iframed_app.html"
    # the url where the Streamlit server is reachable
    app_url = f"http://localhost:{app_port}"
    # the CSP header returned for the Streamlit index.html loaded in the iframe. This is
    # similar to a common CSP we have seen in the wild.
    app_csp_header = (
        f"default-src 'none'; worker-src blob:; form-action 'none'; "
        f"connect-src ws://localhost:{app_port}/_stcore/stream "
        f"http://localhost:{app_port}/_stcore/allowed-message-origins "
        f"http://localhost:{app_port}/_stcore/upload_file/ "
        f"https://some-prefix.com/somethingelse/_stcore/upload_file/ "
        f"http://localhost:{app_port}/_stcore/host-config "
        f"http://localhost:{app_port}/_stcore/health; script-src 'unsafe-inline' "
        f"'unsafe-eval' {app_url}/static/js/; style-src 'unsafe-inline' "
        f"{app_url}/static/css/; img-src data: {app_url}/favicon.png "
        f"{app_url}/favicon.ico; font-src {app_url}/static/fonts/ "
        f"{app_url}/static/media/; frame-ancestors {fake_iframe_server_origin};"
    )

    def _open_app(iframe_element_attrs: IframedPageAttrs | None = None) -> FrameLocator:
        _iframe_element_attrs = iframe_element_attrs
        if _iframe_element_attrs is None:
            _iframe_element_attrs = IframedPageAttrs()

        query_params = ""
        if _iframe_element_attrs.src_query_params:
            query_params = "?" + parse.urlencode(_iframe_element_attrs.src_query_params)

        src = f"{app_url}/{query_params}"
        additional_html_head = (
            _iframe_element_attrs.additional_html_head
            if _iframe_element_attrs.additional_html_head
            else ""
        )
        _iframed_body = (
            f"""
            <!DOCTYPE html>
            <html style="height: 100%;">
                <head>
                    <meta charset="UTF-8">
                    <title>Iframed Streamlit App</title>
                    {additional_html_head}
                </head>
                <body style="height: 100%;">
                    <iframe
                        src={src}
                        id={_iframe_element_attrs.element_id
                            if _iframe_element_attrs.element_id
                            else ""}
                        title="Iframed Streamlit App"
                        allow="clipboard-write; microphone;"
                        sandbox="allow-popups allow-same-origin allow-scripts allow-downloads"
                        width="100%"
                    >
                    </iframe>
                </body>
            </html>
            """
            if _iframe_element_attrs.html_content is None
            else _iframe_element_attrs.html_content.replace("$APP_URL", app_url)
        )

        def fulfill_iframe_request(route: Route) -> None:
            """Return as response an iframe that loads the actual Streamlit app."""

            browser = page.context.browser
            # webkit requires the iframe's parent to have "blob:" set, for example if we
            # want to download a CSV via the blob: url; Chrome seems to be more lax
            frame_src_blob = ""
            if browser is not None and (
                browser.browser_type.name == "webkit"
                or browser.browser_type.name == "firefox"
            ):
                frame_src_blob = "blob:"

            route.fulfill(
                status=200,
                body=_iframed_body,
                headers={
                    "Content-Type": "text/html",
                    "Content-Security-Policy": f"frame-src {frame_src_blob} {app_url};",
                },
            )

        # intercept all requests to the fake iframe server and fullfil the request in
        # playwright
        page.route(fake_iframe_server_route, fulfill_iframe_request)

        def fullfill_streamlit_app_request(route: Route) -> None:
            """Get the actual Streamlit app and return it's content."""
            response = route.fetch()
            route.fulfill(
                body=response.body(),
                headers={**response.headers, "Content-Security-Policy": app_csp_header},
            )

        # this will route the request to the actual Streamlit app
        page.route(src, fullfill_streamlit_app_request)

        def _expect_streamlit_app_loaded_in_iframe_with_added_header(
            response: Response,
        ) -> bool:
            """Ensure that the routing-interception worked and that Streamlit app is
            indeed loaded with the CSP header we expect"""

            return (
                response.url == src
                and response.headers["content-security-policy"] == app_csp_header
            )

        with page.expect_event(
            "response",
            predicate=_expect_streamlit_app_loaded_in_iframe_with_added_header,
        ):
            page.goto(fake_iframe_server_route, wait_until="domcontentloaded")
            frame_locator = page.frame_locator("iframe")
            frame_locator.nth(0).get_by_test_id("stAppViewContainer").wait_for(
                timeout=30000, state="attached"
            )
        return frame_locator

    return IframedPage(page, _open_app)


@pytest.fixture(scope="session")
def browser_type_launch_args(browser_type_launch_args: dict, browser_name: str):
    """Fixture that adds the fake device and ui args to the browser type launch args."""
    # The browser context fixture in pytest-playwright is defined in session scope, and
    # depends on the browser_type_launch_args fixture. This means that we can't
    # redefine the browser_type_launch_args fixture more narrow scope
    # e.g. function or module scope.
    # https://github.com/microsoft/playwright-pytest/blob/ef99541352b307411dbc15c627e50f95de30cc71/pytest_playwright/pytest_playwright.py#L128

    # We need to extend browser launch args to support fake video stream for
    # st.camera_input test.
    # https://github.com/microsoft/playwright/issues/4532#issuecomment-1491761713

    if browser_name == "chromium":
        browser_type_launch_args = {
            **browser_type_launch_args,
            "args": [
                "--use-fake-device-for-media-stream",
                "--use-fake-ui-for-media-stream",
            ],
        }

    elif browser_name == "firefox":
        browser_type_launch_args = {
            **browser_type_launch_args,
            "firefox_user_prefs": {
                "media.navigator.streams.fake": True,
                "media.navigator.permission.disabled": True,
                "permissions.default.microphone": 1,
                "permissions.default.camera": 1,
            },
        }
    return browser_type_launch_args


@pytest.fixture(scope="function", params=["light_theme", "dark_theme"])
def app_theme(request) -> str:
    """Fixture that returns the theme name."""
    return str(request.param)


@pytest.fixture(scope="function")
def themed_app(page: Page, app_port: int, app_theme: str) -> Page:
    """Fixture that opens the app with the given theme."""
    page.goto(f"http://localhost:{app_port}/?embed_options={app_theme}")
    start_capture_traces(page)
    wait_for_app_loaded(page)
    return page


class ImageCompareFunction(Protocol):
    def __call__(
        self,
        element: ElementHandle | Locator | Page,
        *,
        image_threshold: float = 0.002,
        pixel_threshold: float = 0.05,
        name: str | None = None,
        fail_fast: bool = False,
    ) -> None:
        """Compare a screenshot with screenshot from a past run.

        Parameters
        ----------
        element : ElementHandle or Locator
            The element to take a screenshot of.
        image_threshold : float, optional
            The allowed percentage of different pixels in the image.
        pixel_threshold : float, optional
            The allowed percentage of difference for a single pixel.
        name : str | None, optional
            The name of the screenshot without an extension. If not provided, the name
            of the test function will be used.
        fail_fast : bool, optional
            If True, the comparison will stop at the first pixel mismatch.
        """


@pytest.fixture(scope="session", autouse=True)
def delete_output_dir(pytestconfig: Any) -> None:
    # Overwriting the default delete_output_dir fixture from pytest-playwright:
    # There seems to be a bug with the combination of pytest-playwright, xdist,
    # and pytest-rerunfailures where the output dir is deleted when it shouldn't be.
    # To prevent this issue, we are not deleting the output dir when running with
    # reruns and xdist.

    uses_xdist = (
        pytestconfig.getoption("workerinput", None) or os.getenv("PYTEST_XDIST_WORKER"),
    )
    uses_reruns = pytestconfig.getoption("reruns", None)

    if not (uses_xdist and uses_reruns):
        # Delete the output folder. Uses the same logic as the default
        # delete_output_dir fixture from pytest-playwright:
        # https://github.com/microsoft/playwright-pytest/blob/fb51327390ccbd3561c1777499934eb88296f1bf/pytest-playwright/pytest_playwright/pytest_playwright.py#L68
        output_dir = pytestconfig.getoption("--output")
        if os.path.exists(output_dir):
            try:
                shutil.rmtree(output_dir)
            except FileNotFoundError:
                # When running in parallel, another thread may have already deleted the files
                pass
            except OSError as error:
                if error.errno != 16:
                    raise
                # We failed to remove folder, might be due to the whole folder being mounted inside a container:
                #   https://github.com/microsoft/playwright/issues/12106
                #   https://github.com/microsoft/playwright-python/issues/1781
                # Do a best-effort to remove all files inside of it instead.
                entries = os.listdir(output_dir)
                for entry in entries:
                    shutil.rmtree(entry)


@pytest.fixture(scope="session")
def output_folder(pytestconfig: Any) -> Path:
    """Fixture returning the directory that is used for all test failures information.

    This includes:
    - snapshot-tests-failures: This directory contains all the snapshots that did not
    match with the snapshots from past runs. The folder structure is based on the folder
    structure used in the main snapshots folder.
    - snapshot-updates: This directory contains all the snapshots that got updated in
    the current run based on folder structure used in the main snapshots folder.
    """
    return Path(
        get_git_root() / "e2e_playwright" / pytestconfig.getoption("--output")
    ).resolve()


@pytest.fixture(scope="function")
def assert_snapshot(
    request: FixtureRequest, output_folder: Path
) -> Generator[ImageCompareFunction, None, None]:
    """Fixture that compares a screenshot with screenshot from a past run."""
    root_path = get_git_root()
    platform = str(sys.platform)
    module_name = request.module.__name__.split(".")[-1]
    test_function_name = request.node.originalname

    snapshot_dir: Path = (
        root_path / "e2e_playwright" / "__snapshots__" / platform / module_name
    )

    module_snapshot_failures_dir: Path = (
        output_folder / "snapshot-tests-failures" / platform / module_name
    )
    module_snapshot_updates_dir: Path = (
        output_folder / "snapshot-updates" / platform / module_name
    )

    snapshot_file_suffix = ""
    # Extract the parameter ids if they exist
    match = re.search(r"\[(.*?)\]", request.node.name)
    if match:
        snapshot_file_suffix = f"[{match.group(1)}]"

    snapshot_default_file_name: str = test_function_name + snapshot_file_suffix

    test_failure_messages: list[str] = []

    def compare(
        element: ElementHandle | Locator | Page,
        *,
        image_threshold: float = 0.002,
        pixel_threshold: float = 0.05,
        name: str | None = None,
        fail_fast: bool = False,
        file_type: Literal["png", "jpg"] = "png",
    ) -> None:
        """Compare a screenshot with screenshot from a past run.

        Parameters
        ----------
        element : ElementHandle or Locator
            The element to take a screenshot of.
        image_threshold : float, optional
            The allowed percentage of different pixels in the image.
        pixel_threshold : float, optional
            The allowed percentage of difference for a single pixel to be considered
            different.
        name : str | None, optional
            The name of the screenshot without an extension. If not provided, the name
            of the test function will be used.
        fail_fast : bool, optional
            If True, the comparison will stop at the first pixel mismatch.
        file_type: "png" or "jpg"
            The file type of the screenshot. Defaults to "png".
        """
        nonlocal test_failure_messages
        nonlocal snapshot_default_file_name
        nonlocal module_snapshot_updates_dir
        nonlocal module_snapshot_failures_dir
        nonlocal snapshot_file_suffix

        if file_type == "jpg":
            file_extension = ".jpg"
            img_bytes = element.screenshot(
                type="jpeg", quality=90, animations="disabled"
            )

        else:
            file_extension = ".png"
            img_bytes = element.screenshot(type="png", animations="disabled")

        snapshot_file_name: str = snapshot_default_file_name
        if name:
            snapshot_file_name = name + snapshot_file_suffix

        snapshot_file_path: Path = (
            snapshot_dir / f"{snapshot_file_name}{file_extension}"
        )

        snapshot_updates_file_path: Path = (
            module_snapshot_updates_dir / f"{snapshot_file_name}{file_extension}"
        )

        snapshot_file_path.parent.mkdir(parents=True, exist_ok=True)

        test_failures_dir = module_snapshot_failures_dir / snapshot_file_name
        if test_failures_dir.exists():
            # Remove the past runs failure dir for this specific screenshot
            shutil.rmtree(test_failures_dir)

        if not snapshot_file_path.exists():
            snapshot_file_path.write_bytes(img_bytes)
            # Update this in updates folder:
            snapshot_updates_file_path.parent.mkdir(parents=True, exist_ok=True)
            snapshot_updates_file_path.write_bytes(img_bytes)
            # For missing snapshots, we don't want to directly fail in order to generate
            # all missing snapshots in one run.
            test_failure_messages.append(f"Missing snapshot for {snapshot_file_name}")
            return

        from pixelmatch.contrib.PIL import pixelmatch

        # Compare the new screenshot with the screenshot from past runs:
        img_a = Image.open(BytesIO(img_bytes))
        img_b = Image.open(snapshot_file_path)
        img_diff = Image.new("RGBA", img_a.size)
        try:
            mismatch = pixelmatch(
                img_a,
                img_b,
                img_diff,
                threshold=pixel_threshold,
                fail_fast=fail_fast,
                alpha=0,
            )
        except ValueError as ex:
            # ValueError is thrown when the images have different sizes
            # Update this in updates folder:
            snapshot_updates_file_path.parent.mkdir(parents=True, exist_ok=True)
            snapshot_updates_file_path.write_bytes(img_bytes)

            test_failure_messages.append(
                f"Snapshot matching for {snapshot_file_name} failed. "
                f"Expected size: {img_b.size}, actual size: {img_a.size}. "
                f"Error: {ex}"
            )
            return
        total_pixels = img_a.size[0] * img_a.size[1]
        max_diff_pixels = int(image_threshold * total_pixels)

        if mismatch < max_diff_pixels:
            return

        # Update this in updates folder:
        snapshot_updates_file_path.parent.mkdir(parents=True, exist_ok=True)
        snapshot_updates_file_path.write_bytes(img_bytes)

        # Create new failures folder for this test:
        test_failures_dir.mkdir(parents=True, exist_ok=True)
        img_diff.save(f"{test_failures_dir}/diff_{snapshot_file_name}{file_extension}")
        img_a.save(f"{test_failures_dir}/actual_{snapshot_file_name}{file_extension}")
        img_b.save(f"{test_failures_dir}/expected_{snapshot_file_name}{file_extension}")

        test_failure_messages.append(
            f"Snapshot mismatch for {snapshot_file_name} ({mismatch} pixels difference;"
            f" {mismatch/total_pixels * 100:.2f}%)"
        )

    yield compare

    if test_failure_messages:
        pytest.fail(
            "Missing or mismatched snapshots: \n" + "\n".join(test_failure_messages)
        )


@pytest.fixture(scope="function", autouse=True)
def playwright_profiling(request, page: Page):
    if request.node.get_closest_marker("no_perf") or not is_supported_browser(page):
        yield
        return

    with measure_performance(page, test_name=request.node.name):
        yield


# endregion


# region Public utility methods


def wait_for_app_run(
    page_or_locator: Page | Locator | FrameLocator, wait_delay: int = 100
):
    """Wait for the given page to finish running."""
    # Add a little timeout to wait for eventual debounce timeouts used in some widgets.

    page = None
    if isinstance(page_or_locator, Page):
        page = page_or_locator
    elif isinstance(page_or_locator, Locator):
        page = page_or_locator.page
    elif isinstance(page_or_locator, FrameLocator):
        page = page_or_locator.owner.page

    # if isinstance(page, Page):
    page.wait_for_timeout(155)
    # Make sure that the websocket connection is established.
    page_or_locator.locator(
        "[data-testid='stApp'][data-test-connection-state='CONNECTED']"
    ).wait_for(
        timeout=25000,
        state="attached",
    )
    # Wait until we know the script has started. We determine this by checking
    # whether the app is in notRunning state. (The data-test-connection-state attribute
    # goes through the sequence "initial" -> "running" -> "notRunning").
    page_or_locator.locator(
        "[data-testid='stApp'][data-test-script-state='notRunning']"
    ).wait_for(
        timeout=25000,
        state="attached",
    )

    if wait_delay > 0:
        # Give the app a little more time to render everything
        page.wait_for_timeout(wait_delay)


def wait_for_app_loaded(page: Page, embedded: bool = False):
    """Wait for the app to fully load."""
    # Wait for the app view container to appear:
    page.wait_for_selector(
        "[data-testid='stAppViewContainer']", timeout=30000, state="attached"
    )

    # Wait for the main menu to appear:
    if not embedded:
        page.wait_for_selector(
            "[data-testid='stMainMenu']", timeout=20000, state="attached"
        )

    wait_for_app_run(page)


def rerun_app(page: Page):
    """Triggers an app rerun and waits for the run to be finished."""
    # Click somewhere to clear the focus from elements:
    page.get_by_test_id("stApp").click(position={"x": 0, "y": 0})
    # Press "r" to rerun the app:
    page.keyboard.press("r")
    wait_for_app_run(page)


def wait_until(page: Page, fn: Callable, timeout: int = 5000, interval: int = 100):
    """Run a test function in a loop until it evaluates to True
    or times out.

    For example:
    >>> wait_until(lambda: x.values() == ["x"], page)

    Parameters
    ----------
    page : playwright.sync_api.Page
        Playwright page
    fn : Callable
        Callback
    timeout : int, optional
        Total timeout in milliseconds, by default 5000
    interval : int, optional
        Waiting interval, by default 100

    Adapted from panel.
    """
    # Hide this function traceback from the pytest output if the test fails
    __tracebackhide__ = True

    start = time.time()

    def timed_out():
        elapsed = time.time() - start
        elapsed_ms = elapsed * 1000
        return elapsed_ms > timeout

    timeout_msg = f"wait_until timed out in {timeout} milliseconds"

    while True:
        try:
            result = fn()
        except AssertionError as e:
            if timed_out():
                raise TimeoutError(timeout_msg) from e
        else:
            if result not in (None, True, False):
                raise ValueError(
                    "`wait_until` callback must return None, True or "
                    f"False, returned {result!r}"
                )
            # Stop is result is True or None
            # None is returned when the function has an assert
            if result is None or result:
                return
            if timed_out():
                raise TimeoutError(timeout_msg)
        page.wait_for_timeout(interval)


# endregion


================================================
File: /e2e_playwright/deploy_dialog.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Nothing to do here since the deploy button is part of the frontend even
# without any Streamlit element being rendered.


================================================
File: /e2e_playwright/deploy_dialog_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import ImageCompareFunction
from e2e_playwright.shared.app_utils import wait_for_all_images_to_be_loaded


def test_deploy_button_displays_correctly(
    themed_app: Page, assert_snapshot: ImageCompareFunction
):
    deploy_button = themed_app.get_by_test_id("stAppDeployButton")
    deploy_button.click()

    # Make sure that deploy dialog is properly displayed
    # Before taking screenshot
    deploy_dialog = themed_app.get_by_test_id("stDialog")
    expect(deploy_dialog).to_be_visible()
    expect(
        deploy_dialog.get_by_test_id("stDeployDialogCommunityCloudIcon")
    ).to_be_visible()
    expect(
        deploy_dialog.get_by_test_id("stDeployDialogCustomDeploymentIcon")
    ).to_be_visible()

    wait_for_all_images_to_be_loaded(themed_app)

    # Make a snapshot of the dialog window
    assert_snapshot(deploy_dialog.get_by_role("dialog"), name="deploy_dialog")


================================================
File: /e2e_playwright/fast_rerun_safety.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time

import streamlit as st
from streamlit import runtime

if runtime.exists():
    if "counter" not in st.session_state:
        st.session_state.counter = 0
    st.button("rerun")

    st.write(st.session_state.counter)
    time.sleep(3)
    st.write(st.session_state.counter)
    live = st.empty()
    for _ in range(50):
        st.session_state.counter += 1
        live.write(f"live: {st.session_state.counter}")
        time.sleep(0.1)


================================================
File: /e2e_playwright/fast_rerun_safety_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import wait_for_app_run


def test_no_concurrent_changes(app: Page):
    counters = app.get_by_test_id("stMarkdown")
    expect(counters.first).to_have_text("0", use_inner_text=True)

    button = app.get_by_test_id("stButton")
    button.first.click()
    wait_for_app_run(app)

    counters = app.get_by_test_id("stMarkdown")
    expect(counters.nth(0)).to_have_text(
        counters.nth(1).inner_text(), use_inner_text=True
    )


================================================
File: /e2e_playwright/forward_msg_cache.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

# Send a ForwardMsg to the client that's long enough that we cache it.
st.markdown(
    "\n\n".join(
        50
        * [
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis neque eu orci faucibus pellentesque. Vivamus dapibus pellentesque sem, vitae ultricies sem pharetra at. Curabitur eu congue magna, eu tempor libero. Donec vitae condimentum odio. Sed neque elit, porttitor eget laoreet volutpat, imperdiet et leo. Phasellus vel velit sit amet nulla hendrerit pharetra et non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. In malesuada sem sit amet felis vestibulum, maximus imperdiet nibh mollis. Cras in ipsum at neque mollis facilisis nec et tortor. Duis fringilla tortor id urna laoreet lobortis."
        ]
    )
)


================================================
File: /e2e_playwright/forward_msg_cache_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import rerun_app


def test_forward_msg_cache_receives_msg(app: Page):
    app.evaluate("window.streamlitDebug.clearForwardMsgCache()")
    rerun_app(app)
    expect(app.get_by_role("dialog")).not_to_be_visible()

    app.expect_request("**/_stcore/message/")


================================================
File: /e2e_playwright/hello_app.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import numpy as np

from streamlit import runtime
from streamlit.hello import streamlit_app

# Set random seed to always get the same results in the plotting demo
np.random.seed(0)
if runtime.exists():
    streamlit_app.run()


================================================
File: /e2e_playwright/hello_app_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import (
    ImageCompareFunction,
    wait_for_app_run,
)


def navigate_to_page(app: Page, index: int):
    app.get_by_test_id("stSidebarNav").locator("a").nth(index).click()
    wait_for_app_run(app)
    # Move the mouse to the top left corner to prevent any weird hover effects
    # in the screenshots
    app.mouse.move(0, 0)


def check_page_title(app: Page, title: str) -> None:
    expect(
        app.get_by_test_id("stMarkdownContainer").locator("h1").nth(0)
    ).to_contain_text(title)


def check_page_icon(app: Page, icon: str, index: int = 0) -> None:
    expect(
        app.get_by_test_id("stSidebarNavLink")
        .get_by_test_id("stIconMaterial")
        .nth(index)
    ).to_have_text(icon)


def test_home_page(app: Page, assert_snapshot: ImageCompareFunction) -> None:
    """Test that the home page of the hello app is displayed correctly."""
    check_page_title(app, "Welcome to Streamlit!")
    check_page_icon(app, "waving_hand")
    expect(app.get_by_test_id("stSidebar")).to_be_visible()
    expect(app.get_by_test_id("stSidebarNav")).to_be_visible()

    assert_snapshot(app, name="hello_app-home_page")


def test_animation_demo_page(app: Page, assert_snapshot: ImageCompareFunction) -> None:
    """Test that the animation demo page of the hello app is displayed correctly."""
    navigate_to_page(app, 4)

    check_page_title(app, "Animation demo")
    check_page_icon(app, "animation", 4)
    # Wait for the animation to end. The animation takes 5-10 seconds to finish
    # which is a lot more than the default timeout, so we set it to a higher value
    expect(app.get_by_test_id("stButton")).to_contain_text("Rerun", timeout=25000)

    assert_snapshot(app, name="hello_app-animation_demo_page")


def test_plotting_demo_page(app: Page, assert_snapshot: ImageCompareFunction) -> None:
    """Test that the plotting demo page of the hello app is displayed correctly."""
    navigate_to_page(app, 2)

    check_page_title(app, "Plotting demo")
    check_page_icon(app, "show_chart", 2)
    # The animation takes 5-10 seconds to finish, so we add
    # and additional timeout
    expect(app.get_by_test_id("stText")).to_contain_text("100% complete", timeout=15000)
    expect(app.get_by_test_id("stProgress")).not_to_be_visible()
    expect(app.get_by_test_id("stVegaLiteChart").locator("canvas")).to_have_attribute(
        "height", "350"
    )

    assert_snapshot(app, name="hello_app-plotting_demo_page")


def test_mapping_demo_page(app: Page) -> None:
    """Test that the mapping demo page of the hello app is displayed correctly."""
    navigate_to_page(app, 3)

    check_page_title(app, "Mapping demo")
    check_page_icon(app, "public", 3)
    # We add an additional timeout here since sometimes the loading of
    # the map takes a bit longer (probably because of the map token request).
    expect(app.get_by_test_id("stDeckGlJsonChart")).to_have_attribute(
        "height", "500", timeout=10000
    )

    # The snapshot test here is flaky, the map doesn't seem to always result
    # in the same image.
    # assert_snapshot(app, name="hello_app-mapping_demo_page")


def _load_dataframe_demo_page(app: Page):
    """Load the dataframe demo page and wait until all elements are visible."""
    navigate_to_page(app, 1)
    check_page_title(app, "DataFrame demo")
    check_page_icon(app, "table", 1)
    expect(app.get_by_test_id("stMultiSelect")).to_be_visible()
    expect(app.get_by_test_id("stDataFrame")).to_be_visible()
    expect(app.get_by_test_id("stVegaLiteChart").locator("canvas")).to_have_attribute(
        "height", "350"
    )


def test_dataframe_demo_page(app: Page, assert_snapshot: ImageCompareFunction) -> None:
    """Test that the dataframe demo page of the hello app is displayed correctly."""
    _load_dataframe_demo_page(app)
    assert_snapshot(app, name="hello_app-dataframe_demo_page")


# TEST PRINTING:
# The print tests are in this suite to avoid having full-app screenshots being spread
# around in different suites. Even the smallest design change in one part of the app can
# make these full-screenshots fail and require renewal, which is why we want them to be
# bundled in one place. The "Dataframe Demo" page was arbitrarily chosen as a good
# printing candidate.


def _evaluate_match_media_print(app: Page):
    app.evaluate("matchMedia('print').matches")


# DIN A4 paper is 21cm x 29.7cm which is 595px x 842px in 72dpi;
# Use higher pixels to avoid mobile media queries to trigger but keep the ratio
portrait_width_px = 1240
portrait_height_px = 1754


def _set_portrait_dimensions(app: Page):
    app.set_viewport_size({"width": portrait_width_px, "height": portrait_height_px})


def _set_landscape_dimensions(app: Page):
    app.set_viewport_size({"width": portrait_height_px, "height": portrait_width_px})


def test_app_print_mode_portrait_with_sidebar_open(
    themed_app: Page, assert_snapshot: ImageCompareFunction
):
    """Test that the dataframe demo page looks correctly in print-mode with
    sidebar open."""
    app = themed_app

    _load_dataframe_demo_page(app)
    app.emulate_media(media="print", forced_colors="active")
    _set_portrait_dimensions(app)
    _evaluate_match_media_print(app)

    # ensure that the sidebar is visible
    expect(app.get_by_test_id("stSidebarContent")).to_be_visible()

    assert_snapshot(app, name="hello_app-print_media-portrait-sidebar_open")


def test_app_print_mode_portrait_with_sidebar_closed(
    themed_app: Page, assert_snapshot: ImageCompareFunction
):
    """Test that the dataframe demo page looks correctly in print-mode with
    sidebar closed."""
    app = themed_app

    _load_dataframe_demo_page(app)
    # close sidebar. Must be done before print-mode, because we hide the close button
    # when printing
    app.get_by_test_id("stSidebar").hover()
    sidebar_element = app.get_by_test_id("stSidebarContent")
    sidebar_element.get_by_test_id("stBaseButton-headerNoPadding").click()
    expect(sidebar_element).not_to_be_visible()

    app.emulate_media(media="print", forced_colors="active")
    _set_portrait_dimensions(app)
    _evaluate_match_media_print(app)

    assert_snapshot(app, name="hello_app-print_media-portrait-sidebar_closed")


def test_app_print_mode_landscape_with_sidebar_open(
    themed_app: Page, assert_snapshot: ImageCompareFunction
):
    """Test that the dataframe demo page looks correctly in print-mode
    (orientation: landscape) with sidebar open."""
    app = themed_app

    _load_dataframe_demo_page(app)
    app.emulate_media(media="print", forced_colors="active")
    _set_landscape_dimensions(app)
    _evaluate_match_media_print(app)
    # ensure that the sidebar is visible
    expect(app.get_by_test_id("stSidebarContent")).to_be_visible()

    assert_snapshot(app, name="hello_app-print_media-landscape-sidebar_open")


def test_app_print_mode_landscape_with_sidebar_closed(
    themed_app: Page, assert_snapshot: ImageCompareFunction
):
    """Test that the dataframe demo page looks correctly in print-mode
    (orientation: landscape) with sidebar closed."""
    app = themed_app

    _load_dataframe_demo_page(app)
    # close sidebar. Must be done before print-mode, because we hide the close button
    # when printing
    app.get_by_test_id("stSidebar").hover()
    sidebar_element = app.get_by_test_id("stSidebarContent")
    sidebar_element.get_by_test_id("stBaseButton-headerNoPadding").click()
    expect(sidebar_element).not_to_be_visible()

    app.emulate_media(media="print", forced_colors="active")
    _set_landscape_dimensions(app)
    _evaluate_match_media_print(app)

    assert_snapshot(app, name="hello_app-print_media-landscape-sidebar_closed")


================================================
File: /e2e_playwright/help_tooltip.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

with st.sidebar:
    st.button(
        label="Sidebar-button with help",
        help="""This is a longer help text to inform users of the functionality and in
            case it is disabled what to do to enable it. This is a longer help text
            to inform users of the functionality and in case it is disabled what to
            do to enable it.
            """,
    )


columns_ = st.columns([9, 1.5, 1.5])
with columns_[1].popover("Some popover"):
    pass

with columns_[2].popover("Popover with toggle"):
    st.toggle(
        "Right-toggle with help",
        help="""
            View statistics of all damage done at each skill level only.
            This includes all damage done at each player level available at
            each skill level.
            """,
    )


================================================
File: /e2e_playwright/help_tooltip_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.shared.app_utils import get_checkbox


def test_tooltip_does_not_overflow_on_the_left_side(app: Page):
    sidebar_button = (
        app.get_by_test_id("stButton")
        .filter(has_text="Sidebar-button with help")
        .locator("button")
        .first
    )
    sidebar_button.hover()
    tooltip = app.get_by_test_id("stTooltipContent")
    expect(tooltip).to_be_visible()

    bounding_box = tooltip.bounding_box()
    assert bounding_box
    assert bounding_box["x"] >= 0


def test_tooltip_does_not_overflow_on_the_right_side(app: Page):
    # Resize the viewport to make sure there is not a lot of space on the right side
    viewport_width = 750
    app.set_viewport_size({"width": viewport_width, "height": 800})
    app.wait_for_function(f"() => window.innerWidth === {viewport_width}")

    popover_button = (
        app.get_by_test_id("stPopover")
        .filter(has_text="Popover with toggle")
        .locator("button")
    )

    # Click the button to open it:
    popover_button.click()

    toggle = get_checkbox(app, "Right-toggle with help")
    expect(toggle).to_be_visible()
    toggle.get_by_test_id("stTooltipHoverTarget").hover()

    tooltip = app.get_by_test_id("stTooltipContent")
    expect(tooltip).to_be_visible()

    bounding_box = tooltip.bounding_box()
    assert bounding_box
    assert bounding_box["x"] + bounding_box["width"] <= viewport_width


================================================
File: /e2e_playwright/host_config.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
