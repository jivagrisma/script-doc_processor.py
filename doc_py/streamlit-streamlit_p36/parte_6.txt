# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.header("Page 6")

home = st.button("`./mpa_basics.py`")
if home:
    st.switch_page("./mpa_basics.py")


================================================
File: /e2e_playwright/multipage_apps/pages/07_page_7.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.header("Page 7")

with st.sidebar:
    st.write("Sidebar")
    color = st.color_picker("Pick a color")
    st.write("You picked:", color)
    st.divider()
    st.text_area("Some random text:", height=500)


================================================
File: /e2e_playwright/multipage_apps/pages/08_slow_page.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time

import streamlit as st

st.header("Slow page")
time.sleep(10)


================================================
File: /e2e_playwright/multipage_apps/pages/09_logo_page.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import pathlib

from PIL import Image

import streamlit as st

small_logo = Image.open(
    str(pathlib.Path(__file__).parent.parent / "small-streamlit.png")
)

logo = Image.open(str(pathlib.Path(__file__).parent.parent / "full-streamlit.png"))

st.header("Logo page")
st.logo(logo, link="https://www.example.com", icon_image=small_logo)

with st.sidebar:
    st.radio("Example Sidebar Content", ["Home", "About", "Contact"])


================================================
File: /e2e_playwright/multipage_apps/pages/10_small_logo_page.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import pathlib

from PIL import Image

import streamlit as st

small_logo = Image.open(
    str(pathlib.Path(__file__).parent.parent / "small-streamlit.png")
)

logo = Image.open(str(pathlib.Path(__file__).parent.parent / "full-streamlit.png"))

st.header("Logo page")
st.logo(
    logo,
    link="https://www.example.com",
    icon_image=small_logo,
    size="small",
)

with st.sidebar:
    st.radio("Example Sidebar Content", ["Home", "About", "Contact"])


================================================
File: /e2e_playwright/multipage_apps/pages/11_large_logo_page.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import pathlib

from PIL import Image

import streamlit as st

small_logo = Image.open(
    str(pathlib.Path(__file__).parent.parent / "small-streamlit.png")
)

logo = Image.open(str(pathlib.Path(__file__).parent.parent / "full-streamlit.png"))

st.header("Logo page")
st.logo(
    logo,
    link="https://www.example.com",
    icon_image=small_logo,
    size="large",
)

with st.sidebar:
    st.radio("Example Sidebar Content", ["Home", "About", "Contact"])


================================================
File: /e2e_playwright/multipage_apps/pages/12_page12.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.header("Page 12")


================================================
File: /e2e_playwright/multipage_apps/pages/13_page13.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.header("Page 13")


================================================
File: /e2e_playwright/multipage_apps_v2/__init__.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


================================================
File: /e2e_playwright/multipage_apps_v2/mpa_v2_basics.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
from pathlib import Path

from PIL import Image

import streamlit as st

PARENT_DIR = Path(__file__).parent.parent / "multipage_apps"
SMALL_LOGO = Image.open(str(PARENT_DIR / "small-streamlit.png"))

LOGO = Image.open(str(PARENT_DIR / "full-streamlit.png"))

st.logo(LOGO, link="https://www.example.com", icon_image=SMALL_LOGO)

st.header("Main Page")
x = st.slider("x")

st.write(f"x is {x}")

set_default = bool(st.query_params.get("default", False))

page2 = st.Page("page_2.py")
page3 = st.Page("page_3.py", title="Different Title")
page4 = st.Page("ðŸ¦’_page_4.py")
page5 = st.Page(Path("page_5.py"), icon=":material/settings:")
page6 = st.Page("page_6_slow_page.py", title="slow page")


def page_7():
    st.header("Page 7")
    x = st.slider("y")
    st.write(f"y is {x}")


def page_8():
    st.header("Page 8")


def page_9():
    st.header("Page 9")


def page_10():
    st.header("Page 10")

    @st.fragment
    def get_input():
        st.text_input("Some input")
        if st.button("Submit"):
            st.rerun()

    get_input()


def page_14():
    time.sleep(0.5)
    st.number_input("mynum", value=1, key="mynum")

    @st.fragment
    def fragment_number_input():
        st.number_input("mynum 2", value=1, key="mynum2")

    fragment_number_input()


page7 = st.Page(page_7, default=set_default)
page8 = st.Page(page_8, url_path="my_url_path")
page9 = st.Page(page_9)
page10 = st.Page(page_10)
page11 = st.Page(page_8, title="page 11", url_path="page_11")
page12 = st.Page(page_9, title="page 12", url_path="page_12")
page13 = st.Page(page_8, title="page 13", url_path="page_13")
page14 = st.Page(page_14, title="page 14")

hide_sidebar = st.checkbox("Hide sidebar")
dynamic_nav = st.checkbox("Change navigation dynamically")
expanded = st.checkbox("Expand navigation")
pg = st.navigation(
    (
        [page2, page3, page5, page9]
        if dynamic_nav
        else {
            "Section 1": [page2, page3],
            "Section 2": [page4, page5],
            "Section 3": [page6],
            "Section 4": [page7, page8, page9],
            "Section 5": [page10, page11, page12],
            "Section 6": [page13, page14],
        }
    ),
    position="hidden" if hide_sidebar else "sidebar",
    expanded=expanded,
)

if st.button("page 5"):
    st.switch_page("page_5.py")

if st.button("page 9"):
    st.switch_page(page9)

if st.checkbox("Show sidebar elements"):
    st.sidebar.write("Sidebar content")

pg.run()

st.page_link("page_5.py", label="page 5 page link")

st.page_link(page9, label="page 9 page link")

st.write("End of Script")


================================================
File: /e2e_playwright/multipage_apps_v2/mpa_v2_basics_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from __future__ import annotations

import pytest
from playwright.sync_api import Page, expect

from e2e_playwright.conftest import (
    ImageCompareFunction,
    wait_for_app_loaded,
    wait_for_app_run,
)
from e2e_playwright.shared.app_utils import (
    click_button,
    click_checkbox,
    get_element_by_key,
)


def main_heading(app: Page):
    return app.get_by_test_id("stHeading").nth(0)


def page_heading(app: Page):
    return app.get_by_test_id("stHeading").nth(1)


def check_field(
    app: Page, *, hide_sidebarnav=False, dynamic_pages=False, add_sidebar_elements=False
):
    if hide_sidebarnav:
        click_checkbox(app, "Hide sidebar")

    if dynamic_pages:
        click_checkbox(app, "Change navigation dynamically")

    if add_sidebar_elements:
        click_checkbox(app, "Show sidebar elements")


expected_page_order = [
    "page 2",
    "Different Title",
    "page 4",
    "page 5",
    "slow page",
    "page 7",
    "page 8",
    "page 9",
    "page 10",
    "page 11",
    "page 12",
    "page 13",
    "page 14",
]


def get_page_link(
    app: Page, page_name: str, page_order: list[str] = expected_page_order
):
    return (
        app.get_by_test_id("stSidebarNav").locator("a").nth(page_order.index(page_name))
    )


def expect_page_order(app: Page, page_order: list[str] = expected_page_order):
    """Test that the page order is correct"""
    nav = app.get_by_test_id("stSidebarNav")
    for i, title in enumerate(page_order):
        expect(nav.locator("a").nth(i)).to_contain_text(title)


def test_loads_main_script_on_initial_page_load(app: Page):
    """Test that the main script is loaded on initial page load."""
    expect(main_heading(app)).to_contain_text("Main Page")


def test_renders_sidebar_nav_correctly(
    themed_app: Page, assert_snapshot: ImageCompareFunction
):
    """Test that the sidebar nav is rendered correctly."""
    assert_snapshot(themed_app.get_by_test_id("stSidebarNav"), name="mpa-sidebar_nav")


def test_can_switch_between_pages_by_clicking_on_sidebar_links(app: Page):
    """Test that we can switch between pages by clicking on sidebar links."""
    get_page_link(app, "Different Title").click()
    wait_for_app_run(app)
    expect(page_heading(app)).to_contain_text("Page 3")


@pytest.mark.performance
def test_switching_pages_performance(app: Page):
    """Test that we can switch between pages by clicking on sidebar links."""
    get_page_link(app, "Different Title").click()
    wait_for_app_run(app)
    expect(page_heading(app)).to_contain_text("Page 3")


def test_main_script_persists_across_page_changes(app: Page):
    """Test that we can switch between pages and content from main script persists."""
    get_page_link(app, "Different Title").click()
    wait_for_app_run(app)
    expect(main_heading(app)).to_contain_text("Main Page")


def test_main_script_widgets_persist_across_page_changes(app: Page):
    """Test that we can switch between pages and widgets from main script persists."""
    slider = app.locator('.stSlider [role="slider"]')
    slider.click()
    slider.press("ArrowRight")
    wait_for_app_run(app, wait_delay=500)

    get_page_link(app, "page 5").click()
    wait_for_app_run(app)
    expect(app.get_by_test_id("stMarkdown").nth(0)).to_contain_text("x is 1")


def test_supports_navigating_to_page_directly_via_url(app: Page, app_port: int):
    """Test that we can navigate to a page directly via URL."""
    app.goto(f"http://localhost:{app_port}/page_5")
    wait_for_app_loaded(app)

    expect(page_heading(app)).to_contain_text("Page 5")


def test_supports_navigating_to_page_directly_via_url_path(app: Page, app_port: int):
    """Test that we can navigate to a page directly via URL. using the url_path."""
    app.goto(f"http://localhost:{app_port}/my_url_path")
    wait_for_app_loaded(app)
    expect(app).to_have_url(f"http://localhost:{app_port}/my_url_path")
    expect(page_heading(app)).to_contain_text("Page 8")


def test_can_switch_between_pages_and_edit_widgets(app: Page):
    """Test that we can switch between pages and page widgets do not persist."""
    get_page_link(app, "Different Title").click()
    wait_for_app_run(app, wait_delay=1000)

    slider = app.locator('.stSlider [role="slider"]').nth(1)
    slider.click()
    slider.press("ArrowRight")
    wait_for_app_run(app)
    expect(app.get_by_test_id("stMarkdown").nth(1)).to_contain_text("x is 1")

    get_page_link(app, "page 2").click()
    wait_for_app_run(app, wait_delay=1000)

    get_page_link(app, "Different Title").click()
    wait_for_app_run(app, wait_delay=1000)

    expect(app.get_by_test_id("stMarkdown").nth(1)).to_contain_text("x is 0")


def test_titles_are_set_correctly(app: Page):
    """Test that page titles work as expected"""
    expect_page_order(app)


def test_dynamic_pages(themed_app: Page, assert_snapshot: ImageCompareFunction):
    """Test that dynamic pages are defined"""
    check_field(themed_app, dynamic_pages=True)
    wait_for_app_run(themed_app)

    nav = themed_app.get_by_test_id("stSidebarNav")
    expect_page_order(themed_app, ["page 2", "Different Title", "page 5", "page 9"])

    assert_snapshot(nav, name="dynamic-pages")


def test_show_not_found_dialog(app: Page, app_port: int):
    """Test that we show a not found dialog if the page doesn't exist."""
    app.goto(f"http://localhost:{app_port}/not_a_page")
    wait_for_app_loaded(app)

    expect(app.locator('[role="dialog"]')).to_contain_text("Page not found")


def test_handles_expand_collapse_of_mpa_nav_correctly(
    themed_app: Page, assert_snapshot: ImageCompareFunction
):
    """Test that we handle expand/collapse of MPA nav correctly."""

    check_field(themed_app, add_sidebar_elements=True)
    wait_for_app_run(themed_app)

    view_button = themed_app.get_by_test_id("stSidebarNavViewButton")

    expect(view_button).to_be_visible()

    # Expand the nav
    view_button.click(force=True)
    expect(view_button).to_have_text("View less")
    # move the mouse out of the way to avoid hover effects
    themed_app.mouse.move(0, 0)
    assert_snapshot(
        themed_app.get_by_test_id("stSidebarNav"), name="mpa-sidebar_nav_expanded"
    )

    # Collapse the nav
    view_button.click(force=True)
    expect(view_button).to_have_text("View 3 more")
    # move the mouse out of the way to avoid hover effects
    themed_app.mouse.move(0, 0)
    assert_snapshot(
        themed_app.get_by_test_id("stSidebarNav"), name="mpa-sidebar_nav_collapsed"
    )

    # Expand the nav again
    view_button.click(force=True)
    expect(view_button).to_have_text("View less")
    # move the mouse out of the way to avoid hover effects
    themed_app.mouse.move(0, 0)
    assert_snapshot(
        themed_app.get_by_test_id("stSidebarNav"), name="mpa-sidebar_nav_expanded"
    )


def test_handles_expanded_navigation_parameter_correctly(app: Page):
    """Test that we handle expanded param of st.navigation nav correctly."""

    click_checkbox(app, "Show sidebar elements")
    wait_for_app_run(app)

    # By default, the navigation is collapsed
    view_button = app.get_by_test_id("stSidebarNavViewButton")
    expect(view_button).to_be_visible()

    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(10)

    # Forced expansion removes the View less button and shows all links
    click_checkbox(app, "Expand navigation")
    wait_for_app_run(app)

    view_button = app.get_by_test_id("stSidebarNavViewButton")

    expect(view_button).not_to_be_visible()
    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(13)

    # Removing forced expansion shows the View less button but remains expanded
    click_checkbox(app, "Expand navigation")
    wait_for_app_run(app)
    view_button = app.get_by_test_id("stSidebarNavViewButton")

    expect(view_button).to_be_visible()
    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(13)


def test_preserves_navigation_expansion_user_preference(app: Page, app_port: int):
    """Test that the navigation expansion state is preserved across page changes."""
    click_checkbox(app, "Show sidebar elements")
    wait_for_app_run(app)

    # verify the default setting is collapsed
    view_more_button = app.get_by_test_id("stSidebarNavViewButton")
    expect(view_more_button).to_be_visible()
    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(10)

    # User clicks View more which preserves the setting
    view_more_button.click()

    # Verify navigation is expanded
    view_less_button = app.get_by_test_id("stSidebarNavViewButton")
    expect(view_less_button).to_have_text("View less")
    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(13)

    # Reload the page and ensure elements are in the sidebar
    app.goto(f"http://localhost:{app_port}")
    wait_for_app_loaded(app)

    click_checkbox(app, "Show sidebar elements")
    wait_for_app_run(app)

    # Verify navigation remains expanded
    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(13)
    view_less_button = app.get_by_test_id("stSidebarNavViewButton")
    expect(view_less_button).to_have_text("View less")

    # Undo the setting (eliminating the preference)
    view_less_button.click()

    # Verify navigation is collapsed
    view_less_button = app.get_by_test_id("stSidebarNavViewButton")
    expect(view_less_button).to_have_text("View 3 more")
    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(10)

    # Reload the page and ensure elements are in the sidebar
    app.goto(f"http://localhost:{app_port}")
    wait_for_app_loaded(app)

    click_checkbox(app, "Show sidebar elements")
    wait_for_app_run(app)

    links = app.get_by_test_id("stSidebarNav").locator("a")
    expect(links).to_have_count(10)
    expect(app.get_by_test_id("stSidebarNavViewButton")).to_have_text("View 3 more")


def test_switch_page_by_path(app: Page):
    """Test that we can switch between pages by triggering st.switch_page with a path."""

    click_button(app, "page 5")

    expect(page_heading(app)).to_contain_text("Page 5")


def test_switch_page_by_st_page(app: Page):
    """Test that we can switch between pages by triggering st.switch_page with st.Page."""

    click_button(app, "page 9")

    expect(page_heading(app)).to_contain_text("Page 9")


def test_removes_query_params_with_st_switch_page(app: Page, app_port: int):
    """Test that query params are removed when navigating via st.switch_page"""

    # Start at main page with query params
    app.goto(f"http://localhost:{app_port}/?foo=bar")
    wait_for_app_loaded(app)
    expect(app).to_have_url(f"http://localhost:{app_port}/?foo=bar")

    # Trigger st.switch_page
    click_button(app, "page 5")

    # Check that query params don't persist
    expect(app).to_have_url(f"http://localhost:{app_port}/page_5")


def test_removes_query_params_when_clicking_link(app: Page, app_port: int):
    """Test that query params are removed when swapping pages by clicking on a link"""

    app.goto(f"http://localhost:{app_port}/page_7?foo=bar")
    wait_for_app_loaded(app)
    expect(app).to_have_url(f"http://localhost:{app_port}/page_7?foo=bar")

    get_page_link(app, "page 4").click()
    wait_for_app_loaded(app)
    expect(app).to_have_url(f"http://localhost:{app_port}/page_4")


def test_removes_non_embed_query_params_when_swapping_pages(app: Page, app_port: int):
    """Test that non-embed query params are removed when swapping pages"""

    app.goto(
        f"http://localhost:{app_port}/page_7?foo=bar&embed=True&embed_options=show_toolbar&embed_options=show_colored_line"
    )
    wait_for_app_loaded(app)
    expect(app).to_have_url(
        f"http://localhost:{app_port}/page_7?foo=bar&embed=True&embed_options=show_toolbar&embed_options=show_colored_line"
    )

    get_page_link(app, "page 4").click()
    wait_for_app_loaded(app)

    expect(app).to_have_url(
        f"http://localhost:{app_port}/page_4?embed=true&embed_options=show_toolbar&embed_options=show_colored_line"
    )


def test_renders_logos(app: Page, assert_snapshot: ImageCompareFunction):
    """Test that logos display properly in sidebar and main sections"""

    # Go to logo page & wait short moment for logo to appear
    get_page_link(app, "page 8").click()
    wait_for_app_loaded(app)

    # Sidebar logo
    expect(app.get_by_test_id("stSidebarHeader").locator("a")).to_have_attribute(
        "href", "https://www.example.com"
    )
    assert_snapshot(app.get_by_test_id("stSidebar"), name="sidebar-logo")

    # Collapse the sidebar
    app.get_by_test_id("stSidebarContent").hover()
    app.get_by_test_id("stSidebarCollapseButton").locator("button").click()
    app.wait_for_timeout(500)

    # Collapsed logo
    expect(
        app.get_by_test_id("stSidebarCollapsedControl").locator("a")
    ).to_have_attribute("href", "https://www.example.com")
    assert_snapshot(
        app.get_by_test_id("stSidebarCollapsedControl"), name="collapsed-logo"
    )


def test_page_link_with_path(app: Page):
    """Test st.page_link works with a path"""

    app.get_by_test_id("stPageLink-NavLink").filter(has_text="page 5 page link").click()
    wait_for_app_loaded(app)

    expect(page_heading(app)).to_contain_text("Page 5")


def test_page_link_with_st_file(app: Page):
    """Test st.page_link works with a st.Page"""

    app.get_by_test_id("stPageLink-NavLink").filter(has_text="page 9 page link").click()
    wait_for_app_loaded(app)

    expect(page_heading(app)).to_contain_text("Page 9")


def test_hidden_navigation(app: Page):
    """Test position=hidden hides the navigation"""

    expect(app.get_by_test_id("stSidebarNav")).to_be_visible()
    check_field(app, add_sidebar_elements=True)
    wait_for_app_run(app)

    check_field(app, hide_sidebarnav=True)
    wait_for_app_run(app)

    nav_exists = app.get_by_test_id("stSidebarNav")
    expect(nav_exists).not_to_be_attached()


def test_set_default_navigation(app: Page, app_port: int):
    """Test the default page set will be shown on initial load"""

    expect(page_heading(app)).to_contain_text("Page 2")
    wait_for_app_run(app)

    app.goto(f"http://localhost:{app_port}/?default=True")
    wait_for_app_loaded(app)

    expect(page_heading(app)).to_contain_text("Page 7")


def test_page_url_path_appears_in_url(app: Page, app_port: int):
    """Test that st.Page's url_path is included in the URL"""
    link = get_page_link(app, "page 8")

    expect(link).to_have_attribute("href", f"http://localhost:{app_port}/my_url_path")
    link.click()
    wait_for_app_loaded(app)
    expect(app).to_have_url(f"http://localhost:{app_port}/my_url_path")


def test_widgets_maintain_state_in_fragment(app: Page):
    """Test that widgets maintain state in a fragment"""
    get_page_link(app, "page 10").click()

    input = app.get_by_test_id("stTextInput").locator("input").first
    input.fill("Hello")
    input.blur()
    wait_for_app_run(app)

    expect(input).to_have_value("Hello")


def test_widget_state_reset_on_page_switch(app: Page):
    # Regression test for GH issue 7338 for MPAv2

    slider = app.locator('.stSlider [role="slider"]')
    slider.click()
    slider.press("ArrowRight")
    wait_for_app_run(app, wait_delay=500)
    expect(app.get_by_text("x is 1")).to_be_attached()

    get_page_link(app, "slow page").click()

    # Wait for the view container and main menu to appear (like in wait_for_app_loaded),
    # but don't wait for the script to finish running.
    app.wait_for_selector(
        "[data-testid='stAppViewContainer']", timeout=30000, state="attached"
    )
    app.wait_for_selector("[data-testid='stMainMenu']", timeout=20000, state="attached")

    # Back to page 2
    get_page_link(app, "page 2").click()
    wait_for_app_run(app, wait_delay=500)

    # Slider reset
    expect(app.get_by_text("x is 1")).to_be_attached()


def test_rapid_fire_interaction(app: Page):
    """Check that the number input can handle rapid fire clicks in an Multipage app."""
    get_page_link(app, "page 14").click()

    number_input = get_element_by_key(app, "mynum")
    step_up_btn = number_input.get_by_test_id("stNumberInputStepUp")

    # we need to have the clicking last a long enough time
    for _ in range(30):
        step_up_btn.click()

    wait_for_app_run(app)

    expect(number_input.locator("input")).to_have_value("31")


def test_rapid_fire_interaction_in_fragment(app: Page):
    """Check that the number input in a fragment can handle rapid fire clicks in an Multipage app."""
    get_page_link(app, "page 14").click()

    number_input = get_element_by_key(app, "mynum2")
    step_up_btn = number_input.get_by_test_id("stNumberInputStepUp")

    # we need to have the clicking last a long enough time
    for _ in range(30):
        step_up_btn.click()

    wait_for_app_run(app)

    expect(number_input.locator("input")).to_have_value("31")


@pytest.mark.performance
def test_sidebar_interaction_performance(app: Page):
    """
    Test the performance of the sidebar interaction.
    As of writing, there is a re-rendering issue in the Sidebar where every
    option is re-rendered in the sidebar when something is hovered. This
    performance test gives us a way to measure performance improvements.
    """
    sidebar = app.get_by_test_id("stSidebar")
    options = sidebar.locator("li")
    for option in options.all():
        option.hover()


================================================
File: /e2e_playwright/multipage_apps_v2/mpa_v2_initial_load.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

page = st.navigation([st.Page("page_5.py")])
page.run()


================================================
File: /e2e_playwright/multipage_apps_v2/mpa_v2_initial_load_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import wait_for_app_run


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# PLEASE DO NOT ADD MORE TESTS TO THIS FILE
# This test relies on the fact the server is not aware of MPAv2 until the first
# run of the app. Adding more tests to this file will break this assumption.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
def test_widget_does_not_trigger_callbacks(app: Page):
    """Tests the widget state does not trigger callbacks"""
    expect(app.get_by_text("test_value: False")).to_be_attached()

    app.get_by_text("Checkbox 2").click()
    wait_for_app_run(app)
    expect(app.get_by_text("test_value: False")).to_be_attached()

    app.get_by_text("Checkbox 1").click()
    wait_for_app_run(app)
    expect(app.get_by_text("test_value: True")).to_be_attached()


================================================
File: /e2e_playwright/multipage_apps_v2/mpa_v2_title.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st


def a():
    st.header("Page A")
    st.write("This is page A")


def b():
    st.header("Page B")
    st.write("This is page B")


page = st.navigation([st.Page(a), st.Page(b, title="1_page__2")])
page.run()


================================================
File: /e2e_playwright/multipage_apps_v2/mpa_v2_title_test.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from __future__ import annotations

from playwright.sync_api import Page, expect

from e2e_playwright.conftest import (
    wait_for_app_run,
)

expected_page_order = ["a", "1_page__2"]


def get_page_link(
    app: Page, page_name: str, page_order: list[str] = expected_page_order
):
    return (
        app.get_by_test_id("stSidebarNav").locator("a").nth(page_order.index(page_name))
    )


def test_can_switch_between_pages_by_clicking_on_sidebar_links(app: Page):
    """Test that we can switch between pages by clicking on sidebar links."""
    nav = app.get_by_test_id("stSidebarNav")
    for i, title in enumerate(expected_page_order):
        expect(nav.locator("a").nth(i)).to_contain_text(title)

    get_page_link(app, "1_page__2").click()
    wait_for_app_run(app)
    expect(app).to_have_title("1_page__2")


================================================
File: /e2e_playwright/multipage_apps_v2/page_2.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.subheader("Page 2")

page_6 = st.button("page_6")
if page_6:
    st.switch_page("page_6.py")

if st.button("Throw exception"):
    raise Exception("This is a test exception")


================================================
File: /e2e_playwright/multipage_apps_v2/page_3.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.subheader("Page 3")
x = st.slider("x")
st.markdown(f"x is {x}")


================================================
File: /e2e_playwright/multipage_apps_v2/page_5.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.header("Page 5")

if "test_value" not in st.session_state:
    st.session_state.test_value = False


def handle_change():
    st.session_state.test_value = True


st.checkbox("Checkbox 1", on_change=handle_change)
st.checkbox("Checkbox 2")

st.write("test_value: ", st.session_state.test_value)


================================================
File: /e2e_playwright/multipage_apps_v2/page_6_slow_page.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time

import streamlit as st

st.header("Page 6")

with st.sidebar:
    st.write("Sidebar")
    color = st.color_picker("Pick a color")
    st.write("You picked:", color)
    st.divider()
    st.text_area("Some random text:", height=500)

# add a sleep timer to simulate a slow loading page. This allows us for example
# to simulate navigating away from a partially loaded page
time.sleep(5)
st.write("Finished sleeping for 5 seconds.")


================================================
File: /e2e_playwright/multipage_apps_v2/ðŸ¦’_page_4.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st

st.header("Page 4")

with st.sidebar:
    st.page_link("page_2.py", label="Page 2", icon=":material/article:")
    st.page_link("page_3.py", label="Page 3", icon="ðŸ“ˆ")


================================================
File: /e2e_playwright/shared/__init__.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


================================================
File: /e2e_playwright/shared/app_utils.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

import platform
import re
from typing import Literal, Pattern

from playwright.sync_api import Frame, Locator, Page, expect

from e2e_playwright.conftest import wait_for_app_run

# Meta = Apple's Command Key; for complete list see https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values#special_values
COMMAND_KEY = "Meta" if platform.system() == "Darwin" else "Control"


def get_checkbox(locator: Locator | Page, label: str | Pattern[str]) -> Locator:
    """Get a checkbox widget with the given label.

    Parameters
    ----------

    locator : Locator
        The locator to search for the element.

    label : str or Pattern[str]
        The label of the element to get.

    Returns
    -------
    Locator
        The element.
    """
    element = locator.get_by_test_id("stCheckbox").filter(has_text=label)
    expect(element).to_be_visible()
    return element


def get_radio_button(locator: Locator | Page, label: str | Pattern[str]) -> Locator:
    """Get a radio button widget with the given label.

    Parameters
    ----------

    locator : Locator
        The locator to search for the 'radio' element.

    label : str or Pattern[str]
        The label of the radio element to get.

    Returns
    -------
    Locator
        The element.
    """
    element = locator.locator('[data-baseweb="radio"]').filter(has_text=label)
    expect(element).to_be_visible()
    return element


def get_image(locator: Locator | Page, caption: str | Pattern[str]) -> Locator:
    """Get an image element with the given caption.

    Parameters
    ----------

    locator : Locator or Page
        The locator to search for the element.

    caption : str or Pattern[str]
        The caption of the image element to get.

    Returns
    -------
    Locator
        The element.
    """
    element = locator.get_by_test_id("stImage").filter(
        has=locator.get_by_test_id("stImageCaption").filter(has_text=caption)
    )
    expect(element).to_be_visible()

    return element


def get_button(locator: Locator | Page, label: str | Pattern[str]) -> Locator:
    """Get a button widget with the given label.

    Parameters
    ----------

    locator : Locator
        The locator to search for the element.

    label : str or Pattern[str]
        The label of the element to get.

    Returns
    -------
    Locator
        The element.
    """
    element = (
        locator.get_by_test_id("stButton").filter(has_text=label).locator("button")
    )
    expect(element).to_be_visible()
    return element


def get_form_submit_button(
    locator: Locator | Page, label: str | Pattern[str]
) -> Locator:
    """Get a form submit button with the given label.

    Parameters
    ----------

    locator : Locator
        The locator to search for the element.

    label : str or Pattern[str]
        The label of the element to get.

    Returns
    -------
    Locator
        The element.
    """
    element = (
        locator.get_by_test_id("stFormSubmitButton")
        .filter(has_text=label)
        .locator("button")
    )
    expect(element).to_be_visible()
    return element


def get_expander(locator: Locator | Page, label: str | Pattern[str]) -> Locator:
    """Get a expander container with the given label.

    Parameters
    ----------

    locator : Locator
        The locator to search for the expander.

    label : str or Pattern[str]
        The label of the expander to get.

    Returns
    -------
    Locator
        The expander container.
    """
    element = locator.get_by_test_id("stExpander").filter(
        has=locator.locator("summary").filter(has_text=label)
    )
    expect(element).to_be_visible()
    return element


def get_markdown(
    locator: Locator | Page, text_inside_markdown: str | Pattern[str]
) -> Locator:
    """Get a markdown element with the given text inside.

    Parameters
    ----------

    locator : Locator
        The locator to search for the expander.

    text_inside_markdown : str or Pattern[str]
        Some text to use to identify the markdown element. The text should be contained
        in the markdown content.

    Returns
    -------
    Locator
        The expander content.
    """
    if isinstance(text_inside_markdown, str):
        text_inside_markdown = re.compile(text_inside_markdown)

    markdown_element = locator.get_by_test_id("stMarkdownContainer").filter(
        has_text=text_inside_markdown
    )
    expect(markdown_element).to_be_visible()
    return markdown_element


def expect_prefixed_markdown(
    locator: Locator | Page,
    expected_prefix: str,
    expected_markdown: str | Pattern[str],
    exact_match: bool = False,
) -> None:
    """Find the markdown with the prefix and then ensure that the
    `expected_markdown` is in the text as well.

    Splitting it into a `filter` and a `to_have_text` check has the advantage
    that we see the diff in case of a mismatch; this would not be the case if we
    just used the `filter`.

    Only one markdown-element must be returned, otherwise an error is thrown.

    Parameters
    ----------
    locator : Locator
        The locator to search for the markdown element.

    expected_prefix : str
        The prefix of the markdown element.

    expected_markdown : str or Pattern[str]
        The markdown content that should be found. If a pattern is provided,
        the text will be matched against this pattern.

    exact_match : bool, optional
        Whether the markdown should exactly match the `expected_markdown`, by default True.
        Otherwise, the `expected_markdown` must be contained in the markdown content.

    """
    selection_text = locator.get_by_test_id("stMarkdownContainer").filter(
        has_text=expected_prefix
    )
    if exact_match:
        text_to_match: str | Pattern[str]
        if isinstance(expected_markdown, Pattern):
            # Recompile the pattern with the prefix:
            text_to_match = re.compile(f"{expected_prefix} {expected_markdown.pattern}")
        else:
            text_to_match = f"{expected_prefix} {expected_markdown}"

        expect(selection_text).to_have_text(text_to_match)
    else:
        expect(selection_text).to_contain_text(expected_markdown)


def expect_markdown(
    locator: Locator | Page,
    expected_message: str | Pattern[str],
) -> None:
    """Expect markdown with the given message to be displayed in the app.

    Parameters
    ----------

    locator : Locator
        The locator to search for the exception element.

    expected_markdown : str or Pattern[str]
        The expected message to be displayed in the exception.
    """
    markdown_el = (
        locator.get_by_test_id("stMarkdown")
        .get_by_test_id("stMarkdownContainer")
        .filter(has_text=expected_message)
    )
    expect(markdown_el).to_be_visible()


def expect_exception(
    locator: Locator | Page,
    expected_message: str | Pattern[str] | None = None,
) -> None:
    """Expect an exception to be displayed in the app.

    Parameters
    ----------

    locator : Locator
        The locator to search for the exception element.

    expected_message : str or Pattern[str] or None
        The expected message to be displayed in the exception.
    """

    if expected_message is None:
        exception_el = locator.get_by_test_id("stException")
    else:
        exception_el = locator.get_by_test_id("stException").filter(
            has_text=expected_message
        )
    expect(exception_el).to_be_visible()


def expect_no_exception(locator: Locator | Page):
    exception_el = locator.get_by_test_id("stException")
    expect(exception_el).not_to_be_attached()


def expect_warning(
    locator: Locator | Page,
    expected_message: str | Pattern[str],
) -> None:
    """Expect a warning to be displayed in the app.

    Parameters
    ----------

    locator : Locator
        The locator to search for the warning element.

    expected_message : str or Pattern[str]
        The expected message to be displayed in the warning.
    """
    warning_el = locator.get_by_test_id("stAlert").filter(has_text=expected_message)
    expect(warning_el).to_be_visible()


def click_checkbox(
    page: Page,
    label: str | Pattern[str],
) -> None:
    """Click a checkbox with the given label
    and wait for the app to run.

    Parameters
    ----------

    page : Page
        The page to click the button on.

    label : str or Pattern[str]
        The label of the button to click.
    """
    checkbox_element = get_checkbox(page, label)
    #  Click the checkbox label to be more reliable
    checkbox_element.locator("label").click()
    wait_for_app_run(page)


def click_toggle(
    page: Page,
    label: str | Pattern[str],
) -> None:
    """Click a toggle with the given label
    and wait for the app to run.

    Parameters
    ----------

    page : Page
        The page to click the toggle on.

    label : str or Pattern[str]
        The label of the toggle to click.
    """
    click_checkbox(page, label)


def click_radio_button(page: Page, label: str | Pattern[str]) -> None:
    """Click a radio button with the given label
    and wait for the app to run.

    Parameters
    ----------

    page : Page
        The page to click the radio button on.

    label : str or Pattern[str]
        The label of the radio button to click.
    """
    radio_button = get_radio_button(page, label)
    radio_button.click()
    wait_for_app_run(page)


def click_button(
    page: Page,
    label: str | Pattern[str],
) -> None:
    """Click a button with the given label
    and wait for the app to run.

    Parameters
    ----------

    page : Page
        The page to click the button on.

    label : str or Pattern[str]
        The label of the button to click.
    """
    button_element = get_button(page, label)
    button_element.click()
    wait_for_app_run(page)


def click_form_button(
    page: Page,
    label: str | Pattern[str],
) -> None:
    """Click a form submit button with the given label
    and wait for the app to run.

    Parameters
    ----------

    page : Page
        The page to click the button on.

    label : str or Pattern[str]
        The label of the button to click.
    """
    button_element = get_form_submit_button(page, label)
    button_element.click()
    wait_for_app_run(page)


def expect_help_tooltip(
    app: Locator | Page,
    element_with_help_tooltip: Locator,
    tooltip_text: str | Pattern[str],
):
    """Expect a tooltip to be displayed when hovering over the help symbol of an element.

    This only works for elements that have our shared help tooltip implemented.
    It doesn't work for elements with a custom tooltip implementation, e.g. st.button.

    The element gets unhovered after the tooltip is checked.

    Parameters
    ----------
    app : Page
        The page to search for the tooltip.

    element_with_help_tooltip : Locator
        The locator of the element with the help tooltip.

    tooltip_text : str or Pattern[str]
        The text of the tooltip to expect.
    """
    hover_target = element_with_help_tooltip.get_by_test_id("stTooltipHoverTarget")
    expect(hover_target).to_be_visible()

    tooltip_content = app.get_by_test_id("stTooltipContent")
    expect(tooltip_content).not_to_be_attached()

    hover_target.hover()

    expect(tooltip_content).to_be_visible()
    expect(tooltip_content).to_have_text(tooltip_text)

    # reset the hovering in case this method is called multiple times in the same test
    app.get_by_test_id("stApp").hover(
        position={"x": 0, "y": 0}, no_wait_after=True, force=True
    )
    expect(tooltip_content).not_to_be_attached()


def expect_script_state(
    page: Page,
    state: Literal[
        "initial",
        "running",
        "notRunning",
        "rerunRequested",
        "stopRequested",
        "compilationError",
    ],
) -> None:
    """Expect the app to be in a specific script state.

    Parameters
    ----------
    page : Page
        The page to search for the script state.

    state :
        The expected script state.
    """
    page.wait_for_selector(
        f"[data-testid='stApp'][data-test-script-state='{state}']",
        timeout=10000,
        state="attached",
    )


def get_element_by_key(locator: Locator | Page, key: str) -> Locator:
    """Get an element with the given user-defined key.

    Parameters
    ----------

    locator : Locator
        The locator to search for the element.

    key : str
        The user-defined key of the element

    Returns
    -------
    Locator
        The element.

    """
    class_name = re.sub(r"[^a-zA-Z0-9_-]", "-", key.strip())
    class_name = f"st-key-{class_name}"
    return locator.locator(f".{class_name}")


def expand_sidebar(app: Page) -> Locator:
    """Expands the sidebar.

    Returns
    -------
    Locator
        The sidebar element.
    """
    app.get_by_test_id("stSidebarCollapsedControl").click()
    sidebar = app.get_by_test_id("stSidebar")
    expect(sidebar).to_be_visible()
    return sidebar


def check_top_level_class(app: Page, test_id: str) -> None:
    """Check that the top level class is correctly set.

    It should be the same as the test id of the element
    and set on the same component.

    Parameters
    ----------
    app : Page
        The page to search for the element.

    test_id : str
        The test id of the element to check.
    """
    expect(app.get_by_test_id(test_id).first).to_have_class(re.compile(test_id))


def register_connection_status_observer(page_or_frame: Page | Frame | None) -> None:
    if page_or_frame is None:
        return None

    return page_or_frame.evaluate("""async () => {
        window.streamlitPlaywrightDebugConnectionStatuses = [];
        const callback = (mutationList, observer) => {
            if (!mutationList || mutationList.length === 0) {
                return
            }
            const target = mutationList[0].target
            if (!target) {
                return
            }
            let state = target
                            .getAttribute('data-test-connection-state')
                            .toUpperCase();
            window.streamlitPlaywrightDebugConnectionStatuses.push(state);
        }
        const observer = new MutationObserver(callback);
        // Observe app status for changes
        const targetNode = document.querySelector('[data-testid=stApp]')
        if (!targetNode) {
            console.log("stApp not found")
            return
        }
        const config = {
            childList: false,
            subtree: false,
            attributeFilter: ['data-test-connection-state']
        };
        observer.observe(targetNode, config);
    }""")


def get_observed_connection_statuses(page_or_frame: Page | Frame | None) -> list[str]:
    if page_or_frame is None:
        return []

    return page_or_frame.evaluate(
        "() => window.streamlitPlaywrightDebugConnectionStatuses"
    )


def expect_connection_status(
    page_or_frame: Page | Frame | None, expected_status: str, callable_action: str
) -> None:
    """Wait for the expected_status to appear in the app's connection-state attribute.

    Uses the browser's MutationObserver API to observe changes to the DOM. This way,
    we will never have a race condition between calling disconnect and checking the
    status.
    If the status is not observed within 1 second, the promise will resolved with an
    error message. We don't use reject because on Firefox this seem to cause an
    undefined error which is not as precise as our error message.
    Otherwise, the promise is resolved with the status.

    The resolved status will be uppercased.
    """

    if page_or_frame is None:
        return None

    status = page_or_frame.evaluate(
        """async ([expectedStatus]) => {
                // the first call to resolve will be the one returned to the caller
                // so its either the observed status or the timeout. Subsequent
                // calls are no-ops.
                const p = new Promise((resolve) => {
                    // Define a timeoutId so that we can cancel the timeout in the
                    // callback upon success
                    let timeoutId = null
                    let resolved = false
                    const callback = (mutationList, observer) => {
                        if (!mutationList || mutationList.length === 0) {
                            return
                        }
                        const target = mutationList[0].target
                        if (!target) {
                            return
                        }
                        let state = target
                                        .getAttribute('data-test-connection-state')
                                        .toUpperCase();
                        if (state.indexOf(expectedStatus.toUpperCase()) > -1) {
                            resolved = true
                            if (timeoutId) clearTimeout(timeoutId)
                            if (observer) observer.disconnect()
                            resolve(state)
                        }
                    }
                    const observer = new MutationObserver(callback);
                    // Observe app status for changes
                    const targetNode = document.querySelector('[data-testid=stApp]')
                    if (!targetNode) {
                        resolve("stApp not found")
                        return
                    }
                    const config = {
                        childList: false,
                        subtree: false,
                        attributeFilter: ['data-test-connection-state']
                    };
                    observer.observe(targetNode, config);
            """
        + callable_action
        + """
                    if (!resolved) {
                        timeoutId = setTimeout(() => {
                            if (observer) observer.disconnect()
                            resolve(`timeout: did not observe status '${expectedStatus}'`)
                            return
                        }, 1500);
                    }
                })

                const status = await p
                return status
            }
            """,
        [expected_status],
    )
    assert status == expected_status, status


def wait_for_all_images_to_be_loaded(page: Page) -> None:
    # Wait to make sure that the images have been loaded
    page.wait_for_function("""() => {
        const images = Array.from(document.querySelectorAll('img'));
        return images.every(img => img.complete && img.naturalHeight !== 0);
    }
    """)


================================================
File: /e2e_playwright/shared/data_mocks.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from datetime import date, datetime, time, timedelta, timezone
from decimal import Decimal
from typing import NamedTuple

import numpy as np
import pandas as pd
import pyarrow as pa

from streamlit.dataframe_util import DataFormat

np.random.seed(0)
random.seed(0)


class TestCaseMetadata(NamedTuple):
    expected_rows: int
    expected_cols: int
    expected_data_format: DataFormat

    # Tell pytest this is not a TestClass despite having "Test" in the name.
    __test__ = False


SHARED_TEST_CASES = [
    # None:
    (None, TestCaseMetadata(0, 0, DataFormat.EMPTY)),
    # Empty list:
    ([], TestCaseMetadata(0, 0, DataFormat.LIST_OF_VALUES)),
    # Empty tuple:
    ((), TestCaseMetadata(0, 0, DataFormat.TUPLE_OF_VALUES)),
    # Empty dict (not a an empty set!)
    ({}, TestCaseMetadata(0, 0, DataFormat.KEY_VALUE_DICT)),
    # Empty set:
    (set(), TestCaseMetadata(0, 0, DataFormat.SET_OF_VALUES)),
    # Empty numpy array:
    # for unknown reasons, pd.DataFrame initializes empty numpy arrays with a single column
    (np.ndarray(0), TestCaseMetadata(0, 1, DataFormat.NUMPY_LIST)),
    # Empty column value mapping with columns:
    ({"name": [], "type": []}, TestCaseMetadata(0, 2, DataFormat.COLUMN_VALUE_MAPPING)),
    # Empty dataframe:
    (pd.DataFrame(), TestCaseMetadata(0, 0, DataFormat.PANDAS_DATAFRAME)),
    # Empty dataframe with columns:
    (
        pd.DataFrame(
            columns=["name", "type"], index=pd.RangeIndex(start=0, step=1)
        ),  # Explicitly set the range index to have the same behavior across versions
        TestCaseMetadata(0, 2, DataFormat.PANDAS_DATAFRAME),
    ),
    # Pandas DataFrame:
    (
        pd.DataFrame(["st.text_area", "st.markdown"]),
        TestCaseMetadata(2, 1, DataFormat.PANDAS_DATAFRAME),
    ),
    # List of strings (List[str]):
    (
        ["st.text_area", "st.number_input", "st.text_input"],
        TestCaseMetadata(3, 1, DataFormat.LIST_OF_VALUES),
    ),
    # List of integers (List[int]):
    ([1, 2, 3], TestCaseMetadata(3, 1, DataFormat.LIST_OF_VALUES)),
    # List of floats (List[float]):
    ([1.0, 2.0, 3.0], TestCaseMetadata(3, 1, DataFormat.LIST_OF_VALUES)),
    # List of booleans (List[bool]):
    ([True, False, True], TestCaseMetadata(3, 1, DataFormat.LIST_OF_VALUES)),
    # List of Nones (List[None]):
    ([None, None, None], TestCaseMetadata(3, 1, DataFormat.LIST_OF_VALUES)),
    # List of dates (List[date]):
    (
        [date(2020, 1, 1), date(2020, 1, 2), date(2020, 1, 3)],
        TestCaseMetadata(3, 1, DataFormat.LIST_OF_VALUES),
    ),
    # Set of strings (Set[str]):
    # Set does not have a stable order across different Python version.
    # Therefore, we are only testing this with one item.
    (
        {"st.number_input"},
        TestCaseMetadata(1, 1, DataFormat.SET_OF_VALUES),
    ),
    # Tuple of strings (Tuple[str]):
    (
        ("st.text_area", "st.number_input", "st.text_input"),
        TestCaseMetadata(3, 1, DataFormat.TUPLE_OF_VALUES),
    ),
    # Numpy list / 1D numpy array (np.array[str]):
    (
        np.array(["st.text_area", "st.number_input", "st.text_input"]),
        TestCaseMetadata(3, 1, DataFormat.NUMPY_LIST),
    ),
    # np.array[int]:
    (np.array([1, 2, 3]), TestCaseMetadata(3, 1, DataFormat.NUMPY_LIST)),
    # Multi-dimensional numpy array (np.array[List[Scalar]])
    (
        np.array(
            [
                ["st.text_area", "widget"],
                ["st.markdown", "element"],
            ]
        ),
        TestCaseMetadata(2, 2, DataFormat.NUMPY_MATRIX),
    ),
    # np.array[List[str]]:
    (
        np.array([["st.text_area"], ["st.number_input"], ["st.text_input"]]),
        TestCaseMetadata(3, 1, DataFormat.NUMPY_MATRIX),
    ),
    # Pandas Series (pd.Series):
    (
        pd.Series(["st.text_area", "st.number_input", "st.text_input"], name="widgets"),
        TestCaseMetadata(3, 1, DataFormat.PANDAS_SERIES),
    ),
    # Pandas Styler (pd.Styler):
    (
        pd.DataFrame(["st.text_area", "st.markdown"]).style,
        TestCaseMetadata(2, 1, DataFormat.PANDAS_STYLER),
    ),
    # Pandas Index (pd.Index):
    (
        pd.Index(["st.text_area", "st.markdown"]),
        TestCaseMetadata(2, 1, DataFormat.PANDAS_INDEX),
    ),
    # Pyarrow Table (pyarrow.Table):
    (
        pa.Table.from_pandas(pd.DataFrame(["st.text_area", "st.markdown"])),
        TestCaseMetadata(2, 1, DataFormat.PYARROW_TABLE),
    ),
    # List of rows (List[List[Scalar]]):
    (
        [["st.text_area", "widget"], ["st.markdown", "element"]],
        TestCaseMetadata(2, 2, DataFormat.LIST_OF_ROWS),
    ),
    # List of records (List[Dict[str, Scalar]]):
    (
        [
            {"name": "st.text_area", "type": "widget"},
            {"name": "st.markdown", "type": "element"},
        ],
        TestCaseMetadata(2, 2, DataFormat.LIST_OF_RECORDS),
    ),
    # Column-index mapping ({column: {index: value}}):
    (
        {
            "type": {"st.text_area": "widget", "st.markdown": "element"},
            "usage": {"st.text_area": 4.92, "st.markdown": 47.22},
        },
        TestCaseMetadata(2, 2, DataFormat.COLUMN_INDEX_MAPPING),
    ),
    # Column-value mapping ({column: List[values]}}):
    (
        {
            "name": ["st.text_area", "st.markdown"],
            "type": ["widget", "element"],
        },
        TestCaseMetadata(2, 2, DataFormat.COLUMN_VALUE_MAPPING),
    ),
    # Column-series mapping ({column: Series(values)}):
    (
        {
            "name": pd.Series(["st.text_area", "st.markdown"], name="name"),
            "type": pd.Series(["widget", "element"], name="type"),
        },
        TestCaseMetadata(2, 2, DataFormat.COLUMN_SERIES_MAPPING),
    ),
    # Key-value dict ({index: value}):
    (
        {"st.text_area": "widget", "st.markdown": "element"},
        TestCaseMetadata(2, 1, DataFormat.KEY_VALUE_DICT),
    ),
]


def random_date() -> datetime:
    start_date = datetime.fromisoformat("2018-01-31T09:24:31.123+00:00")
    end_date = datetime.fromisoformat("2022-01-31T09:24:31.345+00:00")

    return (
        start_date
        + timedelta(
            # Get a random amount of seconds between `start` and `end`
            seconds=random.randint(0, int((end_date - start_date).total_seconds())),
        )
    ).replace(tzinfo=None)


class TestObject:
    def __str__(self):
        return "TestObject"


BASE_TYPES_DF = pd.DataFrame(
    {
        "string": [
            "a",
            "this is a very long sentence that does not contain any reasonable content.",
            "c",
            "d",
            "",
            None,
        ],
        "bool": [True, False, True, False, True, None],
        "int64": [-5, 0, 1, 2, 3, None],
        "float64": [-0.1, 0, 0.1, 0.001, 1.1, None],
        "datetime": [
            datetime(2020, 1, 1, 0, 0, 0),
            datetime(2020, 1, 1, 0, 0, 1),
            datetime(2020, 1, 1, 0, 0, 2),
            datetime(2020, 1, 1, 0, 0, 3),
            datetime(2020, 1, 1, 0, 0, 4),
            None,
        ],
        "date": [
            date(2020, 1, 1),
            date(2020, 1, 2),
            date(2020, 1, 3),
            date(2020, 1, 4),
            date(2020, 1, 5),
            None,
        ],
        "time": [
            time(0, 0, 0),
            time(0, 0, 1),
            time(0, 0, 2),
            time(0, 0, 3),
            time(0, 0, 4),
            None,
        ],
        "empty": [None, np.nan, pd.NA, pd.NaT, None, None],
    }
)

NUMBER_TYPES_DF = pd.DataFrame(
    {
        "int64": pd.array([-5, 1, 2, 3, 4, None], dtype="Int64"),
        "int32": pd.array([-5, 1, 2, 3, 4, None], dtype="Int32"),
        "int16": pd.array([-5, 1, 2, 3, 4, None], dtype="Int16"),
        "int8": pd.array([-5, 1, 2, 3, 4, None], dtype="Int8"),
        "uint64": pd.array([1, 2, 3, 4, 5, None], dtype="UInt64"),
        "uint32": pd.array([1, 2, 3, 4, 5, None], dtype="UInt32"),
        "uint16": pd.array([1, 2, 3, 4, 5, None], dtype="UInt16"),
        "uint8": pd.array([1, 2, 3, 4, 5, None], dtype="UInt8"),
        "float64": pd.array([-0.1, 0, 0.1, 0.001, 1.1, None], dtype="float64"),
        "float32": pd.array([-0.1, 0, 0.1, 0.001, 1.1, None], dtype="float32"),
        "float16": pd.array([-0.1, 0, 0.1, 0.001, 1.1, None], dtype="float16"),
        "mixed": pd.array([1, -2, 3.1, 4, 5.0, None]),
    }
)

DATETIME_TYPES_DF = pd.DataFrame(
    {
        "datetime": [random_date() for _ in range(8)] + [None],
        "time": [random_date().time() for _ in range(8)] + [None],
        "date": [random_date().date() for _ in range(8)] + [None],
        "mixed_datetime": [
            random.choice(
                [
                    pd.Timestamp(random_date()),
                    np.datetime64("2022-03-11T17:13:00")
                    - np.random.randint(400000, 1500000),
                    pd.to_datetime(10, unit="s"),
                ]
            )
            for _ in range(8)
        ]
        + [None],
        "pd_datetime_TZ": [
            (pd.to_datetime("2022-03-11 17:41:00-05:00")) for _ in range(8)
        ]
        + [None],
        "datetime_UTC_TZ": [
            random_date().replace(tzinfo=timezone.utc) for _ in range(8)
        ]
        + [None],
        # TODO: Mixed timezones within a column will force the column to be of type object
        # It also seems to not work correctly.
        "mixed_timezones": [
            random.choice(
                [
                    random_date().replace(tzinfo=timezone.utc),
                    pd.to_datetime("2022-03-11 17:41:00-05:00"),
                    random_date(),
                ]
            )
            for _ in range(8)
        ]
        + [None],
    }
)

LIST_TYPES_DF = pd.DataFrame(
    {
        "string_list": pd.Series(
            [["a", "b", "c"], ["foo", "bar"], ["lorem"], [], None]
        ),
        "number_set": pd.Series([{1, 2, 3}, {2, 3}, {4}, set(), None]),
        "boolean_tuple": [
            (True, False),
            (False, True, True),
            (True, True),
            (),
            None,
        ],
        "dict_list": [
            [{"foo": random.randint(0, 1000), "bar": "blub"} for _ in range(2)]
            for _ in range(4)
        ]
        + [None],
        "datetime_list": [[random_date() for _ in range(2)] for _ in range(4)] + [None],
    }
)

INTERVAL_TYPES_DF = pd.DataFrame(
    {
        "int64_both": [
            pd.Interval(left=i, right=i + 1, closed="both") for i in range(5)
        ]
        + [None],
        "int64_right": [
            pd.Interval(left=i, right=i + 1, closed="right") for i in range(5)
        ]
        + [None],
        "int64_left": [
            pd.Interval(left=i, right=i + 1, closed="left") for i in range(5)
        ]
        + [None],
        "int64_neither": [
            pd.Interval(left=i, right=i + 1, closed="neither") for i in range(5)
        ]
        + [None],
        "timestamp_right_default": [
            pd.Interval(
                left=pd.Timestamp(2022, 3, 14, i),
                right=pd.Timestamp(2022, 3, 14, i + 1),
            )
            for i in range(5)
        ]
        + [None],
        "float64": [
            pd.Interval(np.random.random(), np.random.random() + 1) for _ in range(5)
        ]
        + [None],
    }
)


_offset_types = ["ms", "s", "min", "h", "D", "M", "Y", "W", "W-FRI", "Q"]

PERIOD_TYPES_DF = pd.DataFrame(
    {
        offset_type: (
            [pd.Period(date, freq=offset_type) for date in ["1970-01-01", "2012-02-14"]]
            + [None]
        )
        for offset_type in _offset_types
    }
)


SPECIAL_TYPES_DF = pd.DataFrame(
    {
        "categorical": pd.Series(["a", "b", "c", "a", None]).astype("category"),
        "decimal": pd.Series(
            [
                Decimal("1.1"),
                Decimal("-0.03864734299516908213"),
                Decimal("1000"),
                Decimal("2.212"),
                None,
            ]
        ),
        "bytes": pd.Series(
            [
                b"a",
                b"b",
                b"foo",
                b"bar",
                None,
            ]
        ),
        "emojis ðŸŒˆ": pd.Series(["Black âš«", "Red ðŸ”´", "White âšª", "Red ðŸ”´", None]),
        "timedelta": pd.Series(
            [
                pd.Timedelta("1 days"),
                np.timedelta64(100, "D"),
                pd.Timedelta("2 hours"),
                timedelta(seconds=5),
                None,
            ]
        ),
    }
)

UNSUPPORTED_TYPES_DF = pd.DataFrame(
    {
        "period[us]": pd.Series(
            [
                pd.Period("1970-01-01", freq="us"),
                pd.Period("2012-02-14", freq="us"),
                pd.Period("2012-02-20T00:12:34.56780", freq="us"),
                None,
            ]
        ),
        "complex": pd.Series([1 + 2j, 3 + 4j, 5 + 6 * 1j, None]),
        "mixed_integer": pd.Series([1, 2, "3", None]),
        "mixed_types": pd.Series([2.1, "3", True, None]),
        "frozenset": pd.Series(
            [frozenset([1, 2]), frozenset([3, 4]), frozenset([5, 6]), None]
        ),
        "dicts": pd.Series([{"a": 1}, {"b": 2}, {"c": 2}, None]),
        "objects": pd.Series([TestObject(), TestObject(), TestObject(), None]),
        # TODO(lukasmasuch): Not supported, but currently leads to error
        # "mixed_types_list": pd.Series(
        #     [random.choice([1, 1.0, None, "foo"]) for _ in range(10)]
        #     for _ in range(n_rows)
        # ),
        # TODO(lukasmasuch): Sparse array is supported, but currently leads to error
        # "sparse-array": pd.Series(
        #     pd.arrays.SparseArray([random.choice([0, 1, 2]) for _ in range(n_rows)])
        # ),
    }
)


================================================
File: /e2e_playwright/shared/dataframe_utils.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

from typing import Final, Literal

from playwright.sync_api import Locator, Page, Position, expect

# Determined by measuring a screenshot
ROW_MARKER_COLUMN_WIDTH_PX: Final = 30

# These values are defined in useColumnLoader of the DataFrame component:
COLUMN_SMALL_WIDTH_PX: Final = 75
COLUMN_MEDIUM_WIDTH_PX: Final = 200
COLUMN_LARGE_WIDTH_PX: Final = 400

# This value is defined in useTableSizer of the DataFrame component:
ROW_HEIGHT_PX: Final = 35

# The column headers are in row 0
HEADER_ROW_INDEX: Final = 0


def calc_middle_cell_position(
    row_pos: int,
    col_pos: int,
    column_width: Literal["small", "medium", "large"] = "small",
    has_row_marker_col: bool = False,
) -> tuple[float, float]:
    """Calculate the middle position of a cell in the dataframe.

    Parameters
    ----------

    row_pos : int
        The row number to use for the calculation. Starts at 0 with the header row.

    col_pos : int
        The column number to use for the calculation. Starts with 0 with the first
        column. If has_row_marker_col is True, the first column is the row marker
        column.

    column_width : "small" | "medium" | "large"
        The shared width setting of all columns. Can be "small", "medium" or "large".
        This needs to be enforced in the dataframe via column config.

    has_row_marker_col : bool
        Whether the dataframe has a row marker column (used when row selections are
        activated).


    Returns
    -------
    tuple[int, int]
        The x and y positions of the middle of the cell.
    """
    column_width_px = COLUMN_MEDIUM_WIDTH_PX
    if column_width == "small":
        column_width_px = COLUMN_SMALL_WIDTH_PX
    elif column_width == "large":
        column_width_px = COLUMN_LARGE_WIDTH_PX

    row_middle_height_px = row_pos * ROW_HEIGHT_PX + (ROW_HEIGHT_PX / 2)
    if has_row_marker_col:
        if col_pos == 0:
            column_middle_width_px = ROW_MARKER_COLUMN_WIDTH_PX / 2
        else:
            column_middle_width_px = (
                ROW_MARKER_COLUMN_WIDTH_PX
                + max(col_pos - 1, 0) * column_width_px
                + (column_width_px / 2)
            )
    else:
        column_middle_width_px = col_pos * column_width_px + (column_width_px / 2)

    return column_middle_width_px, row_middle_height_px


def click_on_cell(
    dataframe_element: Locator,
    row_pos: int,
    col_pos: int,
    column_width: Literal["small", "medium", "large"] = "small",
    has_row_marker_col: bool = False,
    double_click: bool = False,
) -> None:
    """Click on the middle of the specified cell.

    Parameters
    ----------
    dataframe_element : Locator
        The dataframe element to click on.

    row_pos : int
        The row number to click on. Starts at 0 with the header row.

    col_pos : int
        The column number to click on. Starts with 0 with the first column.
        If has_row_marker_col is True, the first column is the row marker column.

    column_width : "small" | "medium" | "large"
        The shared width setting of all columns. Can be "small", "medium" or "large".
        This needs to be enforced in the dataframe via column config.

    has_row_marker_col : bool
        Whether the dataframe has a row marker column (used when row selections are
        activated).

    double_click : bool
        Whether to double click on the cell.
    """
    column_middle_width_px, row_middle_height_px = calc_middle_cell_position(
        row_pos, col_pos, column_width, has_row_marker_col
    )
    position: Position = {"x": column_middle_width_px, "y": row_middle_height_px}

    if double_click:
        dataframe_element.dblclick(position=position)
    else:
        dataframe_element.click(position=position)


def select_row(
    dataframe_element: Locator,
    row_pos: int,
    column_width: Literal["small", "medium", "large"] = "small",
) -> None:
    """Select the specified row in the dataframe.

    This expects row selections to be activated.

    Parameters
    ----------

    dataframe_element : Locator
        The dataframe element to select the row in.

    row_pos : int
        The row number to select. Starts at 0 with the header row.

    column_width : "small" | "medium" | "large"
        The shared width setting of all columns. Can be "small", "medium" or "large".
        This needs to be enforced in the dataframe via column config.
    """
    click_on_cell(dataframe_element, row_pos, 0, column_width, has_row_marker_col=True)


def sort_column(
    dataframe_element: Locator,
    col_pos: int,
    column_width: Literal["small", "medium", "large"] = "small",
    has_row_marker_col: bool = False,
) -> None:
    """Sort the specified column in the dataframe.

    Parameters
    ----------

    dataframe_element : Locator
        The dataframe element to select the column in.

    col_pos : int
        The column number to select. Starts with 0 with the first column.
        If has_row_marker_col is True, the first column is the row marker column.

    column_width : "small" | "medium" | "large"
        The shared width setting of all columns. Can be "small", "medium" or "large".
        This needs to be enforced in the dataframe via column config.

    has_row_marker_col : bool
        Whether the dataframe has a row marker column (used when row selections are
        activated).
    """
    click_on_cell(
        dataframe_element,
        HEADER_ROW_INDEX,
        col_pos,
        column_width,
        has_row_marker_col=has_row_marker_col,
    )


def select_column(
    dataframe_element: Locator,
    col_pos: int,
    column_width: Literal["small", "medium", "large"] = "small",
    has_row_marker_col: bool = False,
) -> None:
    """Select the specified column in the dataframe.

    This expects column selections to be activated.

    Parameters
    ----------

    dataframe_element : Locator
        The dataframe element to select the column in.

    col_pos : int
        The column number to select. Starts with 0 with the first column.
        If has_row_marker_col is True, the first column is the row marker column.

    column_width : "small" | "medium" | "large"
        The shared width setting of all columns. Can be "small", "medium" or "large".
        This needs to be enforced in the dataframe via column config.

    has_row_marker_col : bool
        Whether the dataframe has a row marker column (used when row selections are
        activated).
    """
    click_on_cell(
        dataframe_element,
        HEADER_ROW_INDEX,
        col_pos,
        column_width,
        has_row_marker_col=has_row_marker_col,
    )


def get_open_cell_overlay(page: Page | Locator) -> Locator:
    """Get the currently open cell overlay / editor.

    Parameters
    ----------

    app : Locator
        The app.

    Returns
    -------
    Locator
        The open cell overlay.
    """
    # This is currently the best way to get the cell overlay
    # We should eventually add a stable test ID to the cell overlay
    # within glide-data-grid to better target it.
    cell_overlay = page.get_by_test_id("portal").locator(".gdg-clip-region")
    expect(cell_overlay).to_be_visible()
    return cell_overlay


def expect_canvas_to_be_visible(locator: Locator):
    """Expect canvas to be visible.

    Should be used before trying to click on it or similar.

    Parameters
    ----------

    locator : Locator
    """
    expect(locator.locator("canvas").first).to_be_visible()


================================================
File: /e2e_playwright/shared/git_utils.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import subprocess
from pathlib import Path


def get_git_root() -> Path:
    """Get the root directory of the git repository."""
    try:
        return Path(
            subprocess.check_output(["git", "rev-parse", "--show-toplevel"])
            .strip()
            .decode("utf-8")
        )
    except subprocess.CalledProcessError:
        raise RuntimeError("Not a git repository or git is not installed.")


================================================
File: /e2e_playwright/shared/oidc_mock_server.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import argparse
import base64
import json
import time
import uuid
from functools import partial
from urllib.parse import parse_qs
from wsgiref.simple_server import make_server

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding, rsa

# Generate key once
private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
public_key = private_key.public_key()

numbers = public_key.public_numbers()

n = (
    base64.urlsafe_b64encode(
        numbers.n.to_bytes((numbers.n.bit_length() + 7) // 8, byteorder="big")
    )
    .decode("utf-8")
    .rstrip("=")
)
e = (
    base64.urlsafe_b64encode(
        numbers.e.to_bytes((numbers.e.bit_length() + 7) // 8, byteorder="big")
    )
    .decode("utf-8")
    .rstrip("=")
)


NONCE_REGISTRY = {}


def generate_token(payload):
    # Create JWT header
    header = {
        "typ": "JWT",
        "alg": "RS256",
        "kid": "1",  # Match the kid in JWKS
    }

    # Encode header and payload
    header_b64 = base64.urlsafe_b64encode(json.dumps(header).encode()).rstrip(b"=")
    payload_b64 = base64.urlsafe_b64encode(json.dumps(payload).encode()).rstrip(b"=")

    # Sign
    message = b".".join([header_b64, payload_b64])
    signature = private_key.sign(message, padding.PKCS1v15(), hashes.SHA256())
    signature_b64 = base64.urlsafe_b64encode(signature).rstrip(b"=")

    # Combine all parts
    return b".".join([header_b64, payload_b64, signature_b64]).decode()


def oidc_app(environ, start_response, success=True):
    path = environ["PATH_INFO"]
    current_port = environ["SERVER_PORT"]

    if path == "/.well-known/openid-configuration":
        response = {
            "authorization_endpoint": f"http://localhost:{current_port}/auth",
            "token_endpoint": f"http://localhost:{current_port}/token",
            "jwks_uri": f"http://localhost:{current_port}/jwks",
        }
        status = "200 OK"
        headers = [("Content-Type", "application/json")]
        start_response(status, headers)
        return [json.dumps(response).encode()]

    elif path == "/auth":
        # Accept any authorization request and return code
        qs = parse_qs(environ.get("QUERY_STRING", ""))

        redirect_uri = qs.get("redirect_uri", [""])[0]
        state = qs.get("state", [""])[0]
        nonce = qs.get("nonce", [""])[0]

        code = str(uuid.uuid4())
        NONCE_REGISTRY[code] = nonce

        if success:
            location = f"{redirect_uri}?code={code}&state={state}&nonce={nonce}"
        else:
            location = f"{redirect_uri}?error=access_denied&state={state}"

        status = "302 Found"
        headers = [("Location", location)]
        start_response(status, headers)
        return []

    elif path == "/token":
        length = int(environ.get("CONTENT_LENGTH", "0"))

        body = environ["wsgi.input"].read(length)

        code = parse_qs(body.decode())["code"][0]

        # Return dummy token
        response = {
            "access_token": str(uuid.uuid4()),
            "token_type": "Bearer",
            "id_token": generate_token(
                {
                    "aud": "test-client-id",
                    "iss": f"http://localhost:{current_port}",
                    "sub": str(uuid.uuid4()),
                    "iat": int(time.time()),
                    "name": "John Doe",
                    "email": "authtest@example.com",
                    "exp": int(time.time()) + 3600,
                    "nonce": NONCE_REGISTRY[code],
                }
            ),
        }
        status = "200 OK"
        headers = [("Content-Type", "application/json")]
        start_response(status, headers)
        return [json.dumps(response).encode()]

    elif path == "/jwks":
        jwks = {
            "keys": [
                {
                    "n": n,
                    "use": "sig",
                    "alg": "RS256",
                    "e": e,
                    "kid": "1",
                    "kty": "RSA",
                },
            ]
        }
        status = "200 OK"
        headers = [("Content-Type", "application/json")]
        start_response(status, headers)
        return [json.dumps(jwks).encode()]

    status = "404 Not Found"
    headers = [("Content-Type", "text/plain")]
    start_response(status, headers)
    return [b"Not Found"]


if __name__ == "__main__":
    # read script arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("--port", type=int, default=9999)
    parser.add_argument("--success", action="store_true", dest="success")
    parser.add_argument("--failure", action="store_false", dest="success")

    args = parser.parse_args()
    port = args.port

    httpd = make_server("", port, partial(oidc_app, success=args.success))
    print(f"Serving on port {port}...")
    httpd.serve_forever()


================================================
File: /e2e_playwright/shared/performance.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

import datetime
import json
import os
from contextlib import contextmanager
from typing import TYPE_CHECKING

from e2e_playwright.shared.git_utils import get_git_root

if TYPE_CHECKING:
    from playwright.sync_api import Page


# Observe long tasks, measure, marks, and paints with PerformanceObserver
# @see https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver
# @see https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList#using_performanceobserverentrylist
CAPTURE_TRACES_SCRIPT = """
window.__stCapturedTraces = {};

function handleEntries(list) {
    const entries = list.getEntries();
    for (const entry of entries) {
        if (!window.__stCapturedTraces[entry.entryType]) {
            window.__stCapturedTraces[entry.entryType] = [];
        }
        window.__stCapturedTraces[entry.entryType].push(entry);
    }
}

new PerformanceObserver(handleEntries).observe({
    entryTypes: ['longtask', 'measure', 'mark', 'navigation', 'paint', 'long-animation-frame'],
});
"""

GET_CAPTURED_TRACES_SCRIPT = """
window.__stCapturedTraces.profiles = {};

for (const [key, value] of Object.entries(window.__streamlit_profiles__ || {})) {
    window.__stCapturedTraces.profiles[key] = {
        entries: value.buffer.filter(Boolean),
        totalWrittenEntries: value.totalWrittenEntries,
    };
}

JSON.stringify(window.__stCapturedTraces)
"""


def is_supported_browser(page: Page) -> bool:
    browser = page.context.browser
    browser_name = browser.browser_type.name if browser is not None else "unknown"
    # Only measure performance for Chromium browsers since it relies on
    # Chrome DevTools Protocol under the hood
    return browser_name == "chromium"


def start_capture_traces(page: Page):
    """
    Start capturing traces using the PerformanceObserver API.
    """
    if is_supported_browser(page):
        page.evaluate(CAPTURE_TRACES_SCRIPT)


@contextmanager
def with_cdp_session(page: Page):
    """
    Create a new Chrome DevTools Protocol session.
    Detach the session when the context manager exits.
    """
    if not is_supported_browser(page):
        raise RuntimeError(
            "Chrome DevTools Protocol is only supported on Chromium-based browsers."
        )

    client = page.context.new_cdp_session(page)
    yield client
    client.detach()


@contextmanager
def measure_performance(
    page: Page, *, test_name: str, cpu_throttling_rate: int | None = None
):
    """
    Measure the performance of the page using the native performance API from
    Chrome DevTools Protocol.
    @see https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.metrics.md

    Args:
        page (Page): The page to measure performance on.
        cpu_throttling_rate (int | None, optional): Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc). Defaults to None.
    """
    with with_cdp_session(page) as client:
        if cpu_throttling_rate is not None:
            client.send("Emulation.setCPUThrottlingRate", {"rate": cpu_throttling_rate})

        client.send("Performance.enable")

        # Run the test
        yield

        metrics_response = client.send("Performance.getMetrics")
        captured_traces_result = client.send(
            "Runtime.evaluate",
            {"expression": GET_CAPTURED_TRACES_SCRIPT},
        )["result"]
        captured_traces = captured_traces_result.get("value", "{}")
        parsed_captured_traces = json.loads(captured_traces)

        performance_results_dir = os.path.join(
            get_git_root(), "e2e_playwright", "performance-results"
        )

        # Ensure the directory exists
        os.makedirs(performance_results_dir, exist_ok=True)

        timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")

        with open(
            os.path.join(performance_results_dir, f"{timestamp}_{test_name}.json"), "w"
        ) as f:
            json.dump(
                {
                    "metrics": metrics_response["metrics"],
                    "capturedTraces": parsed_captured_traces,
                },
                f,
            )


================================================
File: /e2e_playwright/shared/pydeck_utils.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from typing import Literal

import pandas as pd
import pydeck as pdk
from playwright.sync_api import Page, expect

import streamlit as st

H3_HEX_DATA = [
    {"hex": "88283082b9fffff", "count": 10},
    {"hex": "88283082d7fffff", "count": 50},
    {"hex": "88283082a9fffff", "count": 100},
]
df = pd.DataFrame(H3_HEX_DATA)


def get_pydeck_chart(
    key: str,
    selection_mode: Literal["single-object", "multi-object"],
    on_select="rerun",
):
    return st.pydeck_chart(
        pdk.Deck(
            map_style="mapbox://styles/mapbox/outdoors-v12",
            initial_view_state=pdk.ViewState(
                latitude=37.7749295,
                longitude=-122.4194155,
                zoom=11,
                bearing=0,
                pitch=30,
            ),
            layers=[
                pdk.Layer(
                    "H3HexagonLayer",
                    df,
                    id="MyHexLayer",
                    stroked=True,
                    filled=True,
                    get_hexagon="hex",
                    line_width_min_pixels=2,
                    get_fill_color="[120, count > 50 ? 255 : 0, 255]",
                ),
            ],
        ),
        use_container_width=True,
        key=key,
        on_select=on_select,
        selection_mode=selection_mode,
    )


def wait_for_chart(app: Page):
    # The pydeck chart takes a while to load so check that
    # it gets attached with an increased timeout.
    pydeck_charts = app.get_by_test_id("stDeckGlJsonChart")
    expect(pydeck_charts).to_have_count(5, timeout=15000)

    # The map assets can take more time to load, add an extra timeout
    # to prevent flakiness.
    app.wait_for_timeout(10000)


def get_click_handling_div(app: Page, nth: int):
    # Find canvas with class name "mapboxgl-canvas"
    expect(app.locator(".mapboxgl-canvas").nth(nth)).to_be_visible()
    return app.locator("#view-default-view").nth(nth)


================================================
File: /e2e_playwright/shared/toolbar_utils.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

from typing import TYPE_CHECKING

from playwright.sync_api import Page, expect

if TYPE_CHECKING:
    from e2e_playwright.conftest import ImageCompareFunction


def assert_fullscreen_toolbar_button_interactions(
    app: Page,
    assert_snapshot: ImageCompareFunction,
    widget_test_id: str,
    filename_prefix: str = "",
    nth: int = 0,
    pixel_threshold: float = 0.05,
):
    """
    Shared test function to assert that clicking on fullscreen toolbar button
    expands the map into fullscreen.
    """

    widget_element = app.get_by_test_id(widget_test_id).nth(nth)
    widget_toolbar = widget_element.get_by_test_id("stElementToolbar")
    fullscreen_wrapper = app.get_by_test_id("stFullScreenFrame").nth(nth)

    fullscreen_toolbar_button = widget_toolbar.get_by_test_id(
        "stElementToolbarButton"
    ).last

    # Activate toolbar:
    widget_element.hover()
    # Check that it is visible
    expect(widget_toolbar).to_have_css("opacity", "1")

    # Click on expand to fullscreen button:
    fullscreen_toolbar_button.click()

    # Make sure that the button shows the close fullscreen button
    expect(
        widget_toolbar.get_by_role("button", name="Close fullscreen")
    ).to_be_visible()

    # Check that it is visible
    assert_snapshot(
        app,
        name=f"{filename_prefix if filename_prefix != '' else widget_test_id}-fullscreen_expanded",
        pixel_threshold=pixel_threshold,
    )

    # Click again on fullscreen button to close fullscreen mode:
    fullscreen_toolbar_button.click()

    # Make sure that the button shows the open fullscreen button
    expect(widget_toolbar.get_by_role("button", name="Fullscreen")).to_be_visible()

    assert_snapshot(
        fullscreen_wrapper,
        name=f"{filename_prefix if filename_prefix != '' else widget_test_id}-fullscreen_collapsed",
        pixel_threshold=pixel_threshold,
    )


================================================
File: /e2e_playwright/test_assets/alt_secrets.toml
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[fake]
FAKE_SECRET="alt-value"


================================================
File: /e2e_playwright/test_assets/alt_secrets2.toml
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[other-fake]
OTHER_FAKE_SECRET="other-alt-value"


================================================
File: /e2e_playwright/test_assets/hostframe.html
================================================
<!--
 Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--

This file is used to help develop Host<->Guest communications.

Usage:

  1. In terminal 1: start the dev frontend server
     $ cd frontend
     $ yarn start

  2. In terminal 2: run your Streamlit app
     $ cd lib
     $ pipenv shell
     $ cd ..
     $ streamlit run foo.py

  3. In terminal 3: serve this file
     $ cd frontend
     $ python -m http.server

  ...then open localhost:8000 in a browser!

-->

<script>
  window.addEventListener("message", (event) => {
    console.log("Received message event:", event);
  });

  function sendMessage(data) {
    const guestwindow = document.getElementById("guest").contentWindow;

    guestwindow.postMessage(
      {
        stCommVersion: 1,
        ...data,
      },
      "*"
    );
  }

  function setHostMenuItem() {
    sendMessage({
      type: "SET_MENU_ITEMS",
      items: [
        {
          type: "text",
          label: "Adopt a Corgi",
          key: "share",
        },
        {
          type: "separator",
        },
      ],
    });
  }

  function setHostToolbarItem() {
    sendMessage({
      type: "SET_TOOLBAR_ITEMS",
      items: [
        {
          borderless: false,
          label: "Favorite",
          icon: "Favorite",
          key: "favorite",
        },
        {
          borderless: false,
          label: "Share",
          icon: "Share",
          key: "Share",
        },
      ],
    });
  }

  function setHideSidebarNav() {
    sendMessage({
      type: "SET_SIDEBAR_NAV_VISIBILITY",
      hidden: true,
    });
  }

  function setSidebarDownshift() {
    sendMessage({
      type: "SET_SIDEBAR_CHEVRON_DOWNSHIFT",
      sidebarChevronDownshift: 50,
    });
  }

  function setAuthToken() {
    // We handle auth token and jwt header name/value in child iframe,
    // only when `useExternalAuthToken` is set to True in
    // "_stcore/host-config" endpoint. Otherwise, we ignore this message.
    sendMessage({
      type: "SET_AUTH_TOKEN",
      authToken: "AUTH_TOKEN",
      jwtHeaderName: "X-JWT-HEADER-NAME",
      jwtHeaderValue: "X-JWT-HEADER-VALUE",
    });
  }

  function setFileUploadClientConfig() {
    sendMessage({
      type: "SET_FILE_UPLOAD_CLIENT_CONFIG",
      prefix: "https://some-prefix.com/somethingelse/",
      headers: {
        header1: "header1value",
        header2: "header2value",
      },
    });
  }

  function closeModal() {
    sendMessage({
      type: "CLOSE_MODAL",
    });
  }

  function rerunScript() {
    sendMessage({
      type: "RERUN_SCRIPT",
    });
  }

  function stopScript() {
    sendMessage({
      type: "STOP_SCRIPT",
    });
  }

  function clearCache() {
    sendMessage({
      type: "CLEAR_CACHE",
    });
  }

  function sendThemeMessage() {
    sendMessage({
      type: "SET_CUSTOM_THEME_CONFIG",
      themeInfo: {
        primaryColor: "#1A6CE7",
        backgroundColor: "#FFFFFF",
        secondaryBackgroundColor: "#F5F5F5",
        textColor: "#1A1D21",
        widgetBackgroundColor: "#FFFFFF",
        widgetBorderColor: "#D3DAE8",
        skeletonBackgroundColor: "#CCDDEE",
        font: 0,
        base: 0,
        bodyFont: '"Inter", "Source Sans Pro", sans-serif',
        codeFont: '"Apercu Mono", "Source Code Pro", monospace',
        fontFaces: [
          {
            family: "Inter",
            url: "https://rsms.me/inter/font-files/Inter-Regular.woff2?v=3.19",
            weight: 400,
          },
          {
            family: "Inter",
            url: "https://rsms.me/inter/font-files/Inter-SemiBold.woff2?v=3.19",
            weight: 600,
          },
          {
            family: "Inter",
            url: "https://rsms.me/inter/font-files/Inter-Bold.woff2?v=3.19",
            weight: 700,
          },
          {
            family: "Apercu Mono",
            url: "https://app.snowflake.com/static/2c4863733dec5a69523e.woff2",
            weight: 400,
          },
          {
            family: "Apercu Mono",
            url: "https://app.snowflake.com/static/e903ae189d31a97e231e.woff2",
            weight: 500,
          },
          {
            family: "Apercu Mono",
            url: "https://app.snowflake.com/static/32447307374154c88bc0.woff2",
            weight: 700,
          },
        ],
        radii: {
          checkboxRadius: 3,
          baseWidgetRadius: 6,
        },
        fontSizes: {
          tinyFontSize: 10,
          smallFontSize: 12,
          baseFontSize: 14,
        },
      },
    });
  }

  function restartWebsocketConnection() {
    sendMessage({
      type: "RESTART_WEBSOCKET_CONNECTION",
    });
  }

  function terminateWebsocketConnection() {
    sendMessage({
      type: "TERMINATE_WEBSOCKET_CONNECTION",
    });
  }
</script>

<style>
  html {
    margin: 0;
    padding: 0;
    height: 100%;
  }

  body {
    height: 100%;
    display: flex;
    flex-direction: column;
    position: absolute;
    margin: 0;
    padding: 0;
    inset: 0;
    background-image: linear-gradient(
      45deg,
      #fff4c9 25%,
      #ffffff 25%,
      #ffffff 50%,
      #fff4c9 50%,
      #fff4c9 75%,
      #ffffff 75%,
      #ffffff 100%
    );
    background-size: 56.57px 56.57px;
  }

  #toolbar {
    padding: 0.5rem 1rem;
    display: flex;
    flex-direction: row;
    gap: 1rem;
  }

  #guest {
    flex: 1;
    border: none;
  }
</style>

<div id="toolbar" data-testid="toolbar">
  This is the host frame.
  <button onclick="sendThemeMessage()">Send Theme</button>
  <button onclick="rerunScript()">Rerun Script</button>
  <button onclick="stopScript()">Stop Script</button>
  <button onclick="clearCache()">Clear Cache</button>
  <button onclick="closeModal()">Close modal</button>
  <button onclick="setHostMenuItem()">Add Menu Item</button>
  <button onclick="setHostToolbarItem()">Add Toolbar Item</button>
  <button onclick="setHideSidebarNav()">Hide Sidebar Nav</button>
  <button onclick="setSidebarDownshift()">Sidebar Chevron Downshift</button>
  <button onclick="setAuthToken()">Set Auth Token</button>
  <button onclick="setFileUploadClientConfig()">Set file upload config</button>
  <button onclick="restartWebsocketConnection()">Restart Websocket</button>
  <button onclick="terminateWebsocketConnection()">Terminate Websocket</button>
</div>

<!-- we replace $APP_URL during the playwright test with the correct one -->
<iframe name="guest" id="guest" src="$APP_URL" />


================================================
File: /e2e_playwright/test_assets/sintel-de.vtt
================================================
WEBVTT

0
00:00:00.000 --> 00:00:12.000
<v Test>[Test]</v>

1
00:00:18.700 --> 00:00:21.500
Diese Klinge birgt eine finstere
Vergangenheit.

2
00:00:22.800 --> 00:00:26.800
Durch sie wurde viel unschuldiges Blut
vergossen.

3
00:00:29.000 --> 00:00:32.450
Es ist tÃ¶richt, so ganz allein und
unvorbereitet zu reisen!

4
00:00:32.750 --> 00:00:35.800
Du kannst von GlÃ¼ck sagen, dass dein
Blut noch in deinen Adern flieÃŸt.

5
00:00:36.250 --> 00:00:37.300
Danke.

6
00:00:38.500 --> 00:00:40.000
Also...

7
00:00:40.400 --> 00:00:44.800
...was fÃ¼hrt dich in die Lande der
Torwaechter?

8
00:00:46.000 --> 00:00:48.500
Ich suche jemanden.

9
00:00:49.000 --> 00:00:53.200
Ein teurer Freund?
Eine verwandte Seele?

10
00:00:54.400 --> 00:00:56.000
Ein Drache.

11
00:00:58.850 --> 00:01:01.750
Ein gefÃ¤hrliches Unterfangen fÃ¼r eine
einsame JÃ¤gerin.

12
00:01:02.950 --> 00:01:05.870
Ich bin einsam, solange ich mich
erinnern kann.

13
00:01:58.250 --> 00:01:59.500
Wir sind fast fertig. Ruhig...

================================================
File: /e2e_playwright/test_assets/sintel-en.vtt
================================================
WEBVTT

0
00:00:00.000 --> 00:00:12.000
<v Test>[Test]</v>

NOTE This is a comment and must be preceded by a blank line

1
00:00:18.700 --> 00:00:21.500
This blade has a dark past.

2
00:00:22.800 --> 00:00:26.800
It has shed much innocent blood.

3
00:00:29.000 --> 00:00:32.450
You're a fool for traveling alone,
so completely unprepared.

4
00:00:32.750 --> 00:00:35.800
You're lucky your blood's still flowing.

5
00:00:36.250 --> 00:00:37.300
Thank you.

6
00:00:38.500 --> 00:00:40.000
So...

7
00:00:40.400 --> 00:00:44.800
What brings you to
the land of the gatekeepers?

8
00:00:46.000 --> 00:00:48.500
I'm searching for someone.

9
00:00:49.000 --> 00:00:53.200
Someone very dear?
A kindred spirit?

10
00:00:54.400 --> 00:00:56.000
A dragon.

11
00:00:58.850 --> 00:01:01.750
A dangerous quest for a lone hunter.

12
00:01:02.950 --> 00:01:05.870
I've been alone for
as long as I can remember.

13
00:01:58.250 --> 00:01:59.500
We're almost done. Shhh...

================================================
File: /e2e_playwright/test_assets/test_div.html
================================================
<!--
 Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<div style="font-family: 'Comic Sans MS'; color: orange">
  This is a div with some inline styles.
</div>


================================================
File: /e2e_playwright/.streamlit/secrets.toml
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[fake]
FAKE_SECRET="value"


================================================
File: /frontend/hostframe.html
================================================
<!--
 Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--

This file is used to help develop Host<->Guest communications.

Usage:

  1. In terminal 1: start the dev frontend server
     $ cd frontend
     $ yarn start

  2. In terminal 2: run your Streamlit app
     $ cd lib
     $ pipenv shell
     $ cd ..
     $ streamlit run foo.py

  3. In terminal 3: serve this file
     $ cd frontend
     $ python -m http.server

  ...then open localhost:8000 in a browser!

-->

<script>
  window.addEventListener("message", event => {
    console.log("Received message event:", event)

    if (event.data.type === "REDIRECT_TO_URL") {
      window.location.href = event.data.url
    }
  })

  function sendMessage(data) {
    const guestwindow = document.getElementById("guest").contentWindow

    guestwindow.postMessage(
      {
        stCommVersion: 1,
        ...data,
      },
      "*"
    )
  }

  function setHostMenuItem() {
    sendMessage({
      type: "SET_MENU_ITEMS",
      items: [
        {
          type: "text",
          label: "Adopt a Corgi",
          key: "share",
        },
        {
          type: "separator",
        },
      ],
    })
  }

  function setHostToolbarItem() {
    sendMessage({
      type: "SET_TOOLBAR_ITEMS",
      items: [
        {
          borderless: false,
          label: "Favorite",
          icon: "Favorite",
          key: "favorite",
        },
        {
          borderless: false,
          label: "Share",
          icon: "Share",
          key: "Share",
        },
      ],
    })
  }

  function setHideSidebarNav() {
    sendMessage({
      type: "SET_SIDEBAR_NAV_VISIBILITY",
      hidden: true,
    })
  }

  function setSidebarDownshift() {
    sendMessage({
      type: "SET_SIDEBAR_CHEVRON_DOWNSHIFT",
      sidebarChevronDownshift: 50,
    })
  }

  function setAuthToken() {
    // We handle auth token in child iframe,
    // only when `useExternalAuthToken` is set to True in
    // "_stcore/host-config" endpoint. Otherwise, we ignore this message.
    sendMessage({
      type: "SET_AUTH_TOKEN",
      authToken: "AUTH_TOKEN",
    })
  }

  function setFileUploadClientConfig() {
    sendMessage({
      type: "SET_FILE_UPLOAD_CLIENT_CONFIG",
      prefix:
        "https://some-prefix" +
        Math.floor(Math.random() * 100).toString() +
        ".com/somethingelse/",
      headers: {
        header1: "header1value",
        header2: "header2value",
        header3: "header3value",
      },
    })
  }

  function closeModal() {
    sendMessage({
      type: "CLOSE_MODAL",
    })
  }

  function rerunScript() {
    sendMessage({
      type: "RERUN_SCRIPT",
    })
  }

  function stopScript() {
    sendMessage({
      type: "STOP_SCRIPT",
    })
  }

  function clearCache() {
    sendMessage({
      type: "CLEAR_CACHE",
    })
  }

  function sendThemeMessage() {
    sendMessage({
      type: "SET_CUSTOM_THEME_CONFIG",
      themeInfo: {
        primaryColor: "#1A6CE7",
        backgroundColor: "#FFFFFF",
        secondaryBackgroundColor: "#F5F5F5",
        textColor: "#1A1D21",
        widgetBackgroundColor: "#FFFFFF",
        widgetBorderColor: "#D3DAE8",
        skeletonBackgroundColor: "#CCDDEE",
        font: 0,
        base: 0,
        bodyFont: '"Inter", "Source Sans Pro", sans-serif',
        codeFont: '"Apercu Mono", "Source Code Pro", monospace',
        fontFaces: [
          {
            family: "Inter",
            url: "https://rsms.me/inter/font-files/Inter-Regular.woff2?v=3.19",
            weight: 400,
          },
          {
            family: "Inter",
            url: "https://rsms.me/inter/font-files/Inter-SemiBold.woff2?v=3.19",
            weight: 600,
          },
          {
            family: "Inter",
            url: "https://rsms.me/inter/font-files/Inter-Bold.woff2?v=3.19",
            weight: 700,
          },
          {
            family: "Apercu Mono",
            url: "https://app.snowflake.com/static/2c4863733dec5a69523e.woff2",
            weight: 400,
          },
          {
            family: "Apercu Mono",
            url: "https://app.snowflake.com/static/e903ae189d31a97e231e.woff2",
            weight: 500,
          },
          {
            family: "Apercu Mono",
            url: "https://app.snowflake.com/static/32447307374154c88bc0.woff2",
            weight: 700,
          },
        ],
        radii: {
          checkboxRadius: 3,
          baseWidgetRadius: 6,
        },
        fontSizes: {
          tinyFontSize: 10,
          smallFontSize: 12,
          baseFontSize: 14,
        },
      },
    })
  }

  function restartWebsocketConnection() {
    sendMessage({
      type: "RESTART_WEBSOCKET_CONNECTION",
    })
  }

  function terminateWebsocketConnection() {
    sendMessage({
      type: "TERMINATE_WEBSOCKET_CONNECTION",
    })
  }
</script>

<style>
  html {
    margin: 0;
    padding: 0;
  }

  body {
    display: flex;
    flex-direction: column;
    position: absolute;
    margin: 0;
    padding: 0;
    inset: 0;
    background-image: linear-gradient(
      45deg,
      #fff4c9 25%,
      #ffffff 25%,
      #ffffff 50%,
      #fff4c9 50%,
      #fff4c9 75%,
      #ffffff 75%,
      #ffffff 100%
    );
    background-size: 56.57px 56.57px;
  }

  #toolbar {
    padding: 0.5rem 1rem;
    display: flex;
    flex-direction: row;
    gap: 1rem;
  }

  #guest {
    flex: 1;
    border: none;
  }
</style>

<div id="toolbar">
  This is the host frame.
  <button onclick="sendThemeMessage()">Send Theme</button>
  <button onclick="rerunScript()">Rerun Script</button>
  <button onclick="stopScript()">Stop Script</button>
  <button onclick="clearCache()">Clear Cache</button>
  <button onclick="closeModal()">Close modal</button>
  <button onclick="setHostMenuItem()">Add Menu Item</button>
  <button onclick="setHostToolbarItem()">Add Toolbar Item</button>
  <button onclick="setHideSidebarNav()">Hide Sidebar Nav</button>
  <button onclick="setSidebarDownshift()">Sidebar Chevron Downshift</button>
  <button onclick="setAuthToken()">Set Auth Token</button>
  <button onclick="setFileUploadClientConfig()">Set file upload config</button>
  <button onclick="restartWebsocketConnection()">Restart Websocket</button>
  <button onclick="terminateWebsocketConnection()">Terminate Websocket</button>
</div>

<iframe id="guest" src="http://localhost:3000" />


================================================
File: /frontend/package.json
================================================
{
  "name": "streamlit",
  "version": "1.41.1",
  "private": true,
  "workspaces": [
    "app",
    "lib"
  ],
  "scripts": {
    "postinstall": "patch-package",
    "start": "yarn workspace @streamlit/app start",
    "build": "yarn workspace @streamlit/app build",
    "buildWithProfiler": "yarn workspace @streamlit/app buildWithProfiler",
    "buildLib": "yarn workspace @streamlit/lib build",
    "buildLibProd": "yarn workspace @streamlit/lib build:prod",
    "buildApp": "yarn workspace @streamlit/app build",
    "typecheck": "yarn workspace @streamlit/lib typecheck && yarn workspace @streamlit/app typecheck",
    "lint": "yarn lintApp && yarn lintLib",
    "lintApp": "yarn workspace @streamlit/app lint",
    "lintLib": "yarn workspace @streamlit/lib lint",
    "format": "prettier --write --config .prettierrc './{app,lib}/src/**/*.{js,ts,jsx,tsx}'",
    "formatCheck": "prettier --check --config .prettierrc './{app,lib}/src/**/*.{js,ts,jsx,tsx}'",
    "lint:interactive": "yarn eslint-interactive ./app/src ./lib/src",
    "test": "yarn workspace @streamlit/lib test && yarn workspace @streamlit/app test",
    "testcoverage": "yarn workspace @streamlit/lib test --coverage && yarn workspace @streamlit/app test --coverage",
    "testLib": "yarn workspace @streamlit/lib testWatch",
    "testApp": "yarn workspace @streamlit/app testWatch"
  },
  "resolutions": {
    "nwsapi": "2.2.9",
    "d3-color": "^3.1.0"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ],
  "packageManager": "yarn@1.22.22+sha512.a6b2f7906b721bba3d67d4aff083df04dad64c399707841b7acf00f6b133b7ac24255f2652fa22ae3534329dc6180534e98d17432037ff6fd140556e2bb3137e"
}


================================================
File: /frontend/tsconfig.dev.json
================================================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "paths": {
      "@streamlit/lib": ["lib/src"],
      "@streamlit/app": ["app/src"]
    }
  }
}


================================================
File: /frontend/tsconfig.json
================================================
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "baseUrl": ".",
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "moduleResolution": "node",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "es5",
    "types": ["vite/client", "vitest/globals", "@testing-library/jest-dom"]
  },
  "include": ["lib", "app"],
  "exclude": [
    "*/proto.js",
    "*/proto.d.ts",
    "eslint-plugin-streamlit-custom",
    "./vitest.setup.ts"
  ]
}


================================================
File: /frontend/vitest.setup.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as polyfill from "polyfill-pseudoclass-has"
import "vitest-canvas-mock"
import { vi } from "vitest"
import "@testing-library/jest-dom/vitest"

// In the event a sub-library uses the jest global, we need to make sure it's
// aliased to the vi global. An example is timers using dom testing library
// which is used by the react testing library and waitFor.
// (See https://github.com/testing-library/dom-testing-library/issues/987)
global.jest = vi

if (typeof window.URL.createObjectURL === "undefined") {
  window.URL.createObjectURL = vi.fn()
}

// TODO: Hides console error for running FE tests
// react-18-upgrade
const originalConsoleError = console.error
console.error = (...args) => {
  if (/ReactDOM.render is no longer supported in React 18/.test(args[0])) {
    // If the warning message matches, don't call the original console.warn
    return
  }
  // For all other warnings, call the original console.warn
  originalConsoleError(...args)
}

const originalConsoleWarn = console.warn
console.warn = (...args) => {
  if (/`LayersManager` was not found./.test(args[0])) {
    // If the warning message matches, don't call the original console.warn
    return
  }
  // For all other warnings, call the original console.warn
  originalConsoleWarn(...args)
}

// Add fake animate method to Elements
Element.prototype.animate = vi
  .fn()
  .mockImplementation(() => ({ addEventListener: vi.fn() }))


================================================
File: /frontend/.eslintrc.js
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const vitest = require("eslint-plugin-vitest")

module.exports = {
  env: {
    // allow using browser-defined globals like `window` and `document`
    browser: true,
    es6: true,
  },
  extends: [
    "airbnb-typescript/base",
    // Uses the recommended rules from @eslint-plugin-react
    "plugin:react/recommended",
    // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "plugin:@typescript-eslint/recommended",
    // Uses the recommended rules from react-hooks
    "plugin:react-hooks/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    // Enables eslint-plugin-prettier and eslint-config-prettier.
    // This will display prettier errors as ESLint errors.
    // Make sure this is always the last configuration in the extends array.
    "plugin:prettier/recommended",
    // Uses the recommended rules from React Testing Library:
    "plugin:testing-library/react",
    // Uses the recommended rules from lodash
    "plugin:lodash/recommended",
  ],
  // Specifies the ESLint parser
  parser: "@typescript-eslint/parser",
  parserOptions: {
    // make the parser resolve the project configuration relative to .eslintrc.js
    tsconfigRootDir: __dirname,
    project: "./tsconfig.dev.json",
    ecmaFeatures: {
      jsx: true, // Allows for the parsing of JSX
    },
    // Allows for the parsing of modern ECMAScript features
    ecmaVersion: 2018,
    // Allows for the use of imports
    sourceType: "module",
  },
  // Ignore our auto-generated and vendored code
  ignorePatterns: [
    "lib/src/proto.js",
    "lib/src/proto.d.ts",
    "**/vendor/*",
    "**/node_modules/*",
  ],
  plugins: [
    "no-relative-import-paths",
    "streamlit-custom",
    "vitest",
    "react-compiler",
  ],
  // Place to specify ESLint rules.
  // Can be used to overwrite rules specified from the extended configs
  rules: {
    // Recommended vitest configuration to enforce good testing practices
    ...vitest.configs.recommended.rules,
    // Use `const` or `let` instead of `var`
    "no-var": "error",
    // Prevent unintentional use of `console.log`
    "no-console": "error",
    // Prevent unintentional use of `debugger`
    "no-debugger": "error",
    // We don't use PropTypes
    "react/prop-types": "off",
    // We don't escape entities
    "react/no-unescaped-entities": "off",
    // Some of these are being caught erroneously
    "@typescript-eslint/camelcase": "off",
    // Empty interfaces are ok
    "@typescript-eslint/no-empty-interface": "off",
    // Empty functions are ok
    "@typescript-eslint/no-empty-function": "off",
    // We prefer not using `any`, but don't disallow it
    "@typescript-eslint/no-explicit-any": "off",
    // We prefer not using `any`, but don't disallow it (this rule
    // differs from the previous one in that it requires explicit types
    // for public module APIs)
    "@typescript-eslint/explicit-module-boundary-types": "off",
    // Don't warn about unused function params
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        vars: "all",
        args: "after-used",
        ignoreRestSiblings: false,
        argsIgnorePattern: "^_",
      },
    ],
    // It's safe to use functions before they're defined
    "@typescript-eslint/no-use-before-define": ["warn", { functions: false }],
    // Functions must have return types, but we allow
    // inline function expressions to omit them
    "@typescript-eslint/explicit-function-return-type": [
      "warn",
      { allowExpressions: true },
    ],
    // Disallow the @ts-ignore directive in favor of the more
    // strict @ts-expect-error.
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-expect-error": false,
        "ts-nocheck": false,
        "ts-check": false,
        "ts-ignore": true,
      },
    ],
    // Permit for-of loops (https://stackoverflow.com/a/42237667)
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      "LabeledStatement",
      "WithStatement",
    ],
    "no-restricted-globals": [
      "error",
      {
        name: "localStorage",
        message:
          "Please use window.localStorage instead since localStorage is not " +
          "supported in some browsers (e.g. Android WebView).",
      },
    ],
    // Allow foo.hasOwnProperty("bar")
    "no-prototype-builtins": "off",
    // Imports should be `import "./FooModule"`, not `import "./FooModule.js"`
    // We need to configure this to check our .tsx files, see:
    // https://github.com/benmosher/eslint-plugin-import/issues/1615#issuecomment-577500405
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        js: "never",
        jsx: "never",
        ts: "never",
        tsx: "never",
      },
    ],
    // Disable a bunch of AirBNB rules we're currently in violation of.
    // TODO: For each one, either fix and reenable, or provide a justification.

    // Surpresses compile warnings for vars already declared in the upper scope
    "@typescript-eslint/no-shadow": "off",
    // Surpresses compile warnings for use of an exported name as a property on the default (ex: React.useState vs. useState)
    // TODO: Go through each instance and resolve -> import React, { useState } from "react" & call useState directly
    "import/no-named-as-default-member": "off",
    "import/prefer-default-export": "off",
    "max-classes-per-file": "off",
    "no-shadow": "off",
    "no-param-reassign": "off",
    "no-plusplus": "off",
    "no-relative-import-paths/no-relative-import-paths": [
      "error",
      { allowSameFolder: true, rootDir: "src", prefix: "src" },
    ],
    "no-else-return": ["error", { allowElseIf: true }],
    "lodash/prefer-noop": "off",
    "lodash/prefer-constant": "off",
    "lodash/prefer-lodash-method": "off",
    "lodash/prefer-lodash-typecheck": "off",
    "lodash/prefer-get": "off",
    "lodash/prefer-includes": "off",
    "lodash/prefer-is-nil": "off",
    "lodash/prefer-matches": "off",
    "lodash/path-style": "off",
    "sort-imports": [
      "error",
      {
        ignoreCase: true,
        ignoreDeclarationSort: true,
      },
    ],
    "import/order": [
      1,
      {
        pathGroups: [
          {
            pattern: "react",
            group: "external",
            position: "before",
          },
          {
            pattern: "@streamlit/**",
            group: "internal",
            position: "before",
          },
        ],
        pathGroupsExcludedImportTypes: ["react"],
        groups: [
          "external",
          "builtin",
          "internal",
          "parent",
          "sibling",
          "index",
        ],
        "newlines-between": "always",
      },
    ],
    "react-compiler/react-compiler": "error",
    "streamlit-custom/no-hardcoded-theme-values": "error",
    "streamlit-custom/use-strict-null-equality-checks": "error",
    "no-restricted-imports": [
      "error",
      {
        paths: [
          {
            name: "timezone-mock",
            message: "Please use the withTimezones test harness instead",
          },
        ],
      },
    ],
  },
  overrides: [
    {
      // allow hardcoded styles in our test files and in the theme definitions
      files: ["**/*.test.ts", "**/*.test.tsx", "lib/src/theme/**/*"],
      rules: {
        "streamlit-custom/no-hardcoded-theme-values": ["off"],
      },
    },
    {
      // test-only rules
      files: ["**/*.test.ts", "**/*.test.tsx"],
      extends: ["plugin:testing-library/react"],
      rules: {
        "testing-library/prefer-user-event": "error",
      },
    },
  ],
  settings: {
    react: {
      // Tells eslint-plugin-react to automatically detect
      // the version of React to use
      version: "detect",
    },
    // Check for import violation in all JS-like files
    "import/resolver": {
      typescript: {
        // tell eslint to look at these tsconfigs for import statements
        project: ["lib/tsconfig.json", "app/tsconfig.json"],
      },
    },
  },
}


================================================
File: /frontend/.prettierignore
================================================
vendor
lib/src/proto.d.ts
lib/src/proto.js


================================================
File: /frontend/.prettierrc
================================================
{
  "endOfLine": "lf",
  "semi": false,
  "trailingComma": "es5",
  "arrowParens": "avoid"
}


================================================
File: /frontend/app/index.html
================================================
<!--
 Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <link rel="shortcut icon" href="/favicon.png" />
    <link
      rel="preload"
      href="./static/media/SourceSansPro-Regular.DZLUzqI4.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="./static/media/SourceSansPro-SemiBold.sKQIyTMz.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="./static/media/SourceSansPro-Bold.-6c9oR8J.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <title>Streamlit</title>

    <!-- initialize window.prerenderReady to false and then set to true in React app when app is ready for indexing -->
    <script>
      window.prerenderReady = false
    </script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>


================================================
File: /frontend/app/package.json
================================================
{
  "name": "@streamlit/app",
  "version": "1.41.1",
  "license": "Apache-2.0",
  "private": true,
  "type": "module",
  "homepage": "./",
  "scripts": {
    "analyze": "source-map-explorer 'build/static/js/*.js'",
    "start": "vite",
    "build": "env NODE_OPTIONS=--max_old_space_size=8192 vite build",
    "buildWithProfiler": "env IS_PROFILER_BUILD=1 vite build",
    "preview": "vite preview",
    "test": "vitest run",
    "testWatch": "vitest",
    "typecheck": "tsc --noEmit",
    "lint": "eslint --ext .js --ext .jsx --ext .ts --ext .tsx --max-warnings 0 src",
    "lighthouse:run": "node ./performance/lighthouse/run.mjs"
  },
  "dependencies": {
    "@emotion-icons/emotion-icon": "^4.1.0",
    "@emotion-icons/material-outlined": "^3.14.0",
    "@emotion-icons/material-rounded": "^3.14.0",
    "@emotion-icons/open-iconic": "^3.14.0",
    "@emotion/react": "^11.13.5",
    "@emotion/serialize": "^1.1.3",
    "@emotion/styled": "^11.13.5",
    "@streamlit/lib": "1.41.1",
    "@swc/plugin-emotion": "^3.0.9",
    "@vitejs/plugin-react-swc": "^3.6.0",
    "axios": "^1.7.9",
    "baseui": "12.2.0",
    "classnames": "^2.3.2",
    "color2k": "^2.0.2",
    "hoist-non-react-statics": "^3.3.2",
    "humanize-string": "^2.1.0",
    "iframe-resizer": "4.3.11",
    "immer": "^9.0.19",
    "lodash": "^4.17.21",
    "moment": "^2.29.4",
    "moment-timezone": "^0.5.40",
    "re-resizable": "^6.10.1",
    "react": "^18.2.0",
    "react-device-detect": "^2.2.2",
    "react-dom": "^18.2.0",
    "react-feather": "^2.0.10",
    "react-hot-keys": "^2.7.3",
    "react-transition-group": "^4.4.5",
    "sass": "^1.58.0",
    "styletron-engine-atomic": "^1.5.0",
    "styletron-react": "^6.1.0",
    "typed-signals": "^2.5.0",
    "ua-parser-js": "^1.0.39",
    "uuid": "^9.0.0",
    "vite": "^5.1.5",
    "vite-plugin-checker": "^0.6.4",
    "vite-plugin-svgr": "^4.2.0",
    "vite-tsconfig-paths": "^4.3.1"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^14.1.2",
    "@testing-library/react-hooks": "^8.0.1",
    "@testing-library/user-event": "^14.4.3",
    "@types/hoist-non-react-statics": "^3.3.6",
    "@types/lodash": "^4.17.13",
    "@types/node": "^18.11.17",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@types/react-transition-group": "^4.4.5",
    "@types/styletron-engine-atomic": "^1.1.1",
    "@types/styletron-react": "^5.0.3",
    "@types/ua-parser-js": "^0.7.39",
    "@types/uuid": "^9.0.2",
    "@typescript-eslint/eslint-plugin": "^5.51.0",
    "@typescript-eslint/parser": "^5.51.0",
    "@vitest/coverage-v8": "^2.1.4",
    "axios-mock-adapter": "^1.21.2",
    "buffer": "^6.0.3",
    "chrome-launcher": "^1.1.2",
    "eslint": "^8.33.0",
    "eslint-config-airbnb-typescript": "^17.0.0",
    "eslint-config-prettier": "^8.6.0",
    "eslint-import-resolver-typescript": "^3.5.3",
    "eslint-interactive": "^11.1.0",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-lodash": "^7.4.0",
    "eslint-plugin-no-relative-import-paths": "^1.5.2",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-compiler": "^19.0.0-beta-df7b47d-20241124",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-streamlit-custom": "file:../eslint-plugin-streamlit-custom",
    "eslint-plugin-testing-library": "^6.2.2",
    "eslint-plugin-vitest": "^0.5.4",
    "hard-source-webpack-plugin": "^0.13.1",
    "jsdom": "24.0.0",
    "lighthouse": "^12.2.2",
    "polyfill-pseudoclass-has": "^1.0.0",
    "prettier": "^2.8.3",
    "prop-types": "^15.7.2",
    "source-map-explorer": "^2.5.3",
    "tree-kill": "^1.2.2",
    "tsconfig-paths-webpack-plugin": "^4.0.1",
    "typescript": "^4.9.5",
    "util": "^0.12.5",
    "vitest": "^2.1.4",
    "vitest-canvas-mock": "^0.3.3",
    "vitest-websocket-mock": "^0.3.0"
  },
  "resolutions": {
    "@types/react": "^18.2.0",
    "@types/node": "^18.11.17",
    "ansi-regex": "^5.0.1",
    "async": "^3.2.3",
    "bl": "^6.0.0",
    "browserslist": "^4.21.5",
    "ejs": "^3.1.7",
    "glob-parent": "^6.0.2",
    "immer": "^9.0.19",
    "ini": "^3.0.1",
    "kind-of": "^6.0.3",
    "minimatch": "^6.1.6",
    "query-string": "^8.1.0",
    "set-value": "^4.0.1",
    "static-eval": "^2.0.5",
    "ua-parser-js": "^1.0.33",
    "ws": "^8.11.0",
    "y18n": "^5.0.8"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ]
}


================================================
File: /frontend/app/tsconfig.json
================================================
{
  "include": ["src/*", "../lib/src/declarations.d.ts"],
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "baseUrl": ".",
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "moduleResolution": "node",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "es6",
    "types": ["vite/client", "vitest/globals", "@testing-library/jest-dom"],
    "paths": {
      "@streamlit/lib": ["../lib/src"],
      "@streamlit/app": ["./src"]
    }
  }
}


================================================
File: /frontend/app/vite.config.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { defineConfig } from "vite"
import react from "@vitejs/plugin-react-swc"
import viteTsconfigPaths from "vite-tsconfig-paths"
import { default as checker } from "vite-plugin-checker"

import path from "path"

const BASE = "./"
const HASH = process.env.OMIT_HASH_FROM_MAIN_FILES ? "" : ".[hash]"
// We do not explicitly set the DEV_BUILD in any of our processes
// This is a convenience for developers for debugging purposes
const DEV_BUILD = process.env.DEV_BUILD || false
const IS_PROFILER_BUILD = process.env.IS_PROFILER_BUILD || false

/**
 * If this is a profiler build, we need to alias react-dom and scheduler to
 * their profiling versions so that we can use the React DevTools profiler
 * programmatically in tests.
 * @see https://fb.me/react-profiling
 */
const profilerAliases = IS_PROFILER_BUILD
  ? [
      {
        find: /^react-dom$/,
        replacement: "react-dom/profiling",
      },
      {
        find: "scheduler/tracing",
        replacement: "scheduler/tracing-profiling",
      },
    ]
  : []

// https://vitejs.dev/config/
export default defineConfig({
  base: BASE,
  plugins: [
    react({
      jsxImportSource: "@emotion/react",
      plugins: [["@swc/plugin-emotion", {}]],
    }),
    viteTsconfigPaths(),
    // this plugin checks for type errors on a separate process
    checker({
      typescript: true,
    }),
  ],
  resolve: {
    alias: [
      {
        find: "@streamlit/lib/src",
        replacement: path.resolve(__dirname, "../lib/src"),
      },
      {
        find: "@streamlit/lib",
        replacement: path.resolve(__dirname, "../lib/src"),
      },
      ...profilerAliases,
    ],
  },
  server: {
    open: true,
    port: 3000,
  },
  build: {
    outDir: "build",
    assetsDir: "static",
    sourcemap: DEV_BUILD,
    rollupOptions: {
      output: {
        // Customize the chunk file naming pattern to match static/js/[name].[hash].js
        chunkFileNames: `static/js/[name]${HASH}.js`,
        entryFileNames: `static/js/[name]${HASH}.js`,
        // Ensure assetFileNames is also configured if you're handling asset files
        assetFileNames: assetInfo => {
          if (assetInfo.name?.endsWith(".css")) {
            // For CSS files, place them in the /static/css/ directory
            return `static/css/[name]${HASH}[extname]`
          }

          // For other assets, use the /static/media/ directory
          return `static/media/[name]${HASH}[extname]`
        },
      },
    },
  },
  experimental: {
    renderBuiltUrl(filename, { hostType }) {
      if (hostType === "js" && process.env.OVERRIDE_PUBLIC_PATH) {
        return {
          runtime: `(window.__WEBPACK_PUBLIC_PATH_OVERRIDE || "/") + ${JSON.stringify(
            filename
          )}`,
        }
      }

      return { relative: true }
    },
  },
  test: {
    globals: true,
    environment: "jsdom",
    css: true,
    reporters: ["verbose"],
    setupFiles: ["../vitest.setup.ts"],
    deps: {
      optimizer: {
        web: {
          include: ["vitest-canvas-mock"],
        },
      },
    },
    coverage: {
      reporter: ["text", "json", "html"],
      include: ["src/**/*"],
      exclude: [],
    },
    server: {
      // Want a Non-Dev port for testing
      port: 3001,
    },
  },
})


================================================
File: /frontend/app/.eslintrc.cjs
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = {
  extends: ["../.eslintrc.js"], // Extend from the root configuration
  rules: {
    "no-restricted-imports": [
      "error",
      {
        patterns: [
          {
            group: ["@streamlit/lib/src/*"],
            message:
              "Direct imports from '@streamlit/lib/src/*' are not allowed. Please import from '@streamlit/lib' instead.",
          },
        ],
      },
    ],
  },
}


================================================
File: /frontend/app/performance/apps/__init__.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


================================================
File: /frontend/app/performance/apps/blank_app.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# type: ignore
import streamlit as st  # noqa

# Intentionally left blank


================================================
File: /frontend/app/performance/apps/crud_app.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

import pandas as pd

import streamlit as st

if "database" not in st.session_state:
    st.session_state.database = {}


st.title("CRUD App")


tab1, tab2, tab3 = st.tabs(["Create", "Update", "Delete"])


with tab1:
    st.header("Create a new record")
    with st.form("create_form"):
        name = st.text_input("Name")
        age = st.number_input("Age", min_value=0, max_value=120)
        email = st.text_input("Email")
        address = st.text_input("Address")
        submit_button = st.form_submit_button("Submit")

        if submit_button:
            if name and email and address:
                id = len(st.session_state.database) + 1
                st.session_state.database[id] = {
                    "name": name,
                    "age": age,
                    "email": email,
                    "address": address,
                }
                st.success("Record added successfully!")
            else:
                st.error("Please fill in all fields.")

with tab2:
    st.header("Update an existing record")
    update_id = st.number_input("Enter ID to update", min_value=1, step=1)

    if update_id in st.session_state.database:
        existing_record = st.session_state.database[update_id]
        new_name = st.text_input("New Name", value=existing_record["name"])
        new_age = st.number_input(
            "New Age", min_value=0, max_value=120, value=existing_record["age"]
        )
        new_email = st.text_input("New Email", value=existing_record["email"])
        new_address = st.text_input("New Address", value=existing_record["address"])
    else:
        new_name = st.text_input("New Name")
        new_age = st.number_input("New Age", min_value=0, max_value=120)
        new_email = st.text_input("New Email")
        new_address = st.text_input("New Address")

    update_button = st.button("Update")

    if update_button:
        if update_id in st.session_state.database:
            st.session_state.database[update_id] = {
                "name": new_name,
                "age": new_age,
                "email": new_email,
                "address": new_address,
            }
            st.success("Record updated successfully!")
        else:
            st.error("ID not found.")


with tab3:
    st.header("Delete a record")
    with st.form("delete_form"):
        delete_id = st.number_input("Enter ID to delete", min_value=1, step=1)
        delete_button = st.form_submit_button("Delete")

        if delete_button:
            if delete_id in st.session_state.database:
                del st.session_state.database[delete_id]
                st.success("Record deleted successfully!")
            else:
                st.error("ID not found.")


st.subheader("Database")


data = [
    {
        "ID": key,
        "Name": value["name"],
        "Age": value["age"],
        "Email": value["email"],
        "Address": value["address"],
    }
    for key, value in st.session_state.database.items()
]
df = pd.DataFrame(data)

if len(data) > 0:
    df = df.set_index("ID")


st.dataframe(df)


================================================
File: /frontend/app/performance/apps/dashboard_app.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns

import streamlit as st

st.set_page_config(layout="wide", page_title="Dashboard")
st.title("Dashboard")


@st.cache_data
def load_data():
    return sns.load_dataset("iris")


data = load_data()


st.sidebar.header("Filter")

unique_species = data["species"].unique()

species = st.sidebar.multiselect(
    "Select Species", options=unique_species, default=unique_species
)

filtered_data = data[data["species"].isin(species)]

col1, col2 = st.columns(2)

with col1:
    st.subheader("Dataset")
    st.dataframe(filtered_data, use_container_width=True)

with col2:
    st.subheader("Basic Statistics")
    st.dataframe(filtered_data.describe(), use_container_width=True)

col3, col4, col5 = st.columns(3)

with col3:
    st.subheader("Box Plot of Sepal Width")
    fig = px.box(filtered_data, x="species", y="sepal_width", points="all")
    st.plotly_chart(fig)

with col4:
    st.subheader("Histogram of Sepal Length")
    fig = px.histogram(
        filtered_data, x="sepal_length", color="species", marginal="box", nbins=20
    )
    st.plotly_chart(fig)

with col5:
    st.subheader("Pairplot")
    pairplot_fig = sns.pairplot(filtered_data, hue="species")
    st.pyplot(pairplot_fig)

col6, col7, col8 = st.columns(3)

with col6:
    st.subheader("Scatter Plot of Sepal Length vs Sepal Width")
    fig = px.scatter(filtered_data, x="sepal_length", y="sepal_width", color="species")
    st.plotly_chart(fig)

with col7:
    st.subheader("Line Chart of Sepal Length")
    fig = px.line(filtered_data, x="species", y="sepal_length", color="species")
    st.plotly_chart(fig)


col9, col10 = st.columns(2)

with col9:
    st.subheader("Heatmap of Correlation Matrix")
    numeric_data = filtered_data.select_dtypes(include=["float64", "int64"])
    corr = numeric_data.corr()
    fig, ax = plt.subplots()
    sns.heatmap(corr, annot=True, ax=ax)
    st.pyplot(fig)

with col10:
    st.subheader("Species Count")
    species_count = filtered_data["species"].value_counts().reset_index()
    species_count.columns = ["species", "count"]
    fig = px.pie(species_count, names="species", values="count")
    st.plotly_chart(fig)


================================================
File: /frontend/app/performance/apps/multipage/multipage_app.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from urllib.error import URLError

import altair as alt
import pandas as pd

import streamlit as st
from streamlit.hello.utils import show_code


def data_frame_demo():
    @st.cache_data
    def get_UN_data():
        AWS_BUCKET_URL = "https://streamlit-demo-data.s3-us-west-2.amazonaws.com"
        df = pd.read_csv(AWS_BUCKET_URL + "/agri.csv.gz")
        return df.set_index("Region")

    try:
        df = get_UN_data()
        countries = st.multiselect(
            "Choose countries", list(df.index), ["China", "United States of America"]
        )
        if not countries:
            st.error("Please select at least one country.")
        else:
            data = df.loc[countries]
            data /= 1000000.0
            st.subheader("Gross agricultural production ($B)")
            st.dataframe(data.sort_index())

            data = data.T.reset_index()
            data = pd.melt(data, id_vars=["index"]).rename(
                columns={"index": "year", "value": "Gross Agricultural Product ($B)"}
            )
            chart = (
                alt.Chart(data)
                .mark_area(opacity=0.3)
                .encode(
                    x="year:T",
                    y=alt.Y("Gross Agricultural Product ($B):Q", stack=None),
                    color="Region:N",
                )
            )
            st.altair_chart(chart, use_container_width=True)
    except URLError as e:
        st.error(f"This demo requires internet access. Connection error: {e.reason}")


st.set_page_config(page_title="DataFrame demo", page_icon=":material/table:")
st.title("DataFrame demo")
st.write(
    """
    This demo shows how to use `st.dataframe` to visualize a Pandas DataFrame.
    Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).
    """
)
data_frame_demo()
show_code(data_frame_demo)


================================================
File: /frontend/app/performance/apps/multipage/multipage_app.py
================================================
# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from urllib.error import URLError

import altair as alt
import pandas as pd

import streamlit as st
from streamlit.hello.utils import show_code


def data_frame_demo():
    @st.cache_data
    def get_UN_data():
        AWS_BUCKET_URL = "https://streamlit-demo-data.s3-us-west-2.amazonaws.com"
        df = pd.read_csv(AWS_BUCKET_URL + "/agri.csv.gz")
        return df.set_index("Region")

    try:
        df = get_UN_data()
        countries = st.multiselect(
            "Choose countries", list(df.index), ["China", "United States of America"]
        )
        if not countries:
            st.error("Please select at least one country.")
        else:
            data = df.loc[countries]
            data /= 1000000.0
            st.subheader("Gross agricultural production ($B)")
            st.dataframe(data.sort_index())

            data = data.T.reset_index()
            data = pd.melt(data, id_vars=["index"]).rename(
                columns={"index": "year", "value": "Gross Agricultural Product ($B)"}
            )
            chart = (
                alt.Chart(data)
                .mark_area(opacity=0.3)
                .encode(
                    x="year:T",
                    y=alt.Y("Gross Agricultural Product ($B):Q", stack=None),
                    color="Region:N",
                )
            )
            st.altair_chart(chart, use_container_width=True)
    except URLError as e:
        st.error(f"This demo requires internet access. Connection error: {e.reason}")


st.set_page_config(page_title="DataFrame demo", page_icon=":material/table:")
st.title("DataFrame demo")
st.write(
    """
    This demo shows how to use `st.dataframe` to visualize a Pandas DataFrame.
    Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).
    """
)
data_frame_demo()
show_code(data_frame_demo)


================================================
File: /frontend/app/performance/lighthouse/LighthouseOrchestrator.mjs
================================================
/* eslint-disable no-console */
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
// @ts-check
// eslint-disable-next-line import/no-extraneous-dependencies
import lighthouse from "lighthouse"
// eslint-disable-next-line import/no-extraneous-dependencies
import * as chromeLauncher from "chrome-launcher"
// eslint-disable-next-line import/no-extraneous-dependencies
import { default as treeKill } from "tree-kill"

import fs from "fs"
import path from "path"
import { exec, execSync } from "child_process"

import { MODES } from "./constants.mjs"

const PATHNAME = new URL(".", import.meta.url).pathname
const REPORTS_DIRECTORY = path.resolve(PATHNAME, "./reports")

/**
 * This class is responsible for managing the lifecycle of a headless Chrome
 * instance and a Streamlit application, and running Lighthouse audits on the
 * Streamlit application.
 */
export class LighthouseOrchestrator {
  constructor() {
    this.chrome = null
    this.streamlit = null
  }

  /**
   * Initialize the LighthouseOrchestrator by launching a headless Chrome
   * instance.
   * @returns {Promise<void>}
   */
  async initialize() {
    this.chrome = await chromeLauncher.launch({ chromeFlags: ["--headless"] })
  }

  /**
   * Destroy the LighthouseOrchestrator by stopping the Chrome and Streamlit
   * processes.
   * @returns {Promise<void>}
   */
  async destroy() {
    this.chrome?.kill()

    if (this.streamlit) {
      await this.stopStreamlit()
    }
  }

  /**
   * Creates a virtual environment for Streamlit.
   * @param {string} streamlitRoot - The root directory of the Streamlit project.
   */
  createVirtualEnvironment(streamlitRoot) {
    console.log(`Creating virtual environment for Streamlit...`)
    const libPath = path.join(streamlitRoot, "lib")
    execSync(`cd ${libPath} && python -m venv venv && cd ${streamlitRoot}`)
    console.log(`Virtual environment created`)
  }

  /**
   * Start a Streamlit application.
   * @param {string} appPath - The path to the Streamlit application.
   * @param {string} streamlitRoot - The root directory of the Streamlit
   * installation.
   * @returns {Promise<boolean>} - Resolves to true if Streamlit starts
   * successfully.
   * @throws {Error} - If Streamlit is already running.
   */
  startStreamlit(appPath, streamlitRoot) {
    if (this.streamlit) {
      throw new Error("Streamlit is already running")
    }

    return new Promise((resolve, reject) => {
      console.log(`Starting Streamlit for ${appPath}...`)

      const activatePath = path.join(streamlitRoot, "lib/venv/bin/activate")

      if (!fs.existsSync(activatePath)) {
        this.createVirtualEnvironment(streamlitRoot)
      }

      // NOTE: These command args match what is in `e2e_playwright/conftest.py`
      this.streamlit = exec(
        ` . ${activatePath} && \
          streamlit run ${appPath} \
            --server.headless true \
            --global.developmentMode false \
            --global.e2eTest true \
            --server.port 3001 \
            --browser.gatherUsageStats false \
            --server.fileWatcherType none \
            --server.enableStaticServing true`
      )

      this.streamlit.stdout?.on("data", data => {
        console.log(`${data}`)

        if (data.includes("You can now view your Streamlit app")) {
          resolve(true)
        }
      })

      this.streamlit.stderr?.on("data", data => {
        console.error(`${data}`)
      })

      this.streamlit.on("close", code => {
        if (code === 0) {
          console.log("Streamlit process exited successfully")
          this.streamlit = null
          return resolve(true)
        }

        reject(`child process exited with code ${code}`)
      })
    })
  }

  /**
   * Stop the running Streamlit application.
   * @returns {Promise<boolean>} - Resolves to true if Streamlit stops
   * successfully.
   * @throws {Error} - If Streamlit is not running.
   */
  async stopStreamlit() {
    console.log("Stopping Streamlit...")

    return new Promise((resolve, reject) => {
      if (!this.streamlit || !this.streamlit.pid) {
        throw new Error("Streamlit is not running")
      }

      treeKill(this.streamlit.pid, err => {
        if (err) {
          return reject(err)
        }

        this.streamlit = null
        console.log("Stopped Streamlit")
        resolve(true)
      })
    })
  }

  /**
   * Run Lighthouse on the Streamlit application.
   * @param {string} appName - The name of the application.
   * @param {string} mode - The mode in which to run Lighthouse.
   * @param {string} runId - The ID of the run.
   * @returns {Promise<void>}
   * @throws {Error} - If Chrome is not running or if there is no runner result.
   */
  async runLighthouse(appName, mode, runId) {
    const sanitizedRunId = path.basename(runId)
    const appBaseName = (appName.split("/").pop() || "")?.split(".")[0]

    console.log(`Running Lighthouse for ${appBaseName} in ${mode} mode`)

    if (!this.chrome) {
      throw new Error("Chrome is not running")
    }

    const REPORT_NAME = [sanitizedRunId, appBaseName, mode, "lhreport"].join(
      "_-_"
    )

    const runnerResult = await lighthouse(
      "http://localhost:3001/",
      {
        logLevel: "info",
        output: "html",
        onlyCategories: ["performance"],
        port: this.chrome.port,
      },
      MODES[mode]
    )

    if (!runnerResult) {
      throw new Error("No runner result")
    }

    // `.report` is the HTML report as a string
    const reportHtml = runnerResult.report
    if (Array.isArray(reportHtml)) {
      throw new Error("Report is an array")
    }

    if (!fs.existsSync(REPORTS_DIRECTORY)) {
      fs.mkdirSync(REPORTS_DIRECTORY)
    }

    fs.writeFileSync(
      path.join(REPORTS_DIRECTORY, `${REPORT_NAME}.html`),
      reportHtml
    )
    fs.writeFileSync(
      path.join(REPORTS_DIRECTORY, `${REPORT_NAME}.json`),
      JSON.stringify(runnerResult.lhr)
    )

    // `.lhr` is the Lighthouse Result as a JS object
    console.log("Report is done for", runnerResult.lhr.finalDisplayedUrl)
    console.log(
      "Performance score was",
      (runnerResult.lhr.categories.performance.score || 0) * 100
    )
  }
}


================================================
File: /frontend/app/performance/lighthouse/constants.mjs
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
// @ts-check
// eslint-disable-next-line import/no-extraneous-dependencies
import { defaultConfig, desktopConfig } from "lighthouse"

import path from "path"
import { execSync } from "child_process"

const getGitRoot = () => {
  try {
    return execSync("git rev-parse --show-toplevel").toString().trim()
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("Not a git repository or no git installed.")
    process.exit(1)
  }
}

/**
 * The root directory of the Streamlit project.
 * @type {string}
 */
export const STREAMLIT_ROOT = getGitRoot()

/**
 * The directory containing performance apps.
 * @type {string}
 */
export const PERFORMANCE_APPS_DIRECTORY = path.resolve(
  STREAMLIT_ROOT,
  "./frontend/app/performance/apps"
)

export const MULTIPAGE_APPS = ["./multipage/multipage_app.py"]

/**
 * Mode configurations that Lighthouse will run in.
 * @see https://github.com/GoogleChrome/lighthouse/blob/main/docs/configuration.md
 */
export const MODES = {
  desktop: desktopConfig,
  mobile: defaultConfig,
}


================================================
File: /frontend/app/performance/lighthouse/run.mjs
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
// @ts-check
import fs from "fs"
import path from "path"

import { LighthouseOrchestrator } from "./LighthouseOrchestrator.mjs"
import {
  MODES,
  MULTIPAGE_APPS,
  PERFORMANCE_APPS_DIRECTORY,
  STREAMLIT_ROOT,
} from "./constants.mjs"

/**
 * Run the Lighthouse performance test suite.
 * @param {string} appsDirectory The directory containing the streamlit apps to
 * run
 * @param {string[]} additionalApps An array of additional performance apps to
 * run
 */
const run = async (appsDirectory, additionalApps = []) => {
  // Get the current date and time, convert it to an ISO string, remove
  // characters '-', ':', '.', 'T', and 'Z'.
  const now = new Date().toISOString().replace(/[-:.TZ]/g, "")
  // Create a runId in the format 'YYYYMMDD-HHMMSS' for lexicographical sorting.
  const runId = `${now.slice(0, 8)}-${now.slice(8, 14)}`

  /**
   * An array of performance app filenames.
   * @type {string[]}
   */
  const appsFromAppsDirectory = fs
    .readdirSync(appsDirectory, { withFileTypes: true })
    .filter(entry => {
      return (
        !entry.isDirectory() &&
        entry.name.endsWith(".py") &&
        entry.name !== "__init__.py"
      )
    })
    .map(({ name }) => name)

  const performanceApps = [...appsFromAppsDirectory, ...additionalApps]
  const orchestrator = new LighthouseOrchestrator()

  process.on("SIGINT", async () => {
    orchestrator.destroy()
    // Exit with a non-zero status code to indicate that the process was
    // interrupted.
    process.exit(1)
  })

  await orchestrator.initialize()

  try {
    for (const appName of performanceApps) {
      const appPath = path.join(appsDirectory, appName)
      await orchestrator.startStreamlit(appPath, STREAMLIT_ROOT)

      for (const mode of Object.keys(MODES)) {
        await orchestrator.runLighthouse(appName, mode, runId)
      }

      await orchestrator.stopStreamlit()
    }
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error(e)
    orchestrator.destroy()
    // Exit with a non-zero status code to indicate that there was an error.
    process.exit(1)
  }

  orchestrator.destroy()
}

await run(PERFORMANCE_APPS_DIRECTORY, MULTIPAGE_APPS)

process.exit(0)


================================================
File: /frontend/app/performance/lighthouse/.gitignore
================================================
reports/


================================================
File: /frontend/app/src/FontPreload.test.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import fs from "fs"
import path from "path"

// Current hashes for our preloaded font assets:
const REGULAR_HASH = "DZLUzqI4"
const SEMI_BOLD_HASH = "sKQIyTMz"
const BOLD_HASH = "-6c9oR8J"

// Render a copy of index.html file to test
const HTML = fs.readFileSync(path.resolve(__dirname, "../index.html"), "utf8")
document.documentElement.innerHTML = HTML.toString()

function getFontHref(index: number): string {
  const fontPreloadElements: NodeList | null = document.querySelectorAll(
    "link[rel='preload']"
  )
  const fontElement: HTMLLinkElement | null = fontPreloadElements.item(
    index
  ) as HTMLLinkElement
  return fontElement ? fontElement.href : ""
}

test("index.html preloads 3 expected fonts with expected hashes", () => {
  const expectedfontHashes = [REGULAR_HASH, SEMI_BOLD_HASH, BOLD_HASH]
  const preloadedFontsCount = document.querySelectorAll(
    "link[rel='preload']"
  ).length
  expect(preloadedFontsCount).toBe(3)

  for (let i = 0; i < preloadedFontsCount; i++) {
    const fontHref = getFontHref(i)
    const fontFullName = fontHref.split("/").pop()
    const fontHash = fontFullName ? fontFullName.split(".")[1] : ""
    expect(fontHash).toBe(expectedfontHashes[i])
  }
})


================================================
File: /frontend/app/src/MetricsManager.test.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Disable Typescript checking, since mm.track has private scope
// @ts-nocheck

import UAParser from "ua-parser-js"

import {
  MetricsEvent,
  mockSessionInfo,
  mockSessionInfoProps,
  SessionInfo,
  setCookie,
} from "@streamlit/lib"

import { DEFAULT_METRICS_CONFIG, MetricsManager } from "./MetricsManager"

const getMetricsManager = (
  sessionInfo?: SessionInfo,
  metricsConfig: string = DEFAULT_METRICS_CONFIG,
  mockRequestDefaultMetricsConfig = true
): MetricsManager => {
  const mm = new MetricsManager(sessionInfo || mockSessionInfo())
  if (mockRequestDefaultMetricsConfig) {
    mm.requestDefaultMetricsConfig = vi.fn()
  }
  mm.setMetricsConfig(metricsConfig)
  mm.track = vi.fn()
  mm.identify = vi.fn()
  mm.postMessageEvent = vi.fn()
  return mm
}

// Mock fetch for our metrics config request
global.fetch = vi.fn(() =>
  Promise.resolve({
    ok: true,
    json: () =>
      Promise.resolve({ url: "https://data.streamlit.io/metrics.json" }),
  })
)

// Mock AbortSignal, otherwise TypeError timeout is not a function
global.AbortSignal = {
  timeout: vi.fn(),
}

const DEFAULT_EVENT_DATA = {
  reportHash: "Not initialized",
  dev: false,
  source: "browser",
  streamlitVersion: "mockStreamlitVersion",
  isHello: false,
  machineIdV3: "mockInstallationIdV3",
  contextPageUrl: window.location.href,
  contextPageTitle: document.title,
  contextPagePath: window.location.pathname,
  contextPageReferrer: document.referrer,
  contextPageSearch: window.location.search,
  contextLocale: window.navigator.userLanguage || window.navigator.language,
  contextUserAgent: window.navigator.userAgent,
}

const UPDATE_EVENT_DATA = {
  ...DEFAULT_EVENT_DATA,
  reportHash: "mockAppHash",
}

// Checks generic metric event fields
const checkDefaultEventData = (
  generatedProto: MetricsEvent,
  afterUpdateReport = true
): void => {
  const expectedData = afterUpdateReport
    ? UPDATE_EVENT_DATA
    : DEFAULT_EVENT_DATA
  // Check general metrics fields
  expect(generatedProto.anonymousId).toHaveLength(36)
  expect(generatedProto.reportHash).toEqual(expectedData.reportHash)
  expect(generatedProto.dev).toEqual(expectedData.dev)
  expect(generatedProto.source).toEqual(expectedData.source)
  expect(generatedProto.streamlitVersion).toEqual(
    expectedData.streamlitVersion
  )
  expect(generatedProto.isHello).toEqual(expectedData.isHello)
  expect(generatedProto.machineIdV3).toEqual(expectedData.machineIdV3)
  // Context Data Fields
  expect(generatedProto.contextPageUrl).toEqual(expectedData.contextPageUrl)
  expect(generatedProto.contextPageTitle).toEqual(
    expectedData.contextPageTitle
  )
  expect(generatedProto.contextPagePath).toEqual(expectedData.contextPagePath)
  expect(generatedProto.contextPageReferrer).toEqual(
    expectedData.contextPageReferrer
  )
  expect(generatedProto.contextPageSearch).toEqual(
    expectedData.contextPageSearch
  )
  expect(generatedProto.contextLocale).toEqual(expectedData.contextLocale)
  expect(generatedProto.contextUserAgent).toEqual(
    expectedData.contextUserAgent
  )
}

afterEach(() => {
  window.analytics = undefined
  window.localStorage.clear()
  setCookie("ajs_anonymous_id")
})

test("does not track while uninitialized", () => {
  const mm = getMetricsManager()

  mm.enqueue("ev1", { data1: 11 })
  mm.enqueue("ev2", { data2: 12 })
  mm.enqueue("ev3", { data3: 13 })

  expect(mm.track.mock.calls.length).toBe(0)
})

describe("initialize", () => {
  test("does not track when initialized with gatherUsageStats=false", () => {
    const mm = getMetricsManager()
    mm.initialize({ gatherUsageStats: false })

    mm.enqueue("ev1", { data1: 11 })
    mm.enqueue("ev2", { data2: 12 })
    mm.enqueue("ev3", { data3: 13 })

    expect(mm.track.mock.calls.length).toBe(0)
    expect(mm.actuallySendMetrics).toBe(false)
  })

  test("does not track when metrics config set to off", () => {
    const mm = getMetricsManager(undefined, "off")
    mm.initialize({ gatherUsageStats: true })

    mm.enqueue("ev1", { data1: 11 })
    mm.enqueue("ev2", { data2: 12 })
    mm.enqueue("ev3", { data3: 13 })

    expect(mm.track.mock.calls.length).toBe(0)
    expect(mm.actuallySendMetrics).toBe(false)
  })

  test("does not call requestDefaultMetricsConfig when metrics config set", () => {
    const mm = getMetricsManager()
    mm.initialize({ gatherUsageStats: true })

    expect(mm.requestDefaultMetricsConfig.mock.calls.length).toBe(0)
  })

  test("calls requestDefaultMetricsConfig when no metrics config received", () => {
    const mm = getMetricsManager(undefined, "")
    mm.initialize({ gatherUsageStats: true })

    expect(mm.requestDefaultMetricsConfig.mock.calls.length).toBe(1)
  })

  test("attempts fetch when no metrics config received", () => {
    // eslint-disable-next-line no-proto
    const getItemSpy = vi.spyOn(window.localStorage.__proto__, "getItem")
    const mm = getMetricsManager(undefined, "", false)
    mm.initialize({ gatherUsageStats: true })

    // Checks for cached config first
    expect(getItemSpy).toBeCalledWith("stMetricsConfig")
    // Fetches if no cached config
    expect(fetch.mock.calls.length).toBe(1)
    expect(fetch.mock.calls[0][0]).toEqual(DEFAULT_METRICS_CONFIG)
  })
})

describe("metrics helpers", () => {
  const RESULT = new UAParser().getResult()

  const PAGE_PROFILE_DATA = {
    commands: [],
    execTime: 50,
    prepTime: 50,
    config: {},
    uncaughtException: [],
    attributions: ["streamlit_extras"],
    timezone: "('UTC', 'UTC')",
    headless: false,
    isFragmentRun: false,
    os: RESULT.os.name || "Unknown",
    appId: "mockAppId",
    numPages: 1,
    sessionId: "mockSessionId",
    pythonVersion: "7.7.7",
    pageScriptHash: "mockPageScriptHash",
    activeTheme: "Use system setting",
    totalLoadTime: 100,
    browserName: RESULT.browser.name || "Unknown",
    browserVersion: RESULT.browser.version || "Unknown",
    deviceType: RESULT.device.type || "Unknown",
  }
  test("buildEventProto populates expected fields - viewReport", () => {
    const mm = getMetricsManager()
    mm.initialize({ gatherUsageStats: true })
    const viewReportProto = mm.buildEventProto("viewReport")

    expect(viewReportProto.event).toEqual("viewReport")
    checkDefaultEventData(viewReportProto, false)
  })

  test("buildEventProto populates expected fields - updateReport", () => {
    const mm = getMetricsManager()
    mm.initialize({ gatherUsageStats: true })
    mm.setAppHash("mockAppHash")
    const updateReportProto = mm.buildEventProto("updateReport")

    expect(updateReportProto.event).toEqual("updateReport")
    checkDefaultEventData(updateReportProto)
  })

  test("buildEventProto populates expected fields - pageProfile", () => {
    const mm = getMetricsManager()
    mm.initialize({ gatherUsageStats: true })
    mm.setAppHash("mockAppHash")
    const pageProfileProto = mm.buildEventProto(
      "pageProfile",
      PAGE_PROFILE_DATA
    )

    expect(pageProfileProto.event).toEqual("pageProfile")
    checkDefaultEventData(pageProfileProto)
    // Additional Page Profile Event Fields
    expect(pageProfileProto.commands).toEqual(PAGE_PROFILE_DATA.commands)
    expect(pageProfileProto.execTime).toEqual(PAGE_PROFILE_DATA.execTime)
    expect(pageProfileProto.prepTime).toEqual(PAGE_PROFILE_DATA.prepTime)
    expect(pageProfileProto.config).toEqual(PAGE_PROFILE_DATA.config)
    expect(pageProfileProto.uncaughtException).toEqual(
      PAGE_PROFILE_DATA.uncaughtException
    )
    expect(pageProfileProto.attributions).toEqual(
      PAGE_PROFILE_DATA.attributions
    )
    expect(pageProfileProto.timezone).toEqual(PAGE_PROFILE_DATA.timezone)
    expect(pageProfileProto.headless).toEqual(PAGE_PROFILE_DATA.headless)
    expect(pageProfileProto.isFragmentRun).toEqual(
      PAGE_PROFILE_DATA.isFragmentRun
    )
    expect(pageProfileProto.os).toEqual(PAGE_PROFILE_DATA.os)
    expect(pageProfileProto.appId).toEqual(PAGE_PROFILE_DATA.appId)
    expect(pageProfileProto.numPages).toEqual(PAGE_PROFILE_DATA.numPages)
    expect(pageProfileProto.sessionId).toEqual(PAGE_PROFILE_DATA.sessionId)
    expect(pageProfileProto.pythonVersion).toEqual(
      PAGE_PROFILE_DATA.pythonVersion
    )
    expect(pageProfileProto.pageScriptHash).toEqual(
      PAGE_PROFILE_DATA.pageScriptHash
    )
    expect(pageProfileProto.activeTheme).toEqual(PAGE_PROFILE_DATA.activeTheme)
    expect(pageProfileProto.totalLoadTime).toEqual(
      PAGE_PROFILE_DATA.totalLoadTime
    )
    expect(pageProfileProto.browserName).toEqual(PAGE_PROFILE_DATA.browserName)
    expect(pageProfileProto.browserVersion).toEqual(
      PAGE_PROFILE_DATA.browserVersion
    )
    expect(pageProfileProto.deviceType).toEqual(PAGE_PROFILE_DATA.deviceType)
  })

  test("buildEventProto populates expected fields - menuClick", () => {
    const mm = getMetricsManager()
    mm.initialize({ gatherUsageStats: true })
    mm.setAppHash("mockAppHash")
    const menuClickProto = mm.buildEventProto("menuClick", {
      label: "mockLabel",
    })
    expect(menuClickProto.event).toEqual("menuClick")
    checkDefaultEventData(menuClickProto)
    // Additional Menu Click Event Fields
    expect(menuClickProto.label).toEqual("mockLabel")
  })

  test("getAnonymousId is called on initialization, saves uuid to this.anonymousId", () => {
    const mm = getMetricsManager()
    expect(mm.anonymousId).toBe("")
    mm.initialize({ gatherUsageStats: true })
    expect(mm.anonymousId).toHaveLength(36)
  })

  test("getAnonymousId checks for cached anonymousId in cookie and localStorage", () => {
    expect(window.localStorage.getItem("ajs_anonymous_id")).toBeNull()
    expect(document.cookie).not.toContain("ajs_anonymous_id")

    const setCookieSpy = vi.spyOn(document, "cookie", "set")
    const getCookieSpy = vi.spyOn(document, "cookie", "get")
    // eslint-disable-next-line no-proto
    const getItemSpy = vi.spyOn(window.localStorage.__proto__, "getItem")
    const setItemSpy = vi.spyOn(window.localStorage.__proto__, "setItem")
    const mm = getMetricsManager()
    mm.initialize({ gatherUsageStats: true })

    expect(getItemSpy).toBeCalledWith("ajs_anonymous_id")
    expect(getCookieSpy).toHaveBeenCalled()
    expect(setCookieSpy).toHaveBeenCalled()
    expect(setItemSpy).toHaveBeenCalled()
    expect(mm.anonymousId).toHaveLength(36)
    expect(window.localStorage.getItem("ajs_anonymous_id")).toHaveLength(36)
    expect(document.cookie).toContain("ajs_anonymous_id")
  })
})

test("sends events via postMessage when config set", () => {
  const mm = getMetricsManager(undefined, "postMessage")
  mm.initialize({ gatherUsageStats: true })

  mm.enqueue("ev1", { data1: 11 })
  mm.enqueue("ev2", { data2: 12 })
  mm.enqueue("ev3", { data3: 13 })

  expect(mm.track.mock.calls.length).toBe(0)
  expect(mm.actuallySendMetrics).toBe(true)
  expect(mm.postMessageEvent.mock.calls.length).toBe(3)
})

test("enqueues events before initialization", () => {
  const sessionInfo = mockSessionInfo()
  const mm = getMetricsManager(sessionInfo)

  mm.enqueue("ev1", { data1: 11 })
  mm.enqueue("ev2", { data2: 12 })
  mm.enqueue("ev3", { data3: 13 })

  expect(mm.track.mock.calls.length).toBe(0)

  mm.initialize({ gatherUsageStats: true })

  expect(mm.track.mock.calls.length).toBe(3)
})

test("enqueues events when disconnected, then sends them when connected again", () => {
  const sessionInfo = mockSessionInfo()
  const mm = getMetricsManager(sessionInfo)
  mm.initialize({ gatherUsageStats: true })

  // "Disconnect" our SessionInfo. Enqueued events should not be tracked.
  sessionInfo.setCurrent(undefined)
  expect(sessionInfo.isSet).toBe(false)

  mm.enqueue("ev1", { data1: 11 })
  mm.enqueue("ev2", { data2: 12 })
  mm.enqueue("ev3", { data3: 13 })

  expect(mm.track.mock.calls.length).toBe(0)

  // Initialize the SessionInfo. The next call to enqueue should cause
  // all of our enqueued messages to get tracked.
  sessionInfo.setCurrent(mockSessionInfoProps())
  mm.enqueue("ev4", { data4: 14 })
  expect(mm.track.mock.calls.length).toBe(4)
})

test("tracks events immediately after initialized", () => {
  const mm = getMetricsManager()
  mm.initialize({ gatherUsageStats: true })

  expect(mm.track.mock.calls.length).toBe(0)
  mm.enqueue("ev1", { data1: 11 })
  expect(mm.track.mock.calls.length).toBe(1)
  mm.enqueue("ev2", { data2: 12 })
  expect(mm.track.mock.calls.length).toBe(2)
  mm.enqueue("ev3", { data3: 13 })
  expect(mm.track.mock.calls.length).toBe(3)
})

test("tracks host data when in an iFrame", () => {
  const mm = getMetricsManager()
  mm.setMetadata({
    hostedAt: "S4A",
    k: "v",
  })
  mm.initialize({ gatherUsageStats: true })
  mm.enqueue("ev1", { data1: 11 })

  const trackCall = mm.track.mock.calls[0][0]
  // Check that unexpected event data not included
  expect(trackCall.data1).not.toBeDefined()

  // Check that only expected metadata fields present (see getHostTrackingData)
  expect(trackCall.hostedAt).toEqual("S4A")
  expect(trackCall.k).not.toBeDefined()
})

test("tracks installation data", () => {
  const sessionInfo = mockSessionInfo()
  const mm = getMetricsManager(sessionInfo)
  mm.initialize({ gatherUsageStats: true })
  mm.enqueue("ev1", { data1: 11 })

  const trackCall = mm.track.mock.calls[0][0]
  expect(trackCall.machineIdV3).toEqual(sessionInfo.current.installationIdV3)
})


================================================
File: /frontend/app/src/MetricsManager.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import pick from "lodash/pick"
import { v4 as uuidv4 } from "uuid"

import {
  DeployedAppMetadata,
  getCookie,
  IGuestToHostMessage,
  IMetricsEvent,
  IS_DEV_ENV,
  localStorageAvailable,
  logAlways,
  logError,
  MetricsEvent,
  SessionInfo,
  setCookie,
} from "@streamlit/lib"

// Default metrics config fetched when none provided by host config endpoint
export const DEFAULT_METRICS_CONFIG = "https://data.streamlit.io/metrics.json"

type EventName = "viewReport" | "updateReport" | "pageProfile" | "menuClick"
type Event = [EventName, Partial<IMetricsEvent>]

export class MetricsManager {
  /** The app's SessionInfo instance. */
  private readonly sessionInfo: SessionInfo

  private initialized = false

  /**
   * Whether to send metrics to the server.
   */
  private actuallySendMetrics = false

  /**
   * The URL to which metrics are sent.
   */
  private metricsUrl: string | undefined = undefined

  /**
   * Function to send a message to the host via postMessage communication
   */
  private sendMessageToHost: (message: IGuestToHostMessage) => void = () => {}

  /**
   * The anonymous ID of the user.
   */
  private anonymousId = ""

  /**
   * Queue of metrics events that were enqueued before this MetricsManager was
   * initialized.
   */
  private pendingEvents: Event[] = []

  /**
   * App hash uniquely identifies "projects" so we can tell
   * how many projects are being created with Streamlit while still keeping
   * possibly-sensitive info like the mainScriptPath outside of our metrics
   * services.
   */
  private appHash = "Not initialized"

  private metadata: DeployedAppMetadata = {}

  public constructor(sessionInfo: SessionInfo) {
    this.sessionInfo = sessionInfo
  }

  public async initialize({
    gatherUsageStats,
    sendMessageToHost,
  }: {
    gatherUsageStats: boolean
    sendMessageToHost: (message: IGuestToHostMessage) => void
  }): Promise<void> {
    this.sendMessageToHost = sendMessageToHost
    // Handle if the user or the host has disabled metrics
    this.actuallySendMetrics = gatherUsageStats && this.metricsUrl !== "off"
    this.getAnonymousId()

    // Trigger fallback to fetch default metrics config if not provided by host
    if (this.actuallySendMetrics && !this.metricsUrl) {
      await this.requestDefaultMetricsConfig()

      // If metricsUrl still undefined, deactivate metrics
      if (!this.metricsUrl) {
        logError("Undefined metrics config - deactivating metrics tracking.")
        this.actuallySendMetrics = false
      }
    }

    if (this.actuallySendMetrics) {
      this.sendPendingEvents()
    }

    logAlways("Gather usage stats: ", this.actuallySendMetrics)
    this.initialized = true
  }

  public enqueue(
    evName: EventName,
    evData: Partial<IMetricsEvent> = {}
  ): void {
    if (!this.initialized || !this.sessionInfo.isSet) {
      this.pendingEvents.push([evName, evData])
      return
    }

    if (!this.actuallySendMetrics) {
      return
    }

    if (this.pendingEvents.length) {
      this.sendPendingEvents()
    }
    this.send(evName, evData)
  }

  // App hash gets set when updateReport happens.
  // This means that it will be attached to most, but not all, metrics events.
  // The viewReport and createReport events are sent before updateReport happens,
  // so they will not include the appHash.
  public setAppHash = (appHash: string): void => {
    this.appHash = appHash
  }

  // Set metrics url if sent by the host_config
  public setMetricsConfig = (metricsUrl = ""): void => {
    this.metricsUrl = metricsUrl
  }

  public setMetadata(metadata: DeployedAppMetadata): void {
    this.metadata = metadata
  }

  // Fallback - Checks if cached in localStorage, otherwise fetches the config from a default URL
  private async requestDefaultMetricsConfig(): Promise<any> {
    const isLocalStoreAvailable = localStorageAvailable()

    if (isLocalStoreAvailable) {
      const cachedConfig = window.localStorage.getItem("stMetricsConfig")
      if (cachedConfig) {
        this.metricsUrl = cachedConfig
        return
      }
    }

    try {
      const response = await fetch(DEFAULT_METRICS_CONFIG, {
        signal: AbortSignal.timeout(5000),
      })

      if (!response.ok) {
        this.metricsUrl = undefined
        logError("Failed to fetch metrics config: ", response.status)
      } else {
        const data = await response.json()
        this.metricsUrl = data.url ?? undefined
        if (isLocalStoreAvailable && this.metricsUrl) {
          window.localStorage.setItem("stMetricsConfig", this.metricsUrl)
        }
      }
    } catch (err) {
      logError("Failed to fetch metrics config:", err)
    }
  }

  // The schema of metrics events (including key names and value types) should
  // only be changed when requested by the data team. This is why `reportHash`
  // retains its old name.
  private send(evName: EventName, evData: Partial<IMetricsEvent> = {}): void {
    const data = this.buildEventProto(evName, evData)

    // Don't actually track events when in dev mode, just print them instead.
    if (IS_DEV_ENV) {
      logAlways("[Dev mode] Not tracking stat datapoint: ", evName, data)
    } else if (this.metricsUrl === "postMessage") {
      this.postMessageEvent(evName, data)
    } else {
      this.track(data)
    }
  }

  private sendPendingEvents(): void {
    this.pendingEvents.forEach(([evName, evData]) => {
      this.send(evName, evData)
    })
    this.pendingEvents = []
  }

  // eslint-disable-next-line class-methods-use-this
  private async track(data: MetricsEvent): Promise<void> {
    // Send the event to the metrics URL
    // @ts-expect-error - send func calls track & checks metricsUrl defined
    const request = new Request(this.metricsUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data.toJSON()),
    })
    await fetch(request)
  }

  // Helper to send metrics events to host
  private postMessageEvent(eventName: EventName, data: MetricsEvent): void {
    this.sendMessageToHost({
      type: "METRICS_EVENT",
      eventName,
      data,
    })
  }

  // Helper to build the event proto
  private buildEventProto(
    evName: EventName,
    data: Partial<IMetricsEvent>
  ): MetricsEvent {
    const eventProto = new MetricsEvent({
      event: evName,
      anonymousId: this.anonymousId,
      ...this.getHostTrackingData(),
      ...this.getInstallationData(),
      reportHash: this.appHash,
      dev: IS_DEV_ENV,
      source: "browser",
      streamlitVersion: this.sessionInfo.current.streamlitVersion,
      isHello: this.sessionInfo.isHello,
      ...this.getContextData(),
    })

    if (evName === "menuClick") {
      eventProto.label = data.label as string
    } else if (evName === "pageProfile") {
      return new MetricsEvent({ ...eventProto, ...data })
    }

    return eventProto
  }

  // Get the installation IDs from the session
  private getInstallationData(): Partial<IMetricsEvent> {
    return {
      machineIdV3: this.sessionInfo.current.installationIdV3,
    }
  }

  // Use the tracking data injected by the host of the app if included.
  private getHostTrackingData(): DeployedAppMetadata {
    if (this.metadata) {
      return pick(this.metadata, [
        "hostedAt",
        "owner",
        "repo",
        "branch",
        "mainModule",
        "creatorId",
      ])
    }
    return {}
  }

  // Get context data for events
  private getContextData(): Partial<IMetricsEvent> {
    return {
      contextPageUrl: window.location.href,
      contextPageTitle: document.title,
      contextPagePath: window.location.pathname,
      contextPageReferrer: document.referrer,
      contextPageSearch: window.location.search,
      contextLocale: window.navigator.language,
      contextUserAgent: window.navigator.userAgent,
    }
  }

  /**
   * Get/Create user's anonymous ID
   * Checks if existing in cookie or localStorage, otherwise generates
   * a new UUID and stores it in both.
   */
  private getAnonymousId(): void {
    // If metrics disabled, anonymous ID unnecessary
    if (!this.actuallySendMetrics) return

    const anonymousIdKey = "ajs_anonymous_id"
    const isLocalStoreAvailable = localStorageAvailable()

    const anonymousIdCookie = getCookie(anonymousIdKey)
    const anonymousIdLocalStorage = isLocalStoreAvailable
      ? window.localStorage.getItem(anonymousIdKey)
      : null

    const expiration = new Date()
    expiration.setFullYear(new Date().getFullYear() + 1)

    if (anonymousIdCookie) {
      this.anonymousId = anonymousIdCookie

      if (isLocalStoreAvailable) {
        window.localStorage.setItem(anonymousIdKey, anonymousIdCookie)
      }
    } else if (anonymousIdLocalStorage) {
      // Removes excess quotes from localStorage string value
      this.anonymousId = JSON.parse(anonymousIdLocalStorage)

      setCookie(anonymousIdKey, this.anonymousId, expiration)
    } else {
      this.anonymousId = uuidv4()

      setCookie(anonymousIdKey, this.anonymousId, expiration)
      if (isLocalStoreAvailable) {
        window.localStorage.setItem(anonymousIdKey, this.anonymousId)
      }
    }
  }
}


================================================
File: /frontend/app/src/SessionEventDispatcher.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Signal } from "typed-signals"

import { SessionEvent } from "@streamlit/lib"

/** Redispatches SessionEvent messages received from the server. */
export class SessionEventDispatcher {
  /** Dispatched when a SessionEvent is received */
  public readonly onSessionEvent = new Signal<(evt: SessionEvent) => void>()

  /** Redispatches a ForwardMsg.SessionEvent via a signal. */
  public handleSessionEventMsg(msg: SessionEvent): void {
    this.onSessionEvent.emit(msg)
  }
}


================================================
File: /frontend/app/src/StreamlitLib.test.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable @typescript-eslint/no-unused-vars */

import React, { PureComponent, ReactElement } from "react"

import { screen, waitFor } from "@testing-library/react"

import {
  AppRoot,
  ComponentRegistry,
  createFormsData,
  Delta as DeltaProto,
  Element as ElementProto,
  FileUploadClient,
  FormsData,
  ForwardMsgMetadata as ForwardMsgMetadataProto,
  render,
  ScriptRunState,
  SessionInfo,
  StreamlitEndpoints,
  Text as TextProto,
  VerticalBlock,
  WidgetStateManager,
} from "@streamlit/lib"

/**
 * Example StreamlitEndpoints implementation.
 */
class Endpoints implements StreamlitEndpoints {
  public buildComponentURL(): string {
    throw new Error("Unimplemented")
  }

  public buildMediaURL(url: string): string {
    return url
  }

  public buildFileUploadURL(url: string): string {
    return url
  }

  public buildAppPageURL(): string {
    throw new Error("Unimplemented")
  }

  public uploadFileUploaderFile(): Promise<void> {
    return Promise.reject(new Error("Unimplemented"))
  }

  public deleteFileAtURL(): Promise<void> {
    return Promise.reject(new Error("Unimplemented"))
  }

  public fetchCachedForwardMsg(): Promise<Uint8Array> {
    return Promise.reject(new Error("Unimplemented"))
  }
}

interface Props {}

interface State {
  elements: AppRoot
  formsData: FormsData
  scriptRunState: ScriptRunState
  scriptRunId: string
}

// Mock needed for Block.tsx
class ResizeObserver {
  observe(): void {}

  unobserve(): void {}

  disconnect(): void {}
}
window.ResizeObserver = ResizeObserver

/** An example root component for an app that uses StreamlitLib. */
class StreamlitLibExample extends PureComponent<Props, State> {
  private readonly sessionInfo = new SessionInfo()

  private readonly endpoints = new Endpoints()

  private readonly componentRegistry = new ComponentRegistry(this.endpoints)

  private readonly widgetMgr: WidgetStateManager

  private readonly uploadClient: FileUploadClient

  public constructor(props: Props) {
    super(props)

    // Initialize managers
    this.widgetMgr = new WidgetStateManager({
      sendRerunBackMsg: this.sendRerunBackMsg,
      formsDataChanged: formsData => this.setState({ formsData }),
    })

    this.uploadClient = new FileUploadClient({
      sessionInfo: this.sessionInfo,
      endpoints: this.endpoints,
      // A form cannot be submitted if it contains a FileUploader widget
      // that's currently uploading. We write that state here, in response
      // to a FileUploadClient callback. The FormSubmitButton element
      // reads the state.
      formsWithPendingRequestsChanged: formIds =>
        this.widgetMgr.setFormsWithUploadsInProgress(formIds),
      requestFileURLs: vi.fn(),
    })

    this.sessionInfo.setCurrent({
      // Disable ForwardMessageCaching:
      maxCachedMessageAge: 0,

      // Used by FileUploadClient to associate file uploads with
      // sessions.
      sessionId: "mockSessionId",

      // Unused by StreamlitLib:
      appId: "",
      streamlitVersion: "",
      pythonVersion: "",
      installationId: "",
      installationIdV3: "",
      commandLine: "",
      isHello: false,
    })

    // Initialize React state
    this.state = {
      elements: AppRoot.empty(""),
      formsData: createFormsData(),
      scriptRunState: ScriptRunState.NOT_RUNNING,
      // ScriptRunID should get a new unique ID every time the
      // Streamlit view is being "rebuilt".
      scriptRunId: `${0}`,
    }
  }

  /**
   * Should be called before the first Delta from a "script run" is handled.
   * Stores this script run's unique ID, and sets our ScriptRunState to RUNNING.
   */
  public beginScriptRun = (scriptRunId: string): void => {
    this.setState({
      scriptRunState: ScriptRunState.RUNNING,
      scriptRunId: scriptRunId,
    })
  }

  /**
   * Should be called after all Deltas from a "script run" have been handled.
   * Sets ScriptRunState to NOT_RUNNING, and clears "stale nodes" (nodes that
   * belonged to a previous script run).
   */
  public endScriptRun = (): void => {
    this.setState(prevState => ({
      scriptRunState: ScriptRunState.NOT_RUNNING,
      elements: prevState.elements.clearStaleNodes(prevState.scriptRunId, []),
    }))
  }

  /** Process a DeltaMsg and its associated ForwardMsgMetadata. */
  public handleDeltaMsg = (
    deltaMsg: DeltaProto,
    metadataMsg: ForwardMsgMetadataProto
  ): void => {
    // Apply the Delta to our root AppNode to produce a new root and
    // trigger a re-render.
    this.setState(prevState => ({
      elements: prevState.elements.applyDelta(
        prevState.scriptRunId,
        deltaMsg,
        metadataMsg
      ),
    }))
  }

  public render = (): ReactElement => {
    // This example doesn't involve a sidebar, so our only root blockNode
    // is `elements.main`.
    const blockNode = this.state.elements.main

    return (
      <VerticalBlock
        node={blockNode}
        endpoints={this.endpoints}
        scriptRunId={this.state.scriptRunId}
        scriptRunState={this.state.scriptRunState}
        widgetMgr={this.widgetMgr}
        uploadClient={this.uploadClient}
        widgetsDisabled={false}
        componentRegistry={this.componentRegistry}
        formsData={this.state.formsData}
      />
    )
  }

  private sendRerunBackMsg = (): void => {}
}

describe("StreamlitLibExample", () => {
  it("can be rendered without crashing", async () => {
    render(<StreamlitLibExample />)

    // Before any Elements are explicitly added, our example class
    // will show placeholder skeleton.
    await waitFor(() =>
      expect(screen.getByTestId("stAppSkeleton")).toBeVisible()
    )
  })

  it("handles Delta messages", () => {
    // there's nothing within the app ui to cycle through script run messages so we need a reference
    let streamlitLibInstance: any
    render(
      <StreamlitLibExample
        ref={ref => {
          streamlitLibInstance = ref
        }}
      />
    )

    // construct a delta
    const delta = DeltaProto.create({
      newElement: ElementProto.create({
        text: TextProto.create({ body: "Hello, world!" }),
      }),
    })

    // construct its metadata
    const metadata = ForwardMsgMetadataProto.create({
      deltaPath: [0, 0], // main container, first element
    })

    // Send the delta to our app
    streamlitLibInstance.beginScriptRun("newScriptRun")
    streamlitLibInstance.handleDeltaMsg(delta, metadata)
    streamlitLibInstance.endScriptRun()

    // our "Please wait..." alert should be gone, because it
    // belonged to a previous "script run"
    expect(screen.queryByText("Please wait...")).not.toBeInTheDocument()

    // And we should have the single Text element we created
    expect(screen.getByText("Hello, world!")).toBeInTheDocument()
  })
})


================================================
File: /frontend/app/src/ThemedApp.test.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react"

import { render, screen } from "@testing-library/react"

import ThemedApp from "./ThemedApp"

vi.mock("@streamlit/app/src/connection/ConnectionManager")

// Mock needed for Block.tsx
class ResizeObserver {
  observe(): void {}

  unobserve(): void {}

  disconnect(): void {}
}
window.ResizeObserver = ResizeObserver

describe("ThemedApp", () => {
  beforeEach(() => {
    // sourced from:
    // https://jestjs.io/docs/en/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom
    Object.defineProperty(window, "matchMedia", {
      writable: true,
      value: vi.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: vi.fn(), // deprecated
        removeListener: vi.fn(), // deprecated
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
      })),
    })
  })

  it("renders without crashing", () => {
    render(<ThemedApp streamlitExecutionStartedAt={Date.now()} />)

    expect(screen.getByTestId("stApp")).toBeInTheDocument()
  })

  it("contains the overlay portal required by the interactive table", () => {
    render(<ThemedApp streamlitExecutionStartedAt={Date.now()} />)
    const portalElement = screen.getByTestId("portal")
    expect(portalElement).toBeInTheDocument()
  })
})


================================================
File: /frontend/app/src/ThemedApp.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from "react"

import {
  CUSTOM_THEME_NAME,
  PortalProvider,
  RootStyleProvider,
  WindowDimensionsProvider,
} from "@streamlit/lib"
import FontFaceDeclaration from "@streamlit/app/src/components/FontFaceDeclaration"

import AppWithScreencast from "./App"
import { useThemeManager } from "./util/useThemeManager"

export interface ThemedAppProps {
  streamlitExecutionStartedAt: number
}

const ThemedApp = ({
  streamlitExecutionStartedAt,
}: ThemedAppProps): JSX.Element => {
  const [themeManager, fontFaces] = useThemeManager()
  const { activeTheme } = themeManager
  const hasCustomFonts =
    activeTheme.name === CUSTOM_THEME_NAME && fontFaces.length > 0

  return (
    <RootStyleProvider theme={activeTheme}>
      <WindowDimensionsProvider>
        {/* The data grid requires one root level portal element for rendering cell overlays */}
        <PortalProvider>
          {hasCustomFonts && <FontFaceDeclaration fontFaces={fontFaces} />}
          <AppWithScreencast
            theme={themeManager}
            streamlitExecutionStartedAt={streamlitExecutionStartedAt}
          />
        </PortalProvider>
      </WindowDimensionsProvider>
    </RootStyleProvider>
  )
}

export default ThemedApp


================================================
File: /frontend/app/src/emotion.d.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { EmotionTheme as StreamlitTheme } from "@streamlit/lib"

// Outside imports make declarations not ambient, so we separate out from
// the ambient declarations.d.ts
//
// This declaration allows us to extend our type declarations for emotion's
// theme (an empty object) to be our type
declare module "@emotion/react" {
  export interface Theme extends StreamlitTheme {}
}


================================================
File: /frontend/app/src/index.tsx
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Timestamp when the Streamlit execution started for GUEST_READY message
const streamlitExecutionStartedAt = Date.now()

import React from "react"

import ReactDOM from "react-dom"
import { Client as Styletron } from "styletron-engine-atomic"
import { Provider as StyletronProvider } from "styletron-react"

import ThemedApp from "./ThemedApp"

const engine = new Styletron({ prefix: "st-" })

// TODO: Deprecated in React 18 - Need to revise to new API
// react-18-upgrade
// eslint-disable-next-line react/no-deprecated
ReactDOM.render(
  <StyletronProvider value={engine}>
    <ThemedApp streamlitExecutionStartedAt={streamlitExecutionStartedAt} />
  </StyletronProvider>,
  document.getElementById("root")
)


================================================
File: /frontend/app/src/showDevelopmentOptions.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Config } from "@streamlit/lib"
import { isLocalhost } from "@streamlit/app/src/components/MainMenu"

export const showDevelopmentOptions = (
  hostIsOwner: boolean | undefined,
  toolbarMode: Config.ToolbarMode
): boolean => {
  if (toolbarMode == Config.ToolbarMode.DEVELOPER) {
    return true
  }
  if (
    Config.ToolbarMode.VIEWER == toolbarMode ||
    Config.ToolbarMode.MINIMAL == toolbarMode
  ) {
    return false
  }
  return hostIsOwner || isLocalhost()
}


================================================
File: /frontend/app/src/styled-components.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import styled from "@emotion/styled"

import { hasLightBackgroundColor } from "@streamlit/lib"

export const StyledApp = styled.div(({ theme }) => {
  const lightBackground = hasLightBackgroundColor(theme)

  return {
    position: "absolute",
    background: theme.colors.bgColor,
    color: theme.colors.bodyText,
    top: theme.spacing.none,
    left: theme.spacing.none,
    right: theme.spacing.none,
    bottom: theme.spacing.none,
    colorScheme: lightBackground ? "light" : "dark",
    overflow: "hidden",
    "@media print": {
      float: "none",
      height: theme.sizes.full,
      position: "static",
      overflow: "visible",
    },
  }
})


================================================
File: /frontend/app/src/urls.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const STREAMLIT_HOME_URL = "https://streamlit.io"
export const DEPLOY_URL = "https://share.streamlit.io/deploy"
export const STREAMLIT_CLOUD_URL = "https://streamlit.io/cloud"
export const ONLINE_DOCS_URL = "https://docs.streamlit.io"
export const COMMUNITY_URL = "https://discuss.streamlit.io"

/** The URL customers are directed to for troubleshooting components. */
export const COMPONENT_DEVELOPER_URL =
  "https://docs.streamlit.io/develop/concepts/custom-components"

/** The URL customers are directed to for troubleshooting camera permissions. */
export const CAMERA_PERMISSION_URL =
  "https://docs.streamlit.io/knowledge-base/using-streamlit/enable-camera"

export const STREAMLIT_COMMUNITY_CLOUD_DOCS_URL =
  "https://share.streamlit.io/cloud-getting-started"
export const STREAMLIT_DEPLOY_TUTORIAL_URL =
  "https://share.streamlit.io/deployment-tutorial"

export const SNOWFLAKE_LEARN_MORE_URL = "https://share.streamlit.io/sis-about"

export const SNOWFLAKE_TRIAL_URL = "https://share.streamlit.io/snowflake-trial"


================================================
File: /frontend/app/src/vite-env.d.ts
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference types="vite/client" />
/// <reference types="vitest/globals" />


================================================
File: /frontend/app/src/assets/css/fonts.scss
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Mono, regular */

@font-face {
  font-family: "Source Code Pro";
  font-weight: 400;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Code_Pro/SourceCodePro-Regular.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Code Pro";
  font-weight: 600;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Code_Pro/SourceCodePro-SemiBold.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Code Pro";
  font-weight: 700;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Code_Pro/SourceCodePro-Bold.woff2") format("woff2");
}

/* Mono, italic */

@font-face {
  font-family: "Source Code Pro";
  font-weight: 400;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Code_Pro/SourceCodePro-Italic.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Code Pro";
  font-weight: 600;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Code_Pro/SourceCodePro-SemiBoldItalic.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Code Pro";
  font-weight: 700;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Code_Pro/SourceCodePro-BoldItalic.woff2")
    format("woff2");
}

/* Sans, regular */

@font-face {
  font-family: "Source Sans Pro";
  font-weight: 400;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Sans_Pro/SourceSansPro-Regular.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Sans Pro";
  font-weight: 600;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Sans_Pro/SourceSansPro-SemiBold.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Sans Pro";
  font-weight: 700;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Sans_Pro/SourceSansPro-Bold.woff2") format("woff2");
}

/* Sans, italic */

@font-face {
  font-family: "Source Sans Pro";
  font-weight: 400;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Sans_Pro/SourceSansPro-Italic.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Sans Pro";
  font-weight: 600;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Sans_Pro/SourceSansPro-SemiBoldItalic.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Sans Pro";
  font-weight: 700;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Sans_Pro/SourceSansPro-BoldItalic.woff2")
    format("woff2");
}

/* Serif, regular */

@font-face {
  font-family: "Source Serif Pro";
  font-weight: 400;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Serif_Pro/SourceSerifPro-Regular.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Serif Pro";
  font-weight: 600;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Serif_Pro/SourceSerifPro-SemiBold.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Serif Pro";
  font-weight: 700;
  font-style: regular;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Serif_Pro/SourceSerifPro-Bold.woff2")
    format("woff2");
}

/* Serif, italic */

@font-face {
  font-family: "Source Serif Pro";
  font-weight: 400;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Serif_Pro/SourceSerifPro-Italic.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Serif Pro";
  font-weight: 600;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Serif_Pro/SourceSerifPro-SemiBoldItalic.woff2")
    format("woff2");
}

@font-face {
  font-family: "Source Serif Pro";
  font-weight: 700;
  font-style: italic;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/Source_Serif_Pro/SourceSerifPro-BoldItalic.woff2")
    format("woff2");
}


================================================
File: /frontend/app/src/assets/css/icon-fonts.scss
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@font-face {
  font-family: "Material Symbols Rounded";
  font-style: normal;
  font-weight: 400;
  font-display: block;
  /* IMPORTANT: Always use a relative path! */
  src: url("../fonts/MaterialSymbols/MaterialSymbols-Rounded.woff2")
    format("woff2");
}


================================================
File: /frontend/app/src/assets/css/theme.scss
================================================
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@import "fonts";
@import "icon-fonts";


================================================
File: /frontend/app/src/assets/fonts/Source_Code_Pro/Source-Code-Pro.LICENSE
================================================
Copyright 2010-2019 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.

This Font Software is licensed under the SIL Open Font License, Version 1.1.

This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

