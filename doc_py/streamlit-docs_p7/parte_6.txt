   happening behind the scenes, and it only takes one line of code to activate
   it.

### How's it work?

Let's take a few minutes to discuss how `@st.cache_data` actually works.

When you mark a function with Streamlit’s cache annotation, it tells Streamlit
that whenever the function is called that it should check two things:

1. The input parameters you used for the function call.
2. The code inside the function.

If this is the first time Streamlit has seen both these items, with these exact
values, and in this exact combination, it runs the function and stores the
result in a local cache. The next time the function is called, if the two
values haven't changed, then Streamlit knows it can skip executing the function
altogether. Instead, it reads the output from the local cache and passes it on
to the caller -- like magic.

"But, wait a second," you’re saying to yourself, "this sounds too good to be
true. What are the limitations of all this awesomesauce?"

Well, there are a few:

1. Streamlit will only check for changes within the current working directory.
   If you upgrade a Python library, Streamlit's cache will only notice this if
   that library is installed inside your working directory.
2. If your function is not deterministic (that is, its output depends on random
   numbers), or if it pulls data from an external time-varying source (for
   example, a live stock market ticker service) the cached value will be
   none-the-wiser.
3. Lastly, you should avoid mutating the output of a function cached with `st.cache_data` since cached
   values are stored by reference.

While these limitations are important to keep in mind, they tend not to be an
issue a surprising amount of the time. Those times, this cache is really
transformational.

<Tip>

Whenever you have a long-running computation in your code, consider
refactoring it so you can use `@st.cache_data`, if possible. Please read [Caching](/develop/concepts/architecture/caching) for more details.

</Tip>

Now that you know how caching with Streamlit works, let’s get back to the Uber
pickup data.

## Inspect the raw data

It's always a good idea to take a look at the raw data you're working with
before you start working with it. Let's add a subheader and a printout of the
raw data to the app:

```python
st.subheader('Raw data')
st.write(data)
```

In the [Basic concepts](/get-started/fundamentals/main-concepts) guide you learned that
[`st.write`](/develop/api-reference/write-magic/st.write) will render almost anything you pass
to it. In this case, you're passing in a dataframe and it's rendering as an
interactive table.

[`st.write`](/develop/api-reference/write-magic/st.write) tries to do the right thing based on
the data type of the input. If it isn't doing what you expect you can use a
specialized command like [`st.dataframe`](/develop/api-reference/data/st.dataframe)
instead. For a full list, see [API reference](/develop/api-reference).

## Draw a histogram

Now that you've had a chance to take a look at the dataset and observe what's
available, let's take things a step further and draw a histogram to see what
Uber's busiest hours are in New York City.

1. To start, let's add a subheader just below the raw data section:

   ```python
   st.subheader('Number of pickups by hour')
   ```

2. Use NumPy to generate a histogram that breaks down pickup times binned by
   hour:

   ```python
   hist_values = np.histogram(
       data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]
   ```

3. Now, let's use Streamlit's
   [`st.bar_chart()`](/develop/api-reference/charts/st.bar_chart) method to draw this
   histogram.

   ```python
   st.bar_chart(hist_values)
   ```

4. Save your script. This histogram should show up in your app right away.
   After a quick review, it looks like the busiest time is 17:00 (5 P.M.).

To draw this diagram we used Streamlit's native `bar_chart()` method, but it's
important to know that Streamlit supports more complex charting libraries like
Altair, Bokeh, Plotly, Matplotlib and more. For a full list, see
[supported charting libraries](/develop/api-reference/charts).

## Plot data on a map

Using a histogram with Uber's dataset helped us determine what the busiest
times are for pickups, but what if we wanted to figure out where pickups were
concentrated throughout the city. While you could use a bar chart to show this
data, it wouldn't be easy to interpret unless you were intimately familiar with
latitudinal and longitudinal coordinates in the city. To show pickup
concentration, let's use Streamlit [`st.map()`](/develop/api-reference/charts/st.map)
function to overlay the data on a map of New York City.

1. Add a subheader for the section:

   ```python
   st.subheader('Map of all pickups')
   ```

2. Use the `st.map()` function to plot the data:

   ```python
   st.map(data)
   ```

3. Save your script. The map is fully interactive. Give it a try by panning or
   zooming in a bit.

After drawing your histogram, you determined that the busiest hour for Uber
pickups was 17:00. Let's redraw the map to show the concentration of pickups
at 17:00.

1. Locate the following code snippet:

   ```python
   st.subheader('Map of all pickups')
   st.map(data)
   ```

2. Replace it with:

   ```python
   hour_to_filter = 17
   filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]
   st.subheader(f'Map of all pickups at {hour_to_filter}:00')
   st.map(filtered_data)
   ```

3. You should see the data update instantly.

To draw this map we used the [`st.map`](/develop/api-reference/charts/st.map) function that's built into Streamlit, but
if you'd like to visualize complex map data, we encourage you to take a look at
the [`st.pydeck_chart`](/develop/api-reference/charts/st.pydeck_chart).

## Filter results with a slider

In the last section, when you drew the map, the time used to filter results was
hardcoded into the script, but what if we wanted to let a reader dynamically
filter the data in real time? Using Streamlit's widgets you can. Let's add a
slider to the app with the `st.slider()` method.

1. Locate `hour_to_filter` and replace it with this code snippet:

   ```python
   hour_to_filter = st.slider('hour', 0, 23, 17)  # min: 0h, max: 23h, default: 17h
   ```

2. Use the slider and watch the map update in real time.

## Use a button to toggle data

Sliders are just one way to dynamically change the composition of your app.
Let's use the [`st.checkbox`](/develop/api-reference/widgets/st.checkbox) function to add a
checkbox to your app. We'll use this checkbox to show/hide the raw data
table at the top of your app.

1. Locate these lines:

   ```python
   st.subheader('Raw data')
   st.write(data)
   ```

2. Replace these lines with the following code:

   ```python
   if st.checkbox('Show raw data'):
       st.subheader('Raw data')
       st.write(data)
   ```

We're sure you've got your own ideas. When you're done with this tutorial, check out all the widgets that Streamlit exposes in our [API Reference](/develop/api-reference).

## Let's put it all together

That's it, you've made it to the end. Here's the complete script for our interactive app.

<Tip>

If you've skipped ahead, after you've created your script, the command to run
Streamlit is `streamlit run [app name]`.

</Tip>

```python
import streamlit as st
import pandas as pd
import numpy as np

st.title('Uber pickups in NYC')

DATE_COLUMN = 'date/time'
DATA_URL = ('https://s3-us-west-2.amazonaws.com/'
            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')

@st.cache_data
def load_data(nrows):
    data = pd.read_csv(DATA_URL, nrows=nrows)
    lowercase = lambda x: str(x).lower()
    data.rename(lowercase, axis='columns', inplace=True)
    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])
    return data

data_load_state = st.text('Loading data...')
data = load_data(10000)
data_load_state.text("Done! (using st.cache_data)")

if st.checkbox('Show raw data'):
    st.subheader('Raw data')
    st.write(data)

st.subheader('Number of pickups by hour')
hist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]
st.bar_chart(hist_values)

# Some number in the range 0-23
hour_to_filter = st.slider('hour', 0, 23, 17)
filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]

st.subheader('Map of all pickups at %s:00' % hour_to_filter)
st.map(filtered_data)
```

## Share your app

After you’ve built a Streamlit app, it's time to share it! To show it off to the world you can use **Streamlit Community Cloud** to deploy, manage, and share your app for free.

It works in 3 simple steps:

1. Put your app in a public GitHub repo (and make sure it has a requirements.txt!)
2. Sign into [share.streamlit.io](https://share.streamlit.io)
3. Click 'Deploy an app' and then paste in your GitHub URL

That's it! 🎈 You now have a publicly deployed app that you can share with the world. Click to learn more about [how to use Streamlit Community Cloud](/deploy/streamlit-community-cloud).

## Get help

That's it for getting started, now you can go and build your own apps! If you
run into difficulties here are a few things you can do.

- Check out our [community forum](https://discuss.streamlit.io/) and post a question
- Quick help from command line with `streamlit help`
- Go through our [Knowledge Base](/knowledge-base) for tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps.
- Read more documentation! Check out:
  - [Concepts](/develop/concepts) for things like caching, theming, and adding statefulness to apps.
  - [API reference](/develop/api-reference/) for examples of every Streamlit command.


================================================
File: /content/get-started/installation/_index.md
================================================
---
title: Install Streamlit
slug: /get-started/installation
---

# Install Streamlit

There are multiple ways to set up your development environment and install Streamlit. Read below to
understand these options. Developing locally with Python installed on your own computer is the most
common scenario.

## Summary for experts

1. Set up your Python development environment.
2. Run:
   ```bash
   pip install streamlit
   ```
3. Validate the installation by running our Hello app:
   ```bash
   streamlit hello
   ```
4. Jump to our [Basic concepts](/get-started/fundamentals/main-concepts).

## Installation steps for the rest of us

<TileContainer layout="list">

<RefCard href="/get-started/installation/command-line" size="half">

<h5>Option 1: I'm comfortable with the command line</h5>

Install Streamlit on your own machine using tools like `venv` and `pip`.

</RefCard>

<RefCard href="/get-started/installation/anaconda-distribution" size="half">

<h5>Option 2: I prefer a graphical interface</h5>

Install Streamlit using the Anaconda Distribution graphical user interface. This is also the best
approach if you're on Windows or don't have Python set up.

</RefCard>

<RefCard href="/get-started/installation/community-cloud" size="half">

<h5>Option 3: I'd rather use a cloud-based environment</h5>

Use Streamlit Community Cloud with GitHub Codespaces so you don't have to go through the trouble
of installing Python and setting up an environment.

</RefCard>

<RefCard href="/get-started/installation/streamlit-in-snowflake" size="half">

<h5>Option 4: I need something secure, controlled, and in the cloud</h5>

Use Streamlit in Snowflake to code your apps in the cloud, right alongside your
data with role-based access controls.

</RefCard>

</TileContainer>


================================================
File: /content/get-started/installation/anaconda-distribution.md
================================================
---
title: Install Streamlit using Anaconda Distribution
slug: /get-started/installation/anaconda-distribution
---

# Install Streamlit using Anaconda Distribution

This page walks you through installing Streamlit locally using Anaconda Distribution. At the end, you'll build a simple "Hello world" app and run it. You can read more about [Getting started with Anaconda Distribution](https://docs.anaconda.com/free/anaconda/getting-started/) in Anaconda's docs. If you prefer to manage your Python environments via command line, check out how to [Install Streamlit using command line](/get-started/installation/command-line).

## Prerequisites

1. **A code editor**

   Anaconda Distribution includes Python and basically everything you need to get started.
   The only thing left for you to choose is a code editor.

   Our favorite editor is [VS Code](https://code.visualstudio.com/download), which is also what we
   use in all our tutorials.

1. **Knowledge about environment managers**

   Environment managers create virtual environments to isolate Python package installations between
   projects. For a detailed introduction to Python environments, check out
   [Python Virtual Environments: A Primer](https://realpython.com/python-virtual-environments-a-primer/).

   But don't worry! In this guide we'll teach you how to install and use an environment manager
   (Anaconda).

## Install Anaconda Distribution

1. Go to [anaconda.com/download](https://www.anaconda.com/download).

2. Install Anaconda Distribution for your OS.

## Create an environment using Anaconda Navigator

3. Open Anaconda Navigator (the graphical interface included with Anaconda Distribution).

4. You can decline signing in to Anaconda if prompted.

5. In the left menu, click "**Environments**."
   ![Open your environments list in Anaconda Navigator](/images/get-started/Anaconda-Navigator-environment-1.png)

6. At the bottom of your environments list, click "**Create**."
   ![Click "Create" to open the Create new environment dialog](/images/get-started/Anaconda-Navigator-environment-2-create.png)

7. Enter "streamlitenv" for the name of your environment.

8. Click "**Create**."
<div style={{ maxWidth: '50%', margin: 'auto' }}>
    <Image alt="Finalize your new conda environment" src="/images/get-started/Anaconda-Navigator-environment-3-name.png" />
</div>

## Activate your environment

9. Click the green play icon (<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>play_circle</i>) next to your environment.

10. Click "**Open Terminal**."
    ![Open a new terminal with your environment activated](/images/get-started/Anaconda-Navigator-environment-6-activate.png)

11. A terminal will open with your environment activated. Your environment's name will appear in parentheses at the beginning of your terminal's prompt to show that it's activated.

## Install Streamlit in your environment

12. In your terminal, type:

    ```bash
    pip install streamlit
    ```

13. To validate your installation, enter:

    ```bash
    streamlit hello
    ```

    If this doesn't work, use the long-form command:

    ```bash
    python -m streamlit hello
    ```

14. The Streamlit Hello example app will automatically open in your browser. If it doesn't, open your browser and go to the localhost address indicated in your terminal, typically `http://localhost:8501`. Play around with the app!

15. Close your terminal.

## Create a `Hello World` app and run it

17. Open VS Code with a new project.

18. Create a Python file named `app.py` in your project folder.
    ![Create a new file called app.py](/images/get-started/hello-world-1-new-file.png)

19. Copy the following code into `app.py` and save it.

    ```python
    import streamlit as st

    st.write("Hello World")
    ```

20. Click your Python interpreter in the lower-right corner, then choose your `streamlitenv` environment from the drop-down.
    ![Set your Python interpreter to your `streamlitenv` environment](/images/get-started/hello-world-3-change-interpreter.png)

21. Right-click `app.py` in your file navigation and click "**Open in integrated terminal**."
    ![Open your terminal in your project folder](/images/get-started/hello-world-4-open-terminal.png)

22. A terminal will open with your environment activated. Confirm this by looking for "(streamlitenv)" at the beginning of your next prompt.
    If it is not there, manually activate your environment with the command:

    ```bash
    conda activate streamlitenv
    ```

23. In your terminal, type:

    ```bash
    streamlit run app.py
    ```

    If this doesn't work, use the long-form command:

    ```bash
    python -m streamlit run app.py
    ```

    ![Start your Streamlit app with `streamlit run app.py`](/images/get-started/hello-world-5-streamlit-run.png)

24. Your app will automatically open in your browser. If it doesn't for any reason, open your browser and go to the localhost address indicated in your terminal, typically `http://localhost:8501`.

25. Change `st.write` to `st.title` and save your file:

    ```python
    import streamlit as st

    st.title("Hello World")
    ```

26. In your browser, click "**Always rerun**" to instantly rerun your app whenever you save a change to your file.
    ![Automatically rerun your app when your source file changes](/images/get-started/hello-world-6-always-rerun.png)

27. Your app will update! Keep making changes and you will see your changes as soon as you save your file.
    ![Your app updates when you resave your source file](/images/get-started/hello-world-7-updated-app.png)

28. When you're done, you can stop your app with `Ctrl+C` in your terminal or just by closing your terminal.

## What's next?

Read about our [Basic concepts](/get-started/fundamentals/main-concepts) and try out more commands in your app.


================================================
File: /content/get-started/installation/cloud-quickstart.md
================================================
---
title: Use Community Cloud to develop with GitHub Codespaces
slug: /get-started/installation/community-cloud
---

# Use Community Cloud to develop with GitHub Codespaces

To use GitHub Codespaces for Streamlit development, you need a properly configured `devcontainer.json` file to set up the environment. Fortunately, Streamlit Community Cloud is here to help! Although Community Cloud is primarily used to deploy and share apps with the rest of the world, we've built in some handy features to make it easy to use GitHub Codespaces. This guide explains how to create a Community Cloud account and use an automated workflow to get you into a GitHub codespace and live-editing a Streamlit app. All this happens right in your browser, no installation required.

If you already created a Community Cloud account and connected GitHub, jump ahead to [Create a new app from a template](/get-started/installation/community-cloud#create-a-new-app-from-a-template).

## Prerequisites

- You must have a GitHub account.

## Sign up for Streamlit Community Cloud

1. Go to <a href="https://share.streamlit.io" target="_blank">share.streamlit.io</a>.
1. Click "**Continue to sign-in**."
1. Click "**Continue with GitHub**."
1. Enter your GitHub credentials and follow GitHub's authentication prompts.
1. Fill in your account information, and click "**I accept**" at the bottom.

## Add access to your public repositories

1. In the upper-left corner, click on "**Workspaces <i style={{ verticalAlign: "-.25em", color: "#ff8700" }} className={{ class: "material-icons-sharp" }}>warning</i>**."

<div style={{ maxWidth: '90%', margin: 'auto' }}>
<Image alt="Connect your GitHub account to a new Community Cloud account" src="/images/streamlit-community-cloud/workspace-unconnected-setup.png" />
</div>

1. From the drop down, click "**Connect GitHub account**."
1. Enter your GitHub credentials and follow GitHub's authentication prompts.
1. Click "**Authorize streamlit**."

<div style={{ maxWidth: '40%', margin: 'auto' }}>
<Image alt="Authorize Community Cloud to connect to your GitHub account" src="/images/streamlit-community-cloud/GitHub-auth1-none.png" />
</div>

## Optional: Add access to private repositories

1. In the upper-left corner, click on your GitHub username.

<div style={{ maxWidth: '90%', margin: 'auto' }}>
<Image alt="Access your workspace settings" src="/images/streamlit-community-cloud/workspace-empty-menu.png" />
</div>

1. From the drop down, click "**Settings**."
1. On the left side of the dialog, select "**Linked accounts**."
1. Under "Source control," click "**Connect here <i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>arrow_forward</i>**."
1. Click "**Authorize streamlit**."

<div style={{ maxWidth: '40%', margin: 'auto' }}>
<Image alt="Authorize Community Cloud to connect to your private GitHub repositories" src="/images/streamlit-community-cloud/GitHub-auth2-none.png" />
</div>

## Create a new app from a template

1. In the upper-right corner, click "**Create app**."

<div style={{ maxWidth: '90%', margin: 'auto' }}>
<Image alt="Create a new app from your workspace in Streamlit Community Cloud" src="/images/streamlit-community-cloud/deploy-empty-new-app.png" />
</div>

1. When asked "Do you already have an app?" click "**Nope, create one from a template**."
1. From the list of templates on the left, select "**Blank app**."
1. At the bottom, select the option to "**Open GitHub Codespaces...**"
1. At the bottom, click "**Deploy**."

## Edit your app in GitHub Codespaces

1. Wait for GitHub to set up your codespace.

   It can take several minutes to fully initialize your codespace. After you see the Visual Studio Code editor in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, you will see a split screen view with a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.

   <div style={{ maxWidth: '90%', margin: 'auto' }}>
   <Image alt="Your new GitHub Codespace" src="/images/streamlit-community-cloud/deploy-template-blank-codespace.png" />
   </div>

1. Go to the app's entrypoint file (`streamlit_app.py`) in the left pane, and change line 3 by adding "Streamlit" inside `st.title`.

   ```diff
   -st.title("🎈 My new app")
   +st.title("🎈 My new Streamlit app")
   ```

   Files are automatically saved in your codespace with each edit.

1. A moment after typing a change, your app on the right side will display a rerun prompt. Click "**Always rerun**."

   <div style={{ maxWidth: '90%', margin: 'auto' }}>
   <Image alt="Edit the title of your sample Streamlit app" src="/images/streamlit-community-cloud/deploy-template-blank-codespace-edit.png" />
   </div>

   If the rerun prompt disappears before you click it, you can hover over the overflow menu icon (<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>more_vert</i>) to bring it back.

1. Optional: Continue to make edits and observe the changes within seconds.

## Publish your changes

1. In the left navigation bar, click the source control icon.

<div style={{ maxWidth: '90%', margin: 'auto' }}>
<Image alt="See your deployed Streamlit app" src="/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-source-control.png" />
</div>

1. In the source control sidebar on the left, enter a name for your commit.
1. Click "**<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>check</i> Commit**."

<div style={{ maxWidth: '90%', margin: 'auto' }}>
<Image alt="See your deployed Streamlit app" src="/images/streamlit-community-cloud/deploy-template-blank-codespace-edit-commit.png" />
</div>

1. In the confirmation dialog, click "**Yes**" to stage and commit all your changes. Your changes are committed locally in your codespace.
1. In the source control sidebar on the left, click "**<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>cached</i> 1 <i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>arrow_upward</i>**" to push your commit to GitHub.
1. In the confirmation dialog, click "**OK**" to push commits to "origin/main."

   Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app.

1. Optional: To see your updated, published app, return to the "**My apps**" section of your workspace at <a href="https://share.streamlit.io" target="_blank">share.streamlit.io</a>, and click on your app.

## Learn Streamlit fundamentals

If you haven't learned Streamlit's basic concepts yet, this is a great time to go to [Fundamentals](/get-started/fundamentals). Use your codespace to walk through and try basic Streamlit commands. When finished, come back here to learn how to clean up your codespace.

## Stop or delete your codespace

When you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done.

1. Go to <a href="https://github.com/codespaces" target="_blank">github.com/codespaces</a>. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>more_horiz</i>) for your codespace.

<div style={{ maxWidth: '90%', margin: 'auto' }}>
<Image alt="Stop or delete your GitHub Codespace" src="/images/streamlit-community-cloud/deploy-hello-codespace-manage.png" />
</div>

2. If you want to return to your work later, click "**Stop codespace**." Otherwise, click "**Delete**."

   <div style={{ maxWidth: '40%', margin: 'auto' }}>
   <Image alt="Stop your GitHub codespace" src="/images/streamlit-community-cloud/codespace-menu.png" />
   </div>

3. Congratulations! You just deployed an app to Streamlit Community Cloud. 🎉 Return to your workspace at <a href="https://share.streamlit.io/" target="_blank">share.streamlit.io/</a> and [deploy another Streamlit app](/deploy/streamlit-community-cloud/deploy-your-app).

   <div style={{ maxWidth: '90%', margin: 'auto' }}>
   <Image alt="See your deployed Streamlit app" src="/images/streamlit-community-cloud/deploy-template-blank-edited.png" />
   </div>


================================================
File: /content/get-started/installation/command-line.md
================================================
---
title: Install Streamlit using command line
slug: /get-started/installation/command-line
---

# Install Streamlit using command line

This page will walk you through creating an environment with `venv` and installing Streamlit with `pip`. These are our recommended tools, but if you are familiar with others you can use your favorite ones too. At the end, you'll build a simple "Hello world" app and run it. If you prefer to have a graphical interface to manage your Python environments, check out how to [Install Streamlit using Anaconda Distribution](/get-started/installation/anaconda-distribution).

## Prerequisites

As with any programming tool, in order to install Streamlit you first need to make sure your
computer is properly set up. More specifically, you’ll need:

1. **Python**

   We support [version 3.9 to 3.13](https://www.python.org/downloads/).

1. **A Python environment manager** (recommended)

   Environment managers create virtual environments to isolate Python package installations between
   projects.

   We recommend using virtual environments because installing or upgrading a Python package may
   cause unintentional effects on another package. For a detailed introduction to Python
   environments, check out
   [Python Virtual Environments: A Primer](https://realpython.com/python-virtual-environments-a-primer/).

   For this guide, we'll be using `venv`, which comes with Python.

1. **A Python package manager**

   Package managers handle installing each of your Python packages, including Streamlit.

   For this guide, we'll be using `pip`, which comes with Python.

1. **Only on MacOS: Xcode command line tools**

   Download Xcode command line tools using [these instructions](https://mac.install.guide/commandlinetools/4.html)
   in order to let the package manager install some of Streamlit's dependencies.

1. **A code editor**

   Our favorite editor is [VS Code](https://code.visualstudio.com/download), which is also what we use in
   all our tutorials.

## Create an environment using `venv`

1. Open a terminal and navigate to your project folder.

   ```bash
   cd myproject
   ```

2. In your terminal, type:

   ```bash
   python -m venv .venv
   ```

3. A folder named ".venv" will appear in your project. This directory is where your virtual environment and its dependencies are installed.

## Activate your environment

4. In your terminal, activate your environment with one of the following commands, depending on your operating system.

   ```bash
   # Windows command prompt
   .venv\Scripts\activate.bat

   # Windows PowerShell
   .venv\Scripts\Activate.ps1

   # macOS and Linux
   source .venv/bin/activate
   ```

5. Once activated, you will see your environment name in parentheses before your prompt. "(.venv)"

## Install Streamlit in your environment

6. In the terminal with your environment activated, type:

   ```bash
   pip install streamlit
   ```

7. Test that the installation worked by launching the Streamlit Hello example app:

   ```bash
   streamlit hello
   ```

   If this doesn't work, use the long-form command:

   ```bash
   python -m streamlit hello
   ```

8. Streamlit's Hello app should appear in a new tab in your web browser!
   <Cloud name="doc-mpa-hello" height="700px" />
9. Close your terminal when you are done.

## Create a "Hello World" app and run it

10. Create a file named `app.py` in your project folder.

```python
import streamlit as st

st.write("Hello world")
```

11. Any time you want to use your new environment, you first need to go to your project folder (where the `.venv` directory lives) and run the command to activate it:

```bash
# Windows command prompt
.venv\Scripts\activate.bat

# Windows PowerShell
.venv\Scripts\Activate.ps1

# macOS and Linux
source .venv/bin/activate
```

12. Once activated, you will see your environment's name in parentheses at the beginning of your terminal prompt. "(.venv)"

13. Run your Streamlit app.

```bash
streamlit run app.py
```

If this doesn't work, use the long-form command:

```bash
python -m streamlit run app.py
```

14. To stop the Streamlit server, press `Ctrl+C` in the terminal.

15. When you're done using this environment, return to your normal shell by typing:

```bash
deactivate
```

## What's next?

Read about our [Basic concepts](/get-started/fundamentals/main-concepts) to understand Streamlit's dataflow model.


================================================
File: /content/get-started/installation/sis.md
================================================
---
title: Use Streamlit in Snowflake
slug: /get-started/installation/streamlit-in-snowflake
---

# Use Streamlit in Snowflake to code in a secure environment

Snowflake is a single, global platform that powers the Data Cloud. If you want to use a secure platform with role-based access control, this is the option for you! This page walks you through creating a trial Snowflake account and building a "Hello world" app. Your trial account comes with an account credit so you can try out the service without entering any payment information.

<Note>

For more information, see [Limitations and unsupported features](https://docs.snowflake.com/en/developer-guide/streamlit/limitations) in the Snowflake documentation.

</Note>

## Prerequisites

All you need is an email address! Everything else happens in your 30-day trial account.

## Create an account

1. Go to <a href="https://signup.snowflake.com/?utm_source=streamlit&utm_medium=referral&utm_campaign=na-us-en-&utm_content=-ss-streamlit-docs" target="_blank">signup.snowflake.com</a>. (This link will open in a new tab.)

1. Fill in your information, and click "**CONTINUE**."

1. Select "**Standard**" for your Snowflake edition and "**Amazon Web Services**" for your cloud provider.

1. Choose the region nearest you, accept the terms, and click "**GET STARTED**."

<div style={{ maxWidth: '50%', margin: 'auto' }}>
    <Image alt="Choose your Snowflake edition, provider, and region" src="/images/get-started/SiS-region.png" />
</div>

1. Answer a few questions to let us know more about yourself, or skip them.

1. A message will display: "You're now signed up!" Go to your email, and click on the activation link. (Within your link, note the subdomain. This is your Snowflake account identifier. `https://<account_identifier>.snowflakecomputing.com`)

1. Set your username and password. This will be an admin user account within your Snowflake account. Your Snowflake account can have multiple users within it.

1. If you are not signed in after setting your password, follow the instructions to enter your Snowflake account identifier, and then enter your username and password. If you've accidentally closed your browser, you can sign in at [app.snowflake.com](https://app.snowflake.com/).

Congratulations! You have a trial Snowflake account.

The displayed interface is called Snowsight. Snowsight provides a web-based, graphical user interface for your Snowflake account. The default page is "**Home**," which provides popular quick actions to get started. You can access your "**Projects**" in the left navigation or at the bottom of your "**Home**" page. "**Projects**" include worksheets, notebooks, Streamlit apps, and dashboards. Check out the Snowflake docs for a [quick tour](https://docs.snowflake.com/en/user-guide/ui-snowsight-quick-tour).)

![Sample databases in your new trial Snowflake account](/images/get-started/SiS-1-landing-page.png)

## Optional: Create a warehouse

Warehouses provide compute resources for tasks and apps in your Snowflake account. Your trial account already has an XS warehouse which you can use. This is named "COMPUTE_WH." However, if you want to use more compute resources, you can create another warehouse.

1. In the lower-left corner under your name, confirm that your current role is "ACCOUNTADMIN." If it isn't, click your name, hover over "**Switch Role**," and select "**ACCOUNTADMIN**."

1. In the left navigation, select "**Admin**" → "**Warehouses**."

1. In the upper-right corner, click the blue "<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>add</i> **Warehouse**" button.

1. Enter "STREAMLIT_WH" for the name and select a type and size. The default type and size are "Standard" and "X-Small," respectively. Click "**Create Warehouse**."

## Create a database

Databases provide storage for data and apps in your Snowflake account. Your trial account comes with a shared database of sample data, but you must create a new database in your account to store your app files.

1. In the left navigation, select "**Data**" → "**Databases**."

1. In the upper-right corner, click the blue "<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>add</i> **Database**" button.

1. Enter "STREAMLIT_DB" for the name, and click "**Create**."

Yay! You now have a new database to hold all your Streamlit apps.

![New database in your new trial Snowflake account](/images/get-started/SiS-2-databases.png)

The databases in the above screenshot are as follows:

- "SNOWFLAKE:" A built-in database that stores meta data for your account.
- "SNOWFLAKE_SAMPLE_DATA:" A shared database with sample data.
- "STREAMLIT_DB:" Your new database where you'll put your Streamlit files.

## Create a "Hello World" Streamlit app

1. In the left navigation, select "**Projects**" → "**Streamlit**."

1. In the upper-right corner, click the blue "<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>add</i> **Streamlit App**" button.

1. Enter your app details as follows:

   - App title: "Hello World"
   - App location: "STREAMLIT_DB" and "PUBLIC"
   - App warehouse: "COMPUTE_WH" (default) or "STREAMLIT_WH" (if you created a new warehouse)

   If you can't select your database, refresh the page to ensure that the interface is displaying current information.

1. Click "**Create**." (Note that the app will run with the rights of "ACCOUNTADMIN" for simplicity. You can curate your roles and permissions to choose who can create and access apps.)

   ![Create your first Streamlit in Snowflake app](/images/get-started/SiS-3-create-app.png)

   Your new app is prefilled with example code and opens in editing mode. The left panel shows your code. The right panel shows the resulting app.

1. Optional: Explore the example app.

1. In the left code editor, delete everything, and replace it with the following:

   ```python
   import streamlit as st

   st.write("Hello World")
   ```

   If you want to return to the sample code later, you can always make another app to edit the same example again.

1. In the upper-right corner, click the blue "<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>play_arrow</i> **Run**" button to make the running app reflect your changes.

   Hooray! You just wrote a Streamlit app.

   ![Hello World in Streamlit in Snowflake app](/images/get-started/SiS-4-hello-world.png)

   <Tip>

   In the lower-left corner of the editing interface, you can click the splitscreen icons to toggle the visibility of your file navigation, code editor, and app preview.

   </Tip>

1. Change `st.write` to `st.title`:

   ```python
   import streamlit as st

   st.title("Hello World")
   ```

1. In the upper-right corner, click the blue "<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>play_arrow</i> **Run**" button to make the running app reflect your changes.

   Your app now displays the larger title text.

1. Optional: Make more edits to your app. You must interact with your app or click the blue "<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>play_arrow</i> **Run**" button to display the changes. This is different from a local environment where you can save your changes to trigger a rerun.

1. To return to Snowsight, in the upper-left corner, click "<i style={{ verticalAlign: "-.25em" }} className={{ class: "material-icons-sharp" }}>chevron_left</i> **Streamlit Apps**."

## Return to your app

When you want to view or edit your app again, you can return to it through Snowsight. If you are returning to the site, you can sign in at [app.snowflake.com](https://app.snowflake.com/).

1. In the left navigation, select "**Projects**" → "**Streamlit**."

1. In your list of apps, click "**Hello World**."

   If you don't see your app, check that your role is set to "ACCOUNTADMIN" as described in [Optional: Create a warehouse](/get-started/installation/streamlit-in-snowflake#optional-create-a-warehouse).

1. Your app will open in viewing mode. To edit your app, in the upper-right corner, click "**Edit**."

   ![Change to editing mode in Streamlit in Snowflake](/images/get-started/SiS-5-hello-world-edit.png)

## What's next?

Read about our [Basic concepts](/get-started/fundamentals/main-concepts) and try out more commands in your app. Or, create more apps in Snowflake! You can reuse your warehouse and database, so you don't need to repeat those steps.

For more information about creating and managing Streamlit in Snowflake apps, check out the [Snowflake docs](https://docs.snowflake.com/en/developer-guide/streamlit/about-streamlit).


================================================
File: /content/kb/_index.md
================================================
---
title: Knowledge Base
slug: /knowledge-base
---

# Knowledge base

The knowledge base is a self-serve library of tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps.

<InlineCalloutContainer>
  <InlineCallout
    color="darkBlue-70"
    icon="quiz"
    bold="FAQ"
    href="/knowledge-base/using-streamlit"
  >Here are some frequently asked questions about using Streamlit.</InlineCallout>
  <InlineCallout
    color="darkBlue-70"
    icon="downloading"
    bold="Installing dependencies."
    href="/knowledge-base/dependencies"
  >If you run into problems installing dependencies for your Streamlit apps, we've got you covered.</InlineCallout>
  <InlineCallout
    color="darkBlue-70"
    icon="report"
    bold="Deployment issues."
    href="/knowledge-base/deploy"
  >Have questions about deploying Streamlit apps to the cloud? This section covers deployment-related issues.</InlineCallout>
</InlineCalloutContainer>


================================================
File: /content/kb/FAQ/_index.md
================================================
---
title: FAQ
slug: /knowledge-base/using-streamlit
---

# FAQ

Here are some frequently asked questions about using Streamlit. If you feel something important is missing that everyone needs to know, please [open an issue](https://github.com/streamlit/docs/issues) or [submit a pull request](https://github.com/streamlit/docs/pulls) and we'll be happy to review it!

- [Sanity checks](/knowledge-base/using-streamlit/sanity-checks)
- [How can I make Streamlit watch for changes in other modules I'm importing in my app?](/knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app)
- [What browsers does Streamlit support?](/knowledge-base/using-streamlit/supported-browsers)
- [Where does st.file_uploader store uploaded files and when do they get deleted?](/knowledge-base/using-streamlit/where-file-uploader-store-when-deleted)
- [How do you retrieve the filename of a file uploaded with st.file_uploader?](/knowledge-base/using-streamlit/retrieve-filename-uploaded)
- [How to remove "· Streamlit" from the app title?](/knowledge-base/using-streamlit/remove-streamlit-app-title)
- [How to download a file in Streamlit?](/knowledge-base/using-streamlit/how-download-file-streamlit)
- [How to download a Pandas DataFrame as a CSV?](/knowledge-base/using-streamlit/how-download-pandas-dataframe-csv)
- [How can I make `st.pydeck_chart` use custom Mapbox styles?](/knowledge-base/using-streamlit/pydeck-chart-custom-mapbox-styles)
- [How to insert elements out of order?](/knowledge-base/using-streamlit/insert-elements-out-of-order)
- [How do I upgrade to the latest version of Streamlit?](/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit)
- [Widget updating for every second input when using session state](/knowledge-base/using-streamlit/widget-updating-session-state)
- [How do I create an anchor link?](/knowledge-base/using-streamlit/create-anchor-link)
- [How do I enable camera access?](/knowledge-base/using-streamlit/enable-camera)
- [Why does Streamlit restrict nested `st.columns`?](/knowledge-base/using-streamlit/why-streamlit-restrict-nested-columns)
- [What is serializable session state?](/knowledge-base/using-streamlit/serializable-session-state)


================================================
File: /content/kb/FAQ/create-anchor-link.md
================================================
---
title: How do I create an anchor link?
slug: /knowledge-base/using-streamlit/create-anchor-link
---

# How do I create an anchor link?

## Overview

Have you wanted to create anchors so that users of your app can directly navigate to specific sections by specifying `#anchor` in the URL? If so, let's find out how.

## Solution

Anchors are automatically added to header text.

For example, if you define a header text via the [st.header()](/develop/api-reference/text/st.header) command as follows:

```python
st.header("Section 1")
```

Then you can create a link to this header using:

```python
st.markdown("[Section 1](#section-1)")
```

## Examples

- Demo app: [https://dataprofessor-streamlit-anchor-app-80kk8w.streamlit.app/](https://dataprofessor-streamlit-anchor-app-80kk8w.streamlit.app/)
- GitHub repo: [https://github.com/dataprofessor/streamlit/blob/main/anchor_app.py](https://github.com/dataprofessor/streamlit/blob/main/anchor_app.py)


================================================
File: /content/kb/FAQ/enable-camera.md
================================================
---
title: Enabling camera or microphone access in your browser
slug: /knowledge-base/using-streamlit/enable-camera
---

# Enabling camera or microphone access in your browser

Streamlit apps may include a widget to upload images from your camera or record sound with your microphone. To
safeguard the users' privacy and security, browsers require users to explicitly allow access to their
camera or microphone before those devices can be used.

To learn how to enable camera access, please check the documentation for your browser:

- [Chrome](https://support.google.com/chrome/answer/2693767)
- [Safari](https://support.apple.com/guide/safari/websites-ibrwe2159f50/mac)
- [Firefox](https://support.mozilla.org/en-US/kb/how-manage-your-camera-and-microphone-permissions)


================================================
File: /content/kb/FAQ/how-download-file-streamlit.md
================================================
---
title: How to download a file in Streamlit?
slug: /knowledge-base/using-streamlit/how-download-file-streamlit
---

# How to download a file in Streamlit?

Use the [`st.download_button`](/develop/api-reference/widgets/st.download_button) widget that is natively built into Streamlit. Check out a [sample app](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/) demonstrating how you can use `st.download_button` to download common file formats.

## Example usage

```python
import streamlit as st

# Text files

text_contents = '''
Foo, Bar
123, 456
789, 000
'''

# Different ways to use the API

st.download_button('Download CSV', text_contents, 'text/csv')
st.download_button('Download CSV', text_contents)  # Defaults to 'text/plain'

with open('myfile.csv') as f:
   st.download_button('Download CSV', f)  # Defaults to 'text/plain'

# ---
# Binary files

binary_contents = b'whatever'

# Different ways to use the API

st.download_button('Download file', binary_contents)  # Defaults to 'application/octet-stream'

with open('myfile.zip', 'rb') as f:
   st.download_button('Download Zip', f, file_name='archive.zip')  # Defaults to 'application/octet-stream'

# You can also grab the return value of the button,
# just like with any other button.

if st.download_button(...):
   st.write('Thanks for downloading!')
```

Additional resources:

- [https://blog.streamlit.io/0-88-0-release-notes/](https://blog.streamlit.io/0-88-0-release-notes/)
- [https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/)
- [https://docs.streamlit.io/develop/api-reference/widgets/st.download_button](/develop/api-reference/widgets/st.download_button)


================================================
File: /content/kb/FAQ/how-download-pandas-dataframe-csv.md
================================================
---
title: How to download a Pandas DataFrame as a CSV?
slug: /knowledge-base/using-streamlit/how-download-pandas-dataframe-csv
---

# How to download a Pandas DataFrame as a CSV?

Use the [`st.download_button`](/develop/api-reference/widgets/st.download_button) widget that is natively built into Streamlit. Check out a [sample app](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/) demonstrating how you can use `st.download_button` to download common file formats.

## Example usage

```python
import streamlit as st
import pandas as pd

df = pd.read_csv("dir/file.csv")

@st.cache_data
def convert_df(df):
   return df.to_csv(index=False).encode('utf-8')


csv = convert_df(df)

st.download_button(
   "Press to Download",
   csv,
   "file.csv",
   "text/csv",
   key='download-csv'
)
```

Additional resources:

- [https://blog.streamlit.io/0-88-0-release-notes/](https://blog.streamlit.io/0-88-0-release-notes/)
- [https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/](https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/)
- [https://docs.streamlit.io/develop/api-reference/widgets/st.download_button](/develop/api-reference/widgets/st.download_button)


================================================
File: /content/kb/FAQ/insert-elements-out-of-order.md
================================================
---
title: How to insert elements out of order?
slug: /knowledge-base/using-streamlit/insert-elements-out-of-order
---

# How to insert elements out of order?

You can use the [`st.empty`](/develop/api-reference/layout/st.empty) method as a placeholder,
to "save" a slot in your app that you can use later.

```python
st.text('This will appear first')
# Appends some text to the app.

my_slot1 = st.empty()
# Appends an empty slot to the app. We'll use this later.

my_slot2 = st.empty()
# Appends another empty slot.

st.text('This will appear last')
# Appends some more text to the app.

my_slot1.text('This will appear second')
# Replaces the first empty slot with a text string.

my_slot2.line_chart(np.random.randn(20, 2))
# Replaces the second empty slot with a chart.
```


================================================
File: /content/kb/FAQ/pydeck-chart-custom-mapbox-styles.md
================================================
---
title: How can I make st.pydeck_chart use custom Mapbox styles?
slug: /knowledge-base/using-streamlit/pydeck-chart-custom-mapbox-styles
---

# How can I make st.pydeck_chart use custom Mapbox styles?

If you are supplying a Mapbox token, but the resulting `pydeck_chart` doesn't show your custom Mapbox styles, please check that you are adding the Mapbox token to the Streamlit `config.toml` configuration file. Streamlit DOES NOT read Mapbox tokens from inside of a PyDeck specification (i.e. from inside of the Streamlit app). Please see this [forum thread](https://discuss.streamlit.io/t/deprecation-warning-deckgl-pydeck-maps-to-require-mapbox-token-for-production-usage/2982/10) for more information.


================================================
File: /content/kb/FAQ/remove-streamlit-app-title.md
================================================
---
title: How to remove "· Streamlit" from the app title?
slug: /knowledge-base/using-streamlit/remove-streamlit-app-title
---

# How to remove "· Streamlit" from the app title?

Using [`st.set_page_config`](/develop/api-reference/configuration/st.set_page_config) to assign the page title will not append "· Streamlit" to that title. E.g.:

```python
import streamlit as st

st.set_page_config(
   page_title="Ex-stream-ly Cool App",
   page_icon="🧊",
   layout="wide",
   initial_sidebar_state="expanded",
)
```


================================================
File: /content/kb/FAQ/retrieve-filename-uploaded.md
================================================
---
title: How do you retrieve the filename of a file uploaded with st.file_uploader?
slug: /knowledge-base/using-streamlit/retrieve-filename-uploaded
---

# How do you retrieve the filename of a file uploaded with st.file_uploader?

If you upload a single file (i.e. `accept_multiple_files=False`), the filename can be retrieved by using the `.name` attribute on the returned UploadedFile object:

```python
import streamlit as st

uploaded_file = st.file_uploader("Upload a file")

if uploaded_file:
   st.write("Filename: ", uploaded_file.name)
```

If you upload multiple files (i.e. `accept_multiple_files=True`), the individual filenames can be retrieved by using the `.name` attribute on each UploadedFile object in the returned list:

```python
import streamlit as st

uploaded_files = st.file_uploader("Upload multiple files", accept_multiple_files=True)

if uploaded_files:
   for uploaded_file in uploaded_files:
       st.write("Filename: ", uploaded_file.name)
```

Related forum posts:

- https://discuss.streamlit.io/t/is-it-possible-to-get-uploaded-file-file-name/7586


================================================
File: /content/kb/FAQ/sanity-checks.md
================================================
---
title: Sanity checks
slug: /knowledge-base/using-streamlit/sanity-checks
---

# Sanity checks

If you're having problems running your Streamlit app, here are a few things to try out.

## Check #0: Are you using a Streamlit-supported version of Python?

Streamlit will maintain backwards-compatibility with earlier Python versions as practical,
guaranteeing compatibility with _at least_ the last three minor versions of Python 3.

As new versions of Python are released, we will try to be compatible with the new version as soon
as possible, though frequently we are at the mercy of other Python packages to support these new versions as well.

Streamlit currently supports versions 3.9, 3.10, 3.11, 3.12, and 3.13 of Python.

## Check #1: Is Streamlit running?

On a Mac or Linux machine, type this on the terminal:

```bash
ps -Al | grep streamlit
```

If you don't see `streamlit run` in the output (or `streamlit hello`, if that's
the command you ran) then the Streamlit server is not running. So re-run your command and see if the bug goes away.

## Check #2: Is this an already-fixed Streamlit bug?

We try to fix bugs quickly, so many times a problem will go away when you
upgrade Streamlit. So the first thing to try when having an issue is upgrading
to the latest version of Streamlit:

```bash
pip install --upgrade streamlit
streamlit version
```

...and then verify that the version number printed corresponds to the version number displayed on [PyPI](https://pypi.org/project/streamlit/).

**Try reproducing the issue now.** If not fixed, keep reading on.

## Check #3: Are you running the correct Streamlit binary?

Let's check whether your Python environment is set up correctly. Edit the
Streamlit script where you're experiencing your issue, **comment everything
out, and add these lines instead:**

```python
import streamlit as st
st.write(st.__version__)
```

...then call `streamlit run` on your script and make sure it says the same
version as above. If not the same version, check out [these
instructions](/get-started/installation) for some sure-fire ways to set up your
environment.

## Check #4: Is your browser caching your app too aggressively?

There are two easy ways to check this:

1. Load your app in a browser then press `Ctrl-Shift-R` or `⌘-Shift-R` to do a
   hard refresh (Chrome/Firefox).

2. As a test, run Streamlit on another port. This way the browser starts the
   page with a brand new cache. For that, pass the `--server.port`
   argument to Streamlit on the command line:

   ```bash
   streamlit run my_app.py --server.port=9876
   ```

## Check #5: Is this a Streamlit regression?

If you've upgraded to the latest version of Streamlit and things aren't
working, you can downgrade at any time using this command:

```bash
pip install --upgrade streamlit==1.0.0
```

...where `1.0.0` is the version you'd like to downgrade to. See
[Release notes](/develop/quick-reference/release-notes) for a complete list of Streamlit versions.

## Check #6 [Windows]: Is Python added to your PATH?

When installed by downloading from [python.org](https://www.python.org/downloads/), Python is
not automatically added to the [Windows system PATH](https://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access). Because of this, you may get error messages
like the following:

Command Prompt:

```bash
C:\Users\streamlit> streamlit hello
'streamlit' is not recognized as an internal or external command,
operable program or batch file.
```

PowerShell:

```bash
PS C:\Users\streamlit> streamlit hello
streamlit : The term 'streamlit' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that
the path is correct and try again.
At line:1 char:1
+ streamlit hello
+ ~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (streamlit:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
```

To resolve this issue, add [Python to the Windows system PATH](https://datatofish.com/add-python-to-windows-path/).

After adding Python to your Windows PATH, you should then be able to follow the instructions in our [Get Started](/get-started) section.

## Check #7 [Windows]: Do you need Build Tools for Visual Studio installed?

Streamlit includes [pyarrow](https://arrow.apache.org/docs/python/) as an install dependency. Occasionally, when trying to install Streamlit from PyPI, you may see errors such as the following:

```bash
Using cached pyarrow-1.0.1.tar.gz (1.3 MB)
  Installing build dependencies ... error
  ERROR: Command errored out with exit status 1:
   command: 'c:\users\streamlit\appdata\local\programs\python\python38-32\python.exe' 'c:\users\streamlit\appdata\local\programs\python\python38-32\lib\site-packages\pip' install --ignore-installed --no-user --prefix 'C:\Users\streamlit\AppData\Local\Temp\pip-build-env-s7owjrle\overlay' --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- 'cython >= 0.29' 'numpy==1.14.5; python_version<'"'"'3.9'"'"'' 'numpy==1.16.0; python_version>='"'"'3.9'"'"'' setuptools setuptools_scm wheel
       cwd: None

  Complete output (319 lines):

      Running setup.py install for numpy: finished with status 'error'
      ERROR: Command errored out with exit status 1:

      # <truncated for brevity> #

      building library "npymath" sources
      No module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils
      error: Microsoft Visual C++ 14.0 is required. Get it with "Build Tools for Visual Studio": https://visualstudio.microsoft.com/downloads/
      ----------------------------------------
  ERROR: Command errored out with exit status 1: 'c:\users\streamlit\appdata\local\programs\python\python38-32\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'C:\\Users\\streamlit\\AppData\\Local\\Temp\\pip-install-0jwfwx_u\\numpy\\setup.py'"'"'; __file__='"'"'C:\\Users\\streamlit\\AppData\\Local\\Temp\\pip-install-0jwfwx_u\\numpy\\setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record 'C:\Users\streamlit\AppData\Local\Temp\pip-record-eys4l2gc\install-record.txt' --single-version-externally-managed --prefix 'C:\Users\streamlit\AppData\Local\Temp\pip-build-env-s7owjrle\overlay' --compile --install-headers 'C:\Users\streamlit\AppData\Local\Temp\pip-build-env-s7owjrle\overlay\Include\numpy' Check the logs for full command output.
  ----------------------------------------
```

This error indicates that Python is trying to compile certain libraries during install, but it cannot find the proper compilers on your system,
as reflected by the line `error: Microsoft Visual C++ 14.0 is required. Get it with "Build Tools for Visual Studio"`.

Installing [Build Tools for Visual Studio](https://visualstudio.microsoft.com/downloads/) should resolve this issue.


================================================
File: /content/kb/FAQ/serializable-session-state.md
================================================
---
title: What is serializable session state?
slug: /knowledge-base/using-streamlit/serializable-session-state
---

# What is serializable session state?

## Serializable Session State

Serialization refers to the process of converting an object or data structure into a format that can be persisted and shared, and allowing you to recover the data’s original structure. Python’s built-in [pickle](https://docs.python.org/3/library/pickle.html) module serializes Python objects to a byte stream ("pickling") and deserializes the stream into an object ("unpickling").

By default, Streamlit’s [Session State](/develop/concepts/architecture/session-state) allows you to persist any Python object for the duration of the session, irrespective of the object’s pickle-serializability. This property lets you store Python primitives such as integers, floating-point numbers, complex numbers and booleans, dataframes, and even [lambdas](https://docs.python.org/3/reference/expressions.html#lambda) returned by functions. However, some execution environments may require serializing all data in Session State, so it may be useful to detect incompatibility during development, or when the execution environment will stop supporting it in the future.

To that end, Streamlit provides a `runner.enforceSerializableSessionState` [configuration option](/develop/concepts/configuration) that, when set to `true`, only allows pickle-serializable objects in Session State. To enable the option, either create a global or project config file with the following or use it as a command-line flag:

```toml
# .streamlit/config.toml
[runner]
enforceSerializableSessionState = true
```

By "_pickle-serializable_", we mean calling `pickle.dumps(obj)` should not raise a [`PicklingError`](https://docs.python.org/3/library/pickle.html#pickle.PicklingError) exception. When the config option is enabled, adding unserializable data to session state should result in an exception. E.g.,

```python
import streamlit as st

def unserializable_data():
		return lambda x: x

#👇 results in an exception when enforceSerializableSessionState is on
st.session_state.unserializable = unserializable_data()
```

<Image alt="UnserializableSessionStateError" src="/images/unserializable-session-state-error.png" clean />


================================================
File: /content/kb/FAQ/streamlit-watch-changes-other-modules-importing-app.md
================================================
---
title: How can I make Streamlit watch for changes in other modules I'm importing in my app?
slug: /knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app
---

# How can I make Streamlit watch for changes in other modules I'm importing in my app?

By default, Streamlit only watches modules contained in the current directory of the main app module. You can track other modules by adding the parent directory of each module to the `PYTHONPATH`.

```bash
export PYTHONPATH=$PYTHONPATH:/path/to/module
streamlit run your_script.py
```


================================================
File: /content/kb/FAQ/supported-browsers.md
================================================
---
title: What browsers does Streamlit support?
slug: /knowledge-base/using-streamlit/supported-browsers
---

# What browsers does Streamlit support?

The latest version of Streamlit is compatible with the two most recent versions of the following browsers:

- [Google Chrome](https://www.google.com/chrome/browser)
- [Firefox](https://www.mozilla.org/en-US/firefox/new/)
- [Microsoft Edge](https://www.microsoft.com/windows/microsoft-edge)
- [Safari](https://www.apple.com/safari/)

<Note>

You may not be able to use all the latest features of Streamlit with unsupported browsers or older versions of the above browsers. Streamlit will not provide bug fixes for unsupported browsers.

</Note>


================================================
File: /content/kb/FAQ/upgrade-version-streamlit.md
================================================
---
title: How do I upgrade to the latest version of Streamlit?
slug: /knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit
---

# How do I upgrade to the latest version of Streamlit?

We recommend upgrading to the latest official release of Streamlit so you have access to the newest, cutting-edge features. If you haven't installed Streamlit yet, please read our [Installation guide](/get-started/installation). It helps you set up your virtual environment and walks you through installing Streamlit on Windows, macOS, and Linux. Regardless of which package management tool and OS you're using, we recommend running the commands on this page in a virtual environment.

If you've previously installed Streamlit and want to upgrade to the latest version, here's how to do it based on your dependency manager.

## Pipenv

Streamlit's officially-supported environment manager for macOS and Linux is [Pipenv](https://pypi.org/project/pipenv/).

1. Navigate to the project folder containing your Pipenv environment:

```bash
cd myproject
```

2. Activate that environment, upgrade Streamlit, and verify you have the latest version:

```bash
pipenv shell
pip install --upgrade streamlit
streamlit version
```

Or if you want to use an easily-reproducible environment, replace `pip` with `pipenv`every time you install or update a package:

```bash
pipenv update streamlit
pipenv run streamlit version
```

## Conda

1. Activate the conda environment where Streamlit is installed:

```bash
conda activate $ENVIRONMENT_NAME
```

Be sure to replace`$ENVIRONMENT_NAME` ☝️ with the name your conda environment!

2. Update Streamlit within the active conda environment and verify you have the latest version:

```bash
conda update -c conda-forge streamlit -y
streamlit version
```

## Poetry

In order to get the latest version of Streamlit with [Poetry](https://python-poetry.org/) and verify you have the latest version, run:

```bash
poetry update streamlit
streamlit version
```


================================================
File: /content/kb/FAQ/where-file-uploader-store-when-deleted.md
================================================
---
title: Where does st.file_uploader store uploaded files and when do they get deleted?
slug: /knowledge-base/using-streamlit/where-file-uploader-store-when-deleted
---

# Where does st.file_uploader store uploaded files and when do they get deleted?

When you upload a file using [`st.file_uploader`](/develop/api-reference/widgets/st.file_uploader), the data are copied to the Streamlit backend via the browser, and contained in a BytesIO buffer in Python memory (i.e. RAM, not disk). The data will persist in RAM until the Streamlit app re-runs from top-to-bottom, which is on each widget interaction. If you need to save the data that was uploaded between runs, then you can [cache](/develop/concepts/architecture/caching) it so that Streamlit persists it across re-runs.

As files are stored in memory, they get deleted immediately as soon as they’re not needed anymore.

This means Streamlit removes a file from memory when:

- The user uploads another file, replacing the original one
- The user clears the file uploader
- The user closes the browser tab where they uploaded the file

Related forum posts:

- https://discuss.streamlit.io/t/streamlit-sharing-fileupload-where-does-it-go/9267
- https://discuss.streamlit.io/t/how-to-update-the-uploaded-file-using-file-uploader/13512/


================================================
File: /content/kb/FAQ/why-streamlit-restrict-nested-columns.md
================================================
---
title: Why does Streamlit restrict nested st.columns?
slug: /knowledge-base/using-streamlit/why-streamlit-restrict-nested-columns
---

# Why does Streamlit restrict nested `st.columns`?

Starting in version 1.18.0, Streamlit allows nesting [`st.columns`](/develop/api-reference/layout/st.columns) inside other
`st.columns` with the following restrictions:

- In the main area of the app, columns can be nested up to one level of nesting.
- In the sidebar, columns cannot be nested.

These restrictions are in place to make Streamlit apps look good on all device sizes. Nesting columns multiple times often leads to a bad UI.
You might be able to make it look good on one screen size but as soon as a user on a different screen views the app,
they will have a bad experience. Some columns will be tiny, others will be way too long, and complex layouts will look out of place.
Streamlit tries its best to automatically resize elements to look good across devices, without any help from the developer.
But for complex layouts with multiple levels of nesting, this is not possible.

We are always working on improving layout options though! So if you have a use case that requires a more complex layout,
please [open a GitHub issue](https://github.com/streamlit/streamlit/issues), ideally with a sketch of what you want to do.


================================================
File: /content/kb/FAQ/widget-updating-session-state.md
================================================
---
title: Widget updating for every second input when using session state
slug: /knowledge-base/using-streamlit/widget-updating-session-state
---

# Widget updating for every second input when using session state

## Overview

You are using [session state](/develop/api-reference/caching-and-state/st.session_state) to store page interactions in your app. When users interact with a widget in your app (e.g., click a button), you expect your app to update its widget states and reflect the new values. However, you notice that it doesn't. Instead, users have to interact with the widget twice (e.g., click a button twice) for the app to show the correct values. What do you do now? 🤔 Let's walk through the solution in the section below.

## Solution

When using session state to update widgets or values in your script, you need to use the unique key you assigned to the widget, **not** the variable that you assigned your widget to. In the example code block below, the unique _key_ assigned to the slider widget is `slider`, and the _variable_ the widget is assigned to is `slide_val`.

Let's see this in an example. Say you want a user to click a button that resets a slider.

To have the slider's value update on the button click, you need to use a [callback function](/develop/api-reference/caching-and-state/st.session_state#use-callbacks-to-update-session-state) with the `on_click` parameter of [`st.button`](/develop/api-reference/widgets/st.button):

```python
# the callback function for the button will add 1 to the
# slider value up to 10
def plus_one():
    if st.session_state["slider"] < 10:
        st.session_state.slider += 1
    else:
        pass
    return

# when creating the button, assign the name of your callback
# function to the on_click parameter
add_one = st.button("Add one to the slider", on_click=plus_one, key="add_one")

# create the slider
slide_val = st.slider("Pick a number", 0, 10, key="slider")
```

## Relevant resources

- [Caching Sqlite DB connection resulting in glitchy rendering of the page](https://discuss.streamlit.io/t/caching-sqlite-db-connection-resulting-in-glitchy-rendering-of-the-page/19017)
- [Select all checkbox that is linked to selectbox of options](https://discuss.streamlit.io/t/select-all-checkbox-that-is-linked-to-selectbox-of-options/18521)


================================================
File: /content/kb/dependencies/_index.md
================================================
---
title: Installing dependencies
slug: /knowledge-base/dependencies
---

# Installing dependencies

- [ModuleNotFoundError: No module named](/knowledge-base/dependencies/module-not-found-error)
- [ImportError: libGL.so.1: cannot open shared object file: No such file or directory](/knowledge-base/dependencies/libgl)
- [ERROR: No matching distribution found for](/knowledge-base/dependencies/no-matching-distribution)
- [How to install a package not on PyPI/Conda but available on GitHub](/knowledge-base/dependencies/install-package-not-pypi-conda-available-github)


================================================
File: /content/kb/dependencies/install-package-pypi-github.md
================================================
---
title: How to install a package not on PyPI/Conda but available on GitHub
slug: /knowledge-base/dependencies/install-package-not-pypi-conda-available-github
---

# How to install a package not on PyPI/Conda but available on GitHub

## Overview

Are you trying to deploy your app to [Streamlit Community Cloud](/deploy/streamlit-community-cloud), but don't know how to specify a [Python dependency](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) in your requirements file that is available on a public GitHub repo but not any package index like PyPI or Conda? If so, continue reading to find out how!

Let's suppose you want to install `SomePackage` and its Python dependencies from GitHub, a hosting service for the popular version control system (VCS) Git. And suppose `SomePackage` is found at the the following URL: `https://github.com/SomePackage.git`.

pip (via `requirements.txt`) [supports](https://pip.pypa.io/en/stable/topics/vcs-support/) installing from GitHub. This support requires a working executable to be available (for Git). It is used through a URL prefix: `git+`.

## Specify the GitHub web URL

To install `SomePackage`, innclude the following in your `requirements.txt` file:

```bash
git+https://github.com/SomePackage#egg=SomePackage
```

You can even specify a "git ref" such as branch name, a commit hash or a tag name, as shown in the examples below.

## Specify a Git branch name

Install `SomePackage` by specifying a branch name such as `main`, `master`, `develop`, etc, in `requirements.txt`:

```bash
git+https://github.com/SomePackage.git@main#egg=SomePackage
```

## Specify a commit hash

Install `SomePackage` by specifying a commit hash in `requirements.txt`:

```bash
git+https://github.com/SomePackage.git@eb40b4ff6f7c5c1e4366cgfg0671291bge918#egg=SomePackage
```

## Specify a tag

Install `SomePackage` by specifying a tag in `requirements.txt`:

```bash
git+https://github.com/SomePackage.git@v1.1.0#egg=SomePackage
```

## Limitations

It is currently **not possible** to install private packages from private GitHub repos using the URI form:

```bash
git+https://{token}@github.com/user/project.git@{version}
```

where `version` is a tag, a branch, or a commit. And `token` is a personal access token with read only permissions. Streamlit Community Cloud only supports installing public packages from public GitHub repos.


================================================
File: /content/kb/dependencies/libgl.md
================================================
---
title: ImportError libGL.so.1 cannot open shared object file No such file or directory
slug: /knowledge-base/dependencies/libgl
---

# ImportError libGL.so.1 cannot open shared object file No such file or directory

## Problem

You receive the error `ImportError libGL.so.1 cannot open shared object file No such file or directory` when using OpenCV in your app deployed on [Streamlit Community Cloud](https://streamlit.io/cloud).

## Solution

If you use OpenCV in your app, include `opencv-python-headless` in your requirements file on Streamlit Community Cloud in place of `opencv_contrib_python` and `opencv-python`.

If `opencv-python` is a _required_ (non-optional) dependency of your app or a dependency of a library used in your app, the above solution is not applicable. Instead, you can use the following solution:

Create a `packages.txt` file in your repo with the following line to install the [apt-get dependency](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#apt-get-dependencies) `libgl`:

```
libgl1
```


================================================
File: /content/kb/dependencies/module-not-found-error.md
================================================
---
title: ModuleNotFoundError No module named
slug: /knowledge-base/dependencies/module-not-found-error
---

# ModuleNotFoundError: No module named

## Problem

You receive the error `ModuleNotFoundError: No module named` when you deploy an app on [Streamlit Community Cloud](https://streamlit.io/cloud).

## Solution

This error occurs when you import a module on Streamlit Community Cloud that isn’t included in your requirements file. Any external [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) that are not distributed with a [standard Python installation](https://docs.python.org/3/py-modindex.html) should be included in your requirements file.

E.g. You will see `ModuleNotFoundError: No module named 'sklearn'` if you don’t include `scikit-learn` in your requirements file and `import sklearn` in your app.

Related forum posts:

- https://discuss.streamlit.io/t/getting-error-modulenotfounderror-no-module-named-beautifulsoup/9126
- https://discuss.streamlit.io/t/modulenotfounderror-no-module-named-vega-datasets/16354


================================================
File: /content/kb/dependencies/no-matching-distribution.md
================================================
---
title: ERROR No matching distribution found for
slug: /knowledge-base/dependencies/no-matching-distribution
---

# ERROR: No matching distribution found for

## Problem

You receive the error `ERROR: No matching distribution found for` when you deploy an app on [Streamlit Community Cloud](https://streamlit.io/cloud).

## Solution

This error occurs when you deploy an app on Streamlit Community Cloud and have one or more of the following issues with your [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) in your requirements file:

1. The package is part of the [Python Standard Library](https://docs.python.org/3/py-modindex.html). E.g. You will see **`ERROR: No matching distribution found for base64`** if you include [`base64`](https://docs.python.org/3/library/base64.html) in your requirements file, as it is part of the Python Standard Library. The solution is to not include the package in your requirements file. Only include packages in your requirements file that are not distributed with a standard Python installation.
2. The package name in your requirements file is misspelled. Double-check the package name before including it in your requirements file.
3. The package does not support the operating system on which your Streamlit app is running. E.g. You see **`ERROR: No matching distribution found for pywin32`** while deploying to Streamlit Community Cloud. The `pywin32` module provides access to many of the Windows APIs from Python. Apps deployed to Streamlit Community Cloud are executed in a Linux environment. As such, `pywin32` fails to install on non-Windows systems, including on Streamlit Community Cloud. The solution is to either exclude `pywin32` from your requirements file, or deploy your app on a cloud service offering Windows machines.

Related forum posts:

- https://discuss.streamlit.io/t/error-no-matching-distribution-found-for-base64/15758
- https://discuss.streamlit.io/t/error-could-not-find-a-version-that-satisfies-the-requirement-pywin32-301-from-versions-none/15343/2


================================================
File: /content/kb/deployments/_index.md
================================================
---
title: Deployment Issues
slug: /knowledge-base/deploy
---

# Deployment-related questions and errors

- [How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?](/knowledge-base/deploy/deploy-streamlit-domain-port-80)
- [How can I deploy multiple Streamlit apps on different subdomains?](/knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains)
- [Invoking a Python subprocess in a deployed Streamlit app](/knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app)
- [Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)](/knowledge-base/deploy/does-streamlit-support-wsgi-protocol)
- [Argh. This app has gone over its resource limits.](/knowledge-base/deploy/resource-limits)
- [App is not loading when running remotely](/knowledge-base/deploy/remote-start)
- [Authentication without SSO](/knowledge-base/deploy/authentication-without-sso)
- [How do I increase the upload limit of `st.file_uploader` on Streamlit Community Cloud?](/knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud)
- [Huh. This is isn't supposed to happen message after trying to log in](/knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in)
- [Login attempt to Streamlit Community Cloud fails with error 403](/knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403)
- [How to submit a support case for Streamlit Community Cloud](/knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud)


================================================
File: /content/kb/deployments/authentication-without-sso.md
================================================
---
title: Authentication without SSO
slug: /knowledge-base/deploy/authentication-without-sso
---

# Authentication without SSO

## Introduction

Want to secure your Streamlit app with passwords, but cannot implement single sign-on? We got you covered! This guide shows you two simple techniques for adding basic authentication to your Streamlit app, using [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).

<Warning>

While this technique adds some level of security, it is **NOT** comparable to proper authentication with an SSO provider.

</Warning>

## Option 1: One global password for all users

This is the easiest option! Your app will ask for a password that's shared between all users. It will be stored in the app secrets using [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management). If you want to change this password or revoke a user's access, you will need to change it for everyone. If you want to have one password per user instead, jump to [Option 2 below](/knowledge-base/deploy/authentication-without-sso#option-2-individual-password-for-each-user).

### Step 1: Add the password to your local app secrets

Your local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root dir. Create this file if it doesn't exist yet and add your password to it as shown below:

```toml
# .streamlit/secrets.toml

password = "streamlit123"
```

<Important>

Be sure to add this file to your `.gitignore` so you don't commit your secrets!

</Important>

### Step 2: Copy your app secrets to the cloud

As the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).

![Secrets manager screenshot](/images/databases/edit-secrets.png)

### Step 3: Ask for the password in your Streamlit app

Copy the code below to your Streamlit app, insert your normal app code below the `check_password()` function call at the bottom, and run it:

```python
# streamlit_app.py

import hmac
import streamlit as st


def check_password():
    """Returns `True` if the user had the correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if hmac.compare_digest(st.session_state["password"], st.secrets["password"]):
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # Don't store the password.
        else:
            st.session_state["password_correct"] = False

    # Return True if the password is validated.
    if st.session_state.get("password_correct", False):
        return True

    # Show input for password.
    st.text_input(
        "Password", type="password", on_change=password_entered, key="password"
    )
    if "password_correct" in st.session_state:
        st.error("😕 Password incorrect")
    return False


if not check_password():
    st.stop()  # Do not continue if check_password is not True.

# Main Streamlit app starts here
st.write("Here goes your normal Streamlit app...")
st.button("Click me")
```

If everything worked out, your app should look like this:

![Global passwords](/images/streamlit-community-cloud/auth-without-sso-global.png)

## Option 2: Individual password for each user

This option allows you to set a username and password for each user of your app. Like in [Option 1](#option-1-one-global-password-for-all-users), both values will be stored in the app secrets using [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).

### Step 1: Add usernames & passwords to your local app secrets

Your local Streamlit app will read secrets from a file `.streamlit/secrets.toml` in your app's root dir. Create this file if it doesn't exist yet and add the usernames & password to it as shown below:

```toml
# .streamlit/secrets.toml

[passwords]
# Follow the rule: username = "password"
alice_foo = "streamlit123"
bob_bar = "mycrazypw"
```

<Important>

Be sure to add this file to your `.gitignore` so you don't commit your secrets!

</Important>

Alternatively, you could set up and manage usernames & passwords via a spreadsheet or database. To use secrets to securely connect to Google Sheets, AWS, and other data providers, read our tutorials on how to [Connect Streamlit to data sources](/develop/tutorials/databases).

### Step 2: Copy your app secrets to the cloud

As the `secrets.toml` file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the [app dashboard](https://share.streamlit.io/) and in the app's dropdown menu, click on **Edit Secrets**. Copy the content of `secrets.toml` into the text area. More information is available at [Secrets management](/deploy/streamlit-community-cloud/deploy-your-app/secrets-management).

![Secrets manager screenshot](/images/databases/edit-secrets.png)

### Step 3: Ask for username & password in your Streamlit app

Copy the code below to your Streamlit app, insert your normal app code below the `check_password()` function call at the bottom, and run it:

```python
# streamlit_app.py

import hmac
import streamlit as st


def check_password():
    """Returns `True` if the user had a correct password."""

    def login_form():
        """Form with widgets to collect user information"""
        with st.form("Credentials"):
            st.text_input("Username", key="username")
            st.text_input("Password", type="password", key="password")
            st.form_submit_button("Log in", on_click=password_entered)

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if st.session_state["username"] in st.secrets[
            "passwords"
        ] and hmac.compare_digest(
            st.session_state["password"],
            st.secrets.passwords[st.session_state["username"]],
        ):
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # Don't store the username or password.
            del st.session_state["username"]
        else:
            st.session_state["password_correct"] = False

    # Return True if the username + password is validated.
    if st.session_state.get("password_correct", False):
        return True

    # Show inputs for username + password.
    login_form()
    if "password_correct" in st.session_state:
        st.error("😕 User not known or password incorrect")
    return False


if not check_password():
    st.stop()

# Main Streamlit app starts here
st.write("Here goes your normal Streamlit app...")
st.button("Click me")
```

If everything worked out, your app should look like this:

![Individual passwords](/images/streamlit-community-cloud/auth-without-sso-individual.png)


================================================
File: /content/kb/deployments/deploy-multiple-streamlit-apps-different-subdomains.md
================================================
---
title: How can I deploy multiple Streamlit apps on different subdomains?
slug: /knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains
---

# How can I deploy multiple Streamlit apps on different subdomains?

## Problem

You want to deploy multiple Streamlit apps on different subdomains.

## Solution

Like running your Streamlit app on more common ports such as 80, subdomains are handled by a web server like Apache or Nginx:

- Set up a web server on a machine with a public IP address, then use a DNS server to point all desired subdomains to your webserver's IP address

- Configure your web server to route requests for each subdomain to the different ports that your Streamlit apps are running on

For example, let’s say you had two Streamlit apps called `Calvin` and `Hobbes`. App `Calvin` is running on port **8501**. You set up app `Hobbes` to run on port **8502**. Your webserver would then be set up to "listen" for requests on subdomains `calvin.somedomain.com` and `hobbes.subdomain.com`, and route requests to port **8501** and **8502**, respectively.

Check out these two tutorials for Apache2 and Nginx that deal with setting up a webserver to redirect subdomains to different ports:

- [Apache2 subdomains](https://stackoverflow.com/questions/8541182/apache-redirect-to-another-port)
- [NGinx subdomains](https://gist.github.com/soheilhy/8b94347ff8336d971ad0)


================================================
File: /content/kb/deployments/deploy-streamlit-domain-port-80.md
================================================
---
title: How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?
slug: /knowledge-base/deploy/deploy-streamlit-domain-port-80
---

# How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?

## Problem

You want to deploy a Streamlit app on a domain so it appears to run on port 80.

## Solution

- You should use a **reverse proxy** to forward requests from a webserver like [Apache](https://httpd.apache.org/) or [Nginx](https://www.nginx.com/) to the port where your Streamlit app is running. You can accomplish this in several different ways. The simplest way is to [forward all requests sent to your domain](https://discuss.streamlit.io/t/permission-denied-in-ec2-port-80/798/3) so that your Streamlit app appears as the content of your website.

- Another approach is to configure your webserver to forward requests to designated subfolders (e.g. _http://awesomestuff.net/streamlitapp_) to different Streamlit apps on the same domain, as in this [example config for Nginx](https://discuss.streamlit.io/t/how-to-use-streamlit-with-nginx/378/7) submitted by a Streamlit community member.

Related forum posts:

- https://discuss.streamlit.io/t/permission-denied-in-ec2-port-80/798/3
- https://discuss.streamlit.io/t/how-to-use-streamlit-with-nginx/378/7


================================================
File: /content/kb/deployments/does-streamlit-support-wsgi-protocol.md
================================================
---
title: Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)
slug: /knowledge-base/deploy/does-streamlit-support-wsgi-protocol
---

# Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)

## Problem

You're not sure whether your Streamlit app can be deployed with gunicorn.

## Solution

Streamlit does not support the WSGI protocol at this time, so deploying Streamlit with (for example) gunicorn is not currently possible. Check out this [forum thread regarding deploying Streamlit in a gunicorn-like manner](https://discuss.streamlit.io/t/how-do-i-set-the-server-to-0-0-0-0-for-deployment-using-docker/216) to see how other users have accomplished this.


================================================
File: /content/kb/deployments/how-to-submit-a-support-case-for-streamlit-community-cloud.md
================================================
---
title: How to submit a support case for Streamlit Community Cloud
slug: /knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud
---

# How to submit a support case for Streamlit Community Cloud

This article describes the steps to submit a support request to Snowflake for Streamlit Community Cloud.

<Note>

For Snowflake customers, a support case can be submitted via [the support portal on Snowsight](https://community.snowflake.com/s/article/How-To-Submit-a-Support-Case-in-Snowflake-Lodge#Option1).

</Note>

1. Navigate to [https://community.snowflake.com/s/](https://community.snowflake.com/s/) in your browser.
1. If you already have a Snowflake Community account, sign in. Otherwise, click "**CREATE ACCOUNT**," and follow the prompts.
1. At the top of the page, click "**SUPPORT**."
1. From the drop-down menu, select "**Submit A Case**."
1. Select the option "**I am a Streamlit Community Cloud user**."
1. Click "**Next**" to open the case description page.
1. Fill out your request and submit the support case.

You should receive a confirmation email with the case number. A Snowflake Support engineer will follow up directly with the next steps to resolve your case. All communication will be through email.


================================================
File: /content/kb/deployments/huh-this-is-isnt-supposed-to-happen-message-after-trying-to-log-in.md
================================================
---
title: Huh. This is isn't supposed to happen message after trying to log in
slug: /knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in
---

# Huh. This is isn't supposed to happen message after trying to log in

This article helps to resolve the login issue caused by email mismatching between the GitHub and the Streamlit Community Cloud.

## Problem

You see the following message after signing in to your Streamlit Community Cloud account:

![Huh. This is isn't supposed to happen message](/images/knowledge-base/huh-this-isnt-supposed-to-happen.png)

This message usually indicates that our system has linked your GitHub username with an email address other than the email address you're currently logged in with.

## Solution

No worries – all you have to do is:

1. Log out of Streamlit Community Cloud completely (via both your email and GitHub accounts).
2. Log in first with your email account (you can do so via either ["Continue with Google"](/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out#sign-in-with-google) or ["Continue with email"](/knowledge-base/deploy/sign-in-without-sso)).
3. Log in with your [GitHub account](/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out#sign-in-with-email).


================================================
File: /content/kb/deployments/increase-upload-limit-cloud.md
================================================
---
title: How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud?
slug: /knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud
---

# How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud?

## Overview

By default, files uploaded using [`st.file_uploader()`](/develop/api-reference/widgets/st.file_uploader) are limited to 200MB. You can configure this using the `server.maxUploadSize` config option.

Streamlit provides [four different ways to set configuration options](/develop/concepts/configuration):

1. In a **global config file** at `~/.streamlit/config.toml` for macOS/Linux or `%userprofile%/.streamlit/config.toml` for Windows:
   ```toml
   [server]
   maxUploadSize = 200
   ```
2. In a **per-project config file** at `$CWD/.streamlit/config.toml`, where `$CWD` is the folder you're running Streamlit from.
3. Through `STREAMLIT_*` **environment variables**, such as:
   ```bash
   export STREAMLIT_SERVER_MAX_UPLOAD_SIZE=200
   ```
4. As **flags on the command line** when running `streamlit run`:
   ```bash
   streamlit run your_script.py --server.maxUploadSize 200
   ```

Which of the four options should you choose for an app deployed to [Streamlit Community Cloud](/deploy/streamlit-community-cloud)? 🤔

## Solution

When deploying your app to Streamlit Community Cloud, you should **use option 1**. Namely, set the `maxUploadSize` config option in a global config file (`.streamlit/config.toml`) uploaded to your app's GitHub repo. 🎈

For example, to increase the upload limit to 400MB, upload a `.streamlit/config.toml` file containing the following lines to your app's GitHub repo:

```toml
[server]
maxUploadSize = 400
```

## Relevant resources

- [Streamlit drag and drop capping at 200MB, need workaround](https://discuss.streamlit.io/t/streamlit-drag-and-drop-capping-at-200mb-need-workaround/19803/2)
- [File uploader widget API](/develop/api-reference/widgets/st.file_uploader)
- [How to set Streamlit configuration options](/develop/concepts/configuration)


================================================
File: /content/kb/deployments/invoking-python-subprocess-deployed-streamlit-app.md
================================================
---
title: Invoking a Python subprocess in a deployed Streamlit app
slug: /knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app
---

# Invoking a Python subprocess in a deployed Streamlit app

## Problem

Let's suppose you want to invoke a subprocess to run a Python script `script.py` in your deployed Streamlit app `streamlit_app.py`. For example, the machine learning library [Ludwig](https://ludwig-ai.github.io/ludwig-docs/) is run using a command-line interface, or maybe you want to run a bash script or similar type of process from Python.

You have tried the following, but run into dependency issues for `script.py`, even though you have specified your Python dependencies in a requirements file:

```python
# streamlit_app.py
import streamlit as st
import subprocess

subprocess.run(["python", "script.py"])
```

## Solution

When you run the above code block, you will get the version of Python that is on the system path—not necessarily the Python executable installed in the virtual environment that the Streamlit code is running under.

The solution is to detect the Python executable directly with [`sys.executable`](https://docs.python.org/3/library/sys.html#sys.executable):

```python
# streamlit_app.py
import streamlit as st
import subprocess
import sys

subprocess.run([f"{sys.executable}", "script.py"])
```

This ensures that `script.py` is running under the same Python executable as your Streamlit code—where your [Python dependencies](/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies#add-python-dependencies) are installed.

### Relevant links

- https://stackoverflow.com/questions/69947867/run-portion-of-python-code-in-parallel-from-a-streamlit-app/69948545#69948545
- https://discuss.streamlit.io/t/modulenotfounderror-no-module-named-cv2-streamlit/18319/3?u=snehankekre
- https://docs.python.org/3/library/sys.html#sys.executable


================================================
File: /content/kb/deployments/login-attempt-to-streamlit-community-cloud-fails-with-error-403.md
================================================
---
title: Login attempt to Streamlit Community Cloud fails with error 403
slug: /knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403
---

# Login attempt to Streamlit Community Cloud fails with error 403

## Problem

Streamlit Community Cloud has monitoring jobs to detect malicious users using the platform for crypto mining. These jobs sometimes result in false positives and a normal user starts getting error 403 against a login attempt.

## Solution

Please contact [Support](mailto:support@streamlit.io) by providing your **GitHub username** for help referring to this article.


================================================
File: /content/kb/deployments/remote-start.md
================================================
---
title: App is not loading when running remotely
slug: /knowledge-base/deploy/remote-start
---

# App is not loading when running remotely

Below are a few common errors that occur when users spin up their own solution
to host a Streamlit app remotely.

To learn about a deceptively simple way to host Streamlit apps that avoids all
the issues below, check out [Streamlit Community Cloud](https://streamlit.io/cloud).

### Symptom #1: The app never loads

When you enter the app's URL in a browser and all you see is a **blank page, a
"Page not found" error, a "Connection refused" error**, or anything like that,
first check that Streamlit is actually running on the remote server. On a Linux
server you can SSH into it and then run:

```bash
ps -Al | grep streamlit
```

If you see Streamlit running, the most likely culprit is the Streamlit port not
being exposed. The fix depends on your exact setup. Below are three example
fixes:

- **Try port 80:** Some hosts expose port 80 by default. To
  set Streamlit to use that port, start Streamlit with the `--server.port`
  option:

  ```bash
  streamlit run my_app.py --server.port=80
  ```

- **AWS EC2 server**: First, click on your instance in the [AWS Console](https://us-west-2.console.aws.amazon.com/ec2/v2/home).
  Then scroll down and click on _Security Groups_ → _Inbound_ → _Edit_. Next, add
  a _Custom TCP_ rule that allows the _Port Range_ `8501` with _Source_
  `0.0.0.0/0`.

- **Other types of server**: Check the firewall settings.

If that still doesn't solve the problem, try running a simple HTTP server
instead of Streamlit, and seeing if _that_ works correctly. If it does, then
you know the problem lies somewhere in your Streamlit app or configuration (in
which case you should ask for help in our
[forums](https://discuss.streamlit.io)!) If not, then it's definitely unrelated
to Streamlit.

How to start a simple HTTP server:

```bash
python -m http.server [port]
```

### Symptom #2: The app says "Please wait..." or shows skeleton elements forever

This symptom appears differently starting from version 1.29.0. For earlier
versions of Streamlit, a loading app shows a blue box in the center of the page
with a "Please wait..." message. Starting from version 1.29.0, a loading app
shows skeleton elements. If this loading screen does not go away, the
underlying cause is likely one of the following:

- Using port 3000 which is reserved for internal development.
- Misconfigured [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
  protection.
- Server is stripping headers from the Websocket connection, thereby breaking
  compression.

To diagnose the issue, first make sure you are not using port 3000. If in doubt,
try port 80 as described above.

Next, try temporarily disabling CORS protection by running Streamlit with the
`--server.enableCORS` flag set to `false`:

```bash
streamlit run my_app.py --server.enableCORS=false
```

If this fixes your issue, **you should re-enable CORS protection** and then set
`browser.serverAddress` to the URL of your Streamlit app.

If the issue persists, try disabling websocket compression by running Streamlit with the
`--server.enableWebsocketCompression` flag set to `false`

```bash
streamlit run my_app.py --server.enableWebsocketCompression=false
```

If this fixes your issue, your server setup is likely stripping the
`Sec-WebSocket-Extensions` HTTP header that is used to negotiate Websocket compression.

Compression is not required for Streamlit to work, but it's strongly recommended as it
improves performance. If you'd like to turn it back on, you'll need to find which part
of your infrastructure is stripping the `Sec-WebSocket-Extensions` HTTP header and
change that behavior.

### Symptom #3: Unable to upload files when running in multiple replicas

If the file uploader widget returns an error with status code 403, this is probably
due to a misconfiguration in your app's
[XSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) protection logic.

To diagnose the issue, try temporarily disabling XSRF protection by running Streamlit
with the `--server.enableXsrfProtection` flag set to `false`:

```bash
streamlit run my_app.py --server.enableXsrfProtection=false
```

If this fixes your issue, **you should re-enable XSRF protection** and try one
or both of the following:

- Set `browser.serverAddress` and `browser.serverPort` to the URL and port of
  your Streamlit app.
- Configure your app to use the same secret across every replica by setting the
  `server.cookieSecret` config option to the same hard-to-guess string everywhere.


================================================
File: /content/kb/deployments/resource-limits.md
================================================
---
title: Argh. This app has gone over its resource limits
slug: /knowledge-base/deploy/resource-limits
---

# Argh. This app has gone over its resource limits

Sorry! It means you've hit the [resource limits](/deploy/streamlit-community-cloud/manage-your-app#app-resources-and-limits) of your [Streamlit Community Cloud](https://streamlit.io/cloud) account.

There are a few things you can change in your app to make it less resource-hungry:

- Reboot your app (temporary fix)
- Use `st.cache_data` or `st.cache_resource` to load models or data only once
- Restrict the cache size with `ttl` or `max_entries`
- Move big datasets to a database
- Profile your app's memory usage

Check out our [blog post](https://blog.streamlit.io/common-app-problems-resource-limits/) on ["Common app problems: Resource limits"](https://blog.streamlit.io/common-app-problems-resource-limits/) for more in-depth tips prevent your app from hitting the [resource limits](/deploy/streamlit-community-cloud/manage-your-app#app-resources-and-limits) of the Streamlit Community Cloud.

Related forum posts:

- [https://discuss.streamlit.io/t/common-app-problems-resource-limits/16969](https://discuss.streamlit.io/t/common-app-problems-resource-limits/16969)
- [https://blog.streamlit.io/common-app-problems-resource-limits/](https://blog.streamlit.io/common-app-problems-resource-limits/)

We offer free resource increases only to support nonprofits or educational organizations on a case-by-case basis. If you are a nonprofit or educational organization, please complete [this form](https://info.snowflake.com/streamlit-resource-increase-request.html) and we will review your submission as soon as possible.

Once the increase is completed, you will receive an email from the Streamlit marketing team with a confirmation that the increase has been applied.


================================================
File: /context/AppContext.js
================================================
import { createContext, useContext, useState } from "react";

const AppContext = createContext();

export function AppContextProvider({ children }) {
  const [version, setVersion] = useState(null);
  const [sourceFile, setSourceFile] = useState(null);

  return (
    <AppContext.Provider
      value={{ version, setVersion, sourceFile, setSourceFile }}
    >
      {children}
    </AppContext.Provider>
  );
}

export function useAppContext() {
  return useContext(AppContext);
}


================================================
File: /lib/api.js
================================================
import fs from "fs";
import { join, basename } from "path";
import findIndex from "lodash/findIndex";
import matter from "gray-matter";
import slugify from "slugify";

export const articleDirectory = join(process.cwd(), "content/");
export const pythonDirectory = join(process.cwd(), "python/");

export function getAllFilesInDirectory(articleDirectory, files) {
  files = files ? files : [];
  fs.readdirSync(articleDirectory).forEach(function (file) {
    const subpath = join(articleDirectory, file);
    if (fs.lstatSync(subpath).isDirectory()) {
      getAllFilesInDirectory(subpath, files);
    } else {
      files.push(subpath);
    }
  });
  return files;
}

export function getArticleSlugs() {
  const files = getAllFilesInDirectory(articleDirectory);
  return files;
}

export function getArticleSlugFromString(pathname) {
  return slugify(pathname).toLowerCase();
}

export function getArticleBySlug(slug, fields = []) {
  const realSlug = basename(slug).replace(/\.md$/, "");
  const fullPath = slug;
  const fileContents = fs.readFileSync(fullPath, "utf8");
  const { data, content } = matter(fileContents);

  const items = {};

  // Ensure only the minimal needed data is exposed
  fields.forEach((field) => {
    if (field === "slug") {
      items[field] = realSlug;
    }
    if (field === "content") {
      items[field] = content;
    }
    if (data[field]) {
      items[field] = data[field];
    }
  });

  return items;
}

export function getAllArticles(fields = []) {
  const slugs = getArticleSlugs();
  const posts = slugs.map((slug) => getArticleBySlug(slug, fields));
  return posts;
}

export function getMenu() {
  const menu = [];
  const fullPath = join(articleDirectory, `menu.md`);
  const fileContents = fs.readFileSync(fullPath, "utf8");
  const data = matter(fileContents);

  let menuRoot = menu;
  let objRoot = menu;

  const flatMenu = data.data["site_menu"];

  for (const index in flatMenu) {
    const item = flatMenu[index];
    const category = item["category"].split("/");
    // Move to the depth we need
    for (const depth in category) {
      const menu_key = slugify(category[depth].trim().toLowerCase());
      let exist = findIndex(menuRoot, { menu_key: menu_key });
      if (exist < 0) {
        menuRoot.push({
          menu_key: menu_key,
          name: category[depth].trim(),
          depth: depth,
          children: [],
        });
        exist = findIndex(menuRoot, { menu_key: menu_key });
      }
      objRoot = menuRoot[exist];
      menuRoot = menuRoot[exist]["children"];
    }
    Object.assign(objRoot, item);
    menuRoot = menu;
  }

  return menu;
}


================================================
File: /lib/bus.js
================================================
import { EventEmitter } from "events";
export default new EventEmitter();


================================================
File: /lib/useSourceFile.js
================================================
import { useAppContext } from "../context/AppContext";

const useSourceFile = (source = null) => {
  const { sourceFile, setSourceFile } = useAppContext();
  setSourceFile(source);

  return sourceFile;
};

export default useSourceFile;


================================================
File: /lib/useVersion.js
================================================
import { useState, useEffect } from "react";

import { useAppContext } from "../context/AppContext";

const useVersion = (versionFromStaticLoad = null, versions = [], currMenuItem = null) => {
  const maxVersion = versions[versions.length - 1];

  const { version, setVersion } = useAppContext();

  if (currMenuItem && currMenuItem.isVersioned && versionFromStaticLoad) {
    setVersion(
      versionFromStaticLoad === maxVersion ? null : versionFromStaticLoad);
  }

  useEffect(() => {
    if (!currMenuItem || !currMenuItem.isVersioned) {
      return;
    }

    if (versionFromStaticLoad === maxVersion) {
      setVersion(null);
    } else {
      setVersion(versionFromStaticLoad);
    }
  }, [versionFromStaticLoad]);

  return version;
}

export default useVersion;


================================================
File: /lib/utils.js
================================================
function breadcrumbsForSlug(menu, slugStr, path) {
  path = path ? path : [];
  menu.forEach((obj) => {
    if (urlInChildren(obj, slugStr)) {
      path.push({
        name: obj.name,
        url: obj.url,
        icon: obj.icon,
        color: obj.color,
      });
      if (obj.children && obj.children.length > 0) {
        breadcrumbsForSlug(obj.children, slugStr, path);
      }
    }
  });
  return path;
}

function urlInChildren(menu, slugStr) {
  let found = false;
  if (menu.url && menu.url === slugStr) {
    found = true;
  }
  if (!found && menu.children && menu.children.length > 0) {
    for (const index in menu.children) {
      if (found) {
        continue;
      }
      found = urlInChildren(menu.children[index], slugStr);
    }
  }
  return found;
}

function getPreviousNextFromMenu(menu, slugStr, parent) {
  let current, prev, next;

  for (let index = 0; index < menu.length; index++) {
    // If we are inside top-level category, point them to the next top-level category
    if (current && !next) {
      next = menu[index].url ? menu[index] : menu[index + 1];
    }
    if (current) {
      continue;
    }

    // For top-level categories
    if (menu[index].url === slugStr) {
      // If we are NOT on the first top-level category (Get started), point the
      // previous arrow to the parent
      // Example: Develop points to Get started.
      // Example: Deploy points to Develop
      if (index < 1) {
        prev = parent;
        // If we are on the second item within a category and the first item is
        // a divider, skip the divider and point to the parent
      } else if (index === 1 && !menu[index - 1].url) {
        prev = parent;
        // If the current item is preceded by a divider, skip the divider and
        // point to the item before the divider
      } else if (!menu[index - 1].url) {
        prev = menu[index - 2];
      } else {
        prev = menu[index - 1];
      }

      // If we are on a top-level category or expandable item, the next item
      // should be its first child. Skip over a divider if it's the first child.
      // Example: Get started -> Installation
      // Example: API reference -> Write and magic
      const isTopLevel = parseInt(menu[index].depth, 10) === 0;
      const isExpandable =
        menu[index].children && menu[index].children.length > 0;
      if (isTopLevel || isExpandable) {
        next = menu[index].children[0].url
          ? menu[index].children[0]
          : menu[index].children[1];
      }

      current = menu[index];
    }

    // Calculate For sub-level items within top-level categories
    else if (menu[index].children && menu[index].children.length > 0) {
      ({ current, prev, next } = getPreviousNextFromMenu(
        menu[index].children,
        slugStr,
        menu[index],
      ));
    }
  }

  return { current, prev, next };
}

exports.breadcrumbsForSlug = breadcrumbsForSlug;
exports.urlInChildren = urlInChildren;
exports.getPreviousNextFromMenu = getPreviousNextFromMenu;


================================================
File: /pages/404.js
================================================
import Head from "next/head";
import { getMenu } from "../lib/api";
import Layout from "../components/layouts/globalTemplate";
import SideBar from "../components/navigation/sideBar";
import Footer from "../components/navigation/footer";
import Spacer from "../components/utilities/spacer";
import SummaryTiles from "../components/summaryTiles";

import styles from "../components/layouts/container.module.css";

export default function Home({ window, menu }) {
  return (
    <Layout window={window}>
      <Head>
        <title>404 | Streamlit Docs</title>
        <link rel="icon" href="/favicon.svg" />
        <link rel="alternate icon" href="/favicon32.ico" />
        <meta name="theme-color" content="#ffffff" />
        <meta
          content="Streamlit is an open-source app framework for Machine Learning and Data Science teams. Create beautiful data apps in hours, not weeks. All in pure Python. All for free."
          name="description"
        />
        <meta content="Streamlit Docs" property="og:title" />
        <meta
          content="Streamlit is an open-source app framework for Machine Learning and Data Science teams. Create beautiful data apps in hours, not weeks. All in pure Python. All for free."
          property="og:description"
        />
        <meta content="Streamlit Docs" name="twitter:title" />
        <meta
          content="Streamlit is an open-source app framework for Machine Learning and Data Science teams. Create beautiful data apps in hours, not weeks. All in pure Python. All for free."
          name="twitter:description"
        />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://docs.streamlit.io/" />
        <meta content="summary_large_image" name="twitter:card" />
        <meta
          property="og:image"
          content={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/sharing-image-facebook.jpg`}
        />
        <meta
          name="twitter:image"
          content={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/sharing-image-twitter.jpg`}
        />
      </Head>
      <section className={styles.Container}>
        <SideBar menu={menu} slug={["404"]} />
        <section className={styles.InnerContainer}>
          <article>
            <h1>Page not found</h1>

            <p>
              Try using the search bar, above, or check out one of the pages
              below:
            </p>

            <SummaryTiles />
          </article>
        </section>
        <Footer />
      </section>
    </Layout>
  );
}

export async function getStaticProps(context) {
  const props = {};
  props["menu"] = getMenu();

  return {
    props: props,
  };
}


================================================
File: /pages/[...slug].js
================================================
import fs from "fs";
import { join, basename } from "path";
import sortBy from "lodash/sortBy";
import React, { useState, useCallback } from "react";
import Link from "next/link";
import Head from "next/head";
import { serialize } from "next-mdx-remote/serialize";
import { MDXProvider } from "@mdx-js/react";
import { MDXRemote } from "next-mdx-remote";
import matter from "gray-matter";
import remarkUnwrapImages from "remark-unwrap-images";
import remarkGfm from "remark-gfm";
import classNames from "classnames";
import { useRouter } from "next/router";
import rehypeSlug from "rehype-slug";
import rehypeAutolinkHeadings from "rehype-autolink-headings";

// Site Components
import CookieSettingsModal from "../components/utilities/cookieSettingsModal";
import GDPRBanner, {
  setTelemetryPreference,
} from "../components/utilities/gdpr";
import {
  getArticleSlugs,
  getArticleSlugFromString,
  pythonDirectory,
  getMenu,
  getGDPRBanner,
  getCookieSettings,
} from "../lib/api";
import { getPreviousNextFromMenu } from "../lib/utils.js";
import useVersion from "../lib/useVersion.js";
import { useAppContext } from "../context/AppContext";
import Layout from "../components/layouts/globalTemplate";
import Footer from "../components/navigation/footer";
import BreadCrumbs from "../components/utilities/breadCrumbs";
import SideBar from "../components/navigation/sideBar";
import Masonry from "../components/layouts/masonry";
import TileContainer from "../components/layouts/tileContainer";
import DataSourcesContainer from "../components/layouts/dataSourcesContainer";
import InlineCalloutContainer from "../components/layouts/inlineCalloutContainer";

import ArrowLinkContainer from "../components/navigation/arrowLinkContainer";
import ArrowLink from "../components/navigation/arrowLink";
import Helpful from "../components/utilities/helpful";
import { H1, H2, H3 } from "../components/blocks/headers";
import Psa from "../components/utilities/psa";
import FloatingNav from "../components/utilities/floatingNav";

// MDX Components
import Autofunction from "../components/blocks/autofunction";
import Code from "../components/blocks/code";
import CodeTile from "../components/blocks/codeTile";
import Collapse from "../components/blocks/collapse";
import Download from "../components/utilities/download";
import Flex from "../components/layouts/flex";
import Image from "../components/blocks/image";
import Deprecation from "../components/blocks/deprecation";
import Important from "../components/blocks/important";
import Note from "../components/blocks/note";
import NoteSplit from "../components/blocks/noteSplit";
import RefCard from "../components/blocks/refCard";
import ComponentSlider from "../components/blocks/componentSlider";
import ComponentCard from "../components/blocks/componentCard";
import DataSourcesCard from "../components/blocks/dataSourcesCard";
import Tile from "../components/blocks/tile";
import InlineCallout from "../components/blocks/inlineCallout";
import Tip from "../components/blocks/tip";
import Warning from "../components/blocks/warning";
import YouTube from "../components/blocks/youTube";
import Cloud from "../components/blocks/cloud";

import styles from "../components/layouts/container.module.css";

export default function Article({
  data,
  source,
  streamlit,
  slug,
  menu,
  currMenuItem,
  prevMenuItem,
  nextMenuItem,
  versionFromStaticLoad,
  versions,
  filename,
}) {
  let versionWarning;
  let currentLink;
  let suggestEditURL;
  const { sourceFile } = useAppContext();

  const [isTelemetryModalVisible, setIsTelemetryModalVisible] = useState(false);
  const [isTelemetryBannerVisible, setIsTelemetryBannerVisible] =
    useState(false);
  const [insertTelemetryCode, setInsertTelemetryCode] = useState(false);

  const router = useRouter();

  const allowTelemetryAndCloseBanner = useCallback(() => {
    setIsTelemetryBannerVisible(false);
    setIsTelemetryModalVisible(false);
    setInsertTelemetryCode(true);
    setTelemetryPreference(true);
  }, [isTelemetryBannerVisible, insertTelemetryCode]);

  const declineTelemetryAndCloseBanner = useCallback(() => {
    setIsTelemetryBannerVisible(false);
    setIsTelemetryModalVisible(false);
    setInsertTelemetryCode(false);
    setTelemetryPreference(false);

    // If previous state was true, and now it's false, reload the page to remove telemetry JS
    if (insertTelemetryCode) router.reload();
  }, [isTelemetryBannerVisible, insertTelemetryCode]);

  suggestEditURL =
    Object.keys(streamlit).length > 0 && sourceFile
      ? sourceFile
      : "https://github.com/streamlit/docs/tree/main" +
        filename.substring(filename.indexOf("/content/"));
  const maxVersion = versions[versions.length - 1];
  const version = useVersion(versionFromStaticLoad, versions, currMenuItem);

  const components = {
    Note,
    NoteSplit,
    Tip,
    Deprecation,
    Important,
    Code,
    Collapse,
    Warning,
    YouTube,
    Cloud,
    Masonry,
    CodeTile,
    InlineCalloutContainer,
    InlineCallout,
    TileContainer,
    Tile,
    RefCard,
    ComponentCard,
    ComponentSlider,
    DataSourcesContainer,
    DataSourcesCard,
    Image,
    Download,
    Flex,
    Autofunction: (props) => (
      <Autofunction
        {...props}
        streamlitFunction={props.function}
        streamlit={streamlit}
        version={version}
        versions={versions}
        slug={slug}
        oldStreamlitFunction={props.oldName ?? ""}
      />
    ),
    pre: (props) => <Code {...props} />,
    h1: H1,
    h2: H2,
    h3: H3,
    // iframe : WrappedIFrame
  };

  let previousArrow;
  let nextArrow;
  let arrowContainer;
  let keywordsTag;

  if (version && version != maxVersion && currMenuItem.isVersioned) {
    // Slugs don't have the version number, so we just have to join them.
    currentLink = `/${slug.join("/")}`;
    versionWarning = (
      <Warning>
        {version && version.startsWith("SiS") ? (
          <p>
            You are reading the documentation for Streamlit in Snowflake. For
            open-source Streamlit, version{" "}
            <Link href={currentLink}>{maxVersion}</Link> is the latest version
            available.
          </p>
        ) : (
          <p>
            You are reading the documentation for Streamlit version {version},
            but <Link href={currentLink}>{maxVersion}</Link> is the latest
            version available.
          </p>
        )}
      </Warning>
    );
  }

  if (prevMenuItem) {
    previousArrow = (
      <ArrowLink
        link={prevMenuItem.url}
        type="back"
        content={prevMenuItem.name}
      />
    );
  }

  if (nextMenuItem) {
    nextArrow = (
      <ArrowLink
        link={nextMenuItem.url}
        type="next"
        content={nextMenuItem.name}
      />
    );
  }

  if (nextMenuItem || prevMenuItem) {
    arrowContainer = (
      <ArrowLinkContainer>
        {previousArrow}
        {nextArrow}
      </ArrowLinkContainer>
    );
  }

  if (data.keywords) {
    keywordsTag = <meta name="keywords" content={data.keywords} />;
  }

  return (
    <MDXProvider
      components={{
        // Override some default Markdown components.
        img: Image,
      }}
    >
      <Layout>
        {isTelemetryModalVisible && (
          <CookieSettingsModal
            setIsTelemetryModalVisible={setIsTelemetryModalVisible}
            allowTelemetryAndCloseBanner={allowTelemetryAndCloseBanner}
            declineTelemetryAndCloseBanner={declineTelemetryAndCloseBanner}
          />
        )}
        <GDPRBanner
          isTelemetryModalVisible={isTelemetryModalVisible}
          setIsTelemetryModalVisible={setIsTelemetryModalVisible}
          isTelemetryBannerVisible={isTelemetryBannerVisible}
          setIsTelemetryBannerVisible={setIsTelemetryBannerVisible}
          insertTelemetryCode={insertTelemetryCode}
          setInsertTelemetryCode={setInsertTelemetryCode}
          allowTelemetryAndCloseBanner={allowTelemetryAndCloseBanner}
          declineTelemetryAndCloseBanner={declineTelemetryAndCloseBanner}
        />
        <section className={styles.Container}>
          <SideBar slug={slug} menu={menu} />
          <Head>
            <title>{data.title + " - Streamlit Docs"}</title>
            <link rel="icon" href="/favicon.svg" />
            <link rel="alternate icon" href="/favicon32.ico" />
            <meta name="theme-color" content="#ffffff" />
            {keywordsTag}
            {version ? (
              <link
                rel="canonical"
                href={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/${slug
                  .slice(1)
                  .join("/")}`}
              />
            ) : (
              <link
                rel="canonical"
                href={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/${slug.join(
                  "/",
                )}`}
              />
            )}
            <meta
              content={`${data.title} - Streamlit Docs`}
              property="og:title"
            />
            <meta
              content={`${data.title} - Streamlit Docs`}
              name="twitter:title"
            />
            {data.description && (
              <React.Fragment>
                <meta content={data.description} name="description" />
                <meta content={data.description} property="og:description" />
                <meta content={data.description} name="twitter:description" />
              </React.Fragment>
            )}
            <meta property="og:type" content="website" />
            <meta property="og:url" content="https://docs.streamlit.io/" />
            <meta content="summary_large_image" name="twitter:card" />
            <meta
              property="og:image"
              content={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/sharing-image-facebook.jpg`}
            />
            <meta
              name="twitter:image"
              content={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/sharing-image-twitter.jpg`}
            />
          </Head>
          <section className={styles.InnerContainer} id="documentation">
            {versionWarning}
            <BreadCrumbs slug={slug} menu={menu} version={version} />
            <article
              id="content-container"
              className={classNames("leaf-page", styles.ArticleContainer)}
            >
              <FloatingNav slug={slug} menu={menu} version={version} />
              <div className={classNames("content", styles.ContentContainer)}>
                <MDXRemote {...source} components={components} />
                {arrowContainer}
                <Psa />
                {/*<Helpful slug={slug} sourcefile={suggestEditURL} />*/}
              </div>
            </article>
          </section>
          <Footer setIsTelemetryModalVisible={setIsTelemetryModalVisible} />
        </section>
      </Layout>
    </MDXProvider>
  );
}

export async function getStaticProps(context) {
  const paths = await getStaticPaths();
  const props = {};
  let location = `/${context.params.slug.join("/")}`;

  // Sort of documentation versions
  const jsonContents = fs.readFileSync(
    join(pythonDirectory, "streamlit.json"),
    "utf8",
  );
  const streamlitFuncs = jsonContents ? JSON.parse(jsonContents) : {};
  const all_versions = Object.keys(streamlitFuncs);
  const versions = sortBy(all_versions, [
    (o) => {
      const numericPart = parseInt(o, 10);
      return isNaN(numericPart) ? Number.NEGATIVE_INFINITY : numericPart;
    },
  ]);
  const current_version = versions[versions.length - 1];
  const funcs = jsonContents ? JSON.parse(jsonContents) : {};

  const menu = getMenu();

  props["streamlit"] = {};
  props["versions"] = all_versions;
  props["versionFromStaticLoad"] = null;

  if ("slug" in context.params) {
    let filename;

    paths.paths.forEach((obj) => {
      if (obj.params.location == location) {
        filename = obj.params.fileName;
      }
    });

    // Get the last element of the array to find the MD file
    const fileContents = fs.readFileSync(filename, "utf8");
    const { data, content } = matter(fileContents);
    const should_version = /<Autofunction(.*?)\/>/gi.test(fileContents);

    if (should_version) {
      props["streamlit"] = funcs[current_version];
    }

    const isnum = /^[\d\.]+$/.test(context.params.slug[0]);
    const isSiS = /^SiS[\d\.]*$/.test(context.params.slug[0]);
    if (isnum || isSiS) {
      props["versionFromStaticLoad"] = context.params.slug[0];
      props["streamlit"] = funcs[props["versionFromStaticLoad"]];

      location = `/${context.params.slug.slice(1).join("/")}`;
    }

    const source = await serialize(content, {
      scope: data,
      mdxOptions: {
        rehypePlugins: [rehypeSlug, rehypeAutolinkHeadings],
        remarkPlugins: [remarkUnwrapImages, remarkGfm],
      },
    });

    const { current, prev, next } = getPreviousNextFromMenu(menu, location);

    // Determine which previous/next links we should be using, the override option coming from the markdown file (if it exists),
    // or the one that gets generated automatically above by calling getPreviousNextFromMenu
    let prevMenuItem;
    if (data.previousLink && data.previousTitle) {
      prevMenuItem = {
        name: data.previousTitle,
        url: data.previousLink,
      };
    } else {
      prevMenuItem = prev;
    }

    let nextMenuItem;
    if (data.nextLink && data.nextTitle) {
      nextMenuItem = {
        name: data.nextTitle,
        url: data.nextLink,
      };
    } else {
      nextMenuItem = next;
    }

    props["menu"] = menu;
    props["data"] = data;
    props["filename"] = filename;
    props["slug"] = context.params.slug;
    props["source"] = source;
    props["currMenuItem"] = current
      ? {
          name: current.name,
          url: current.url,
          isVersioned: !!current.isVersioned,
        }
      : null;
    props["prevMenuItem"] = prevMenuItem ? prevMenuItem : null;
    props["nextMenuItem"] = nextMenuItem ? nextMenuItem : null;
  }

  return {
    props: props,
  };
}

export async function getStaticPaths() {
  // Build up paths based on slugified categories for all docs
  const articles = getArticleSlugs();
  const paths = [];

  // Sort of documentation versions
  const jsonContents = fs.readFileSync(
    join(pythonDirectory, "streamlit.json"),
    "utf8",
  );
  const streamlitFuncs = jsonContents ? JSON.parse(jsonContents) : {};
  const all_versions = Object.keys(streamlitFuncs);
  const versions = sortBy(all_versions, [
    (o) => {
      const numericPart = parseInt(o, 10);
      return isNaN(numericPart) ? Number.NEGATIVE_INFINITY : numericPart;
    },
  ]);
  const current_version = versions[versions.length - 1];

  // Load each file and map a path

  for (const index in articles) {
    let slug = basename(articles[index]).replace(/\.md$/, "");
    let realSlug = [slug];
    slug = `/${slug}`;
    const fileContents = fs.readFileSync(articles[index], "utf8");
    const { data, content } = matter(fileContents);

    // Use slug instead of Category if it's present
    if ("slug" in data) {
      slug = data.slug;
      realSlug = data.slug.split("/").map(getArticleSlugFromString);
      realSlug.shift();
    }

    let path = {
      params: {
        slug: realSlug,
        location: slug,
        fileName: articles[index],
        title: data.title ? data.title : "Untitled",
        description: data.description ? data.description : "",
      },
    };

    paths.push(path);

    // If the file uses Autofunction, we need to version it.
    // Major versions only --TO DO--
    const should_version = /<Autofunction(.*?)\/>/gi.test(fileContents);
    if (!should_version) {
      continue;
    }

    for (const v_index in versions) {
      const version = versions[v_index];

      if (version == current_version) {
        continue;
      }

      const versioned_location = `/${version}${slug}`;
      const newSlug = [...realSlug];

      newSlug.unshift(version);

      path = {
        params: {
          slug: newSlug,
          location: versioned_location,
          fileName: articles[index],
          title: data.title ? data.title : "Untitled",
          description: data.description ? data.description : "",
        },
      };
      paths.push(path);
    }
  }

  return {
    paths: paths,
    fallback: false,
  };
}


================================================
File: /pages/_app.js
================================================
import { debounce } from "lodash";

import "../styles/globals.css";
import "../components/utilities/searchModal.css";
import "../components/utilities/kapaModal.css";
import "../styles/main.scss";
import "../public/fonts/styles.css";

// Loading indicator
import Router from "next/router";
import NProgress from "nprogress";

import { useEffect } from "react";

import { AppContextProvider } from "../context/AppContext";

Router.events.on("routeChangeStart", () => NProgress.start());
Router.events.on("routeChangeComplete", () => NProgress.done());
Router.events.on("routeChangeError", () => NProgress.done());

function StreamlitDocs({ Component, pageProps }) {
  useEffect(() => {
    if (navigator.platform.includes("Mac")) {
      document.body.classList.add("mac");
    }
  }, []);

  return (
    <AppContextProvider>
      <Component {...pageProps} />
    </AppContextProvider>
  );
}

export default StreamlitDocs;


================================================
File: /pages/_document.js
================================================
import Document, { Html, Head, Main, NextScript } from "next/document";

export default function StreamlitDocument() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

export async function getInitialProps(ctx) {
  const initialProps = await Document.getInitialProps(ctx);
  return { ...initialProps };
}


================================================
File: /pages/index.js
================================================
import React, { useState, useCallback } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

import { getMenu } from "../lib/api";

import Layout from "../components/layouts/globalTemplate";
import Footer from "../components/navigation/footer";

import SideBar from "../components/navigation/sideBar";
import ArrowLinkContainer from "../components/navigation/arrowLinkContainer";
import ArrowLink from "../components/navigation/arrowLink";

import GDPRBanner, {
  setTelemetryPreference,
} from "../components/utilities/gdpr";
import CookieSettingsModal from "../components/utilities/cookieSettingsModal";
import SocialCallouts from "../components/utilities/socialCallout";
import Spacer from "../components/utilities/spacer";

import SummaryTiles from "../components/summaryTiles";

import NewsContainer from "../components/layouts/newsContainer";
import InlineCalloutContainer from "../components/layouts/inlineCalloutContainer";
import TileContainer from "../components/layouts/tileContainer";
import RefCard from "../components/blocks/refCard";

import { H1, H2 } from "../components/blocks/headers";
import NewsFeed from "../components/blocks/newsFeed";
import Button from "../components/blocks/button";
import InlineCallout from "../components/blocks/inlineCallout";
import NoteSplit from "../components/blocks/noteSplit";

import { attributes } from "../content/index.md";

import styles from "../components/layouts/container.module.css";

export default function Home({ window, menu }) {
  let { description } = attributes;

  const [isTelemetryModalVisible, setIsTelemetryModalVisible] = useState(false);
  const [isTelemetryBannerVisible, setIsTelemetryBannerVisible] =
    useState(false);
  const [insertTelemetryCode, setInsertTelemetryCode] = useState(false);

  const router = useRouter();

  const allowTelemetryAndCloseBanner = useCallback(() => {
    setIsTelemetryBannerVisible(false);
    setIsTelemetryModalVisible(false);
    setInsertTelemetryCode(true);
    setTelemetryPreference(true);
  }, [isTelemetryBannerVisible, insertTelemetryCode]);

  const declineTelemetryAndCloseBanner = useCallback(() => {
    setIsTelemetryBannerVisible(false);
    setIsTelemetryModalVisible(false);
    setInsertTelemetryCode(false);
    setTelemetryPreference(false);

    // If previous state was true, and now it's false, reload the page to remove telemetry JS
    if (insertTelemetryCode) router.reload();
  }, [isTelemetryBannerVisible, insertTelemetryCode]);

  return (
    <Layout window={window}>
      <Head>
        <title>Streamlit documentation</title>
        <link rel="icon" href="/favicon.svg" />
        <link rel="alternate icon" href="/favicon32.ico" />
        <meta name="theme-color" content="#ffffff" />
        <link
          rel="canonical"
          href={`https://${process.env.NEXT_PUBLIC_HOSTNAME}`}
        />
        <meta content="Streamlit Docs" property="og:title" />
        <meta content="Streamlit Docs" name="twitter:title" />
        {description && (
          <React.Fragment>
            <meta content={description} name="description" />
            <meta content={description} property="og:description" />
            <meta content={description} name="twitter:description" />
          </React.Fragment>
        )}
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://docs.streamlit.io/" />
        <meta content="summary_large_image" name="twitter:card" />
        <meta
          property="og:image"
          content={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/sharing-image-facebook.jpg`}
        />
        <meta
          name="twitter:image"
          content={`https://${process.env.NEXT_PUBLIC_HOSTNAME}/sharing-image-twitter.jpg`}
        />
      </Head>
      {isTelemetryModalVisible && (
        <CookieSettingsModal
          setIsTelemetryModalVisible={setIsTelemetryModalVisible}
          allowTelemetryAndCloseBanner={allowTelemetryAndCloseBanner}
          declineTelemetryAndCloseBanner={declineTelemetryAndCloseBanner}
        />
      )}
      <GDPRBanner
        isTelemetryModalVisible={isTelemetryModalVisible}
        setIsTelemetryModalVisible={setIsTelemetryModalVisible}
        isTelemetryBannerVisible={isTelemetryBannerVisible}
        setIsTelemetryBannerVisible={setIsTelemetryBannerVisible}
        insertTelemetryCode={insertTelemetryCode}
        setInsertTelemetryCode={setInsertTelemetryCode}
        allowTelemetryAndCloseBanner={allowTelemetryAndCloseBanner}
        declineTelemetryAndCloseBanner={declineTelemetryAndCloseBanner}
      />
      <section className={styles.Container}>
        <SideBar menu={menu} slug={[]} />
        <section className={styles.InnerContainer}>
          <article>
            <H1>Streamlit documentation</H1>
            <p>
              <a href="https://www.streamlit.io">Streamlit</a> is an open-source
              Python framework for data scientists and AI/ML engineers to
              deliver dynamic data apps with only a few lines of code. Build and
              deploy powerful data apps in minutes. Let's get started!
            </p>

            <Spacer size="2rem" />

            <SummaryTiles />

            {/* <H2 className='no-b-m'>What's new</H2>

            <TileContainer>
              <Tile size="half" background="unset" color="unset" dark={{ background: "unset", color: 'white', border_color: 'gray-90' }} border_color="gray-40" img="/logo.svg" title="Feature title" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Eleifend a facilisis sagittis, vitae nibh massa in facilisis et. Pretium eget non cursus purus tempus porta sodales." link="/tutorials/get-started" />
              <Tile size="half" background="unset" color="unset" dark={{ background: "unset", color: 'white', border_color: 'gray-90' }} border_color="gray-40" icon="visibility" title="Feature title" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Eleifend a facilisis sagittis, vitae nibh massa in facilisis et. Pretium eget non cursus purus tempus porta sodales." link="/tutorials/get-started" />
              <Tile size="half" background="unset" color="unset" dark={{ background: "unset", color: 'white', border_color: 'gray-90' }} border_color="gray-40" icon="edit" title="Feature title" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Eleifend a facilisis sagittis, vitae nibh massa in facilisis et. Pretium eget non cursus purus tempus porta sodales." link="/tutorials/get-started" />
              <Tile size="half" background="unset" color="unset" dark={{ background: "unset", color: 'white', border_color: 'gray-90' }} border_color="gray-40" img="/logo.svg" title="Feature title" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Eleifend a facilisis sagittis, vitae nibh massa in facilisis et. Pretium eget non cursus purus tempus porta sodales." link="/tutorials/get-started" />
            </TileContainer> */}

            <H2>How to use our docs</H2>
            <InlineCalloutContainer>
              <InlineCallout
                color="orange-70"
                icon="rocket_launch"
                bold="Get started"
                href="/get-started"
              >
                with Streamlit! Set up your development environment and learn
                the fundamental concepts, and start coding!
              </InlineCallout>
              <InlineCallout
                color="indigo-70"
                icon="description"
                bold="Develop"
                href="/develop"
              >
                your Streamlit app! Our API reference explains each Streamlit
                function with examples. Dive deep into all of our features with
                conceptual guides. Try out our step-by-step tutorials.
              </InlineCallout>
              <InlineCallout
                color="lightBlue-70"
                icon="cloud"
                bold="Deploy"
                href="/deploy"
              >
                your Streamlit app! Streamlit Community Cloud our free platform
                for deploying and sharing Streamlit apps. Streamlit in Snowflake
                is an enterprise-class solution where you can house your data
                and apps in one, unified, global system. Explore all your
                options!
              </InlineCallout>
              <InlineCallout
                color="darkBlue-70"
                icon="school"
                bold="Knowledge base"
                href="/knowledge-base"
              >
                is a self-serve library of tips, tricks, and articles that
                answer your questions about creating and deploying Streamlit
                apps.
              </InlineCallout>
              {/* <InlineCallout color="green-70" icon="code" bold="Cookbook" href="/cookbook">
                provides short code snippets that you can copy in for specific use cases.
              </InlineCallout>
              <InlineCallout color="red-70" icon="question_answer" bold="Support" href="/support">
                are the bread and butter of how our APIs and configuration files work and will give you short, actionable explanations of specific functions and features.
              </InlineCallout> */}
            </InlineCalloutContainer>

            <H2 className="no-b-m">What's new</H2>

            <TileContainer>
              <RefCard
                size="third"
                href="/develop/api-reference/layout/st.columns"
              >
                <i className="material-icons-sharp">view_column</i>
                <h4>Add borders to columns and metrics</h4>
                <p>
                  <code>st.columns</code> and <code>st.metric</code> have a new
                  <code>border</code> parameter to show an optional border.
                </p>
              </RefCard>
              <RefCard
                size="third"
                href="/develop/api-reference/text/st.markdown"
              >
                <i className="material-icons-sharp">palette</i>
                <h4>Primary color in Markdown</h4>
                <p>
                  Now you can use the color "primary" in Markdown to color or
                  highlight text with your app's primary color.
                </p>
              </RefCard>
              <RefCard
                size="third"
                href="/develop/api-reference/data/st.column_config"
              >
                <i className="material-icons-sharp">push_pin</i>
                <h4>Pin or freeze dataframe columns</h4>
                <p>
                  Column configuration has a new <code>pinned</code> parameter
                  to pin columns on the left as users scroll horizontally.
                </p>
              </RefCard>
              <RefCard
                size="third"
                href="/develop/api-reference/widgets/st.button"
              >
                <i className="material-icons-sharp">ads_click</i>
                <h4>Tertiary buttons</h4>
                <p>
                  Buttons have a new, "tertiary" type for a more subtle
                  appearance.
                </p>
              </RefCard>
              <RefCard
                size="third"
                href="/develop/api-reference/widgets/st.pills"
              >
                <i className="material-icons-sharp">more_horiz</i>
                <h4>Pills</h4>
                <p>
                  You can create a single- or multi-select group of
                  pill-buttons.
                </p>
              </RefCard>
              <RefCard
                size="third"
                href="/develop/api-reference/widgets/st.segmented_control"
              >
                <i className="material-icons-sharp">view_week</i>
                <h4>Segmented control</h4>
                <p>You can create a segmented button or button group.</p>
              </RefCard>
            </TileContainer>

            <H2 className="no-b-m">Latest blog posts</H2>

            <NewsContainer>
              <NewsFeed />

              <Button link="https://blog.streamlit.io/" target="_blank">
                View all updates
              </Button>
            </NewsContainer>

            <NoteSplit
              background="gray-20"
              title="Join the community"
              copy="Streamlit is more than just a way to make data apps, it's also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today!"
              button={{
                text: "View forum",
                link: "https://discuss.streamlit.io",
                target: "_blank",
              }}
              image="/join.png"
            />
          </article>

          <SocialCallouts />

          <ArrowLinkContainer>
            <ArrowLink link="/get-started" type="next" content="Get started" />
          </ArrowLinkContainer>
        </section>
        <Footer setIsTelemetryModalVisible={setIsTelemetryModalVisible} />
      </section>
    </Layout>
  );
}

export async function getStaticProps(context) {
  const props = {};
  props["menu"] = getMenu();

  return {
    props: props,
  };
}


================================================
File: /pages/style-guide.js
================================================
import Link from "next/link";

import Layout from "../components/layouts/globalTemplate";
import Footer from "../components/navigation/footer";
import Component from "../components/layouts/component";
import TilesContainer from "../components/layouts/tileContainer";
import NewsContainer from "../components/layouts/newsContainer";
import InlineCalloutContainer from "../components/layouts/inlineCalloutContainer";

import HeaderLink from "../components/utilities/headerLink";
import Helpful from "../components/utilities/helpful";
import Psa from "../components/utilities/psa";
import SocialCallout from "../components/utilities/socialCallout";

import ArrowLinkContainer from "../components/navigation/arrowLinkContainer";
import ArrowLink from "../components/navigation/arrowLink";

import Note from "../components/blocks/note";
import Tip from "../components/blocks/tip";
import Important from "../components/blocks/important";
import NoteSplit from "../components/blocks/noteSplit";
import Code from "../components/blocks/code";
import YouTube from "../components/blocks/youTube";
import Image from "../components/blocks/image";
import Tile from "../components/blocks/tile";
import Table from "../components/blocks/table";
import NewsFeed from "../components/blocks/newsFeed";
import InlineCallout from "../components/blocks/inlineCallout";

export default function StyleGuide() {
  return (
    <Layout>
      <article className="page container">
        <Component label="H1">
          <h1>Get started</h1>
        </Component>
        <Component label="H2">
          <h2>Create your first Streamlit app</h2>
        </Component>
        <Component label="H3">
          <h3>Article H3</h3>
        </Component>
        <Component label="H4">
          <h4>Article H4</h4>
        </Component>
        <Component label="H5">
          <h5>Article H5</h5>
        </Component>
        <Component label="H6">
          <h6>Article H6</h6>
        </Component>
        <Component label=".large P">
          <p className="large">
            The easiest way to learn how to use Streamlit is to try things out
            yourself. As you read through this guide, test each method.{" "}
          </p>
        </Component>
        <Component label="P">
          <p>
            Streamlit is more than just a way to make data apps, it’s also a
            community of creators that share their apps and ideas and help each
            other make their work better.
          </p>
        </Component>
        <Component label=".small P">
          <p className="small">
            For this guide we’re using small amounts of data so that we can move
            quickly. You can check out our Tutorial on creating a data explorer
            to see an example of how to load data from an API and use @st.cache
            to cache it.
          </p>
        </Component>
        <Component label="Inside Link">
          <p>
            Check out our <Link href="/">community forum</Link> and post a
            question
          </p>
        </Component>
        <Component label="Ordered List - Plain">
          <ol>
            <li>
              Create a new Python file named{" "}
              <span className="inline_code">first_app.py</span>, then open it
              with your IDE or text editor.
            </li>
            <li>Next, import Streamlit.</li>
          </ol>
        </Component>
        <Component label="Ordered List - Tutorial">
          <ol className="tutorial">
            <li>
              The first step is to create a new Python script. Let’s call it{" "}
              <span className="inline_code">uber_pickups.py</span>.
            </li>
            <li>
              Open <span className="inline_code">uber_pickups.py</span> in your
              favorite IDE or text editor, then add these lines:
            </li>
          </ol>
        </Component>
        <Component label="Unordered List">
          <ul>
            <li>
              Check out our <Link href="/">community forum</Link> and post a
              question
            </li>
            <li>
              Quick help from command line with{" "}
              <span className="inline_code">streamlit --help</span>
            </li>
            <li>
              Read more documentation! Check out:
              <ul>
                <li>
                  <Link href="/">Streamlit Cookbook</Link> for things like
                  caching and inserting elements out of order
                </li>
                <li>
                  <Link href="/">API reference</Link> for examples of every
                  Streamlit command
                </li>
              </ul>
            </li>
          </ul>
        </Component>
        <Component label="Code snippet">
          <Code
            language="python"
            code={`import streamlit as st
                        # To make things easier later, we're also importing numpy and pandas for
                        # working with sample data.`}
          />
          <Code
            language="bash"
            code={`myscript.sh
ls -l myscript.sh`}
          />
        </Component>
        <Component label="Code header">
          <h3 className="code_header">streamlit.text</h3>
        </Component>
        <Component label="Quick Link">
          <HeaderLink>
            <h2>Article H2</h2>
          </HeaderLink>
        </Component>
        <Component label="Arrow Links">
          <ArrowLinkContainer>
            <ArrowLink link="/" type="back" content="Welcome to Streamlit" />
            <ArrowLink link="/get-started" type="next" content="Get Started" />
          </ArrowLinkContainer>
        </Component>
        <Component label="Note Block">
          <Note>
            <p>
              For this guide we’re using small amounts of data so that we can
              move quickly. You can check out our <Link href="/">Tutorial</Link>{" "}
              on creating a data explorer to see an example of how to load data
              from an API and use <Link href="/">@st.cache</Link> to cache it.
            </p>
          </Note>
        </Component>
        <Component label="Note Block (with code embed option)">
          <Tip
            background="indigo-10"
            color="gray-90"
            dark={{ background: "dark-indigo", color: "white" }}
          >
            <p>
              Did you know you can also pass a URL to streamlit run? This is
              great when combined with GitHub Gists. For example:
            </p>
            <Code
              language="bash"
              code={`streamlit run
https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py`}
            />
          </Tip>
        </Component>
        <Component label="Note Block (Important)">
          <Important
            background="orange-10"
            color="gray-90"
            dark={{ background: "dark-orange", color: "white" }}
          >
            <p>
              If the email you originally signed-up with isn’t the primary email
              associated with your GitHub account, just reply to your invite
              email telling us your primary GitHub email so we can grant access
              to the correct account.
            </p>
          </Important>
        </Component>
        <Component label="YouTube Embed">
          <YouTube
            videoId="BuD3gILJW-Q"
            caption="Caption can go here if necessary"
          />
        </Component>
        <Component label="Image">
          <Image
            src="/embed-image-01.jpg"
            alt="Streamlit's email highlighted on their GitHub profile"
            caption="Caption can go within the frame if necessary"
          />
          <Image
            src="/embed-image-02.png"
            alt="Streamlit's 'your apps' page highlighting the 'Edit secerets' link"
            caption="Caption can go within the frame if necessary"
          />
        </Component>
        <Component label="1, 2 or 3-Up Tiles">
          <TilesContainer>
            <Tile
              size="third"
              background="lightBlue-70"
              color="white"
              icon="downloading"
              title="Install Streamlit"
              text="Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia."
            />
            <Tile />
            <Tile />
            <Tile size="half" background="pink" />
            <Tile size="half" />
            <Tile size="two-third" />
            <Tile size="third" />
            <Tile size="full" />
          </TilesContainer>
        </Component>
        <Component label="Expanded ToC">
          <h4>Comming back to work on this.</h4>
        </Component>
        <Component label="Condensed ToC">
          <h4>Comming back to work on this.</h4>
        </Component>
        <Component label="Scroll Tracker Page Navigation">
          <h4>Comming back to work on this.</h4>
        </Component>
        <Component label="Styled Table">
          <Table
            head={{
              title: "Function signature",
              content: `<p class='code'>streamlit.text(body)</p>`,
            }}
            body={{ title: "Parameters" }}
            bodyRows={[
              {
                title: `<p><span class='bold'>body</span> <span class='italic code'>(str)</span></p>`,
                body: `<p>The string to display</p>`,
              },
              {
                title: `<p><span class='bold'>body</span> <span class='italic code'>(str)</span></p>`,
                body: `<p>The string to display</p>`,
              },
            ]}
          />
          <Table
            head={{
              title: "Function signature",
              content: `<p class='code'>streamlit.markdown(body, unsafe_allow_html=False)</p>`,
            }}
            body={{
              title: "Parameters",
            }}
            bodyRows={[
              {
                title: `<p><span class='bold'>body</span> <span class='italic code'>(str)</span></p>`,
                body: `<p>The string to display</p>`,
              },
              {
                title: `<p><span class='bold'>body</span> <span class='italic code'>(str)</span></p>`,
                body: `<p>The string to display as GitHub-flavored Markdown. Syntax information can be found at: <a href='https://github.github.com/gfm'>https://github.github.com/gfm</a>.</p><p>This also supports:</p><ul><li>Emoji shortcodes, such as :+1: and :sunglasses:. For a list of all supported codes, see <a href='https://raw.githubusercontent.com/omnidan/node-emoji/master/lib/emoji.json'>https://raw.githubusercontent.com/omnidan/node-emoji/master/lib/emoji.json</a>.<ul><li>Second level of bullets example</li><ul><li>Third level of bullets example</li></ul></ul></li><li>LaTeX expressions, by wrapping them in “$" or “$$" (the “$$" must be on their own lines). Supported LaTeX functions are listed at <a href='https://katex.org/docs/supported.html'>https://katex.org/docs/supported.html</a>.</li></ul>`,
              },
            ]}
          />
        </Component>
        <Component label="Code Highlights">
          <Code
            language="python"
            lines="11-17"
            code={`import streamlit as st
import pandas as pd
import numpy as np

st.title('Uber pickups in NYC')

DATE_COLUMN = 'date/time'
DATA_URL = ('https://s3-us-west-2.amazonaws.com/'
            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')

@st.cacache_datache
def load_data(nrows):
    data = pd.read_csv(DATA_URL, nrows=nrows)
    lowercase = lambda x: str(x).lower()
    data.rename(lowercase, axis='columns', inplace=True)
    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])
    return data

data_load_state = st.text('Loading data...')
data = load_data(10000)
data_load_state.text("Done! (using st.cache_data)")`}
          />
        </Component>
        <Component label="Show Component Alongside Code">
          <Code
            img="/data-table.png"
            language="python"
            code={`chart_data = pd.DataFrame(
    p.random.randn(20, 3),
    columns=['a', 'b', 'c']
)

st.altair_chart(chart_data)`}
          />
        </Component>
        <Component label="Was This Page Helpful Widget">
          <Helpful />
        </Component>
        <Component label="Featured update">
          <TilesContainer>
            <Tile
              size={"half"}
              background={"unset"}
              color={"unset"}
              dark={{
                background: "unset",
                color: "white",
                border_color: "gray-90",
              }}
              border_color={"gray-40"}
              img={"/logo.svg"}
              link={"/get-started"}
            />
            <Tile
              size={"half"}
              background={"unset"}
              color={"unset"}
              dark={{
                background: "unset",
                color: "white",
                border_color: "gray-90",
              }}
              border_color={"gray-40"}
              img={"/logo.svg"}
              link={"/get-started"}
            />
            <Tile
              size={"half"}
              background={"unset"}
              color={"unset"}
              dark={{
                background: "unset",
                color: "white",
                border_color: "gray-90",
              }}
              border_color={"gray-40"}
              img={"/logo.svg"}
              link={"/get-started"}
            />
            <Tile
              size={"half"}
              background={"unset"}
              color={"unset"}
              dark={{
                background: "unset",
                color: "white",
                border_color: "gray-90",
              }}
              border_color={"gray-40"}
              img={"/logo.svg"}
              link={"/get-started"}
            />
          </TilesContainer>
        </Component>
        <Component label="News entry">
          <NewsContainer>
            <NewsFeed />
          </NewsContainer>
        </Component>
        <Component label="Forum PSA">
          <Psa />
        </Component>
        <Component label="Note split">
          <NoteSplit
            background="gray-20"
            title="Join the community"
            copy="Streamlit is more than just a way to make data apps, it’s also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today!"
            button={{ text: "View fourm", link: "/" }}
            image="/join.png"
          />
        </Component>
        <Component label="Inline callout">
          <InlineCalloutContainer>
            <InlineCallout
              color="indigo-70"
              icon="school"
              bold="Tutorials"
              href="/"
            >
              include our <Link href="/get-started">Get Started</Link> guide and
              a few step-by-step examples to building different types of apps in
              Streamlit.
            </InlineCallout>
            <InlineCallout
              color="indigo-70"
              icon="school"
              bold="Tutorials"
              href="/"
            >
              include our <Link href="/get-started">Get Started</Link> guide and
              a few step-by-step examples to building different types of apps in
              Streamlit.
            </InlineCallout>
          </InlineCalloutContainer>
        </Component>
        <Component label="Social callouts">
          <SocialCallout />
        </Component>
      </article>
      <Footer />
    </Layout>
  );
}


================================================
File: /public/robots.txt
================================================
User-agent: *
Disallow: /admin/

================================================
File: /public/site.webmanifest
================================================
{
  "name": "Streamlit",
  "short_name": "Streamlit",
  "icons": [
    {
      "src": "/favicon192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/favicon512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "display": "standalone"
}


================================================
File: /public/sitemap.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
<sitemap><loc>https://docs.streamlit.io/sitemap-0.xml</loc></sitemap>
</sitemapindex>

================================================
File: /public/sw.js
================================================
// THIS FILE SHOULD NOT BE VERSION CONTROLLED

// https://github.com/NekR/self-destroying-sw

self.addEventListener("install", function (e) {
  self.skipWaiting();
});

self.addEventListener("activate", function (e) {
  self.registration
    .unregister()
    .then(function () {
      return self.clients.matchAll();
    })
    .then(function (clients) {
      clients.forEach((client) => client.navigate(client.url));
    });
});


================================================
File: /public/admin/config.yml
================================================
backend:
  name: git-gateway
  branch: main
media_folder: public/img
public_folder: /img
collections:
  - name: "pages"
    label: "Site"
    files:
      - label: "Home"
        name: "home"
        file: "content/index.md"
        fields:
          - label: Title
            name: title
            widget: string
          - label: Body
            name: body
            widget: markdown
            minimal: true
          - label: Features
            name: features
            widget: list
            summary: "{{fields.title}}"
            fields:
              - { label: Title, name: title, widget: string }
              - { label: Body, name: body, widget: string }
              - {
                  label: URL,
                  name: url,
                  widget: string,
                  hint: "Should be a full url (https://www.example/)",
                }
              - {
                  label: Color,
                  name: color,
                  widget: select,
                  options:
                    [
                      "indigo-70",
                      "orange-70",
                      "darkBlue-70",
                      "red-70",
                      "yellow-70",
                      "green-70",
                      "acqua-70",
                      "lightBlue-70",
                      "gray-70",
                    ],
                }
              - {
                  label: Image,
                  name: image,
                  widget: image,
                  hint: "Takes precedent over an icon, if set.",
                  required: false,
                }
              - {
                  label: Icon,
                  name: icon,
                  widget: string,
                  hint: "Must be the name (like_this) of a Material Icon. Should be an SVG.",
                  required: false,
                }
          - label: "What's New"
            name: whats_new
            widget: list
            summary: "{{fields.title}}"
            fields:
              - { label: Title, name: title, widget: string }
              - { label: Body, name: body, widget: string }
              - {
                  label: URL,
                  name: url,
                  widget: string,
                  hint: "Should be a full url (https://www.example/)",
                }
              - {
                  label: Icon,
                  name: icon,
                  widget: string,
                  hint: "Must be the name (like_this) of a Material Icon.",
                  required: false,
                }
              - {
                  label: Image,
                  name: image,
                  widget: image,
                  hint: "Takes precedent over an icon, if set. Should be an SVG.",
                  required: false,
                }
          - label: News
            name: news
            widget: list
            summary: "{{fields.publish_date}} - {{fields.title}}"
            fields:
              - { label: "Date", name: publish_date, widget: string }
              - { label: Title, name: title, widget: string }
              - { label: Body, name: body, widget: text }
              - {
                  label: URL,
                  name: url,
                  widget: string,
                  hint: "Should be a full url (https://www.example/)",
                }
          - label: Next Page
            name: next
            widget: relation
            collection: "contents"
            value_field: "{{slug}}"
            search_fields: ["title", "category"]
            display_fields: ["{{category}} / {{title}}"]
      - name: "menu"
        label: "Menu"
        create: true
        file: "content/menu.md"
        fields:
          - label: Site Menu
            name: site_menu
            widget: list
            summary: "{{fields.category}}"
            fields:
              - {
                  label: Node,
                  name: category,
                  widget: string,
                  hint: "Use Parent / Child / Child format, with the last element acting as the item title.",
                }
              - {
                  label: URL,
                  name: url,
                  widget: string,
                  hint: "Should be either a full url (https://www.example/) or an absolute URL (/like/this)",
                }
              - {
                  label: Color,
                  name: color,
                  widget: select,
                  options:
                    [
                      "indigo-70",
                      "orange-70",
                      "darkBlue-70",
                      "red-70",
                      "yellow-70",
                      "green-70",
                      "acqua-70",
                      "lightBlue-70",
                      "gray-70",
                    ],
                  required: false,
                }
              - {
                  label: Icon,
                  name: icon,
                  widget: string,
                  hint: "Must be the name (like_this) of a Material Icon.",
                  required: false,
                }
              - {
                  label: Deprecated?,
                  name: isDeprecated,
                  widget: boolean,
                  hint: "Marks the parameter as deprecated in the menu",
                  required: false,
                  default: false,
                }
  - name: "contents"
    label: "Documentation"
    folder: "content"
    create: true
    slug: "{{slug}}"
    fields:
      - label: Title
        name: title
        widget: string
      - label: Page Catgeory
        name: category
        widget: string
        hint: "Categories should be separated by back slashes (Parent / Child / Child)"
      - label: Body
        name: body
        widget: markdown
        modes: ["raw"]
      - label: Next Page
        name: next
        widget: relation
        collection: "contents"
        value_field: "{{slug}}"
        search_fields: ["title", "category"]
        display_fields: ["{{category}} / {{title}}"]


================================================
File: /public/admin/index.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Content Manager</title>
    <script src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
  </head>
  <body>
    <!-- Include the script that builds the page and powers Netlify CMS -->
    <script src="https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js"></script>
  </body>
</html>


================================================
File: /public/fonts/styles.css
================================================
/* Sans */
@font-face {
  font-family: 'Inter';
  font-style:  normal;
  font-weight: 400;
  font-display: swap;
  src: url("sans/Inter-Regular.woff2?v=3.19") format("woff2"),
       url("sans/Inter-Regular.woff?v=3.19") format("woff");
}

@font-face {
  font-family: 'Inter';
  font-style:  italic;
  font-weight: 400;
  font-display: swap;
  src: url("sans/Inter-Italic.woff2?v=3.19") format("woff2"),
       url("sans/Inter-Italic.woff?v=3.19") format("woff");
}

@font-face {
  font-family: 'Inter';
  font-style:  normal;
  font-weight: 600;
  font-display: swap;
  src: url("sans/Inter-SemiBold.woff2?v=3.19") format("woff2"),
       url("sans/Inter-SemiBold.woff?v=3.19") format("woff");
}

@font-face {
  font-family: 'Inter';
  font-style:  italic;
  font-weight: 600;
  font-display: swap;
  src: url("sans/Inter-SemiBoldItalic.woff2?v=3.19") format("woff2"),
       url("sans/Inter-SemiBoldItalic.woff?v=3.19") format("woff");
}

@font-face {
  font-family: 'Inter';
  font-style:  normal;
  font-weight: 700;
  font-display: swap;
  src: url("sans/Inter-Bold.woff2?v=3.19") format("woff2"),
       url("sans/Inter-Bold.woff?v=3.19") format("woff");
}

@font-face {
  font-family: 'Inter';
  font-style:  italic;
  font-weight: 700;
  font-display: swap;
  src: url("sans/Inter-BoldItalic.woff2?v=3.19") format("woff2"),
       url("sans/Inter-BoldItalic.woff?v=3.19") format("woff");
}

@font-face {
  font-family: 'Inter';
  font-style:  normal;
  font-weight: 800;
  font-display: swap;
  src: url("sans/Inter-ExtraBold.woff2?v=3.19") format("woff2"),
       url("sans/Inter-ExtraBold.woff?v=3.19") format("woff");
}

@font-face {
  font-family: 'Inter';
  font-style:  italic;
  font-weight: 800;
  font-display: swap;
  src: url("sans/Inter-ExtraBoldItalic.woff2?v=3.19") format("woff2"),
       url("sans/Inter-ExtraBoldItalic.woff?v=3.19") format("woff");
}

/* Monospaced font */
@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-bold-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-bold-webfont.woff') format('woff');
    font-weight: 700;
    font-style: normal;
}

@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-boldit-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-boldit-webfont.woff') format('woff');
    font-weight: 700;
    font-style: italic;
}

@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-it-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-it-webfont.woff') format('woff');
    font-weight: 400;
    font-style: italic;
}

@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-light-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-light-webfont.woff') format('woff');
    font-weight: 300;
    font-style: normal;
}

@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-lightit-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-lightit-webfont.woff') format('woff');
    font-weight: 300;
    font-style: italic;
}

@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-medium-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-medium-webfont.woff') format('woff');
    font-weight: 500;
    font-style: normal;
}

@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-mediumit-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-mediumit-webfont.woff') format('woff');
    font-weight: 500;
    font-style: italic;
}

@font-face {
    font-family: 'Source Code Pro';
    src: url('code/sourcecodepro-regular-webfont.woff2') format('woff2'),
         url('code/sourcecodepro-regular-webfont.woff') format('woff');
    font-weight: 400;
    font-style: normal;
}

/* Material icons */
@font-face {
  font-family: "Material Icons";
  src: url('icons/material-icons.woff2')
    format("woff2");
}

.material-icons,
i {
  font-family: "Material Icons";
}


================================================
File: /public/images/databases/myfile.csv
================================================
Owner,Pet
Mary,dog
John,cat
Robert,bird


================================================
File: /python/Dockerfile
================================================
FROM python:3.9-slim

COPY sources.list /etc/apt/sources.list

RUN apt-get update
RUN pip install docstring_parser
RUN pip install docutils
RUN pip install lxml
RUN pip install requests
RUN pip install numpydoc
RUN pip install protobuf==3.20.1

RUN mkdir -p /docs
COPY build.py /docs
COPY generate.py /docs

WORKDIR /docs


================================================
File: /python/apply_image_effects.py
================================================
from subprocess import run
import os
import pathlib
import sys


def apply_blur_and_rotation(inputpath, maskpath, blur, rotation, desired_size, outputpath):
    temp_size = f'{desired_size * 1.2}x{desired_size * 1.2}'
    final_size = f'{desired_size}x{desired_size}'

    if rotation == 0:
        rotation_commands = []
        final_crop_commands = []
        temp_size = final_size
    else:
        rotation_commands = ['-rotate', str(rotation)]
        final_crop_commands = ['-crop', f'{final_size}+{desired_size * 0.1}+{desired_size * 0.1}']

    run([
        'magick',
        '(',
            '(',
                '(',
                    inputpath,
                    *rotation_commands,
                ')',
                '-thumbnail', temp_size,
                '-crop', f'{temp_size}+0+0',
                '-mattecolor', 'white',
            ')',
            '(',
                maskpath,
                '-resize', temp_size,
            ')',
            '-compose', 'Blur',
            '-set', 'option:compose:args', str(blur),
            '-composite',
        ')',
        *final_crop_commands,
        '-quality', '70%',
        '-strip',
        outputpath,
    ])


if __name__ == '__main__':
    if len(sys.argv) == 1:
        raise ValueError('Input file or folder is required')

    input_files = sys.argv[1:]

    size = 600
    output_folder = os.path.join('..', 'public', 'images', 'api')
    blur_mask_image_name = 'blurmask.png'

    if len(input_files) == 1:
        if os.path.isdir(input_files[0]):
            input_files = pathlib.Path(input_files[0]).iterdir()
        elif os.path.isfile(input_files[0]):
            pass
        else:
            raise ValueError('Invalid input format')

    for input_image_path in input_files:
        print(input_image_path)

        input_image_name = os.path.basename(input_image_path)
        input_basename, _ = os.path.splitext(input_image_name)

        apply_blur_and_rotation(
            inputpath=input_image_path,
            maskpath=blur_mask_image_name,
            outputpath=os.path.join(output_folder, f'{input_basename}.jpg'),
            blur=0,
            rotation=0,
            desired_size=size,
        )


================================================
File: /python/build.py
================================================
#!/usr/bin/python

import sys
import subprocess
import json
import requests
import logging
import utils

from packaging import version

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

PYPI_URL = 'https://pypi.org/pypi/streamlit/json'

# Only consider the latest N releases
LOOKBACK = 15

# Get the PyPI data
pypi_data = requests.get(PYPI_URL).json()
current_data = utils.get_existing_dict()


def get_latest_releases(pypi_data):
    sorted_release_pairs = sorted(
        (version.parse(v), v)
        for v in pypi_data['releases'])

    _, sorted_release_strs = zip(*sorted_release_pairs)

    return sorted_release_strs[-LOOKBACK:]


if 'info' in pypi_data:
    releases = get_latest_releases(pypi_data)

    for version_str in releases:
        version_obj = version.parse(version_str)

        # We only care about versions of the type major.minor.0
        if version_obj.micro != 0:
            continue

        # We don't care about pre-releases. e.g. 1.6.0rc3
        if version_obj.is_prerelease:
            continue

        if version_str not in current_data:
            logging.info(f"[{version_str}] Installing streamlit...")

            # Download Streamlit.
            try:
                output = subprocess.Popen(['pip', 'install', f'streamlit=={version_str}'], stdout=subprocess.DEVNULL)
                output.wait()
            except subprocess.CalledProcessError as exc:
                logging.error(f"[{version_str}] failed: ", exc.returncode, exc.output)
                continue

            # Grab docstring data for all Streamlit commands.
            logging.info(f"[{version_str}] Starting generation...")

            # Needs to be a subprocess so it imports the latest installed Streamlit correctly.
            # (modules are cached!)
            output = subprocess.Popen(['python', 'generate.py', version_str], stdout=subprocess.DEVNULL)
            output.wait()

        else:
            logging.warning(f"[{version_str}] was already saved in JSON file. Skipping.")
else:
    logging.error("PyPi index could not be fetched, or returned invalid data.")


================================================
File: /python/compose.yml
================================================
# Docker Compose version
version: "3.3"
services:
  python:
    build:
      context: ../
      dockerfile: python/Dockerfile
    image: streamlit-docstring-generator:latest
    command: python build.py
    volumes:
      - ../python:/docs


================================================
File: /python/generate.py
================================================
#!/usr/bin/python

import inspect
import json
import logging
import os
import pathlib
import sys
import types
import re

import docstring_parser
import stoutput
import streamlit
import streamlit.components.v1 as components
import streamlit.testing.v1.element_tree as element_tree
import utils
from docutils.core import publish_parts
from docutils.parsers.rst import directives
from numpydoc.docscrape import NumpyDocString
from streamlit.elements.lib.mutable_status_container import StatusContainer
from streamlit.testing.v1.app_test import AppTest
from streamlit.runtime.caching.cache_utils import CachedFunc
from streamlit.elements.plotly_chart import PlotlyState, PlotlySelectionState
from streamlit.elements.vega_charts import VegaLiteState
from streamlit.elements.arrow import DataframeState, DataframeSelectionState
from streamlit.elements.deck_gl_json_chart import PydeckState, PydeckSelectionState
from streamlit.navigation import page
from streamlit.navigation.page import StreamlitPage

VERSION = streamlit.__version__
DEBUG = False

# Set up logging to print debug messages to stdout
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)


def parse_rst(rst_string):
    """Parses RST string to HTML using docutils."""
    docutil_settings = {"embed_stylesheet": 0}
    # Register the custom RST directive for output
    directives.register_directive("output", stoutput.StOutput)
    # Convert RST string to HTML using docutils
    document = publish_parts(
        rst_string, writer_name="html", settings_overrides=docutil_settings
    )
    return str(document["body"])


def strip_code_prompts(rst_string):
    """Removes >>> and ... prompts from code blocks in examples."""
    return (
        rst_string.replace("&gt;&gt;&gt; ", "")
        .replace("&gt;&gt;&gt;\n", "\n")
        .replace("\n... ", "\n")
        .replace("\n...", "\n")
    )


def get_github_source(func):
    """Returns a link to the source code on GitHub for a given command."""
    repo_prefix = f"https://github.com/streamlit/streamlit/blob/{VERSION}/lib/"

    if hasattr(func, "__dict__"):
        # For Streamlit commands (e.g. st.spinner) wrapped by decorator
        while "__wrapped__" in func.__dict__:
            # Continue to unwrap until we get to the original function
            func = func.__wrapped__

    # Tuple with three elements: part before the first occurrence of "/streamlit",
    # the string "/streamlit", and the part after "/streamlit"
    # path_parts = func.__code__.co_filename.partition("/streamlit")
    # # Get the line number where the function is defined in the source code
    # line = func.__code__.co_firstlineno

    # return "".join([repo_prefix, path_parts[1], path_parts[2], f"#L{line}"])
    try:
        source_file = inspect.getsourcefile(func)
    except TypeError:
        try:
            # TODO: The inspect module returns the correct line number but not
            # the correct source file for functions with both @property and
            # @gather_metrics. Replace ContextProxy properties with their
            # parent class for the purposes of getting the correct source file.
            # Generalize this two deal with arbitrarily wrapped functions.
            context_obj = getattr(streamlit.runtime.context, "ContextProxy")
            if func.fget.__module__ == context_obj.__module__:
                source_file = inspect.getsourcefile(context_obj)
            else:
                source_file = inspect.getsourcefile(func.fget)
        except AttributeError:
            source_file = inspect.getsourcefile(func.__call__)

    # Get the relative path after the "streamlit" directory
    rel_path = os.path.relpath(
        source_file, start=os.path.join(streamlit.__path__[0], "..")
    )

    # Exit if not in the Streamlit library
    if ".." in rel_path:
        return ""

    try:
        line = inspect.getsourcelines(func)[1]
    except TypeError:
        try:
            line = inspect.getsourcelines(func.fget)[1]
        except AttributeError:
            try:
                line = inspect.getsourcelines(func.__call__)[1]
            except:
                print(f"No line found for {func}")
                return ""
    return "".join([repo_prefix, rel_path, f"#L{line}"])


def get_property_docstring_dict(
    prop, propname, signature_prefix, is_class_method, is_property
):
    """Returns a dictionary containing the docstring information for a given property."""
    docstring_dict = get_docstring_dict(
        prop,
        propname,
        signature_prefix,
        is_class=False,
        is_class_method=is_class_method,
        is_property=is_property,
    )
    if "description" in docstring_dict:
        docstring_dict["description"] = docstring_dict["description"].split("\n")[0]
    else:
        docstring_dict["description"] = ""

    return docstring_dict

def get_attribute_dict_dict(obj, objname, signature_prefix=None):
    # Initialize an empty dictionary to store the object description
    description = {}
    # Get the object's docstring or an empty string if it doesn't have one
    docstring = getattr(obj, "__doc__", "")
    # Set the object's name
    description["name"] = objname
    if signature_prefix is None:
        description["signature"] = f"{objname}"
    else:
        description["signature"] = f"{signature_prefix}.{objname}"
    description["is_class"] = True
    description["methods"] = []
    description["source"] = get_github_source(obj)
    parse_docstring(obj, docstring, description, True, False, False)
    return description

def parse_docstring(obj, docstring, description, is_class, is_class_method, is_property):
    try:
        # Explicitly create the 'Example' section which Streamlit seems to use a lot of.
        NumpyDocString.sections.update({"Example": []})
        numpydoc_obj = NumpyDocString(docstring)

        if "Notes" in numpydoc_obj and len(numpydoc_obj["Notes"]) > 0:
            collapsed = "\n".join(numpydoc_obj["Notes"])
            description["notes"] = parse_rst(collapsed)

        if "Warning" in numpydoc_obj and len(numpydoc_obj["Warning"]) > 0:
            collapsed = "\n".join(numpydoc_obj["Warning"])
            description["warnings"] = parse_rst(collapsed)

        if "Example" in numpydoc_obj and len(numpydoc_obj["Example"]) > 0:
            collapsed = "\n".join(numpydoc_obj["Example"])
            description["example"] = strip_code_prompts(parse_rst(collapsed))

        if "Examples" in numpydoc_obj and len(numpydoc_obj["Examples"]) > 0:
            collapsed = "\n".join(numpydoc_obj["Examples"])
            description["examples"] = strip_code_prompts(parse_rst(collapsed))

    except:
        print(f"Failed to parse notes, warning, and/or examples for {obj}.")

    # Parse the docstring using docstring_parser
    docstring_obj = docstring_parser.parse(docstring)

    # Get the short and long descriptions from the docstring object
    short_description = docstring_obj.short_description
    long_description = str(
        ""
        if docstring_obj.long_description is None
        else docstring_obj.long_description
    )

    # Insert a blank line between the short and long description, if the latter exists.
    if long_description:
        description["description"] = parse_rst(
            "\n\n".join([short_description, long_description])
        )
    else:
        description["description"] = short_description

    if is_property and is_class_method:
        description["description"] = parse_rst(short_description)
    else:
        description["description"] = parse_rst(
            "\n\n".join([short_description, long_description])
        )

    # Initialize the list of arguments in the description dictionary
    description["args"] = []
    # Iterate through the parameters from the parsed docstring
    for param in docstring_obj.params:
        arg_obj = {}  # Create an argument object dictionary
        arg_obj["name"] = param.arg_name  ## Store the argument name
        arg_obj["type_name"] = param.type_name  # Store the argument type
        arg_obj["is_optional"] = param.is_optional  # Store the optional flag
        if (not is_class) and callable(obj):
            if param.arg_name.startswith("**"):
                arg_obj["is_kwarg_only"] = True
            elif param.arg_name == "*args":
                arg_obj["is_kwarg_only"] = False
            else:
                try:
                    # Check if the function is a bound method
                    if isinstance(obj, types.MethodType):
                        # Get the signature of the function object being bound
                        sig = inspect.signature(obj.__func__)
                    else:
                        # Get the signature of the function
                        sig = inspect.signature(obj)
                    param_obj = sig.parameters[param.arg_name]
                    arg_obj["is_kwarg_only"] = (param_obj.kind is param_obj.KEYWORD_ONLY)
                except:
                    print(sig)
                    print(f"Can't find {param.arg_name} as an argument for {obj}")
        arg_obj["description"] = (
            parse_rst(param.description) if param.description else ""
        )  # Store the argument description (parsed from RST to HTML)
        arg_obj["default"] = param.default  # Store the default value

        # Check if the argument is deprecated
        if docstring_obj.deprecation:
            match = re.search("``[^ `]*``", docstring_obj.deprecation.description)
            if match is not None and match.group(0) == f"``{param.arg_name}``":
                # Add the deprecated flag and the deprecation message to the argument object
                arg_obj["deprecated"] = {
                    "deprecated": True,
                    "deprecatedText": parse_rst(docstring_obj.deprecation.description),
                }
        # Append the argument object to the list of arguments
        description["args"].append(arg_obj)

    description["returns"] = []
    if type(docstring_obj.returns) is not None:
        for returns in docstring_obj.many_returns:
            return_obj = {}
            return_obj["type_name"] = returns.type_name
            return_obj["is_generator"] = returns.is_generator
            return_obj["description"] = (
                parse_rst(returns.description) if returns.description else ""
            )
            return_obj["return_name"] = returns.return_name
            description["returns"].append(return_obj)

    description["source"] = get_github_source(obj)
    return # Description dictionary is mutated

def get_docstring_dict(
    obj, objname, signature_prefix, is_class, is_class_method, is_property
):
    """Returns a dictionary containing the docstring information for a given object (function or class)."""
    # Initialize an empty dictionary to store the object description
    description = {}
    # Get the object's docstring or an empty string if it doesn't have one
    docstring = getattr(obj, "__doc__", "")
    # Set the object's name
    description["name"] = objname
    # If the object is a class, store its methods and their signatures
    if is_class:
        # Get the class's signature without annotations
        arguments = get_sig_string_without_annots(obj)
        if arguments is None:
            arguments = ""
        # Strip "." in case key_prefix==""
        description["signature"] = f"{signature_prefix}.{objname}({arguments})".strip(".")
        description["is_class"] = True
        # Get the class's methods
        methods = inspect.getmembers(obj, inspect.isfunction)
        # Check if methods is empty
        if not methods:
            # assign the objects functions to methods
            methods = inspect.getmembers(obj, inspect.ismethod)
        # Initialize an empty dictionary to store the methods and their signatures
        description["methods"] = []
        # Iterate through the class's methods
        for method_name, method in methods:
            # Skip methods that start with an underscore
            if method_name.startswith("_"):
                continue
            meth_obj = {}
            meth_obj = get_function_docstring_dict(
                method,
                method_name,
                f"{signature_prefix}.{method_name}",
                is_class_method=True,
            )
            if meth_obj["source"] == "":
                continue
            description["methods"].append(meth_obj)

        # Get the class's properties
        properties = [
            (name, prop)
            for name, prop in inspect.getmembers(obj, lambda x: isinstance(x, property))
        ]
        # Initialize an empty dictionary to store the properties and their signatures
        description["properties"] = []
        # Iterate through the class's properties
        for prop_name, prop in properties:
            # Skip properties that start with an underscore
            if prop_name.startswith("_"):
                continue
            prop_obj = {}
            prop_obj = get_property_docstring_dict(
                prop,
                prop_name,
                f"{signature_prefix}.{prop_name}",
                is_class_method=False,
                is_property=True,
            )
            if prop_obj["description"] == "":
                print(f"Missing docstring: {prop_name}")
                continue
            description["properties"].append(prop_obj)

        description["source"] = get_github_source(obj)

    else:
        # Get the function's signature without annotations
        arguments = get_sig_string_without_annots(obj)
        # Set the function's signature. If obj is a property, no need to add parentheses
        description["signature"] = (
            f"{signature_prefix}.{objname}({arguments})"
            if not is_property
            else f"{signature_prefix}.{objname}"
        )

        # Remove _ from the start of static component function names
        if objname.startswith("_"):
            description["name"] = objname.lstrip("_")
            description[
                "signature"
            ] = f'{signature_prefix}.{description["name"]}({arguments})'

        # Edge case for .clear() method on st.experimental_memo, st.experimental_singleton, st.cache_data, and st.cache_resource
        # Prepend either "experimental_[memo | singleton]." or "cache_[data | resource]." to the name "clear"
        if any(
            x in signature_prefix
            for x in ["experimental", "cache_data", "cache_resource"]
        ):
            description["name"] = f"{signature_prefix}.{objname}".lstrip("st.")

    # If there is a docstring, process it
    if docstring:
        # Mutate `description` dictionary
        parse_docstring(obj, docstring, description, is_class, is_class_method, is_property)

    return description


def get_function_docstring_dict(
    func, funcname, signature_prefix, is_class_method=False
):
    """Returns a dictionary containing the docstring information for a given function."""
    if is_class_method:
        docstring_dict = get_docstring_dict(
            func,
            funcname,
            signature_prefix,
            is_class=False,
            is_class_method=True,
            is_property=False,
        )
        docstring_dict["description"] = docstring_dict["description"].split("\n")[0]
        return docstring_dict

    return get_docstring_dict(func, funcname, signature_prefix, is_class=False)

def get_sig_string_without_annots(func):
    """Returns a string representation of the function signature without annotations."""
    if not callable(func):
        return ""
    # Check if the function is a bound method
    if isinstance(func, types.MethodType):
        # Get the signature of the function object being bound
        sig = inspect.signature(func.__func__)
    else:
        # Get the signature of the function
        sig = inspect.signature(func)
    # Initialize an empty list to store the arguments
    args = []
    # Initialize a variable to store the previous parameter
    prev = None

    # Iterate through the parameters of the function
    for name, param in sig.parameters.items():
        # Skip the "self" parameter for class methods
        if name == "self":
            continue
        # Skip private parameters that are for internal use
        if name.startswith("_"):
            continue

        # Insert "/" if the previous param was the last positional-only param
        if (prev is not None) and (prev.kind is param.POSITIONAL_ONLY):
            if param.kind is not param.POSITIONAL_ONLY:
                args.append("/")
        # Insert "*" if this is the first keyword-only argument
        if param.kind is param.KEYWORD_ONLY:
            if (prev is not None) and (prev.kind is prev.VAR_POSITIONAL):
                pass
            elif (prev is None) or (prev.kind is not prev.KEYWORD_ONLY):
                    args.append("*")

        # If the parameter has a default value, format it accordingly
        if param.default != inspect._empty:
            if type(param.default) is str:
                def_value = f'"{param.default}"'
            elif type(param.default) is type or callable(param.default):
                def_value = f"special_internal_function"
            else:
                def_value = param.default

            args.append(f"{name}={def_value}")

        # If the parameter is a variable positional argument, format it with '*' in front
        elif param.kind is param.VAR_POSITIONAL:
            args.append(f"*{name}")

        # If the parameter is a variable keyword argument, format it with '**' in front
        elif param.kind is param.VAR_KEYWORD:
            args.append(f"**{name}")

        # Otherwise, just append the parameter name
        else:
            args.append(name)

        # Set the current parameter as the previous one for the next iteration
        prev = param
    
    # Edge case: append "/" if all parameters were positional-only
    if (prev is not None) and (prev.kind is param.POSITIONAL_ONLY):
        args.append("/")

    # Return the formatted argument string
    return ", ".join(args)


def get_obj_docstring_dict(obj, key_prefix, signature_prefix, only_include=None):
    """Recursively get the docstring dict for an object and its members. Returns a dict of dicts containing the docstring info for each member."""

    # Initialize empty dictionary to store function/method/property metadata
    obj_docstring_dict = {}

    # Iterate over the names of the members of the object
    for membername in dir(obj):
        if DEBUG > 1:
            print(f"Looking up {membername}")

        # Skip members starting with an underscore
        if membername.startswith("_"):
            continue

        # Skip members that are not included in only_include
        if only_include is not None and membername not in only_include:
            continue

        # Get the member object using its name
        member = getattr(obj, membername)

        # Skip non-element or block classes in element tree
        if obj == element_tree:
            if not inspect.isclass(member):
                continue
            if not (
                issubclass(member, element_tree.Widget)
                or member == element_tree.Element
            ):
                continue

        # Check if the member is a property
        is_property = isinstance(member, property)
        if is_property:
            member_docstring_dict = get_docstring_dict(
                member,
                membername,
                signature_prefix,
                is_class=False,
                is_class_method=False,
                is_property=True,
            )
            # Strip "." in case key_prefix==""
            fullname = f"{key_prefix}.{membername}".strip(".")
            obj_docstring_dict[fullname] = member_docstring_dict
        else:
            # Skip members that are not callable
            if not callable(member):
                continue

            # memo and singleton are callable objects rather than functions
            # See: https://github.com/streamlit/streamlit/pull/4263
            # Replace the member with its decorator object except st.cache
            # which is deprecated
            while (member in streamlit.runtime.caching.__dict__.values() and member != streamlit.cache):
                member = member._decorator

            # Create the full name of the member using key_prefix and membername
            # Strip "." in case key_prefix==""
            fullname = f"{key_prefix}.{membername}".strip(".")

            # Call get_function_docstring_dict to get metadata of the current member
            is_class = inspect.isclass(
                member
            )  # or isinstance(member, streamlit.elements.lib.column_types.ColumnConfigAPI)
            is_property = isinstance(member, property)
            if is_class:
                is_class_method = False
            else:
                is_class_method = (
                    inspect.ismethod(member) and member.__self__ is not None
                )

            member_docstring_dict = get_docstring_dict(
                member,
                membername,
                signature_prefix,
                is_class,
                is_class_method,
                is_property,
            )

        # Add the extracted metadata to obj_docstring_dict if the object is
        # local to streamlit (source is an empty string when the object is inherited)
        if "source" not in member_docstring_dict:
            print(f"No source for {key_prefix}.{membername}") # Unexpected
        elif member_docstring_dict["source"]:
            obj_docstring_dict[fullname] = member_docstring_dict

    return obj_docstring_dict


def get_streamlit_docstring_dict():
    """Get the docstring dict for the streamlit module and its members. Returns a dict of dicts containing the docstring info for each member."""

    obj_key = {
        streamlit: ["streamlit", "st"],
        streamlit.runtime.caching.cache_data_api.CacheDataAPI: [
            "streamlit.cache_data",
            "st.cache_data",
        ],
        streamlit.runtime.caching.cache_resource_api.CacheResourceAPI: [
            "streamlit.cache_resource",
            "st.cache_resource",
        ],
        streamlit.runtime.state.query_params_proxy.QueryParamsProxy: [
            "streamlit.query_params", 
            "st.query_params",
        ],
        streamlit.connections: ["streamlit.connections", "st.connections"],
        streamlit.connections.SQLConnection: [
            "streamlit.connections.SQLConnection",
            "SQLConnection",
        ],
        streamlit.connections.SnowparkConnection: [
            "streamlit.connections.SnowparkConnection",
            "SnowparkConnection",
        ],
        streamlit.connections.SnowflakeConnection: [
            "streamlit.connections.SnowflakeConnection",
            "SnowflakeConnection",
        ],
        streamlit.connections.ExperimentalBaseConnection: [
            "streamlit.connections.ExperimentalBaseConnection",
            "ExperimentalBaseConnection",
        ],
        streamlit.connections.BaseConnection: [
            "streamlit.connections.BaseConnection",
            "BaseConnection",
        ],
        streamlit.column_config: ["streamlit.column_config", "st.column_config"],
        components: ["streamlit.components.v1", "st.components.v1"],
        streamlit.delta_generator.DeltaGenerator: ["DeltaGenerator", "element", ["add_rows"]], # Only store docstring for element.add_rows
        StatusContainer: ["StatusContainer", "StatusContainer", ["update"]], # Only store docstring for StatusContainer.update
        streamlit.testing.v1: ["streamlit.testing.v1", "st.testing.v1"],
        AppTest: ["AppTest", "AppTest"],
        element_tree: [
            "streamlit.testing.v1.element_tree",
            "st.testing.v1.element_tree",
        ],
        streamlit.user_info.UserInfoProxy: ["streamlit.experimental_user", "st.experimental_user"],
        streamlit.runtime.context.ContextProxy: ["context", "context"],
        CachedFunc: ["CachedFunc", "CachedFunc"],
        page: ["", "", ["StreamlitPage"]],
        StreamlitPage: ["StreamlitPage", "StreamlitPage"],
    }
    proxy_obj_key = {
        streamlit.user_info.UserInfoProxy: ["streamlit.experimental_user", "st.experimental_user"],
        streamlit.runtime.context.ContextProxy: ["streamlit.context", "st.context"]
    }
    attribute_dicts = {
        PlotlyState: ["PlotlyState", "PlotlyState"],
        PlotlySelectionState: ["PlotlySelectionState", "PlotlySelectionState"],
        VegaLiteState: ["VegaLiteState", "VegaLiteState"],
        DataframeState: ["DataframeState", "DataframeState"],
        DataframeSelectionState: ["DataframeSelectionState", "DataframeSelectionState"],
        PydeckState: ["PydeckState", "PydeckState"],
        PydeckSelectionState: ["PydeckSelectionState", "PydeckSelectionState"]

    }

    module_docstring_dict = {}
    for obj, key in obj_key.items():
        if DEBUG:
            print(f"Fetching {obj}")
        module_docstring_dict.update(get_obj_docstring_dict(obj, *key))
    # Proxy objects
    for obj, key in proxy_obj_key.items():
        if DEBUG:
            print(f"Fetching {obj}")
        member_docstring_dict = get_docstring_dict(
                obj, #member
                key[0].split(".")[-1], #membername
                "st", #signature_prefix
                True, #isClass
                False, #is_class_method
                False, #is_property
            )
        module_docstring_dict.update({key[0]: member_docstring_dict})
    for obj, key in attribute_dicts.items():
        if DEBUG:
            print(f"Fetching {obj}")
        docstring = getattr(obj, "__doc__", "")
        member_docstring_dict = get_attribute_dict_dict(obj, key[0].split(".")[-1])
        member_docstring_dict["is_attribute_dict"] = True
        module_docstring_dict.update({key[0]: member_docstring_dict})

    return module_docstring_dict

if __name__ == "__main__":
    if len(sys.argv) > 1:
        VERSION = sys.argv[1]
    if len(sys.argv) > 2 and sys.argv[2].isnumeric():
        DEBUG = int(sys.argv[2])
    data = get_streamlit_docstring_dict()
    utils.write_to_existing_dict(VERSION, data)


================================================
File: /python/sources.list
================================================
deb https://cdn-fastly.deb.debian.org/debian stable main
deb https://cdn-fastly.deb.debian.org/debian-security stable-security main

================================================
File: /python/stoutput.py
================================================
"""RST directive to insert an iframe into a doc.
"""
from docutils import nodes
from docutils.parsers.rst import Directive
import re

class StOutput(Directive):
    """Convert the ".. output" directive into a <Cloud> component.

    The ".. output::" directive looks like this:

    .. output::
       URL
       STYLE

    And it outputs something like:

        <Cloud name="SUBDOMAIN" path="SUBPATH" query="QUERYPARAMS" stylePlaceholder="STYLE" />

    ...where every attribute is guaranteed to be present (even when empty) and there's always
    exactly one space before/after each attribute.

    Parameters
    ----------
        URL
            The full path of the Streamlit app to embed, including protocol.
        STYLE (optional)
            A string of inline styles.

    Examples
    --------

    .. output::
       https://foo.bar.baz

       <Cloud name="foo" path="" query="" stylePlaceholder="" />

    .. output::
       https://foo.bar.baz/bleep/bloop?plim=plom
       height: 5rem; border: 1px solid red;

       <Cloud name="foo" path="bleep/bloop" query="plim=plom" stylePlaceholder="height: 5rem; border: 1px solid red;" />
    """

    has_content = True
    required_arguments = 1
    optional_arguments = 1
    final_argument_whitespace = True

    def run(self):
        src = self.arguments[0]
        if not src.startswith("https://"):
            raise ValueError(
                f"Please use HTTPS in '.. output::' directives\n--> Culprit: {src}"
            )
        if len(self.arguments) > 1:
            additional_styles = self.arguments[1]
        else:
            additional_styles = ""
        name, path, query = re.findall(
            r'https:\/\/([^\/\s]+)\.streamlit\.app\/?([^?\s]+)?\??([\S]+)?', src)[0]

        if name=="":
            raise ValueError(
                f"Custom subdomain was not recognized.\n--> Culprit: {src}"
            )

        component = (
            '<Cloud'
            f' name="{name}"'
            f' path="{path}"'
            f' query="{query}"'
            f' stylePlaceholder="{additional_styles}"'
            ' />')

        node = nodes.raw(
            format="html",
            text=component,
            rawsource=component
        )

        return [node]


def setup(app):
    app.add_directive("output", StOutput)


================================================
File: /python/utils.py
================================================
import pathlib
import json
import logging

OUT_FILE_NAME = 'streamlit.json'


def get_existing_dict(filename=OUT_FILE_NAME):
    logging.debug(f'Reading {filename}...')

    if pathlib.Path(filename).is_file():
        with open(filename, 'r') as current_json:
            docstring_dict = json.loads(current_json.read())
            logging.debug(f'Done!')
            return docstring_dict

    return {}


def write_to_existing_dict(
        streamlit_version,
        docstring_dict,
        filename=OUT_FILE_NAME
    ):
    logging.debug(f'Writing {filename}...')

    existing_dict = get_existing_dict(filename)
    existing_dict[streamlit_version] = docstring_dict

    with open(filename, 'w') as out_file:
        out_file.write(json.dumps(existing_dict))
        logging.debug(f'Done!')


================================================
File: /python/api-examples-source/charts.altair_selections.py
================================================
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt


@st.cache_data
def load_data():
    return pd.DataFrame(np.random.randn(20, 3), columns=["a", "b", "c"])


df = load_data()

point_selector = alt.selection_point("point_selection")
interval_selector = alt.selection_interval("interval_selection")
chart = (
    alt.Chart(df)
    .mark_circle()
    .encode(
        x="a",
        y="b",
        size="c",
        color="c",
        tooltip=["a", "b", "c"],
        fillOpacity=alt.condition(point_selector, alt.value(1), alt.value(0.3)),
    )
    .add_params(point_selector, interval_selector)
)

event = st.altair_chart(chart, key="alt_chart", on_select="rerun")

event


================================================
File: /python/api-examples-source/charts.area_chart.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 3), columns=["a", "b", "c"])
    return df


chart_data = load_data()

st.area_chart(chart_data)


================================================
File: /python/api-examples-source/charts.area_chart1.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(
        {
            "col1": np.random.randn(20),
            "col2": np.random.randn(20),
            "col3": np.random.choice(["A", "B", "C"], 20),
        }
    )
    return df


chart_data = load_data()

st.area_chart(chart_data, x="col1", y="col2", color="col3")


================================================
File: /python/api-examples-source/charts.area_chart2.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 3), columns=["col1", "col2", "col3"])
    return df


chart_data = load_data()

st.area_chart(
    chart_data, x="col1", y=["col2", "col3"], color=["#FF0000", "#0000FF"]  # Optional
)


================================================
File: /python/api-examples-source/charts.area_chart_steamgraph.py
================================================
import streamlit as st
from vega_datasets import data

source = data.unemployment_across_industries()

st.area_chart(source, x="date", y="count", color="series", stack="center")


================================================
File: /python/api-examples-source/charts.audio-purr.py
================================================
import streamlit as st

st.audio("python/api-examples-source/cat-purr.mp3", format="audio/mpeg", loop=True)


================================================
File: /python/api-examples-source/charts.audio.py
================================================
import numpy as np
import requests
import streamlit as st


@st.cache_data
def read_file_from_url(url):
    headers = {
        "User-Agent": "StreamlitDocs/1.5.0 (https://docs.streamlit.io; hello@streamlit.io)"
    }
    return requests.get(url, headers=headers).content


file_bytes = read_file_from_url(
    "https://upload.wikimedia.org/wikipedia/commons/c/c4/Muriel-Nguyen-Xuan-Chopin-valse-opus64-1.ogg"
)

st.audio(file_bytes, format="audio/ogg")

st.write(
    """
    #### Audio credit:

    Performer: _Muriel Nguyen Xuan_ and _Stéphane Magnenat_

    Composer: Frédéric Chopin

    License: Creative Commons Attribution-Share Alike 4.0 International, 3.0 Unported, 2.5 Generic, 2.0 Generic and 1.0 Generic license.
    https://creativecommons.org/licenses/by-sa/4.0/

    URL:
    https://upload.wikimedia.org/wikipedia/commons/c/c4/Muriel-Nguyen-Xuan-Chopin-valse-opus64-1.ogg

"""
)

st.code(
    """
import streamlit as st
import numpy as np

sample_rate = 44100  # 44100 samples per second
seconds = 2  # Note duration of 2 seconds

frequency_la = 440  # Our played note will be 440 Hz

# Generate array with seconds*sample_rate steps, ranging between 0 and seconds
t = np.linspace(0, seconds, seconds * sample_rate, False)

# Generate a 440 Hz sine wave
note_la = np.sin(frequency_la * t * 2 * np.pi)
st.audio(note_la, sample_rate=sample_rate)
"""
)

sample_rate = 44100  # 44100 samples per second
seconds = 2  # Note duration of 2 seconds

frequency_la = 440  # Our played note will be 440 Hz

# Generate array with seconds*sample_rate steps, ranging between 0 and seconds
t = np.linspace(0, seconds, seconds * sample_rate, False)

# Generate a 440 Hz sine wave
note_la = np.sin(frequency_la * t * 2 * np.pi)
st.audio(note_la, sample_rate=sample_rate)


================================================
File: /python/api-examples-source/charts.bar_chart.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 3), columns=["a", "b", "c"])
    return df


chart_data = load_data()

st.bar_chart(chart_data)


================================================
File: /python/api-examples-source/charts.bar_chart1.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(
        {
            "col1": list(range(20)) * 3,
            "col2": np.random.randn(60),
            "col3": ["A"] * 20 + ["B"] * 20 + ["C"] * 20,
        }
    )
    return df


chart_data = load_data()

st.bar_chart(chart_data, x="col1", y="col2", color="col3")


================================================
File: /python/api-examples-source/charts.bar_chart2.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(
        {
            "col1": list(range(20)),
            "col2": np.random.randn(20),
            "col3": np.random.randn(20),
        }
    )
    return df


chart_data = load_data()

st.bar_chart(
    chart_data, x="col1", y=["col2", "col3"], color=["#FF0000", "#0000FF"]  # Optional
)


================================================
File: /python/api-examples-source/charts.bar_chart_horizontal.py
================================================
import streamlit as st
from vega_datasets import data

@st.cache_data
def get_data():
    return data.barley()

source = get_data()

st.bar_chart(source, x="variety", y="yield", color="site", horizontal=True)


================================================
File: /python/api-examples-source/charts.bar_chart_unstacked.py
================================================
import streamlit as st
from vega_datasets import data

source = data.barley()

st.bar_chart(source, x="year", y="yield", color="site", stack=False)


================================================
File: /python/api-examples-source/charts.bokeh_chart.py
================================================
import streamlit as st
from bokeh.plotting import figure


x = [1, 2, 3, 4, 5]
y = [6, 7, 2, 4, 5]

p = figure(title="simple line example", x_axis_label="x", y_axis_label="y")

p.line(x, y, legend_label="Trend", line_width=2)

st.bokeh_chart(p)


================================================
File: /python/api-examples-source/charts.graphviz_chart.py
================================================
import graphviz as graphviz
import streamlit as st


@st.cache_data
def load_graph():
    # Create a graphlib graph object
    graph = graphviz.Digraph()
    graph.edge("run", "intr")
    graph.edge("intr", "runbl")
    graph.edge("runbl", "run")
    graph.edge("run", "kernel")
    graph.edge("kernel", "zombie")
    graph.edge("kernel", "sleep")
    graph.edge("kernel", "runmem")
    graph.edge("sleep", "swap")
    graph.edge("swap", "runswap")
    graph.edge("runswap", "new")
    graph.edge("runswap", "runmem")
    graph.edge("new", "runmem")
    graph.edge("sleep", "runmem")
    return graph


graph = load_graph()

st.graphviz_chart(graph)


================================================
File: /python/api-examples-source/charts.image.py
================================================
import streamlit as st

IMAGE_URL = "https://images.unsplash.com/photo-1548407260-da850faa41e3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1487&q=80"

st.image(IMAGE_URL, caption="Sunrise by the mountains")

st.write(
    """
    #### Image credit:

    Creator: User _Neil Iris (@neil_ingham)_ from _Unsplash_

    License: Do whatever you want.
    https://unsplash.com/license

    URL:
    https://unsplash.com/photos/I2UR7wEftf4

"""
)


================================================
File: /python/api-examples-source/charts.line_chart.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 3), columns=["a", "b", "c"])
    return df


chart_data = load_data()

st.line_chart(chart_data)


================================================
File: /python/api-examples-source/charts.line_chart1.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(
        {
            "col1": np.random.randn(20),
            "col2": np.random.randn(20),
            "col3": np.random.choice(["A", "B", "C"], 20),
        }
    )
    return df


chart_data = load_data()

st.line_chart(chart_data, x="col1", y="col2", color="col3")


================================================
File: /python/api-examples-source/charts.line_chart2.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 3), columns=["col1", "col2", "col3"])
    return df


chart_data = load_data()

st.line_chart(
    chart_data, x="col1", y=["col2", "col3"], color=["#FF0000", "#0000FF"]  # Optional
)


================================================
File: /python/api-examples-source/charts.map.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(
        np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4], columns=["lat", "lon"]
    )
    return df


df = load_data()

st.map(df)


================================================
File: /python/api-examples-source/charts.map_color.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "col1": np.random.randn(1000) / 50 + 37.76,
            "col2": np.random.randn(1000) / 50 + -122.4,
            "col3": np.random.randn(1000) * 100,
            "col4": np.random.rand(1000, 4).tolist(),
        }
    )


df = load_data()

st.map(df, latitude="col1", longitude="col2", size="col3", color="col4")


================================================
File: /python/api-examples-source/charts.plotly_chart.py
================================================
import numpy as np
import plotly.figure_factory as ff
import streamlit as st


@st.cache_data
def load_data():
    # Add histogram data
    x1 = np.random.randn(200) - 2
    x2 = np.random.randn(200)
    x3 = np.random.randn(200) + 2

    # Group data together
    hist_data = [x1, x2, x3]
    return hist_data


hist_data = load_data()

group_labels = ["Group 1", "Group 2", "Group 3"]

# Create distplot with custom bin_size
fig = ff.create_distplot(hist_data, group_labels, bin_size=[0.1, 0.25, 0.5])

# Plot!
st.plotly_chart(fig)


================================================
File: /python/api-examples-source/charts.plotly_chart_event_state.py
================================================
import streamlit as st
import plotly.express as px

df = px.data.iris()  # iris is a pandas DataFrame
fig = px.scatter(df, x="sepal_width", y="sepal_length")

event = st.plotly_chart(fig, key="iris", on_select="rerun")

event


================================================
File: /python/api-examples-source/charts.plotly_chart_event_state_selections.py
================================================
import streamlit as st
import plotly.express as px

df = px.data.iris()
fig = px.scatter(
    df,
    x="sepal_width",
    y="sepal_length",
    color="species",
    size="petal_length",
    hover_data=["petal_width"],
)

event = st.plotly_chart(fig, key="iris", on_select="rerun")

event.selection


================================================
File: /python/api-examples-source/charts.pydeck_chart.py
================================================
import numpy as np
import pandas as pd
import pydeck as pdk
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4], columns=["lat", "lon"]
    )


df = load_data()

st.pydeck_chart(
    pdk.Deck(
        map_style=None,
        initial_view_state=pdk.ViewState(
            latitude=37.76,
            longitude=-122.4,
            zoom=11,
            pitch=50,
        ),
        layers=[
            pdk.Layer(
                "HexagonLayer",
                data=df,
                get_position="[lon, lat]",
                radius=200,
                elevation_scale=4,
                elevation_range=[0, 1000],
                pickable=True,
                extruded=True,
            ),
            pdk.Layer(
                "ScatterplotLayer",
                data=df,
                get_position="[lon, lat]",
                get_color="[200, 30, 0, 160]",
                get_radius=200,
            ),
        ],
    )
)


================================================
File: /python/api-examples-source/charts.pydeck_event_state_selections.py
================================================
import streamlit as st
import pydeck
import pandas as pd

capitals = pd.read_csv(
    "python/api-examples-source/data/capitals.csv",
    header=0,
    names=[
        "Capital",
        "State",
        "Abbreviation",
        "Latitude",
        "Longitude",
        "Population",
    ],
)
capitals["size"] = capitals.Population / 10

point_layer = pydeck.Layer(
    "ScatterplotLayer",
    data=capitals,
    id="capital-cities",
    get_position=["Longitude", "Latitude"],
    get_color="[255, 75, 75]",
    pickable=True,
    auto_highlight=True,
    get_radius="size",
)

view_state = pydeck.ViewState(
    latitude=40, longitude=-117, controller=True, zoom=2.4, pitch=30
)

chart = pydeck.Deck(
    point_layer,
    initial_view_state=view_state,
    tooltip={"text": "{Capital}, {Abbreviation}\nPopulation: {Population}"},
)

event = st.pydeck_chart(chart, on_select="rerun", selection_mode="multi-object")

event


================================================
File: /python/api-examples-source/charts.pyplot.py
================================================
import matplotlib.pyplot as plt
import numpy as np
import streamlit as st


@st.cache_data
def load_fig():
    arr = np.random.normal(1, 1, size=100)
    fig, ax = plt.subplots()
    ax.hist(arr, bins=20)
    return fig, ax


fig, ax = load_fig()

st.pyplot(fig)


================================================
File: /python/api-examples-source/charts.scatter_chart.py
================================================
import streamlit as st
import pandas as pd
import numpy as np


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 3), columns=["a", "b", "c"])
    return df


chart_data = load_data()

st.scatter_chart(chart_data)


================================================
File: /python/api-examples-source/charts.scatter_chart1.py
================================================
import streamlit as st
import pandas as pd
import numpy as np


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 3), columns=["col1", "col2", "col3"])
    df["col4"] = np.random.choice(["A", "B", "C"], 20)
    return df


chart_data = load_data()

st.scatter_chart(
    chart_data,
    x="col1",
    y="col2",
    color="col4",
    size="col3",
)


================================================
File: /python/api-examples-source/charts.scatter_chart2.py
================================================
import streamlit as st
import pandas as pd
import numpy as np


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(20, 4), columns=["col1", "col2", "col3", "col4"])
    return df


chart_data = load_data()

st.scatter_chart(
    chart_data,
    x="col1",
    y=["col2", "col3"],
    size="col4",
    color=["#FF0000", "#0000FF"],  # Optional
)


================================================
File: /python/api-examples-source/charts.vega_lite_chart.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(200, 3), columns=["a", "b", "c"])
    return df


df = load_data()

st.vega_lite_chart(
    df,
    {
        "mark": {"type": "circle", "tooltip": True},
        "encoding": {
            "x": {"field": "a", "type": "quantitative"},
            "y": {"field": "b", "type": "quantitative"},
            "size": {"field": "c", "type": "quantitative"},
            "color": {"field": "c", "type": "quantitative"},
        },
    },
    use_container_width=True,
)


================================================
File: /python/api-examples-source/charts.video.py
================================================
import streamlit as st

VIDEO_URL = "https://static.streamlit.io/examples/star.mp4"

st.video(VIDEO_URL)

st.write(
    """
    #### Video credit:

    Creator: User _fxxu_ from _Pixabay_.

    License: Free for commercial use. No attribution required.
    https://pixabay.com/en/service/license/

    URL:
    https://pixabay.com/en/videos/star-long-exposure-starry-sky-sky-6962/

"""
)


================================================
File: /python/api-examples-source/charts.video2.py
================================================
import streamlit as st

VIDEO_URL = "https://static.streamlit.io/examples/star.mp4"

SUBTITLES = """
WEBVTT

0:00:01.000 --> 0:00:02.000
Look!

0:00:03.000 --> 0:00:05.000
Look at the pretty stars!
"""

st.video(VIDEO_URL, subtitles=SUBTITLES)

st.write(
    """
    #### Video credit:

    Creator: User _fxxu_ from _Pixabay_.

    License: Free for commercial use. No attribution required.
    https://pixabay.com/en/service/license/

    URL:
    https://pixabay.com/en/videos/star-long-exposure-starry-sky-sky-6962/

"""
)


================================================
File: /python/api-examples-source/chat.echo.py
================================================
import streamlit as st

st.title("Echo Bot")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# React to user input
if prompt := st.chat_input("What is up?"):
    # Display user message in chat message container
    st.chat_message("user").markdown(prompt)
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})

    response = f"Echo: {prompt}"
    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        st.markdown(response)
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})


================================================
File: /python/api-examples-source/chat.input-inline.py
================================================
import streamlit as st

with st.sidebar:
    messages = st.container(height=300)
    if prompt := st.chat_input("Say something"):
        messages.chat_message("user").write(prompt)
        messages.chat_message("assistant").write(f"Echo: {prompt}")


================================================
File: /python/api-examples-source/chat.input.py
================================================
import streamlit as st

prompt = st.chat_input("Say something")
if prompt:
    st.write(f"User has sent the following prompt: {prompt}")


================================================
File: /python/api-examples-source/chat.llm.py
================================================
import streamlit as st
from openai import OpenAI

st.title("ChatGPT-like clone")
with st.expander("ℹ️ Disclaimer"):
    st.caption(
        """We appreciate your engagement! Please note, this demo is designed to
        process a maximum of 10 interactions and may be unavailable if too many
        people use the service concurrently. Thank you for your understanding.
        """
    )

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-3.5-turbo"

if "messages" not in st.session_state:
    st.session_state.messages = []

if "max_messages" not in st.session_state:
    # Counting both user and assistant messages, so 10 rounds of conversation
    st.session_state.max_messages = 20

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if len(st.session_state.messages) >= st.session_state.max_messages:
    st.info(
        """Notice: The maximum message limit for this demo version has been reached. We value your interest!
        We encourage you to experience further interactions by building your own application with instructions
        from Streamlit's [Build a basic LLM chat app](https://docs.streamlit.io/develop/tutorials/llms/build-conversational-apps)
        tutorial. Thank you for your understanding."""
    )

else:
    if prompt := st.chat_input("What is up?"):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            try:
                stream = client.chat.completions.create(
                    model=st.session_state["openai_model"],
                    messages=[
                        {"role": m["role"], "content": m["content"]}
                        for m in st.session_state.messages
                    ],
                    stream=True,
                )
                response = st.write_stream(stream)
                st.session_state.messages.append(
                    {"role": "assistant", "content": response}
                )
            except:
                st.session_state.max_messages = len(st.session_state.messages)
                rate_limit_message = """
                    Oops! Sorry, I can't talk now. Too many people have used
                    this service recently.
                """
                st.session_state.messages.append(
                    {"role": "assistant", "content": rate_limit_message}
                )
                st.rerun()


================================================
File: /python/api-examples-source/chat.message.py
================================================
import numpy as np
import streamlit as st

with st.chat_message("user"):
    st.write("Hello 👋")
    st.line_chart(np.random.randn(30, 3))


================================================
File: /python/api-examples-source/chat.message1.py
================================================
import numpy as np
import streamlit as st

message = st.chat_message("assistant")
message.write("Hello human")
message.bar_chart(np.random.randn(30, 3))


================================================
File: /python/api-examples-source/chat.simple.py
================================================
import streamlit as st
import random
import time


# Streamed response emulator
def response_generator():
    response = random.choice(
        [
            "Hello there! How can I assist you today?",
            "Hi, human! Is there anything I can help you with?",
            "Do you need help?",
        ]
    )
    for word in response.split():
        yield word + " "
        time.sleep(0.05)


st.title("Simple chat")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
if prompt := st.chat_input("What is up?"):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        response = st.write_stream(response_generator())
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})


================================================
File: /python/api-examples-source/data.areachart_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "sales": [
                [0, 4, 26, 80, 100, 40],
                [80, 20, 80, 35, 40, 100],
                [10, 20, 80, 80, 70, 0],
                [10, 100, 20, 100, 30, 100],
            ],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "sales": st.column_config.AreaChartColumn(
            "Sales (last 6 months)",
            width="medium",
            help="The sales volume in the last 6 months",
            y_min=0,
            y_max=100,
         ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.barchart_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "sales": [
                [0, 4, 26, 80, 100, 40],
                [80, 20, 80, 35, 40, 100],
                [10, 20, 80, 80, 70, 0],
                [10, 100, 20, 100, 30, 100],
            ],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "sales": st.column_config.BarChartColumn(
            "Sales (last 6 months)",
            help="The sales volume in the last 6 months",
            y_min=0,
            y_max=100,
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.checkbox_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "widgets": ["st.selectbox", "st.number_input", "st.text_area", "st.button"],
            "favorite": [True, False, False, True],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "favorite": st.column_config.CheckboxColumn(
            "Your favorite?",
            help="Select your **favorite** widgets",
            default=False,
        )
    },
    disabled=["widgets"],
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "widgets": ["st.selectbox", "st.number_input", "st.text_area", "st.button"],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "widgets": st.column_config.Column(
            "Streamlit Widgets",
            help="Streamlit **widget** commands 🎈",
            width="medium",
            required=True,
        )
    },
    hide_index=True,
    num_rows="dynamic",
)


================================================
File: /python/api-examples-source/data.column_config.empty.py
================================================
import streamlit as st
import pandas as pd

df = pd.DataFrame(columns=["name", "age", "color"])
colors = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"]
config = {
    "name": st.column_config.TextColumn(
        "Full Name (required)", width="large", required=True
    ),
    "age": st.column_config.NumberColumn("Age (years)", min_value=0, max_value=122),
    "color": st.column_config.SelectboxColumn("Favorite Color", options=colors),
}

result = st.data_editor(df, column_config=config, num_rows="dynamic")

if st.button("Get results"):
    st.write(result)


================================================
File: /python/api-examples-source/data.column_config.py
================================================
import random
from datetime import date

import numpy as np
import pandas as pd
import streamlit as st

st.set_page_config("Profiles", "👤")


@st.cache_data
def get_profile_dataset(number_of_items: int = 100, seed: int = 0) -> pd.DataFrame:
    new_data = []

    def calculate_age(born):
        today = date.today()
        return (
            today.year - born.year - ((today.month, today.day) < (born.month, born.day))
        )

    from faker import Faker

    fake = Faker()
    random.seed(seed)
    Faker.seed(seed)

    for i in range(number_of_items):
        profile = fake.profile()
        new_data.append(
            {
                "avatar": f"https://picsum.photos/400/200?lock={i}",
                "name": profile["name"],
                "age": calculate_age(profile["birthdate"]),
                "active": random.choice([True, False]),
                "daily_activity": np.random.rand(25),
                "homepage": profile["website"][0],
                "email": profile["mail"],
                "activity": np.random.randint(2, 90, size=25),
                "gender": random.choice(["male", "female", "other", None]),
                "birthdate": profile["birthdate"],
                "status": round(random.uniform(0, 1), 2),
            }
        )

    profile_df = pd.DataFrame(new_data)
    profile_df["gender"] = profile_df["gender"].astype("category")
    return profile_df


column_configuration = {
    "name": st.column_config.TextColumn(
        "Name", help="The name of the user", max_chars=100
    ),
    "avatar": st.column_config.ImageColumn("Avatar", help="The user's avatar"),
    "active": st.column_config.CheckboxColumn("Is Active?", help="Is the user active?"),
    "homepage": st.column_config.LinkColumn(
        "Homepage", help="The homepage of the user"
    ),
    "gender": st.column_config.SelectboxColumn(
        "Gender", options=["male", "female", "other"]
    ),
    "age": st.column_config.NumberColumn(
        "Age",
        min_value=0,
        max_value=120,
        format="%d years",
        help="The user's age",
    ),
    "activity": st.column_config.LineChartColumn(
        "Activity (1 year)",
        help="The user's activity over the last 1 year",
        width="large",
        y_min=0,
        y_max=100,
    ),
    "daily_activity": st.column_config.BarChartColumn(
        "Activity (daily)",
        help="The user's activity in the last 25 days",
        width="medium",
        y_min=0,
        y_max=1,
    ),
    "status": st.column_config.ProgressColumn(
        "Status", min_value=0, max_value=1, format="%.2f"
    ),
    "birthdate": st.column_config.DateColumn(
        "Birthdate",
        help="The user's birthdate",
        min_value=date(1920, 1, 1),
    ),
    "email": st.column_config.TextColumn(
        "Email",
        help="The user's email address",
        validate=r"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$",
    ),
}

st.data_editor(
    get_profile_dataset(),
    column_config=column_configuration,
    use_container_width=True,
    hide_index=True,
    num_rows="fixed",
)


================================================
File: /python/api-examples-source/data.data_editor.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        [
            {"command": "st.selectbox", "rating": 4, "is_widget": True},
            {"command": "st.balloons", "rating": 5, "is_widget": False},
            {"command": "st.time_input", "rating": 3, "is_widget": True},
        ]
    )


df = load_data()
edited_df = st.data_editor(df, use_container_width=True)

favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"]
st.markdown(f"Your favorite command is **{favorite_command}** 🎈")


================================================
File: /python/api-examples-source/data.data_editor1.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        [
            {"command": "st.selectbox", "rating": 4, "is_widget": True},
            {"command": "st.balloons", "rating": 5, "is_widget": False},
            {"command": "st.time_input", "rating": 3, "is_widget": True},
        ]
    )


df = load_data()
edited_df = st.data_editor(df, num_rows="dynamic", use_container_width=True)

favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"]
st.markdown(f"Your favorite command is **{favorite_command}** 🎈")


================================================
File: /python/api-examples-source/data.data_editor2.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        [
            {"command": "st.selectbox", "rating": 4, "is_widget": True},
            {"command": "st.balloons", "rating": 5, "is_widget": False},
            {"command": "st.time_input", "rating": 3, "is_widget": True},
        ]
    )


df = load_data()
st.dataframe(df, use_container_width=True)


================================================
File: /python/api-examples-source/data.data_editor3.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "name": [
                "Kelly Kelley",
                "Nicole Nguyen MD",
                "Ethan Turner",
                "Todd Burton",
                "Justin Garcia",
            ],
            "age": [75, 9, 39, 28, 89],
            "gender": ["female", "other", "male", "female", "other"],
            "is_active": [True, True, False, True, False],
            "status": [0.71, 0.47, 0.6, 0.26, 0.9],
            "homepage": [
                "http://edwards.com/",
                "https://www.cole.net/",
                "https://www.baird-garner.info/",
                "https://www.porter.biz/",
                "http://ward-romero.org/",
            ],
        }
    )


df = load_data()
edited_df = st.data_editor(df, use_container_width=True, num_rows="dynamic")


================================================
File: /python/api-examples-source/data.data_editor4.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    data = {
        "Animal": ["Lion", "Crocodile", "Elephant", "Giraffe", "Penguin"],
        "Weight (kg)": [190, 430, 5000, 800, 4],
        "Is Endangered": [True, True, True, False, False],
        "Classification": ["Mammal", "Reptile", "Mammal", "Mammal", "Bird"],
        "Average Lifespan (years)": [12, 70, 70, 25, 20],
        "Habitat": ["Grassland", "Water", "Savannah", "Savannah", "Antarctica"],
    }
    df = pd.DataFrame(data)
    df["Classification"] = df["Classification"].astype("category")
    df["Habitat"] = df["Habitat"].astype("category")
    return df


df = load_data()

st.data_editor(df, key="my_key", num_rows="dynamic")
st.write("Here's the value in Session State:")
st.write(st.session_state["my_key"])


================================================
File: /python/api-examples-source/data.data_editor_config.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        [
            {"command": "st.selectbox", "rating": 4, "is_widget": True},
            {"command": "st.balloons", "rating": 5, "is_widget": False},
            {"command": "st.time_input", "rating": 3, "is_widget": True},
        ]
    )


df = load_data()

edited_df = st.data_editor(
    df,
    column_config={
        "command": "Streamlit Command",
        "rating": st.column_config.NumberColumn(
            "Your rating",
            help="How much do you like this command (1-5)?",
            min_value=1,
            max_value=5,
            step=1,
            format="%d ⭐",
        ),
        "is_widget": "Widget ?",
    },
    disabled=["command", "is_widget"],
    hide_index=True,
)

favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"]
st.markdown(f"Your favorite command is **{favorite_command}** 🎈")


================================================
File: /python/api-examples-source/data.dataframe.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(
        np.random.randn(50, 20), columns=("col %d" % i for i in range(20))
    )
    return df


df = load_data()

st.dataframe(df)  # Same as st.write(df)


================================================
File: /python/api-examples-source/data.dataframe1.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(
        np.random.randn(10, 20), columns=("col %d" % i for i in range(20))
    )
    return df


df = load_data()

st.dataframe(df.style.highlight_max(axis=0))


================================================
File: /python/api-examples-source/data.dataframe2.py
================================================
import pandas as pd
import streamlit as st


# Cache the dataframe so it's only loaded once
@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "first column": [1, 2, 3, 4],
            "second column": [10, 20, 30, 40],
        }
    )


# Boolean to resize the dataframe, stored as a session state variable
st.checkbox("Use container width", value=False, key="use_container_width")

df = load_data()

# Display the dataframe and allow the user to stretch the dataframe
# across the full width of the container
st.dataframe(df, use_container_width=st.session_state.use_container_width)


================================================
File: /python/api-examples-source/data.dataframe_config.py
================================================
import random

import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "name": ["Roadmap", "Extras", "Issues"],
            "url": [
                "https://roadmap.streamlit.app",
                "https://extras.streamlit.app",
                "https://issues.streamlit.app",
            ],
            "stars": [random.randint(0, 1000) for _ in range(3)],
            "views_history": [
                [random.randint(0, 5000) for _ in range(30)] for _ in range(3)
            ],
        }
    )


df = load_data()

st.dataframe(
    df,
    column_config={
        "name": "App name",
        "stars": st.column_config.NumberColumn(
            "Github Stars",
            help="Number of stars on GitHub",
            format="%d ⭐",
        ),
        "url": st.column_config.LinkColumn("App URL"),
        "views_history": st.column_config.LineChartColumn(
            "Views (past 30 days)", y_min=0, y_max=5000
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.dataframe_config_index.py
================================================
import streamlit as st
import pandas as pd
from datetime import date

df = pd.DataFrame(
    {
        "Date": [date(2024, 1, 1), date(2024, 2, 1), date(2024, 3, 1)],
        "Total": [13429, 23564, 23452],
    }
)
df.set_index("Date", inplace=True)

config = {
    "_index": st.column_config.DateColumn("Month", format="MMM YYYY"),
    "Total": st.column_config.NumberColumn("Total ($)"),
}

st.dataframe(df, column_config=config)


================================================
File: /python/api-examples-source/data.dataframe_event_state_selections.py
================================================
import streamlit as st
import pandas as pd
import numpy as np


@st.cache_data
def load_data():
    return pd.DataFrame(np.random.randn(12, 5), columns=["a", "b", "c", "d", "e"])


df = load_data()

event = st.dataframe(
    df,
    key="data",
    on_select="rerun",
    selection_mode=["multi-row", "multi-column"],
)

event.selection


================================================
File: /python/api-examples-source/data.date_column.py
================================================
from datetime import date

import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "birthday": [
                date(1980, 1, 1),
                date(1990, 5, 3),
                date(1974, 5, 19),
                date(2001, 8, 17),
            ]
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "birthday": st.column_config.DateColumn(
            "Birthday",
            min_value=date(1900, 1, 1),
            max_value=date(2005, 1, 1),
            format="DD.MM.YYYY",
            step=1,
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.datetime_column.py
================================================
from datetime import datetime

import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "appointment": [
                datetime(2024, 2, 5, 12, 30),
                datetime(2023, 11, 10, 18, 0),
                datetime(2024, 3, 11, 20, 10),
                datetime(2023, 9, 12, 3, 0),
            ]
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "appointment": st.column_config.DatetimeColumn(
            "Appointment",
            min_value=datetime(2023, 6, 1),
            max_value=datetime(2025, 1, 1),
            format="D MMM YYYY, h:mm a",
            step=60,
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.image_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "apps": [
                "https://storage.googleapis.com/s4a-prod-share-preview/default/st_app_screenshot_image/5435b8cb-6c6c-490b-9608-799b543655d3/Home_Page.png",
                "https://storage.googleapis.com/s4a-prod-share-preview/default/st_app_screenshot_image/ef9a7627-13f2-47e5-8f65-3f69bb38a5c2/Home_Page.png",
                "https://storage.googleapis.com/s4a-prod-share-preview/default/st_app_screenshot_image/31b99099-8eae-4ff8-aa89-042895ed3843/Home_Page.png",
                "https://storage.googleapis.com/s4a-prod-share-preview/default/st_app_screenshot_image/6a399b09-241e-4ae7-a31f-7640dc1d181e/Home_Page.png",
            ],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "apps": st.column_config.ImageColumn(
            "Preview Image", help="Streamlit app preview screenshots"
        )
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.json.py
================================================
import streamlit as st

st.json(
    {
        "foo": "bar",
        "stuff": [
            "stuff 1",
            "stuff 2",
            "stuff 3",
        ],
        "level1": {"level2": {"level3": {"a": "b"}}},
    },
    expanded=2,
)


================================================
File: /python/api-examples-source/data.linechart_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "sales": [
                [0, 4, 26, 80, 100, 40],
                [80, 20, 80, 35, 40, 100],
                [10, 20, 80, 80, 70, 0],
                [10, 100, 20, 100, 30, 100],
            ],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "sales": st.column_config.LineChartColumn(
            "Sales (last 6 months)",
            width="medium",
            help="The sales volume in the last 6 months",
            y_min=0,
            y_max=100,
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.link_column.py
================================================
import pandas as pd
import streamlit as st

data_df = pd.DataFrame(
    {
        "apps": [
            "https://roadmap.streamlit.app",
            "https://extras.streamlit.app",
            "https://issues.streamlit.app",
            "https://30days.streamlit.app",
        ],
        "creator": [
            "https://github.com/streamlit",
            "https://github.com/arnaudmiribel",
            "https://github.com/streamlit",
            "https://github.com/streamlit",
        ],
    }
)

st.data_editor(
    data_df,
    column_config={
        "apps": st.column_config.LinkColumn(
            "Trending apps",
            help="The top trending Streamlit apps",
            validate=r"^https://[a-z]+\.streamlit\.app$",
            max_chars=100,
            display_text=r"https://(.*?)\.streamlit\.app",
        ),
        "creator": st.column_config.LinkColumn(
            "App Creator", display_text="Open profile"
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.list_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "sales": [
                [0, 4, 26, 80, 100, 40],
                [80, 20, 80, 35, 40, 100],
                [10, 20, 80, 80, 70, 0],
                [10, 100, 20, 100, 30, 100],
            ],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "sales": st.column_config.ListColumn(
            "Sales (last 6 months)",
            help="The sales volume in the last 6 months",
            width="medium",
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.number_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "price": [20, 950, 250, 500],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "price": st.column_config.NumberColumn(
            "Price (in USD)",
            help="The price of the product in USD",
            min_value=0,
            max_value=1000,
