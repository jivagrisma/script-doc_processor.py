            step=1,
            format="$%d",
        )
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.progress_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "sales": [200, 550, 1000, 80],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "sales": st.column_config.ProgressColumn(
            "Sales volume",
            help="The sales volume in USD",
            format="$%f",
            min_value=0,
            max_value=1000,
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.selectbox_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "category": [
                "📊 Data Exploration",
                "📈 Data Visualization",
                "🤖 LLM",
                "📊 Data Exploration",
            ],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "category": st.column_config.SelectboxColumn(
            "App Category",
            help="The category of the app",
            width="medium",
            options=[
                "📊 Data Exploration",
                "📈 Data Visualization",
                "🤖 LLM",
            ],
            required=True,
        )
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.table.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    df = pd.DataFrame(np.random.randn(10, 5), columns=("col %d" % i for i in range(5)))
    return df


df = load_data()

st.table(df)


================================================
File: /python/api-examples-source/data.text_column.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "widgets": ["st.selectbox", "st.number_input", "st.text_area", "st.button"],
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "widgets": st.column_config.TextColumn(
            "Widgets",
            help="Streamlit **widget** commands 🎈",
            default="st.",
            max_chars=50,
            validate=r"^st\.[a-z_]+$",
        )
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/data.time_column.py
================================================
from datetime import time

import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    return pd.DataFrame(
        {
            "appointment": [
                time(12, 30),
                time(18, 0),
                time(9, 10),
                time(16, 25),
            ]
        }
    )


data_df = load_data()

st.data_editor(
    data_df,
    column_config={
        "appointment": st.column_config.TimeColumn(
            "Appointment",
            min_value=time(8, 0, 0),
            max_value=time(19, 0, 0),
            format="hh:mm a",
            step=60,
        ),
    },
    hide_index=True,
)


================================================
File: /python/api-examples-source/execution.dialog.py
================================================
import streamlit as st


@st.dialog("Cast your vote")
def vote(item):
    st.write(f"Why is {item} your favorite?")
    reason = st.text_input("Because...")
    if st.button("Submit"):
        st.session_state.vote = {"item": item, "reason": reason}
        st.rerun()


if "vote" not in st.session_state:
    st.write("Vote for your favorite")
    if st.button("A"):
        vote("A")
    if st.button("B"):
        vote("B")
else:
    f"You voted for {st.session_state.vote['item']} because {st.session_state.vote['reason']}"


================================================
File: /python/api-examples-source/execution.fragment-rerun.py
================================================
import streamlit as st

if "clicks" not in st.session_state:
    st.session_state.clicks = 0


@st.fragment
def count_to_five():
    if st.button("Plus one!"):
        st.session_state.clicks += 1
        if st.session_state.clicks % 5 == 0:
            st.rerun()
    return


count_to_five()
st.header(f"Multiples of five clicks: {st.session_state.clicks // 5}")

if st.button("Check click count"):
    st.toast(f"## Total clicks: {st.session_state.clicks}")


================================================
File: /python/api-examples-source/execution.fragment.py
================================================
import streamlit as st

if "app_runs" not in st.session_state:
    st.session_state.app_runs = 0
    st.session_state.fragment_runs = 0


@st.fragment
def fragment():
    st.session_state.fragment_runs += 1
    st.button("Rerun fragment")
    st.write(f"Fragment says it ran {st.session_state.fragment_runs} times.")


st.session_state.app_runs += 1
fragment()
st.button("Rerun full app")
st.write(f"Full app says it ran {st.session_state.app_runs} times.")
st.write(f"Full app sees that fragment ran {st.session_state.fragment_runs} times.")


================================================
File: /python/api-examples-source/execution.fragment_balloon.py
================================================
import streamlit as st
import time


@st.fragment
def release_the_balloons():
    st.button("Release the balloons", help="Fragment rerun")
    st.balloons()


with st.spinner("Inflating balloons..."):
    time.sleep(5)
release_the_balloons()
st.button("Inflate more balloons", help="Full rerun")


================================================
File: /python/api-examples-source/forms.form1.py
================================================
import streamlit as st

with st.form("my_form"):
    st.write("Inside the form")
    slider_val = st.slider("Form slider")
    checkbox_val = st.checkbox("Form checkbox")

    # Every form must have a submit button.
    submitted = st.form_submit_button("Submit")
    if submitted:
        st.write("slider", slider_val, "checkbox", checkbox_val)

st.write("Outside the form")


================================================
File: /python/api-examples-source/forms.form2.py
================================================
import streamlit as st

form = st.form("my_form")
form.slider("Inside the form")
st.slider("Outside the form")

# Now add a submit button to the form:
form.form_submit_button("Submit")


================================================
File: /python/api-examples-source/forms.form_container.py
================================================
import streamlit as st

animal = st.form("my_animal")

# This is writing directly to the main body. Since the form container is
# defined above, this will appear below everything written in the form.
sound = st.selectbox("Sounds like", ["meow", "woof", "squeak", "tweet"])

# These methods called on the form container, so they appear inside the form.
submit = animal.form_submit_button(f"Say it with {sound}!")
sentence = animal.text_input("Your sentence:", "Where's the tuna?")
say_it = sentence.rstrip(".,!?") + f", {sound}!"
if submit:
    animal.subheader(say_it)
else:
    animal.subheader("&nbsp;")


================================================
File: /python/api-examples-source/forms.form_default.py
================================================
import streamlit as st

with st.form("my_form"):
    st.write("Inside the form")
    my_number = st.slider("Pick a number", 1, 10)
    my_color = st.selectbox(
        "Pick a color", ["red", "orange", "green", "blue", "violet"]
    )
    st.form_submit_button("Submit my picks")

# This is outside the form
st.write(my_number)
st.write(my_color)


================================================
File: /python/api-examples-source/forms.form_overview.py
================================================
import streamlit as st
import pandas as pd
import numpy as np


def get_data():
    df = pd.DataFrame(
        {
            "lat": np.random.randn(200) / 50 + 37.76,
            "lon": np.random.randn(200) / 50 + -122.4,
            "team": ["A", "B"] * 100,
        }
    )
    return df


if st.button("Generate new points"):
    st.session_state.df = get_data()
if "df" not in st.session_state:
    st.session_state.df = get_data()
df = st.session_state.df

with st.form("my_form"):
    header = st.columns([1, 2, 2])
    header[0].subheader("Color")
    header[1].subheader("Opacity")
    header[2].subheader("Size")

    row1 = st.columns([1, 2, 2])
    colorA = row1[0].color_picker("Team A", "#0000FF")
    opacityA = row1[1].slider("A opacity", 20, 100, 50, label_visibility="hidden")
    sizeA = row1[2].slider("A size", 50, 200, 100, step=10, label_visibility="hidden")

    row2 = st.columns([1, 2, 2])
    colorB = row2[0].color_picker("Team B", "#FF0000")
    opacityB = row2[1].slider("B opacity", 20, 100, 50, label_visibility="hidden")
    sizeB = row2[2].slider("B size", 50, 200, 100, step=10, label_visibility="hidden")

    st.form_submit_button("Update map")

alphaA = int(opacityA * 255 / 100)
alphaB = int(opacityB * 255 / 100)

df["color"] = np.where(
    df.team == "A", colorA + f"{alphaA:02x}", colorB + f"{alphaB:02x}"
)
df["size"] = np.where(df.team == "A", sizeA, sizeB)

st.map(df, size="size", color="color")


================================================
File: /python/api-examples-source/forms.form_process1.py
================================================
import streamlit as st

col1, col2 = st.columns([1, 2])
col1.title("Sum:")

with st.form("addition"):
    a = st.number_input("a")
    b = st.number_input("b")
    submit = st.form_submit_button("add")

if submit:
    col2.title(f"{a+b:.2f}")


================================================
File: /python/api-examples-source/forms.form_process2.py
================================================
import streamlit as st

if "sum" not in st.session_state:
    st.session_state.sum = ""


def sum():
    result = st.session_state.a + st.session_state.b
    st.session_state.sum = result


col1, col2 = st.columns(2)
col1.title("Sum:")
if isinstance(st.session_state.sum, float):
    col2.title(f"{st.session_state.sum:.2f}")

with st.form("addition"):
    st.number_input("a", key="a")
    st.number_input("b", key="b")
    st.form_submit_button("add", on_click=sum)


================================================
File: /python/api-examples-source/forms.form_process3.py
================================================
import streamlit as st

if "sum" not in st.session_state:
    st.session_state.sum = ""

col1, col2 = st.columns(2)
col1.title("Sum:")
if isinstance(st.session_state.sum, float):
    col2.title(f"{st.session_state.sum:.2f}")

with st.form("addition"):
    a = st.number_input("a")
    b = st.number_input("b")
    submit = st.form_submit_button("add")

# The value of st.session_state.sum is updated at the end of the script rerun,
# so the displayed value at the top in col2 does not show the new sum. Trigger
# a second rerun when the form is submitted to update the value above.
st.session_state.sum = a + b
if submit:
    st.rerun()


================================================
File: /python/api-examples-source/layout.columns1.py
================================================
import streamlit as st

col1, col2, col3 = st.columns(3)

with col1:
    st.header("A cat")
    st.image("https://static.streamlit.io/examples/cat.jpg")
    st.markdown("By [@phonvanna](https://unsplash.com/photos/0g7BJEXq7sU)")


with col2:
    st.header("A dog")
    st.image("https://static.streamlit.io/examples/dog.jpg")
    st.markdown("By [@shotbyrain](https://unsplash.com/photos/rmkIqi_C3cA)")


with col3:
    st.header("An owl")
    st.image("https://static.streamlit.io/examples/owl.jpg")
    st.markdown("By [@zmachacek](https://unsplash.com/photos/ZN4CzqizIyI)")


================================================
File: /python/api-examples-source/layout.columns2.py
================================================
import numpy as np
import streamlit as st


@st.cache_data
def load_data():
    data = np.random.randn(10, 1)
    return data


col1, col2 = st.columns([3, 1])
data = load_data()

col1.subheader("A wide column with a chart")
col1.line_chart(data)

col2.subheader("A narrow column with the data")
col2.write(data)


================================================
File: /python/api-examples-source/layout.columns_borders.py
================================================
import streamlit as st

left, middle, right = st.columns(3, border=True)

left.markdown("Lorem ipsum " * 10)
middle.markdown("Lorem ipsum " * 5)
right.markdown("Lorem ipsum ")


================================================
File: /python/api-examples-source/layout.columns_bottom_widgets.py
================================================
import streamlit as st

left, middle, right = st.columns(3, vertical_alignment="bottom")

left.text_input("Write something")
middle.button("Click me", use_container_width=True)
right.checkbox("Check me")

================================================
File: /python/api-examples-source/layout.columns_vertical_alignment.py
================================================
import streamlit as st
import numpy as np

vertical_alignment = st.selectbox(
    "Vertical alignment", ["top", "center", "bottom"], index=2
)

left, middle, right = st.columns(3, vertical_alignment=vertical_alignment)
left.image("https://static.streamlit.io/examples/cat.jpg")
left.markdown("By [@phonvanna](https://unsplash.com/photos/0g7BJEXq7sU)")
middle.image("https://static.streamlit.io/examples/dog.jpg")
middle.markdown("By [@shotbyrain](https://unsplash.com/photos/rmkIqi_C3cA)")
right.image("https://static.streamlit.io/examples/owl.jpg")
right.markdown("By [@zmachacek](https://unsplash.com/photos/ZN4CzqizIyI)")


================================================
File: /python/api-examples-source/layout.container1.py
================================================
import streamlit as st
import numpy as np
import pandas as pd

with st.container():
    st.write("This is inside the container")

    # You can call any Streamlit command, including custom components:
    st.bar_chart(np.random.randn(50, 3))
st.write("This is outside the container")


================================================
File: /python/api-examples-source/layout.container2.py
================================================
import streamlit as st

container = st.container(border=True)
container.write("This is inside the container")
st.write("This is outside the container")

# Now insert some more in the container
container.write("This is inside too")


================================================
File: /python/api-examples-source/layout.container3.py
================================================
import streamlit as st

row1 = st.columns(3)
row2 = st.columns(3)

for col in row1 + row2:
    tile = col.container(border=True, height=120)
    tile.title(":balloon:")


================================================
File: /python/api-examples-source/layout.container4.py
================================================
import streamlit as st

long_text = "Lorem ipsum. " * 1000

with st.container(height=300):
    st.markdown(long_text)


================================================
File: /python/api-examples-source/layout.empty.py
================================================
import streamlit as st
import time

with st.empty():
    for seconds in range(10):
        st.write(f"⏳ {seconds} seconds have passed")
        time.sleep(1)
    st.write(":material/check: 10 seconds over!")
st.button("Rerun")


================================================
File: /python/api-examples-source/layout.empty_placeholder.py
================================================
import streamlit as st
import time

st.button("Start over")

placeholder = st.empty()

placeholder.markdown("Hello")
time.sleep(1)

placeholder.progress(0, "Wait for it...")
time.sleep(1)
placeholder.progress(50, "Wait for it...")
time.sleep(1)
placeholder.progress(100, "Wait for it...")
time.sleep(1)

with placeholder.container():
    st.line_chart({"data": [1, 5, 2, 6]})
    time.sleep(1)
    st.markdown("3...")
    time.sleep(1)
    st.markdown("2...")
    time.sleep(1)
    st.markdown("1...")
    time.sleep(1)

placeholder.markdown("Poof!")
time.sleep(1)

placeholder.empty()


================================================
File: /python/api-examples-source/layout.expander.py
================================================
import streamlit as st

st.bar_chart({"d6": [1, 5, 2, 6, 2, 1]})

with st.expander("See explanation"):
    st.write(
        """
        The chart above shows some numbers I picked for you.
        I rolled actual dice for these, so they're *guaranteed* to
        be random.
        """
    )
    st.image("https://static.streamlit.io/examples/dice.jpg", width=200)
    st.markdown("Photo by [@brett_jordon](https://unsplash.com/photos/4aB1nGtD_Sg)")


================================================
File: /python/api-examples-source/layout.popover.py
================================================
import streamlit as st

with st.popover("Open popover"):
    st.markdown("Hello World 👋")
    name = st.text_input("What's your name?")

st.write("Your name:", name)


================================================
File: /python/api-examples-source/layout.popover2.py
================================================
import streamlit as st

popover = st.popover("Filter items")
red = popover.checkbox("Show red items.", True)
blue = popover.checkbox("Show blue items.", True)

if red:
    st.write(":red[This is a red item.]")
if blue:
    st.write(":blue[This is a blue item.]")


================================================
File: /python/api-examples-source/layout.tabs1.py
================================================
import streamlit as st

tab1, tab2, tab3 = st.tabs(["Cat", "Dog", "Owl"])
with tab1:
    st.header("A cat")
    st.image("https://static.streamlit.io/examples/cat.jpg", width=200)

with tab2:
    st.header("A dog")
    st.image("https://static.streamlit.io/examples/dog.jpg", width=200)

with tab3:
    st.header("An owl")
    st.image("https://static.streamlit.io/examples/owl.jpg", width=200)


================================================
File: /python/api-examples-source/layout.tabs2.py
================================================
import streamlit as st
import numpy as np

tab1, tab2 = st.tabs(["📈 Chart", "🗃 Data"])
data = np.random.randn(10, 1)

tab1.subheader("A tab with a chart")
tab1.line_chart(data)

tab2.subheader("A tab with the data")
tab2.write(data)


================================================
File: /python/api-examples-source/layouts.container4.py
================================================
import streamlit as st

long_text = "Lorem ipsum. " * 1000

with st.container(height=300):
    st.markdown(long_text)


================================================
File: /python/api-examples-source/media.logo.py
================================================
import streamlit as st

HORIZONTAL_RED = "images/horizontal_red.png"
ICON_RED = "images/icon_red.png"
HORIZONTAL_BLUE = "images/horizontal_blue.png"
ICON_BLUE = "images/icon_blue.png"

options = [HORIZONTAL_RED, ICON_RED, HORIZONTAL_BLUE, ICON_BLUE]
sidebar_logo = st.selectbox("Sidebar logo", options, 0)
main_body_logo = st.selectbox("Main body logo", options, 1)

st.logo(
    f"python/api-examples-source/{sidebar_logo}",
    icon_image=f"python/api-examples-source/{main_body_logo}",
)
st.sidebar.markdown("Hi!")


================================================
File: /python/api-examples-source/metric.example1.py
================================================
import streamlit as st

st.metric(label="Temperature", value="70 °F", delta="1.2 °F", delta_color="normal")


================================================
File: /python/api-examples-source/metric.example2.py
================================================
import streamlit as st

col1, col2, col3 = st.columns(3)
col1.metric("Temperature", "70 °F", "1.2 °F")
col2.metric("Wind", "9 mph", "-8%")
col3.metric("Humidity", "86%", "4%")


================================================
File: /python/api-examples-source/metric.example3.py
================================================
import streamlit as st

st.metric(label="Gas price", value=4, delta=-0.5, delta_color="inverse")
st.metric(label="Active developers", value=123, delta=123, delta_color="off")


================================================
File: /python/api-examples-source/metric.example4.py
================================================
import streamlit as st

a, b = st.columns(2)
c, d = st.columns(2)

a.metric("Temperature", "30°F", "-9°F", border=True)
b.metric("Wind", "4 mph", "2 mph", border=True)

c.metric("Humidity", "77%", "5%", border=True)
d.metric("Pressure", "30.34 inHg", "-2 inHg", border=True)


================================================
File: /python/api-examples-source/navigation.multipage_widgets.py
================================================
import streamlit as st

def page1():
    st.write(st.session_state.foo)

def page2():
    st.write(st.session_state.bar)

# Widgets shared by all the pages
st.sidebar.selectbox("Foo", ["A", "B", "C"], key="foo")
st.sidebar.checkbox("Bar", key="bar")

pg = st.navigation([st.Page(page1), st.Page(page2)])
pg.run()

================================================
File: /python/api-examples-source/requirements.txt
================================================
pandas
plotly
bokeh==2.4.3
graphviz
requests
matplotlib
numpy<2
scipy
altair>=5.0.0
pydeck
Faker
openai
vega_datasets
streamlit>=1.41.0


================================================
File: /python/api-examples-source/status.progress.py
================================================
import streamlit as st
import time

progress_text = "Operation in progress. Please wait."
my_bar = st.progress(0, text=progress_text)

for percent_complete in range(100):
    time.sleep(0.01)
    my_bar.progress(percent_complete + 1, text=progress_text)
time.sleep(1)
my_bar.empty()

st.button("Rerun")


================================================
File: /python/api-examples-source/status.status.py
================================================
import time
import streamlit as st

with st.status("Downloading data..."):
    st.write("Searching for data...")
    time.sleep(2)
    st.write("Found URL.")
    time.sleep(1)
    st.write("Downloading data...")
    time.sleep(1)

st.button("Rerun")


================================================
File: /python/api-examples-source/status.status1.py
================================================
import time
import streamlit as st

with st.status("Downloading data...", expanded=True) as status:
    st.write("Searching for data...")
    time.sleep(2)
    st.write("Found URL.")
    time.sleep(1)
    st.write("Downloading data...")
    time.sleep(1)
    status.update(label="Download complete!", state="complete", expanded=False)

st.button("Rerun")


================================================
File: /python/api-examples-source/status.toast1.py
================================================
import streamlit as st
import time

if st.button("Three cheers"):
    st.toast("Hip!")
    time.sleep(0.5)
    st.toast("Hip!")
    time.sleep(0.5)
    st.toast("Hooray!", icon="🎉")


================================================
File: /python/api-examples-source/status.toast2.py
================================================
import streamlit as st
import time


def cook_breakfast():
    msg = st.toast("Gathering ingredients...")
    time.sleep(1)
    msg.toast("Cooking...")
    time.sleep(1)
    msg.toast("Ready!", icon="🥞")


if st.button("Cook breakfast"):
    cook_breakfast()


================================================
File: /python/api-examples-source/text.caption.py
================================================
import streamlit as st

st.caption("This is a caption")


================================================
File: /python/api-examples-source/text.code-ascii.py
================================================
import streamlit as st

code = '''Is it a crown or boat?
                        ii
                      iiiiii
WWw                 .iiiiiiii.                ...:
 WWWWWWw          .iiiiiiiiiiii.         ........
  WWWWWWWWWWw    iiiiiiiiiiiiiiii    ...........
   WWWWWWWWWWWWWWwiiiiiiiiiiiiiiiii............
    WWWWWWWWWWWWWWWWWWwiiiiiiiiiiiiii.........
     WWWWWWWWWWWWWWWWWWWWWWwiiiiiiiiii.......
      WWWWWWWWWWWWWWWWWWWWWWWWWWwiiiiiii....
       WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWwiiii.
          -MMMWWWWWWWWWWWWWWWWWWWWWWMMM-
'''
st.code(code, language=None)

================================================
File: /python/api-examples-source/text.code.py
================================================
import streamlit as st

code = """def hello():
    print("Hello, Streamlit!")"""
st.code(code, language="python")


================================================
File: /python/api-examples-source/text.header.py
================================================
import streamlit as st

st.header("_Streamlit_ is :blue[cool] :sunglasses:")
st.header("This is a header with a divider", divider="gray")
st.header("These headers have rotating dividers", divider=True)
st.header("One", divider=True)
st.header("Two", divider=True)
st.header("Three", divider=True)
st.header("Four", divider=True)


================================================
File: /python/api-examples-source/text.latex.py
================================================
import streamlit as st

st.latex(
    r"""
    a + ar + a r^2 + a r^3 + \cdots + a r^{n-1} =
    \sum_{k=0}^{n-1} ar^k =
    a \left(\frac{1-r^{n}}{1-r}\right)
    """
)


================================================
File: /python/api-examples-source/text.markdown.py
================================================
import streamlit as st

st.markdown("*Streamlit* is **really** ***cool***.")
st.markdown(
    """
    :red[Streamlit] :orange[can] :green[write] :blue[text] :violet[in]
    :gray[pretty] :rainbow[colors] and :blue-background[highlight] text."""
)
st.markdown(
    "Here's a bouquet &mdash;\
            :tulip::cherry_blossom::rose::hibiscus::sunflower::blossom:"
)

multi = """If you end a line with two spaces,  
a soft return is used for the next line.

Two (or more) newline characters in a row will result in a hard return.
"""
st.markdown(multi)


================================================
File: /python/api-examples-source/text.markdown1.py
================================================
import streamlit as st

md = st.text_area(
    "Type in your markdown string (without outer quotes)",
    "Happy Streamlit-ing! :balloon:",
)

st.code(
    f"""
import streamlit as st
        
st.markdown('''{md}''')
"""
)

st.markdown(md)


================================================
File: /python/api-examples-source/text.subheader.py
================================================
import streamlit as st

st.subheader("_Streamlit_ is :blue[cool] :sunglasses:")
st.subheader("This is a subheader with a divider", divider="gray")
st.subheader("These subheaders have rotating dividers", divider=True)
st.subheader("One", divider=True)
st.subheader("Two", divider=True)
st.subheader("Three", divider=True)
st.subheader("Four", divider=True)


================================================
File: /python/api-examples-source/text.text.py
================================================
import streamlit as st

st.text("This is text\n[and more text](that's not a Markdown link).")


================================================
File: /python/api-examples-source/text.text_area.py
================================================
import streamlit as st

txt = st.text_area(
    "Text to analyze",
    "It was the best of times, it was the worst of times, it was the age of "
    "wisdom, it was the age of foolishness, it was the epoch of belief, it "
    "was the epoch of incredulity, it was the season of Light, it was the "
    "season of Darkness, it was the spring of hope, it was the winter of "
    "despair, (...)",
)

st.write(f"You wrote {len(txt)} characters.")


================================================
File: /python/api-examples-source/text.title.py
================================================
import streamlit as st

st.title("This is a title")
st.title("_Streamlit_ is :blue[cool] :sunglasses:")


================================================
File: /python/api-examples-source/text.write1.py
================================================
import streamlit as st

st.write("Hello, *World!* :sunglasses:")


================================================
File: /python/api-examples-source/text.write2.py
================================================
import streamlit as st
import pandas as pd

st.write(1234)
st.write(
    pd.DataFrame({"first column": [1, 2, 3, 4], "second column": [10, 20, 30, 40]})
)


================================================
File: /python/api-examples-source/text.write3.py
================================================
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    data_frame = pd.DataFrame(
        {"first column": [1, 2, 3, 4], "second column": [10, 20, 30, 40]}
    )
    return data_frame


data_frame = load_data()
st.write("1 + 1 = ", 2)
st.write("Below is a DataFrame:", data_frame, "Above is a dataframe.")


================================================
File: /python/api-examples-source/text.write_stream.py
================================================
import time
import numpy as np
import pandas as pd
import streamlit as st

_LOREM_IPSUM = """
Lorem ipsum dolor sit amet, **consectetur adipiscing** elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
"""


def stream_data():
    for word in _LOREM_IPSUM.split(" "):
        yield word + " "
        time.sleep(0.02)

    yield pd.DataFrame(
        np.random.randn(5, 10),
        columns=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"],
    )

    for word in _LOREM_IPSUM.split(" "):
        yield word + " "
        time.sleep(0.02)


if st.button("Stream data"):
    st.write_stream(stream_data)


================================================
File: /python/api-examples-source/utilities.help.py
================================================
import pandas
import streamlit as st

st.help(pandas.DataFrame)


================================================
File: /python/api-examples-source/utilities.help1.py
================================================
import streamlit as st


class Dog:
    """A typical dog."""

    def __init__(self, breed, color):
        self.breed = breed
        self.color = color

    def bark(self):
        return "Woof!"


fido = Dog("poodle", "white")

st.help(fido)


================================================
File: /python/api-examples-source/utilities.help2.py
================================================
import pandas
import streamlit as st

# Get help for Pandas read_csv:
pandas.read_csv

# Get help for Streamlit itself:
st


================================================
File: /python/api-examples-source/utilities.html.py
================================================
import streamlit as st

st.html("<p><span style='text-decoration: line-through double red;'>Oops</span>!</p>")


================================================
File: /python/api-examples-source/widget.audio_input.py
================================================
import streamlit as st

audio_value = st.audio_input("Record a voice message")

if audio_value:
    st.audio(audio_value)


================================================
File: /python/api-examples-source/widget.button.py
================================================
import streamlit as st

st.button("Reset", type="primary")
if st.button("Say hello"):
    st.write("Why hello there")
else:
    st.write("Goodbye")

if st.button("Aloha", type="tertiary"):
    st.write("Ciao")


================================================
File: /python/api-examples-source/widget.button_icons.py
================================================
import streamlit as st

left, middle, right = st.columns(3)
if left.button("Plain button", use_container_width=True):
    left.markdown("You clicked the plain button.")
if middle.button("Emoji button", icon="😃", use_container_width=True):
    middle.markdown("You clicked the emoji button.")
if right.button("Material button", icon=":material/mood:", use_container_width=True):
    right.markdown("You clicked the Material button.")


================================================
File: /python/api-examples-source/widget.camera_input.py
================================================
import streamlit as st

enable = st.checkbox("Enable camera")
picture = st.camera_input("Take a picture", disabled=not enable)

if picture:
    st.image(picture)


================================================
File: /python/api-examples-source/widget.checkbox.py
================================================
import streamlit as st

agree = st.checkbox("I agree")
if agree:
    st.write("Great!")


================================================
File: /python/api-examples-source/widget.color_picker.py
================================================
import streamlit as st

color = st.color_picker("Pick A Color", "#00f900")
st.write("The current color is", color)


================================================
File: /python/api-examples-source/widget.date_input.py
================================================
import streamlit as st
import datetime

d = st.date_input("When's your birthday", datetime.date(2020, 8, 11))
st.write("Your birthday is:", d)


================================================
File: /python/api-examples-source/widget.date_input1.py
================================================
import datetime

import streamlit as st

today = datetime.datetime.now()
next_year = today.year + 1
jan_1 = datetime.date(next_year, 1, 1)
dec_31 = datetime.date(next_year, 12, 31)

d = st.date_input(
    "Select your vacation for next year",
    (jan_1, datetime.date(next_year, 1, 7)),
    jan_1,
    dec_31,
    format="MM.DD.YYYY",
)

d


================================================
File: /python/api-examples-source/widget.date_input_empty.py
================================================
import datetime
import streamlit as st

d = st.date_input("When's your birthday", value=None)
st.write("Your birthday is:", d)


================================================
File: /python/api-examples-source/widget.download_button.py
================================================
import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def load_data():
    data = pd.DataFrame(np.random.randn(1000, 2), columns=["a", "b"])

    return data


@st.cache_data
def convert_df(df):
    # IMPORTANT: Cache the conversion to prevent computation on every rerun
    return df.to_csv().encode("utf-8")


my_large_df = load_data()
csv = convert_df(my_large_df)

st.download_button(
    label="Download data as CSV",
    data=csv,
    file_name="large_df.csv",
    mime="text/csv",
)

text_contents = """This is some text"""
st.download_button("Download some text", text_contents)

binary_contents = b"example content"
# Defaults to 'application/octet-stream'
st.download_button("Download binary file", binary_contents)

with open("python/api-examples-source/flower.png", "rb") as file:
    btn = st.download_button(
        label="Download image", data=file, file_name="flower.png", mime="image/png"
    )


================================================
File: /python/api-examples-source/widget.feedback_stars.py
================================================
import streamlit as st

sentiment_mapping = ["one", "two", "three", "four", "five"]
selected = st.feedback("stars")
if selected is not None:
    st.markdown(f"You selected {sentiment_mapping[selected]} star(s).")


================================================
File: /python/api-examples-source/widget.feedback_thumbs.py
================================================
import streamlit as st

sentiment_mapping = [":material/thumb_down:", ":material/thumb_up:"]
selected = st.feedback("thumbs")
if selected is not None:
    st.markdown(f"You selected: {sentiment_mapping[selected]}")


================================================
File: /python/api-examples-source/widget.file_uploader.py
================================================
import streamlit as st

uploaded_files = st.file_uploader("Choose a file", accept_multiple_files=True)

for uploaded_file in uploaded_files:
    st.write("filename:", uploaded_file.name)


================================================
File: /python/api-examples-source/widget.link_button.py
================================================
import streamlit as st

st.link_button("Go to gallery", "https://streamlit.io/gallery")


================================================
File: /python/api-examples-source/widget.multiselect.py
================================================
import streamlit as st

options = st.multiselect(
    "What are your favorite colors",
    ["Green", "Yellow", "Red", "Blue"],
    ["Yellow", "Red"],
)

st.write("You selected:", options)


================================================
File: /python/api-examples-source/widget.number_input.py
================================================
import streamlit as st

number = st.number_input("Insert a number")
st.write("The current number is ", number)


================================================
File: /python/api-examples-source/widget.number_input_empty.py
================================================
import streamlit as st

number = st.number_input("Insert a number", value=None, placeholder="Type a number...")
st.write("The current number is ", number)


================================================
File: /python/api-examples-source/widget.pills_multi.py
================================================
import streamlit as st

options = ["North", "East", "South", "West"]
selection = st.pills(
    "Directions",
    options,
    selection_mode="multi"
)
st.markdown(f"Your selected options: {selection}.")


================================================
File: /python/api-examples-source/widget.pills_single.py
================================================
import streamlit as st

option_map = {
    0: ":material/add:",
    1: ":material/zoom_in:",
    2: ":material/zoom_out:",
    3: ":material/zoom_out_map:",
}
selection = st.pills(
    "Tool",
    options=option_map.keys(),
    format_func=lambda option: option_map[option],
    selection_mode="single",
)
st.write(
    "Your selected option: "
    f"{None if selection is None else option_map[selection]}"
)


================================================
File: /python/api-examples-source/widget.radio.py
================================================
import streamlit as st

genre = st.radio(
    "What's your favorite movie genre",
    [":rainbow[Comedy]", "***Drama***", "Documentary :movie_camera:"],
    captions=["Laugh out loud.", "Get the popcorn.", "Never stop learning."],
)

if genre == ":rainbow[Comedy]":
    st.write("You selected comedy.")
else:
    st.write("You didn't select comedy.")


================================================
File: /python/api-examples-source/widget.radio1.py
================================================
import streamlit as st

# Store the initial value of widgets in session state
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False
    st.session_state.horizontal = False

col1, col2 = st.columns(2)

with col1:
    st.checkbox("Disable radio widget", key="disabled")
    st.checkbox("Orient radio options horizontally", key="horizontal")

with col2:
    st.radio(
        "Set label visibility 👇",
        ["visible", "hidden", "collapsed"],
        key="visibility",
        label_visibility=st.session_state.visibility,
        disabled=st.session_state.disabled,
        horizontal=st.session_state.horizontal,
    )


================================================
File: /python/api-examples-source/widget.radio_empty.py
================================================
import streamlit as st

genre = st.radio(
    "What's your favorite movie genre",
    [":rainbow[Comedy]", "***Drama***", "Documentary :movie_camera:"],
    index=None,
)

st.write("You selected:", genre)


================================================
File: /python/api-examples-source/widget.segmented_control_multi.py
================================================
import streamlit as st

options = ["North", "East", "South", "West"]
selection = st.segmented_control(
    "Directions",
    options,
    selection_mode="multi"
)
st.markdown(f"Your selected options: {selection}.")


================================================
File: /python/api-examples-source/widget.segmented_control_single.py
================================================
import streamlit as st

option_map = {
    0: ":material/add:",
    1: ":material/zoom_in:",
    2: ":material/zoom_out:",
    3: ":material/zoom_out_map:",
}
selection = st.segmented_control(
    "Tool",
    options=option_map.keys(),
    format_func=lambda option: option_map[option],
    selection_mode="single",
)
st.write(
    "Your selected option: "
    f"{None if selection is None else option_map[selection]}"
)


================================================
File: /python/api-examples-source/widget.select_slider.py
================================================
import streamlit as st

color = st.select_slider(
    "Select a color of the rainbow",
    options=["red", "orange", "yellow", "green", "blue", "indigo", "violet"],
)

st.write("My favorite color is", color)

start_color, end_color = st.select_slider(
    "Select a range of color wavelength",
    options=["red", "orange", "yellow", "green", "blue", "indigo", "violet"],
    value=("red", "blue"),
)

st.write("You selected wavelengths between", start_color, "and", end_color)


================================================
File: /python/api-examples-source/widget.selectbox.py
================================================
import streamlit as st

option = st.selectbox(
    "How would you like to be contacted?", ("Email", "Home phone", "Mobile phone")
)

st.write("You selected:", option)


================================================
File: /python/api-examples-source/widget.selectbox1.py
================================================
import streamlit as st

# Store the initial value of widgets in session state
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False

col1, col2 = st.columns(2)

with col1:
    st.checkbox("Disable selectbox widget", key="disabled")
    st.radio(
        "Set selectbox label visibility 👉",
        key="visibility",
        options=["visible", "hidden", "collapsed"],
    )

with col2:
    option = st.selectbox(
        "How would you like to be contacted?",
        ("Email", "Home phone", "Mobile phone"),
        label_visibility=st.session_state.visibility,
        disabled=st.session_state.disabled,
    )


================================================
File: /python/api-examples-source/widget.selectbox_empty.py
================================================
import streamlit as st

option = st.selectbox(
    "How would you like to be contacted?",
    ("Email", "Home phone", "Mobile phone"),
    index=None,
    placeholder="Select contact method...",
)

st.write("You selected:", option)


================================================
File: /python/api-examples-source/widget.slider.py
================================================
import streamlit as st
from datetime import time, datetime

st.subheader("Slider")
age = st.slider("How old are you?", 0, 130, 25)
st.write("I'm ", age, "years old.")

st.subheader("Range slider")
values = st.slider("Select a range of values", 0.0, 100.0, (25.0, 75.0))
st.write("Values:", values)

st.subheader("Time slider")
appointment = st.slider(
    "Schedule your appointment:",
    value=(time(11, 30), time(12, 45)),
)
st.write("You're scheduled for:", appointment)

st.subheader("Datetime slider")
start_time = st.slider(
    "When do you start?", value=datetime(2020, 1, 1, 9, 30), format="MM/DD/YY - hh:mm"
)
st.write("Start time:", start_time)


================================================
File: /python/api-examples-source/widget.text_area.py
================================================
import streamlit as st


def run_sentiment_analysis(x):
    return "dramatic"


txt = st.text_area(
    "Text to analyze",
    """
    It was the best of times, it was the worst of times, it was the age of
    wisdom, it was the age of foolishness, it was the epoch of belief, it was
    the epoch of incredulity, it was the season of Light, it was the season of
    Darkness, it was the spring of hope, it was the winter of despair, (...)
    """,
)
st.write("Sentiment:", run_sentiment_analysis(txt))


================================================
File: /python/api-examples-source/widget.text_input.py
================================================
import streamlit as st

title = st.text_input("Movie title", "Life of Brian")
st.write("The current movie title is", title)


================================================
File: /python/api-examples-source/widget.text_input1.py
================================================
import streamlit as st

# Store the initial value of widgets in session state
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False

col1, col2 = st.columns(2)

with col1:
    st.checkbox("Disable text input widget", key="disabled")
    st.radio(
        "Set text input label visibility 👉",
        key="visibility",
        options=["visible", "hidden", "collapsed"],
    )
    st.text_input(
        "Placeholder for the other text input widget",
        "This is a placeholder",
        key="placeholder",
    )

with col2:
    text_input = st.text_input(
        "Enter some text 👇",
        label_visibility=st.session_state.visibility,
        disabled=st.session_state.disabled,
        placeholder=st.session_state.placeholder,
    )

    if text_input:
        st.write("You entered: ", text_input)


================================================
File: /python/api-examples-source/widget.time_input.py
================================================
import streamlit as st
import datetime

t = st.time_input("Set an alarm for", datetime.time(8, 45))
st.write("Alarm is set for", t)


================================================
File: /python/api-examples-source/widget.time_input_empty.py
================================================
import datetime
import streamlit as st

t = st.time_input("Set an alarm for", value=None)
st.write("Alarm is set for", t)


================================================
File: /python/api-examples-source/widget.toggle.py
================================================
import streamlit as st

on = st.toggle("Activate feature")

if on:
    st.write("Feature activated!")


================================================
File: /python/api-examples-source/charts.video3/0_📹_Video_subtitles.py
================================================
import streamlit as st
from streamlit import config
from utils import icon

st.set_page_config(page_title="Video Subtitles Demo", page_icon="📹")
config.set_option("client.showErrorDetails", True)

icon("📹")

st.title("Video Subtitles Demo")

st.markdown(
    """
Welcome to the feature demo of subtitles support for `st.video`!

This feature adds a `subtitles` parameter to `st.video` to display subtitles on videos, supporting several input types.

- Subtitle support is available in Streamlit 1.32.0 and later.
- Get started by reading the docstring for `st.video` below (or read the [documentation](https://docs.streamlit.io/develop/api-reference/media/st.video) for additional details).
- 👈 Check out the demos of all supported input types by visiting the other pages in the sidebar. 
"""
)


with st.expander("📚 Show docstring"):
    st.help(st.video)


================================================
File: /python/api-examples-source/charts.video3/requirements.txt
================================================
streamlit>=1.41.0
webvtt-py

================================================
File: /python/api-examples-source/charts.video3/subtitles-de.vtt
================================================
WEBVTT

0
00:00:00.000 --> 00:00:12.000
<v Test>[Test]</v>

1
00:00:18.700 --> 00:00:21.500
Diese Klinge birgt eine finstere
Vergangenheit.

2
00:00:22.800 --> 00:00:26.800
Durch sie wurde viel unschuldiges Blut
vergossen.

3
00:00:29.000 --> 00:00:32.450
Es ist töricht, so ganz allein und
unvorbereitet zu reisen!

4
00:00:32.750 --> 00:00:35.800
Du kannst von Glück sagen, dass dein
Blut noch in deinen Adern fließt.

5
00:00:36.250 --> 00:00:37.300
Danke.

6
00:00:38.500 --> 00:00:40.000
Also...

7
00:00:40.400 --> 00:00:44.800
...was führt dich in die Lande der
Torwaechter?

8
00:00:46.000 --> 00:00:48.500
Ich suche jemanden.

9
00:00:49.000 --> 00:00:53.200
Ein teurer Freund?
Eine verwandte Seele?

10
00:00:54.400 --> 00:00:56.000
Ein Drache.

11
00:00:58.850 --> 00:01:01.750
Ein gefährliches Unterfangen für eine
einsame Jägerin.

12
00:01:02.950 --> 00:01:05.870
Ich bin einsam, solange ich mich
erinnern kann.

13
00:01:58.250 --> 00:01:59.500
Wir sind fast fertig. Ruhig...

================================================
File: /python/api-examples-source/charts.video3/subtitles-en.srt
================================================
1
00:00:18,700 --> 00:00:21,500
This blade has a dark past.

2
00:00:22,800 --> 00:00:26,800
It has shed much innocent blood.

3
00:00:29,000 --> 00:00:32,450
You're a fool for traveling alone,
so completely unprepared.

4
00:00:32,750 --> 00:00:35,800
You're lucky your blood's still flowing.

5
00:00:36,250 --> 00:00:37,300
Thank you.

6
00:00:38,500 --> 00:00:40,000
So...

7
00:00:40,400 --> 00:00:44,800
What brings you to
the land of the gatekeepers?

8
00:00:46,000 --> 00:00:48,500
I'm searching for someone.

9
00:00:49,000 --> 00:00:53,200
Someone very dear?
A kindred spirit?

10
00:00:54,400 --> 00:00:56,000
A dragon.

11
00:00:58,850 --> 00:01:01,750
A dangerous quest for a lone hunter.

12
00:01:02,950 --> 00:01:05,870
I've been alone for
as long as I can remember.

13
00:01:58,250 --> 00:01:59,500
We're almost done. Shhh...


================================================
File: /python/api-examples-source/charts.video3/subtitles-en.vtt
================================================
WEBVTT

0
00:00:00.000 --> 00:00:12.000
<v Test>[Test]</v>

NOTE This is a comment and must be preceded by a blank line

1
00:00:18.700 --> 00:00:21.500
This blade has a dark past.

2
00:00:22.800 --> 00:00:26.800
It has shed much innocent blood.

3
00:00:29.000 --> 00:00:32.450
You're a fool for traveling alone,
so completely unprepared.

4
00:00:32.750 --> 00:00:35.800
You're lucky your blood's still flowing.

5
00:00:36.250 --> 00:00:37.300
Thank you.

6
00:00:38.500 --> 00:00:40.000
So...

7
00:00:40.400 --> 00:00:44.800
What brings you to
the land of the gatekeepers?

8
00:00:46.000 --> 00:00:48.500
I'm searching for someone.

9
00:00:49.000 --> 00:00:53.200
Someone very dear?
A kindred spirit?

10
00:00:54.400 --> 00:00:56.000
A dragon.

11
00:00:58.850 --> 00:01:01.750
A dangerous quest for a lone hunter.

12
00:01:02.950 --> 00:01:05.870
I've been alone for
as long as I can remember.

13
00:01:58.250 --> 00:01:59.500
We're almost done. Shhh...

================================================
File: /python/api-examples-source/charts.video3/subtitles-es.vtt
================================================
WEBVTT

0
00:00:00.000 --> 00:00:12.000
<v Test>[Test]</v>

NOTE Esto es un comentario y debe ser precedido por una línea en blanco

1
00:00:18.700 --> 00:00:21.500
Esta espada tiene un oscuro pasado.

2
00:00:22.800 --> 00:00:26.800
Ha derramado mucha sangre inocente.

3
00:00:29.000 --> 00:00:32.450
Eres un tonto por viajar solo,
tan completamente desprevenido.

4
00:00:32.750 --> 00:00:35.800
Tienes suerte de que tu sangre aún fluya.

5
00:00:36.250 --> 00:00:37.300
Gracias.

6
00:00:38.500 --> 00:00:40.000
Entonces...

7
00:00:40.400 --> 00:00:44.800
¿Qué te trae a
la tierra de los guardianes?

8
00:00:46.000 --> 00:00:48.500
Estoy buscando a alguien.

9
00:00:49.000 --> 00:00:53.200
¿Alguien muy querido?
¿Un espíritu afín?

10
00:00:54.400 --> 00:00:56.000
Un dragón.

11
00:00:58.850 --> 00:01:01.750
Una búsqueda peligrosa para un cazador solitario.

12
00:01:02.950 --> 00:01:05.870
He estado solo
tanto tiempo como puedo recordar.

13
00:01:58.250 --> 00:01:59.500
Ya casi terminamos. Shhh...


================================================
File: /python/api-examples-source/charts.video3/utils.py
================================================
import io
import itertools
from datetime import datetime, time

import pandas as pd
import streamlit as st
import webvtt


def icon(emoji: str):
    """Shows an emoji as a Notion-style page icon."""
    st.write(
        f'<span style="font-size: 78px; line-height: 1">{emoji}</span>',
        unsafe_allow_html=True,
    )


HEADER_COLOR_CYCLE = itertools.cycle(
    [
        "#00c0f2",  # light-blue-70",
        "#ffbd45",  # "orange-70",
        "#00d4b1",  # "blue-green-70",
        "#1c83e1",  # "blue-70",
        "#803df5",  # "violet-70",
        "#ff4b4b",  # "red-70",
        "#21c354",  # "green-70",
        "#faca2b",  # "yellow-80",
    ]
)


def space(num_lines=1):
    """Adds empty lines to the Streamlit app."""
    for _ in range(num_lines):
        st.write("")


def colored_header(label, description=None, color=None):
    """Shows a header with a colored underline and an optional description."""
    space(num_lines=2)
    if color is None:
        color = next(HEADER_COLOR_CYCLE)
    st.subheader(label)
    st.write(
        f'<hr style="background-color: {color}; margin-top: 0; margin-bottom: 0; height: 3px; border: none; border-radius: 3px;">',
        unsafe_allow_html=True,
    )
    if description:
        st.caption(description)


def time_to_webvtt_timestamp(t: time):
    """Convert a datetime.time object to a WebVTT timestamp string."""
    return f"{t.strftime('%H:%M:%S')}.000"


def string_to_time(s: str):
    """Convert a string to a datetime.time object."""
    return datetime.strptime(s, "%H:%M:%S.%f").time()


def vtt_string_to_dataframe(vtt_string: str) -> pd.DataFrame:
    time_epsilon = pd.Timedelta("00:00:00.1")

    buffer = io.StringIO(vtt_string)

    vtt = webvtt.read_buffer(buffer=buffer)

    df = pd.DataFrame(
        [
            [
                pd.to_datetime(v.start),
                pd.to_datetime(v.end),
                v.text.splitlines()[-1],
            ]
            for v in vtt
        ],
        columns=["start", "end", "text"],
    )
    df = df.where(df.end - df.start > time_epsilon).dropna()
    df["start"] = df["start"].apply(time_to_webvtt_timestamp)
    df["end"] = df["end"].apply(time_to_webvtt_timestamp)
    df["start"] = df["start"].apply(string_to_time)
    df["end"] = df["end"].apply(string_to_time)
    return df


def data_to_webvtt(data) -> str:
    webvtt_content = "WEBVTT\n\n"

    for index, entry in enumerate(data, start=1):
        start_time = time_to_webvtt_timestamp(entry["start"])
        end_time = time_to_webvtt_timestamp(entry["end"])
        text = entry["text"].replace("\n", " ")

        webvtt_content += f"{index}\n{start_time} --> {end_time}\n{text}\n\n"

    return webvtt_content


================================================
File: /python/api-examples-source/charts.video3/pages/1_1️⃣_One_VTT_or_SRT_file.py
================================================
import streamlit as st

st.set_page_config(layout="wide")
from utils import colored_header

col1, col2 = st.columns(2)

st.caption(
    "The featured video by [Blender Foundation | www.sintel.org](https://durian.blender.org) is licensed under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)"
)


with col1:
    colored_header(
        "Pass a single .VTT file (without a label)",
        description="You can pass a single .VTT file to `st.video` to display subtitles on a video.\n\n Note: in the video player, you can toggle the subtitles on and off. Also notice the label 'default', which indicates the default track.",
    )

    with st.expander("Show code", expanded=True):
        st.code(
            """
            import streamlit as st

            st.video("sintel-short.mp4", subtitles="subtitles-en.vtt")

            # You can also pass pathlib.Path objects
            from pathlib import Path
            st.video("sintel-short.mp4", subtitles=Path("subtitles-en.vtt"))
            """
        )

    st.video(
        "python/api-examples-source/charts.video3/sintel-short.mp4",
        subtitles="python/api-examples-source/charts.video3/subtitles-en.vtt",
        start_time=18,
    )

    colored_header(
        "Pass a single .SRT file (without a label)",
        description="You can also pass a single .SRT file to `st.video` to display subtitles on a video. The behavior is the same as with .VTT files.",
    )

    with st.expander("Show code"):
        st.code(
            """
            import streamlit as st

            st.video("sintel-short.mp4", subtitles="subtitles-en.srt")
            """
        )

    st.video(
        "python/api-examples-source/charts.video3/sintel-short.mp4",
        subtitles="python/api-examples-source/charts.video3/subtitles-en.srt",
        start_time=18,
    )

with col2:
    colored_header(
        "Pass a single .VTT file (with a label)",
        description="You can pass a single .VTT file to `st.video` to display subtitles on a video. You can also specify a label for the track. \n\n Note: in the video player notice the label 'English', which indicates the default track is 'English'.",
    )

    with st.expander("Show code", expanded=True):
        st.code(
            """
            import streamlit as st

            st.video("sintel-short.mp4", subtitles={"English": "subtitles-en.vtt"})

            # You can also pass pathlib.Path objects
            from pathlib import Path
            st.video("sintel-short.mp4", subtitles={"English": Path("subtitles-en.vtt")})
            """
        )

    st.video(
        "python/api-examples-source/charts.video3/sintel-short.mp4",
        subtitles={
            "English": "python/api-examples-source/charts.video3/subtitles-en.vtt"
        },
        start_time=18,
    )

    colored_header(
        "Pass a single .SRT file (with a label)",
        description="You can also pass a single .SRT file to `st.video` to display subtitles on a video. The behavior is the same as with .VTT files.",
    )

    with st.expander("Show code"):
        st.code(
            """
            import streamlit as st

            st.video("sintel-short.mp4", subtitles={"English": "subtitles-en.srt"})
            """
        )

    st.video(
        "python/api-examples-source/charts.video3/sintel-short.mp4",
        subtitles={
            "English": "python/api-examples-source/charts.video3/subtitles-en.srt"
        },
        start_time=18,
    )


================================================
File: /python/api-examples-source/charts.video3/pages/2_♾️_Multiple_VTT_and_or_SRT_files.py
================================================
import streamlit as st

st.set_page_config(layout="centered")
from utils import colored_header

colored_header(
    "Pass multiple .VTT and/or .SRT files",
    description="You can pass multiple .VTT and/or .SRT files to `st.video` to display subtitles on a video. The behavior is the same as with a single file. The video player will display the first track by default.\n\n Note: you can toggle between the tracks in the video player menu.",
)

with st.expander("Show code"):
    st.code(
        """
        import streamlit as st

        st.video("sintel-short.mp4", subtitles={"English": "subtitles-en.srt", "Spanish": "subtitles-es.vtt"})
        """
    )

st.video(
    "python/api-examples-source/charts.video3/sintel-short.mp4",
    subtitles={
        "English": "python/api-examples-source/charts.video3/subtitles-en.srt",
        "Español": "python/api-examples-source/charts.video3/subtitles-es.vtt",
    },
    start_time=18,
)

colored_header(
    "Pass multiple .VTT and/or .SRT files without a default track",
    description="You can pass multiple .VTT and/or .SRT files to `st.video` without specifying a default track. The video player will not display any subtitles by default. You will need to select a track from the video player menu.",
)

with st.expander("Show code"):
    st.code(
        """
        import streamlit as st

        st.video("sintel-short.mp4", subtitles={"":"", "German": "subtitles-de.vtt", "English": "subtitles-en.srt"})
        """
    )

st.video(
    "python/api-examples-source/charts.video3/sintel-short.mp4",
    subtitles={
        "None": "",
        "Deutsch": "python/api-examples-source/charts.video3/subtitles-de.vtt",
        "English": "python/api-examples-source/charts.video3/subtitles-en.srt",
    },
    start_time=18,
)

st.caption(
    "The featured video by [Blender Foundation | www.sintel.org](https://durian.blender.org) is licensed under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)"
)


================================================
File: /python/api-examples-source/charts.video3/pages/3_📤_Upload_subtitles.py
================================================
import streamlit as st

st.set_page_config(layout="centered")
from utils import colored_header

colored_header(
    "Upload subtitles",
    description="You can upload .VTT and .SRT files to `st.video` with `st.file_uploader`.",
)

with st.expander("Show code"):
    st.code(
        """
        import streamlit as st

        subtitles = st.file_uploader("Upload subtitles", accept_multiple_files=True)
        if subtitles:
            st.video("sintel-short.mp4", subtitles={file.name: file for file in subtitles})
        """
    )

with st.expander("Download example subtitle files", expanded=True):
    col1, col2 = st.columns(2)
    with open(
        "python/api-examples-source/charts.video3/subtitles-en.srt", "rb"
    ) as file:
        st.download_button(
            label="subtitles-en.srt",
            data=file,
            file_name="subtitles-en.srt",
            mime="text/vtt",
        )
    with open(
        "python/api-examples-source/charts.video3/subtitles-de.vtt", "rb"
    ) as file:
        st.download_button(
            label="subtitles-de.vtt",
            data=file,
            file_name="subtitles-de.vtt",
            mime="text/vtt",
        )

subtitles = st.file_uploader(
    "Upload subtitles", accept_multiple_files=True, type=["vtt", "srt"]
)

st.video(
    "python/api-examples-source/charts.video3/sintel-short.mp4",
    subtitles={file.name: file for file in subtitles},
)

if subtitles:
    st.caption(
        f"Now playing with the following subtitles: {', '.join([file.name for file in subtitles])}"
    )

st.caption(
    "The featured video by [Blender Foundation | www.sintel.org](https://durian.blender.org) is licensed under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)"
)


================================================
File: /python/api-examples-source/charts.video3/pages/4_❌_YouTube_is_unsupported.py
================================================
import streamlit as st

st.set_page_config(layout="centered")
from streamlit import config
from utils import colored_header

config.set_option("client.showErrorDetails", True)

colored_header(
    "YouTube is unsupported",
    description="You can't use pass subtitles to `st.video` when using a YouTube video. This is because YouTube's IFrame API does not expose a way to pass subtitles to the video player.",
)

with st.expander("Show code"):
    st.code(
        """
        import streamlit as st

        st.video("https://www.youtube.com/watch?v=0TSXM-BGqHU", subtitles={"English": "subtitles-en.vtt"})
        """
    )

st.video(
    "https://www.youtube.com/watch?v=0TSXM-BGqHU",
    subtitles={"English": "python/api-examples-source/charts.video3/subtitles-en.vtt"},
)


================================================
File: /python/api-examples-source/charts.video3/pages/5_🧵_Raw_strings_and_BytesIO.py
================================================
import io

import streamlit as st
from utils import colored_header

colored_header(
    "Pass dynamically generated subtitles as raw strings",
    description="You can pass dynamically generated (e.g. by an LLM) subtitles as raw strings to `st.video` to display subtitles on a video. The behavior is the same as with .VTT and .SRT files.",
)

with st.expander("Show code"):
    st.code(
        """
        import streamlit as st

        vtt = '''
        WEBVTT

        1
        00:00:18.700 --> 00:00:21.500
        This blade has a dark past.

        2
        00:00:22.800 --> 00:00:26.800
        It has shed much innocent blood.

        3
        00:00:29.000 --> 00:00:32.450
        You're a fool for traveling alone,
        so completely unprepared.

        4
        00:00:32.750 --> 00:00:35.800
        You're lucky your blood's still flowing.

        5
        00:00:36.250 --> 00:00:37.300
        Thank you.
        '''

        srt = '''
        1
        00:00:18,700 --> 00:00:21,500
        This blade has a dark past.

        2
        00:00:22,800 --> 00:00:26,800
        It has shed much innocent blood.

        3
        00:00:29,000 --> 00:00:32,450
        You're a fool for traveling alone,
        so completely unprepared.

        4
        00:00:32,750 --> 00:00:35,800
        You're lucky your blood's still flowing.

        5
        00:00:36,250 --> 00:00:37,300
        Thank you.
        '''

        st.video("sintel-short.mp4", subtitles={"English VTT": vtt, "English SRT": srt})
        """
    )

vtt = """
WEBVTT

1
00:00:18.700 --> 00:00:21.500
This blade has a dark past.

2
00:00:22.800 --> 00:00:26.800
It has shed much innocent blood.

3
00:00:29.000 --> 00:00:32.450
You're a fool for traveling alone,
so completely unprepared.

4
00:00:32.750 --> 00:00:35.800
You're lucky your blood's still flowing.

5
00:00:36.250 --> 00:00:37.300
Thank you.
"""

srt = """
1
00:00:18,700 --> 00:00:21,500
This blade has a dark past.

2
00:00:22,800 --> 00:00:26,800
It has shed much innocent blood.

3
00:00:29,000 --> 00:00:32,450
You're a fool for traveling alone,
so completely unprepared.

4
00:00:32,750 --> 00:00:35,800
You're lucky your blood's still flowing.

5
00:00:36,250 --> 00:00:37,300
Thank you.
"""

st.video(
    "python/api-examples-source/charts.video3/sintel-short.mp4",
    subtitles={"English VTT": vtt, "English SRT": srt},
    start_time=18,
)

colored_header(
    "Pass dynamically generated subtitles as io.BytesIO objects",
    description="You can also pass dynamically generated (e.g. by an LLM) subtitles as `io.BytesIO` objects to `st.video` to display subtitles on a video. The behavior is the same as with .VTT and .SRT files.",
)

with st.expander("Show code"):
    st.code(
        """
        import streamlit as st
        import io

        vtt = io.BytesIO(b'''WEBVTT

        1
        00:00:18.700 --> 00:00:21.500
        This blade has a dark past.

        2
        00:00:22.800 --> 00:00:26.800
        It has shed much innocent blood.

        3
        00:00:29.000 --> 00:00:32.450
        You're a fool for traveling alone,
        so completely unprepared.

        4
        00:00:32.750 --> 00:00:35.800
        You're lucky your blood's still flowing.

        5
        00:00:36.250 --> 00:00:37.300
        Thank you.
        ''')

        srt = io.BytesIO(b'''1
        00:00:18,700 --> 00:00:21,500
        This blade has a dark past.

        2
        00:00:22,800 --> 00:00:26,800
        It has shed much innocent blood.

        3
        00:00:29,000 --> 00:00:32,450
        You're a fool for traveling alone,
        so completely unprepared.

        4
        00:00:32,750 --> 00:00:35,800
        You're lucky your blood's still flowing.

        5
        00:00:36,250 --> 00:00:37,300
        Thank you.
        ''')

        st.video("sintel-short.mp4", subtitles={"English VTT": vtt, "English SRT": srt})
        """
    )

vtt = io.BytesIO(
    b"""WEBVTT

1
00:00:18.700 --> 00:00:21.500
This blade has a dark past.

2
00:00:22.800 --> 00:00:26.800
It has shed much innocent blood.

3
00:00:29.000 --> 00:00:32.450
You're a fool for traveling alone,
so completely unprepared.

4
00:00:32.750 --> 00:00:35.800
You're lucky your blood's still flowing.

5
00:00:36.250 --> 00:00:37.300
Thank you.
"""
)

srt = io.BytesIO(
    b"""1
00:00:18,700 --> 00:00:21,500
This blade has a dark past.

2
00:00:22,800 --> 00:00:26,800
It has shed much innocent blood.

3
00:00:29,000 --> 00:00:32,450
You're a fool for traveling alone,
so completely unprepared.

4
00:00:32,750 --> 00:00:35,800
You're lucky your blood's still flowing.

5
00:00:36,250 --> 00:00:37,300
Thank you.
"""
)

st.video(
    "python/api-examples-source/charts.video3/sintel-short.mp4",
    subtitles={"English VTT": vtt, "English SRT": srt},
    start_time=18,
)

st.caption(
    "The featured video by [Blender Foundation | www.sintel.org](https://durian.blender.org) is licensed under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)"
)


================================================
File: /python/api-examples-source/charts.video3/pages/6_🛝_Playground.py
================================================
import io
from datetime import datetime, time

import pandas as pd
import streamlit as st
import webvtt

st.set_page_config(layout="wide")
from utils import colored_header, data_to_webvtt, vtt_string_to_dataframe

colored_header(
    "Edit subtitles (Data annotation use case)",
    description="You can live edit the subtitles in the table below. The video player will update automatically.",
)


@st.cache_data
def load_data():
    with open("python/api-examples-source/charts.video3/subtitles-en.vtt", "rb") as f:
        vtt_string = f.read()
    df = vtt_string_to_dataframe(vtt_string.decode("utf-8"))
    return df


df = load_data()

col1, col2 = st.columns(2)

with col1:
    edited_df = st.data_editor(
        df,
        use_container_width=True,
        column_config={
            "text": st.column_config.TextColumn(
                "Subtitle text",
                help="The subtitle text to be displayed from the start time to the end time. 🎈",
            ),
            "start": st.column_config.TimeColumn(
                "Start time",
                help="The start time of the subtitle. 🕒",
            ),
            "end": st.column_config.TimeColumn(
                "End time",
                help="The end time of the subtitle. 🕒",
            ),
        },
    )

webvtt_string = data_to_webvtt(edited_df.to_dict(orient="records"))

col2.video(
    "python/api-examples-source/charts.video3/sintel-short.mp4",
    subtitles={"English": webvtt_string},
)
col2.caption(
    "The featured video by [Blender Foundation | www.sintel.org](https://durian.blender.org) is licensed under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)"
)


================================================
File: /python/api-examples-source/data/capitals.csv
================================================
Capital,State,Abbreviation,Latitude,Longitude,Population (2023 US Census Estimate)
Montgomery,Alabama,AL,32.361538,-86.279118,195287
Juneau,Alaska,AK,58.301935,-134.41974,31555
Phoenix,Arizona,AZ,33.448457,-112.073844,1650070
Little Rock,Arkansas,AR,34.736009,-92.331122,203842
Sacramento,California,CA,38.555605,-121.468926,526384
Denver,Colorado,CO,39.7391667,-104.984167,716577
Hartford,Connecticut,CT,41.767,-72.677,119669
Dover,Delaware,DE,39.161921,-75.526755,39894
Tallahassee,Florida,FL,30.4518,-84.27277,202221
Atlanta,Georgia,GA,33.76,-84.39,510823
Honolulu,Hawaii,HI,21.30895,-157.826182,341778
Boise,Idaho,ID,43.613739,-116.237651,235421
Springfield,Illinois,IL,39.78325,-89.650373,112544
Indianapolis,Indiana,IN,39.790942,-86.147685,879293
Des Moines,Iowa,IA,41.590939,-93.620866,210381
Topeka,Kansas,KS,39.04,-95.69,125475
Frankfort,Kentucky,KY,38.197274,-84.86311,28285
Baton Rouge,Louisiana,LA,30.45809,-91.140229,219573
Augusta,Maine,ME,44.323535,-69.765261,19102
Annapolis,Maryland,MD,38.972945,-76.501157,40552
Boston,Massachusetts,MA,42.2352,-71.0275,653833
Lansing,Michigan,MI,42.7335,-84.5467,112115
Saint Paul,Minnesota,MN,44.95,-93.094,303820
Jackson,Mississippi,MS,32.32,-90.207,143709
Jefferson City,Missouri,MO,38.572954,-92.189283,42552
Helena,Montana,MT,46.595805,-112.027031,34464
Lincoln,Nebraska,NE,40.809868,-96.675345,294757
Carson City,Nevada,NV,39.160949,-119.753877,58036
Concord,New Hampshire,NH,43.220093,-71.549127,44629
Trenton,New Jersey,NJ,40.221741,-74.756138,89620
Santa Fe,New Mexico,NM,35.667231,-105.964575,89167
Albany,New York,NY,42.659829,-73.781339,101228
Raleigh,North Carolina,NC,35.771,-78.638,482295
Bismarck,North Dakota,ND,48.813343,-100.779004,75092
Columbus,Ohio,OH,39.962245,-83.000647,913175
Oklahoma City,Oklahoma,OK,35.482309,-97.534994,702767
Salem,Oregon,OR,44.931109,-123.029159,177432
Harrisburg,Pennsylvania,PA,40.269789,-76.875613,50012
Providence,Rhode Island,RI,41.82355,-71.422132,190792
Columbia,South Carolina,SC,34,-81.035,142416
Pierre,South Dakota,SD,44.367966,-100.336378,13880
Nashville,Tennessee,TN,36.165,-86.784,687788
Austin,Texas,TX,30.266667,-97.75,979882
Salt Lake City,Utah,UT,40.7547,-111.892622,209593
Montpelier,Vermont,VT,44.26639,-72.57194,7991
Richmond,Virginia,VA,37.54,-77.46,229247
Olympia,Washington,WA,47.042418,-122.893077,55733
Charleston,West Virginia,WV,38.349497,-81.633294,46838
Madison,Wisconsin,WI,43.074722,-89.384444,280305
Cheyenne,Wyoming,WY,41.145548,-104.802042,65168

================================================
File: /python/api-examples-source/guides/requirements.txt
================================================
streamlit>=1.41.0


================================================
File: /python/api-examples-source/guides/widgets.change_parameters.py
================================================
import streamlit as st

cols = st.columns([2, 1, 2])
minimum = cols[0].number_input("Minimum", 1, 5)
maximum = cols[2].number_input("Maximum", 6, 10, 10)

st.slider("No default, no key", minimum, maximum)
st.slider("No default, with key", minimum, maximum, key="a")
st.slider("With default, no key", minimum, maximum, value=5)
st.slider("With default, with key", minimum, maximum, value=5, key="b")


================================================
File: /python/api-examples-source/guides/widgets.change_parameters_best.py
================================================
import streamlit as st

# Set default value
if "a" not in st.session_state:
    st.session_state.a = 5

cols = st.columns(2)
minimum = cols[0].number_input("Min", 1, 5, key="min")
maximum = cols[1].number_input("Max", 6, 10, 10, key="max")


def update_value():
    # Helper function to ensure consistency between widget parameters and value
    st.session_state.a = min(st.session_state.a, maximum)
    st.session_state.a = max(st.session_state.a, minimum)


# Validate the slider value before rendering
update_value()
st.slider("A", minimum, maximum, key="a")


================================================
File: /python/api-examples-source/guides/widgets.form_callbacks.py
================================================
import streamlit as st

if "attendance" not in st.session_state:
    st.session_state.attendance = set()


def take_attendance():
    if st.session_state.name in st.session_state.attendance:
        st.info(f"{st.session_state.name} has already been counted.")
    else:
        st.session_state.attendance.add(st.session_state.name)


with st.form(key="my_form"):
    st.text_input("Name", key="name")
    st.form_submit_button("I'm here!", on_click=take_attendance)


================================================
File: /python/api-examples-source/hello/hello.py
================================================
import streamlit as st


def intro():
    import streamlit as st

    st.write("# Welcome to Streamlit! 👋")
    st.sidebar.success("Select a demo above.")

    st.markdown(
        """
        Streamlit is an open-source app framework built specifically for
        Machine Learning and Data Science projects.

        **👈 Select a demo from the dropdown on the left** to see some examples
        of what Streamlit can do!

        ### Want to learn more?

        - Check out [streamlit.io](https://streamlit.io)
        - Jump into our [documentation](https://docs.streamlit.io)
        - Ask a question in our [community
          forums](https://discuss.streamlit.io)

        ### See more complex demos

        - Use a neural net to [analyze the Udacity Self-driving Car Image
          Dataset](https://github.com/streamlit/demo-self-driving)
        - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)
    """
    )


def mapping_demo():
    from urllib.error import URLError

    import pandas as pd
    import pydeck as pdk
    import streamlit as st

    st.markdown(f"# {list(page_names_to_funcs.keys())[2]}")
    st.write(
        """
        This demo shows how to use
[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)
to display geospatial data.
"""
    )

    @st.cache_data
    def from_data_file(filename):
        url = (
            "https://raw.githubusercontent.com/streamlit/"
            "example-data/master/hello/v1/%s" % filename
        )
        return pd.read_json(url)

    try:
        ALL_LAYERS = {
            "Bike Rentals": pdk.Layer(
                "HexagonLayer",
                data=from_data_file("bike_rental_stats.json"),
                get_position=["lon", "lat"],
                radius=200,
                elevation_scale=4,
                elevation_range=[0, 1000],
                extruded=True,
            ),
            "Bart Stop Exits": pdk.Layer(
                "ScatterplotLayer",
                data=from_data_file("bart_stop_stats.json"),
                get_position=["lon", "lat"],
                get_color=[200, 30, 0, 160],
                get_radius="[exits]",
                radius_scale=0.05,
            ),
            "Bart Stop Names": pdk.Layer(
                "TextLayer",
                data=from_data_file("bart_stop_stats.json"),
                get_position=["lon", "lat"],
                get_text="name",
                get_color=[0, 0, 0, 200],
                get_size=15,
                get_alignment_baseline="'bottom'",
            ),
            "Outbound Flow": pdk.Layer(
                "ArcLayer",
                data=from_data_file("bart_path_stats.json"),
                get_source_position=["lon", "lat"],
                get_target_position=["lon2", "lat2"],
                get_source_color=[200, 30, 0, 160],
                get_target_color=[200, 30, 0, 160],
                auto_highlight=True,
                width_scale=0.0001,
                get_width="outbound",
                width_min_pixels=3,
                width_max_pixels=30,
            ),
        }
        st.sidebar.markdown("### Map Layers")
        selected_layers = [
            layer
            for layer_name, layer in ALL_LAYERS.items()
            if st.sidebar.checkbox(layer_name, True)
        ]
        if selected_layers:
            st.pydeck_chart(
                pdk.Deck(
                    map_style="mapbox://styles/mapbox/light-v9",
                    initial_view_state={
                        "latitude": 37.76,
                        "longitude": -122.4,
                        "zoom": 11,
                        "pitch": 50,
                    },
                    layers=selected_layers,
                )
            )
        else:
            st.error("Please choose at least one layer above.")
    except URLError as e:
        st.error(
            """
            **This demo requires internet access.**

            Connection error: %s
        """
            % e.reason
        )


def plotting_demo():
    import time

    import numpy as np
    import streamlit as st

    st.markdown(f"# {list(page_names_to_funcs.keys())[1]}")
    st.write(
        """
        This demo illustrates a combination of plotting and animation with
Streamlit. We're generating a bunch of random numbers in a loop for around
5 seconds. Enjoy!
"""
    )

    progress_bar = st.sidebar.progress(0)
    status_text = st.sidebar.empty()
    last_rows = np.random.randn(1, 1)
    chart = st.line_chart(last_rows)

    for i in range(1, 101):
        new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)
        status_text.text("%i%% Complete" % i)
        chart.add_rows(new_rows)
        progress_bar.progress(i)
        last_rows = new_rows
        time.sleep(0.05)

    progress_bar.empty()

    # Streamlit widgets automatically run the script from top to bottom. Since
    # this button is not connected to any other logic, it just causes a plain
    # rerun.
    st.button("Re-run")


def data_frame_demo():
    from urllib.error import URLError

    import altair as alt
    import pandas as pd
    import streamlit as st

    st.markdown(f"# {list(page_names_to_funcs.keys())[3]}")
    st.write(
        """
        This demo shows how to use `st.write` to visualize Pandas DataFrames.

(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)
"""
    )

    @st.cache_data
    def get_UN_data():
        AWS_BUCKET_URL = "https://streamlit-demo-data.s3-us-west-2.amazonaws.com"
        df = pd.read_csv(AWS_BUCKET_URL + "/agri.csv.gz")
        return df.set_index("Region")

    try:
        df = get_UN_data()
        countries = st.multiselect(
            "Choose countries", list(df.index), ["China", "United States of America"]
        )
        if not countries:
            st.error("Please select at least one country.")
        else:
            data = df.loc[countries]
            data /= 1000000.0
            st.write("### Gross Agricultural Production ($B)", data.sort_index())

            data = data.T.reset_index()
            data = pd.melt(data, id_vars=["index"]).rename(
                columns={"index": "year", "value": "Gross Agricultural Product ($B)"}
            )
            chart = (
                alt.Chart(data)
                .mark_area(opacity=0.3)
                .encode(
                    x="year:T",
                    y=alt.Y("Gross Agricultural Product ($B):Q", stack=None),
                    color="Region:N",
                )
            )
            st.altair_chart(chart, use_container_width=True)
    except URLError as e:
        st.error(
            """
            **This demo requires internet access.**

            Connection error: %s
        """
            % e.reason
        )


page_names_to_funcs = {
    "—": intro,
    "Plotting Demo": plotting_demo,
    "Mapping Demo": mapping_demo,
    "DataFrame Demo": data_frame_demo,
}

demo_name = st.sidebar.selectbox("Choose a demo", page_names_to_funcs.keys())
page_names_to_funcs[demo_name]()


================================================
File: /python/api-examples-source/hello/requirements.txt
================================================
pandas==1.5.3
plotly==5.13.0
bokeh==2.4.3
graphviz==0.20
requests==2.32.2
matplotlib==3.7.1
numpy==1.23.5
scipy
altair==4.2.0
pydeck==0.8.0
streamlit>=1.41.0


================================================
File: /python/api-examples-source/mpa-hello/0_👋_Hello.py
================================================
# Copyright 2018-2022 Streamlit Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st


def run():
    st.set_page_config(
        page_title="Hello",
        page_icon="👋",
    )

    st.write("# Welcome to Streamlit! 👋")

    st.sidebar.success("Select a demo above.")

    st.markdown(
        """
        Streamlit is an open-source app framework built specifically for
        Machine Learning and Data Science projects.
        **👈 Select a demo from the sidebar** to see some examples
        of what Streamlit can do!
        ### Want to learn more?
        - Check out [streamlit.io](https://streamlit.io)
        - Jump into our [documentation](https://docs.streamlit.io)
        - Ask a question in our [community
          forums](https://discuss.streamlit.io)
        ### See more complex demos
        - Use a neural net to [analyze the Udacity Self-driving Car Image
          Dataset](https://github.com/streamlit/demo-self-driving)
        - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)
    """
    )


if __name__ == "__main__":
    run()


================================================
File: /python/api-examples-source/mpa-hello/requirements.txt
================================================
pandas==1.5.3
numpy==1.23.5
scipy
altair==4.2.0
pydeck==0.8.0
opencv-python-headless==4.6.0.66
streamlit>=1.41.0


================================================
File: /python/api-examples-source/mpa-hello/utils.py
================================================
# Copyright 2018-2022 Streamlit Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st
import inspect
import textwrap


def show_code(demo):
    """Showing the code of the demo."""
    show_code = st.sidebar.checkbox("Show code", True)
    if show_code:
        # Showing the code of the demo.
        st.markdown("## Code")
        sourcelines, _ = inspect.getsourcelines(demo)
        st.code(textwrap.dedent("".join(sourcelines[1:])))


================================================
File: /python/api-examples-source/mpa-hello/pages/1_📈_Plotting_Demo.py
================================================
# Copyright 2018-2022 Streamlit Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st
import time
import numpy as np
from utils import show_code


def plotting_demo():
    progress_bar = st.sidebar.progress(0)
    status_text = st.sidebar.empty()
    last_rows = np.random.randn(1, 1)
    chart = st.line_chart(last_rows)

    for i in range(1, 101):
        new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)
        status_text.text("%i%% Complete" % i)
        chart.add_rows(new_rows)
        progress_bar.progress(i)
        last_rows = new_rows
        time.sleep(0.05)

    progress_bar.empty()

    # Streamlit widgets automatically run the script from top to bottom. Since
    # this button is not connected to any other logic, it just causes a plain
    # rerun.
    st.button("Re-run")


st.set_page_config(page_title="Plotting Demo", page_icon="📈")
st.markdown("# Plotting Demo")
st.sidebar.header("Plotting Demo")
st.write(
    """This demo illustrates a combination of plotting and animation with
Streamlit. We're generating a bunch of random numbers in a loop for around
5 seconds. Enjoy!"""
)

plotting_demo()

show_code(plotting_demo)


================================================
File: /python/api-examples-source/mpa-hello/pages/2_🌍_Mapping_Demo.py
================================================
# Copyright 2018-2022 Streamlit Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from urllib.error import URLError

import pandas as pd
import pydeck as pdk
import streamlit as st
from utils import show_code


def mapping_demo():
    @st.cache_data
    def from_data_file(filename):
        url = (
            "https://raw.githubusercontent.com/streamlit/"
            "example-data/master/hello/v1/%s" % filename
        )
        return pd.read_json(url)

    try:
        ALL_LAYERS = {
            "Bike Rentals": pdk.Layer(
                "HexagonLayer",
                data=from_data_file("bike_rental_stats.json"),
                get_position=["lon", "lat"],
                radius=200,
                elevation_scale=4,
                elevation_range=[0, 1000],
                extruded=True,
            ),
            "Bart Stop Exits": pdk.Layer(
                "ScatterplotLayer",
                data=from_data_file("bart_stop_stats.json"),
                get_position=["lon", "lat"],
                get_color=[200, 30, 0, 160],
                get_radius="[exits]",
                radius_scale=0.05,
            ),
            "Bart Stop Names": pdk.Layer(
                "TextLayer",
                data=from_data_file("bart_stop_stats.json"),
                get_position=["lon", "lat"],
                get_text="name",
                get_color=[0, 0, 0, 200],
                get_size=15,
                get_alignment_baseline="'bottom'",
            ),
            "Outbound Flow": pdk.Layer(
                "ArcLayer",
                data=from_data_file("bart_path_stats.json"),
                get_source_position=["lon", "lat"],
                get_target_position=["lon2", "lat2"],
                get_source_color=[200, 30, 0, 160],
                get_target_color=[200, 30, 0, 160],
                auto_highlight=True,
                width_scale=0.0001,
                get_width="outbound",
                width_min_pixels=3,
                width_max_pixels=30,
            ),
        }
        st.sidebar.markdown("### Map Layers")
        selected_layers = [
            layer
            for layer_name, layer in ALL_LAYERS.items()
            if st.sidebar.checkbox(layer_name, True)
        ]
        if selected_layers:
            st.pydeck_chart(
                pdk.Deck(
                    map_style=None,
                    initial_view_state={
                        "latitude": 37.76,
                        "longitude": -122.4,
                        "zoom": 11,
                        "pitch": 50,
                    },
                    layers=selected_layers,
                )
            )
        else:
            st.error("Please choose at least one layer above.")
    except URLError as e:
        st.error(
            """
            **This demo requires internet access.**
            Connection error: %s
        """
            % e.reason
        )


st.set_page_config(page_title="Mapping Demo", page_icon="🌍")
st.markdown("# Mapping Demo")
st.sidebar.header("Mapping Demo")
st.write(
    """This demo shows how to use
[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)
to display geospatial data."""
)

mapping_demo()

show_code(mapping_demo)


================================================
File: /python/api-examples-source/mpa-hello/pages/3_📊_DataFrame_Demo.py
================================================
# Copyright 2018-2022 Streamlit Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from urllib.error import URLError

import altair as alt
import pandas as pd
import streamlit as st
from utils import show_code


def data_frame_demo():
    @st.cache_data
    def get_UN_data():
        AWS_BUCKET_URL = "https://streamlit-demo-data.s3-us-west-2.amazonaws.com"
        df = pd.read_csv(AWS_BUCKET_URL + "/agri.csv.gz")
        return df.set_index("Region")

    try:
        df = get_UN_data()
        countries = st.multiselect(
            "Choose countries", list(df.index), ["China", "United States of America"]
        )
        if not countries:
            st.error("Please select at least one country.")
        else:
            data = df.loc[countries]
            data /= 1000000.0
            st.write("### Gross Agricultural Production ($B)", data.sort_index())

            data = data.T.reset_index()
            data = pd.melt(data, id_vars=["index"]).rename(
                columns={"index": "year", "value": "Gross Agricultural Product ($B)"}
            )
            chart = (
                alt.Chart(data)
                .mark_area(opacity=0.3)
                .encode(
                    x="year:T",
                    y=alt.Y("Gross Agricultural Product ($B):Q", stack=None),
                    color="Region:N",
                )
            )
            st.altair_chart(chart, use_container_width=True)
    except URLError as e:
        st.error(
            """
            **This demo requires internet access.**
            Connection error: %s
        """
            % e.reason
        )


st.set_page_config(page_title="DataFrame Demo", page_icon="📊")
st.markdown("# DataFrame Demo")
st.sidebar.header("DataFrame Demo")
st.write(
    """This demo shows how to use `st.write` to visualize Pandas DataFrames.
(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)"""
)

data_frame_demo()

show_code(data_frame_demo)


================================================
File: /python/api-examples-source/mpa-hello/pages/4_📷_Webcam_Demo.py
================================================
import cv2
import numpy as np
import streamlit as st
from utils import show_code


def webcam_demo():
    def preprocess(img):
        bytes_data = np.asarray(bytearray(img.read()), dtype=np.uint8)
        img = cv2.imdecode(bytes_data, cv2.IMREAD_COLOR)
        return img

    def invert(img):
        img = preprocess(img)
        inv = cv2.bitwise_not(img)
        return inv

    def sketch(img):
        img = preprocess(img)
        _, sketch_img = cv2.pencilSketch(
            img, sigma_s=60, sigma_r=0.07, shade_factor=0.1
        )
        return sketch_img

    def gray(img):
        img = preprocess(img)
        gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        gray_img = cv2.cvtColor(gray_img, cv2.COLOR_GRAY2RGB)
        return gray_img

    def none(img):
        img = preprocess(img)
        return img

    picture = st.camera_input("First, take a picture...")

    filters_to_funcs = {
        "No filter": none,
        "Grayscale": gray,
        "Invert": invert,
        "Sketch": sketch,
    }
    filters = st.selectbox("...and now, apply a filter!", filters_to_funcs.keys())

    if picture:
        st.image(filters_to_funcs[filters](picture), channels="BGR")


st.set_page_config(page_title="Webcam Demo", page_icon="📷")
st.markdown("# Webcam Demo")
st.sidebar.header("Webcam Demo")
st.write(
    """This demo illustrates the use of the 
    [`st.camera_input`](https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input) 
    widget — which lets the user take an image through their webcam and upload it to the app — 
    to apply a filter to the uploaded image. Enjoy!"""
)

webcam_demo()

show_code(webcam_demo)


================================================
File: /python/api-examples-source/mpa-hello/.streamlit/config.toml
================================================
[runner]
fastReruns = true

================================================
File: /python/api-examples-source/navigation.example_1/page_1.py
================================================
import streamlit as st

st.title("Page 1")


================================================
File: /python/api-examples-source/navigation.example_1/requirements.txt
================================================
streamlit>=1.41.0


================================================
File: /python/api-examples-source/navigation.example_1/streamlit_app.py
================================================
import streamlit as st


def page_2():
    st.title("Page 2")


pg = st.navigation([st.Page("page_1.py"), st.Page(page_2)])
pg.run()


================================================
File: /python/api-examples-source/navigation.example_2/create_account.py
================================================
import streamlit as st

st.title("Create your account")


================================================
File: /python/api-examples-source/navigation.example_2/learn.py
================================================
import streamlit as st

st.title("Learn about us")


================================================
File: /python/api-examples-source/navigation.example_2/manage_account.py
================================================
import streamlit as st

st.title("Manage your account")


================================================
File: /python/api-examples-source/navigation.example_2/requirements.txt
================================================
streamlit>=1.41.0

================================================
File: /python/api-examples-source/navigation.example_2/streamlit_app.py
================================================
import streamlit as st

pages = {
    "Your account": [
        st.Page("create_account.py", title="Create your account"),
        st.Page("manage_account.py", title="Manage your account"),
    ],
    "Resources": [
        st.Page("learn.py", title="Learn about us"),
        st.Page("trial.py", title="Try it out"),
    ],
}

pg = st.navigation(pages)
pg.run()

================================================
File: /python/api-examples-source/navigation.example_2/trial.py
================================================
import streamlit as st

st.title("Try it out")


================================================
File: /python/api-examples-source/st-experimental-connection/README.md
================================================
# release-demos
A demo app for Streamlit release highlights :star2:


================================================
File: /python/api-examples-source/st-experimental-connection/LICENSE
================================================
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


================================================
File: /python/api-examples-source/st-experimental-connection/Procfile
================================================
web: sh setup.sh && streamlit run 0.67/streamlit_app.py


================================================
File: /python/api-examples-source/st-experimental-connection/setup.sh
================================================
mkdir -p ~/.streamlit/
echo "\
[general]\n\
email = \"karrie@streamlit.io\"\n\
" > ~/.streamlit/credentials.toml
echo "\
[server]\n\
headless = true\n\
enableCORS=false\n\
port = $PORT\n\

[logger]\n\
level='debug'\n\

[deprecation]\n\
showfileUploaderEncoding=false\n\
" > ~/.streamlit/config.toml


================================================
File: /python/api-examples-source/st-experimental-connection/.gitignore
================================================
.DS_Store
secrets.toml

test-files/
*.db

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
node_modules/
.Python
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock
# Using requirements.txt to work with Heroku and S4T.
# Pipfile will overwrite requirements.txt. Instead let's just update requirements.txt only
Pipfile

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/README.md
================================================
# st.experimental_connection Demo

Demo app for st.experimental_connection. Requires secrets for SQL, S3, GCS to run in Cloud. Can also take Snowpark secrets.


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/requirements.txt
================================================
streamlit>=1.41.0
toml
sqlalchemy==1.4
duckdb
git+https://github.com/streamlit/files-connection
s3fs
gcsfs
snowflake-snowpark-python[pandas]


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/🔌_Home.py
================================================
import streamlit as st

st.set_page_config(
    page_title='st.experimental_connection',
    page_icon='🔌'
)

st.title("🔌 st.experimental_connection")

"""
We're very excited to release `st.experimental_connection()`, which makes it easy to connect your Streamlit apps to data and APIs with a fraction of the code.

With st.experimental_connection, connecting to a SQL database becomes just 4 lines of code:
"""

tab1, tab2 = st.tabs([
    "🚀 With st.experimental_connection",
    "🐢 How it worked before"
])

with tab1:
    st.code("""
import streamlit as st

conn = st.experimental_connection('pets_db', type='sql')
pet_owners = conn.query('select * from pet_owners')
st.dataframe(pet_owners)
    """, language='python'
    )

with tab2:
    "Compared to [Streamlit's original MySQL tutorial](https://web.archive.org/web/20230330050343/https://docs.streamlit.io/develop/tutorials/databases/mysql#write-your-streamlit-app)"

    st.code("""
import streamlit as st
import mysql.connector

@st.experimental_singleton
def init_connection():
    return mysql.connector.connect(**st.secrets["mysql"])

conn = init_connection()

@st.experimental_memo(ttl=600)
def run_query(query):
    with conn.cursor() as cur:
        cur.execute(query)
        return cur.fetchall()

rows = run_query("SELECT * from pet_owners;")
for row in rows:
    st.write(f"{row[0]} has a :{row[1]}:")
""", language='python'
    )

"""

### What's included

st.experimental_connection includes:

- `st.experimental_connection()` factory method to initialize ready-to-use data connection objects
- Concrete implementations built into Streamlit for SQL and Snowpark
- Easy to install connections for [cloud file storage](https://github.com/streamlit/files-connection) and [Google Sheets](https://github.com/streamlit/gsheets-connection)
- An extendable `BaseConnection` class to easily build (and share) new connection types!

👈 Pick a data source to see how easy it is!

[Learn more in the API docs.](https://docs.streamlit.io/develop/api-reference/connections)
"""


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/duckdb_connection/__init__.py
================================================
from duckdb_connection.connection import DuckDBConnection as DuckDBConnection


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/duckdb_connection/connection.py
================================================
from streamlit.connections import ExperimentalBaseConnection
from streamlit.runtime.caching import cache_data

import duckdb
import pandas as pd

class DuckDBConnection(ExperimentalBaseConnection[duckdb.DuckDBPyConnection]):
    """Basic st.experimental_connection implementation for DuckDB"""

    def _connect(self, **kwargs) -> duckdb.DuckDBPyConnection:
        if 'database' in kwargs:
            db = kwargs.pop('database')
        else:
            db = self._secrets['database']
        return duckdb.connect(database=db, **kwargs)
    
    def cursor(self) -> duckdb.DuckDBPyConnection:
        return self._instance.cursor()

    def query(self, query: str, ttl: int = 3600, **kwargs) -> pd.DataFrame:
        @cache_data(ttl=ttl)
        def _query(query: str, **kwargs) -> pd.DataFrame:
            cursor = self.cursor()
            cursor.execute(query, **kwargs)
            return cursor.df()
        
        return _query(query, **kwargs)


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/pages/01_🧰_Connection_setup.py
================================================
import streamlit as st

st.set_page_config(
    page_title='Connection setup',
    page_icon='🧰'
)

st.title("🧰 Connection setup")

"""
Streamlit comes installed with generic connections for SQL and Snowflake Snowpark. These may need additional packages installed to work properly.
There are also many community connections available to install. In most cases, you'll need to:

- Install any necessary packages in your environment (such as with `pip` and `requirements.txt`). You can find these in Streamlit’s data source tutorials or the data source documentation.
    - If something is missing when you run your app, Streamlit will try to detect that and give you a hint about what to install.
- Set up credentials and connection information
- Import and initialize the connection in your app

### Installing packages

For example, with the MySQL connection, you'll need to install SQLAlchemy and mysqlclient.

```shell
pip install SQLAlchemy mysqlclient
```

### Set up credentials

Connection configuration and credentials can be provided in three ways:
- In `.streamlit/secrets.toml`
- In any native config file or ENV for the particular data source
- Passed directly as arguments to st.experimental_connection

If you are using `secrets.toml`, you'll want to create a section called `[connections.<connection name>]` and add parameters there. You can
name the connection whatever you'd like.

```toml
[connections.pets_db]
dialect = "mysql"
url = "mysqldb://scott:tiger@192.168.0.134/pet_db"
```

### Initialize the connection

Then, initialize the connection in your Streamlit app by passing the connection name and type to st.experimental_connection.
The type argument can be a string (for built-in connections) or a class (for connections that ship outside of Streamlit).

```python
# streamlit_app.py

import streamlit as st

conn = st.experimental_connection('pets_db', type='sql')
```
"""


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/pages/03_🏰_SQL.py
================================================
import streamlit as st

from datetime import timedelta

st.set_page_config(
    page_title='SQLConnection',
    page_icon='🏰'
)

st.title('🏰 SQLConnection')

st.info("`SQLConnection` can load data from any SQL dialect with 4 lines of code", icon="💡")

connection_secrets = """
# .streamlit/secrets.toml
[connections.pets_db]
url = "sqlite:///pets.db"
"""

st.subheader("Setup")

"""
This example uses a local SQLite database that sits alongside the app. The only extra dependency installed is [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy).

```sh
pip install SQLAlchemy==1.4
```

`.streamlit/secrets.toml` looks like this:
"""

st.code(connection_secrets, language='toml')

"""
Now you can initialize the connection in one line of code:
"""
with st.echo():
    import streamlit as st
    conn = st.experimental_connection('pets_db', type='sql')

    # View the connection contents.
    conn


st.subheader("Use session for writes and transactions")

"""
`conn.session` returns an underlying SQLAlchemy Session that can be used for writes,
transactions, using the SQLAlchemy ORM and other more advanced operations.
"""

with st.echo():
    with conn.session as s:
        st.markdown(f"Note that `s` is a `{type(s)}`")
        s.execute('CREATE TABLE IF NOT EXISTS pet_owners (person TEXT, pet TEXT);')
        s.execute('DELETE FROM pet_owners;')
        pet_owners = {'jerry': 'fish', 'barbara': 'cat', 'alex': 'puppy'}
        for k in pet_owners:
            s.execute(
                'INSERT INTO pet_owners (person, pet) VALUES (:owner, :pet);',
                params=dict(owner=k, pet=pet_owners[k])
            )
        s.commit()
            
st.subheader("query() for common cases")

"""
For a typical use case where you just need to query and cache some data, it's much simpler.
Just use `conn.query()`. By default it caches the result without expiration, or you can add a TTL.
This also support parameters, pagination, date conversions, and more
(see the [full docs](https://docs.streamlit.io/develop/api-reference/connections/st.connections.sqlconnection#sqlconnectionquery)).

`query()` returns a `pandas.DataFrame`.
"""

with st.echo():
    pet_owners = conn.query('select * from pet_owners', ttl=timedelta(minutes=10))
    st.dataframe(pet_owners)


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/pages/04_🗂️_S3,_GCS,_and_cloud_files.py
================================================
import streamlit as st

import os
from tempfile import NamedTemporaryFile
from st_files_connection import FilesConnection
import pandas as pd

st.set_page_config(
    page_title='FilesConnection',
    page_icon='🗂️'
)

st.title('🗂️ FilesConnection')

st.info("`FilesConnection` can load data from just about any popular remote, cloud or local file store like S3, GCS, HDFS, sftp.", icon="💡")

st.markdown("""
[Streamlit FilesConnection](https://github.com/streamlit/files-connection) provides an easy way to connect to any
[fsspec](https://filesystem-spec.readthedocs.io/en/latest/)-compatible data source.
See the full list of drivers
[here](https://filesystem-spec.readthedocs.io/en/latest/api.html#other-known-implementations).

Install FilesConnection and any particular drivers you need:

```sh
pip install git+https://github.com/streamlit/files-connection
pip install s3fs gcsfs
```

See working examples below for local files, AWS S3, and Google GCS.
""")

df = pd.DataFrame({"Owner": ["jerry", "barbara", "alex"], "Pet": ["fish", "cat", "puppy"], "Count": [4, 2, 1]})

local, s3, s3_other, gcs, gcs_other = st.tabs(
    [
        "Local files",
        "S3 files",
        "S3 files (BYO credentials)",
        "GCS files",
        "GCS files (BYO credentials)",
    ]
)
with local:
    st.write("### Working with local files")
    with st.echo():
        from st_files_connection import FilesConnection
        conn = st.experimental_connection('local', type=FilesConnection)
        conn

    with st.expander("Setup code"):
        with st.echo():
            text_file = "test-files/test.txt"
            csv_file = "test-files/test.csv"
            parquet_file = "test-files/test.parquet"
            try:
                _ = conn.fs.ls("./test-files/")
            except FileNotFoundError:
                conn.fs.mkdir("./test-files/")
            try:
                _ = conn.read(text_file, input_format='text')
            except FileNotFoundError:
                with conn.open(text_file, "wt") as f:
                    f.write("This is a test")
            
            try:
                _ = conn.read(csv_file, input_format='csv')
            except FileNotFoundError:
                with conn.open(csv_file, "wt") as f:
                    df.to_csv(f, index=False)
            
            try:
                _ = conn.read(parquet_file, input_format='parquet')
            except FileNotFoundError:
                with conn.open(parquet_file, "wb") as f:
                    df.to_parquet(f)


    st.write("#### Text files")

    with st.echo():
        st.write(conn.read("test-files/test.txt", input_format='text'))

    st.write("#### CSV Files")
    with st.echo():
        st.write(conn.read("test-files/test.csv", input_format='csv'))

    st.write("#### Parquet Files")
    with st.echo():
        st.write(conn.read("test-files/test.parquet", input_format='parquet'))


with s3:
    st.write("### Working with S3 files")
    st.write("Credentials are stored in secrets.toml")

    st.code(
        """
# In secrets.toml
[connections.s3]
protocol = "s3"
key = "..."
secret = "..."
    """,
        language="toml",
    )

    with st.echo():
        conn = st.experimental_connection('s3', type=FilesConnection)

    with st.expander("Setup code"):
        with st.echo():
            text_file = "st-connection-test/test.txt"
            csv_file = "st-connection-test/test.csv"
            parquet_file = "st-connection-test/test.parquet"
            try:
                _ = conn.read(text_file, input_format='text')
            except FileNotFoundError:
                with conn.open(text_file, "wt") as f:
                    f.write("This is a test")
            
            try:
                _ = conn.read(csv_file, input_format='csv')
            except FileNotFoundError:
                with conn.open(csv_file, "wt") as f:
                    df.to_csv(f, index=False)
            
            try:
                _ = conn.read(parquet_file, input_format='parquet')
            except FileNotFoundError:
                with conn.open(parquet_file, "wb") as f:
                    df.to_parquet(f)

    st.write("#### Text files")

    with st.echo():
        st.write(conn.read("s3://st-connection-test/test.txt", input_format='text'))

    st.write("#### CSV Files")
    with st.echo():
        st.write(conn.read("s3://st-connection-test/test.csv", input_format='csv'))

    st.write("#### Parquet Files")
    with st.echo():
        st.write(conn.read("s3://st-connection-test/test.parquet", input_format='parquet'))
    
    st.write("#### List operations")
    with st.echo():
        st.write(conn.fs.ls("s3://st-connection-test/"))

with s3_other:
    st.write("### Using S3 with your own credentials")

    # HACK to get the environment variables set
    secrets = st.secrets["connections"]["s3"]

    os.environ["AWS_ACCESS_KEY_ID"] = secrets["key"]
    os.environ["AWS_SECRET_ACCESS_KEY"] = secrets["secret"]

    st.write(
        "You can also use credentials stored in `~/.aws/config` or `AWS_ACCESS_KEY_ID` & "
        "`AWS_SECRET_ACCES_KEY` environment variables. This example uses that approach "
        "rather than Streamlit secrets."
    )

    with st.echo():
        conn = st.experimental_connection('', protocol='s3', type=FilesConnection)

    with st.expander("Setup code"):
        with st.echo():
            text_file = "st-connection-test/test2.txt"
            csv_file = "st-connection-test/test2.csv"
            parquet_file = "st-connection-test/test2.parquet"
            try:
                _ = conn.read(text_file, input_format='text')
            except FileNotFoundError:
                with conn.open(text_file, "wt") as f:
                    f.write("This is a test")
            
            try:
                _ = conn.read(csv_file, input_format='csv')
            except FileNotFoundError:
                with conn.open(csv_file, "wt") as f:
                    df.to_csv(f, index=False)
            
            try:
                _ = conn.read(parquet_file, input_format='parquet')
            except FileNotFoundError:
                with conn.open(parquet_file, "wb") as f:
                    df.to_parquet(f)

    st.write("#### Text files")
    with st.echo():
        st.write(conn.read(text_file, input_format='text'))

    st.write("#### CSV Files")
    with st.echo():
        st.write(conn.read(csv_file, input_format='csv'))

    st.write("#### Parquet Files")
    with st.echo():
        st.write(conn.read(parquet_file, input_format='parquet'))
    
    st.write("#### List operations")
    with st.echo():
        st.write(conn.fs.ls("st-connection-test/"))


with gcs:
    st.write("### Working with Google Cloud Storage files")
    st.write("Credentials are set in secrets.toml")

    st.code(
        """
# In secrets.toml
[connections.gcs]
protocol = "gcs"
type = "..."
project_id = "..."
private_key_id = "..."
private_key = "-----BEGIN PRIVATE KEY-----\n..."
client_email = "..."
client_id = "..."
auth_uri = "https://accounts.google.com/o/oauth2/auth"
token_uri = "https://oauth2.googleapis.com/token"
auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
client_x509_cert_url = "..."
    """,
        language="toml",
    )

    with st.echo():
        conn = st.experimental_connection('gcs', type=FilesConnection)

    with st.expander("Setup code"):
        with st.echo():
            text_file = "st-connection-test/test3.txt"
            csv_file = "st-connection-test/test3.csv"
            parquet_file = "st-connection-test/test3.parquet"
            try:
                _ = conn.read(text_file, input_format='text')
            except FileNotFoundError:
                with conn.open(text_file, "wt") as f:
                    f.write("This is a test")
            
            try:
                _ = conn.read(csv_file, input_format='csv')
            except FileNotFoundError:
                with conn.open(csv_file, "wt") as f:
                    df.to_csv(f, index=False)
            
            try:
                _ = conn.read(parquet_file, input_format='parquet')
            except FileNotFoundError:
                with conn.open(parquet_file, "wb") as f:
                    df.to_parquet(f)

    st.write("#### Text files")

    with st.echo():
        st.write(conn.read("gcs://st-connection-test/test3.txt", input_format='text'))

    st.write("#### CSV Files")
    with st.echo():
        st.write(conn.read("gcs://st-connection-test/test3.csv", input_format='csv'))

    st.write("#### Parquet Files")
    with st.echo():
        st.write(conn.read("gcs://st-connection-test/test3.parquet", input_format='parquet'))
    
    st.write("#### List operations")
    with st.echo():
        st.write(conn.fs.ls("st-connection-test/"))

with gcs_other:
    "### Using GCS with your own credentials file"
    st.write("Credentials are provided by a path to a service account json file")

    connection_details = dict(st.secrets["connections"]["gcs"])

    if "protocol" in connection_details:
        del connection_details["protocol"]

    with NamedTemporaryFile("w+", suffix=".json") as f:
        import json

        json.dump(connection_details, f)
        f.seek(0)

        credentials_file_name = f.name

        with st.echo():
            conn = st.experimental_connection('', protocol='gcs', type=FilesConnection, token=credentials_file_name)

        with st.expander("Setup code"):
            with st.echo():
                text_file = "st-connection-test/test4.txt"
                csv_file = "st-connection-test/test4.csv"
                parquet_file = "st-connection-test/test4.parquet"
                try:
                    _ = conn.read(text_file, input_format='text')
                except FileNotFoundError:
                    with conn.open(text_file, "wt") as f:
                        f.write("This is a test")
                
                try:
                    _ = conn.read(csv_file, input_format='csv')
                except FileNotFoundError:
                    with conn.open(csv_file, "wt") as f:
                        df.to_csv(f, index=False)
                
                try:
                    _ = conn.read(parquet_file, input_format='parquet')
                except FileNotFoundError:
                    with conn.open(parquet_file, "wb") as f:
                        df.to_parquet(f)

        st.write("#### Text files")

        with st.echo():
            st.write(conn.read(text_file, input_format='text'))

        st.write("#### CSV Files")
        with st.echo():
            st.write(conn.read(csv_file, input_format='csv'))

        st.write("#### Parquet Files")
        with st.echo():
            st.write(conn.read(parquet_file, input_format='parquet'))
        
        st.write("#### List operations")
        with st.echo():
            st.write(conn.fs.ls("st-connection-test/"))


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/pages/05_🏂_Snowpark.py
================================================
import streamlit as st

from snowflake.snowpark.functions import col
import pandas as pd

st.set_page_config(
    page_title='Snowpark Connections',
    page_icon='🏂'
)

st.title('🏂 Snowpark Connections')


st.info("`SnowparkConnection` makes it easy to connect to Snowflake and Snowpark", icon="💡")

"""
A SnowparkConnection example is shown here, but won't work in the Cloud app since it needs local Snowflake credentials.
To use it, you can:
- Clone [this app](https://github.com/streamlit/release-demos/tree/master/1.22/st-experimental-connection) locally
- Run `pip install "streamlit>=1.22" "snowflake-snowpark-python[pandas]"` or equivalent
- Set up local credentials for your Snowflake account.
"""

with st.expander("Examples of local Snowpark credentials setup"):
    st.code("""
# .streamlit/secrets.toml
[connections.snowpark]
type = "snowpark"
authenticator = "externalbrowser"
account = "[MYACCOUNT]"
user = "[username]"
role = "[MYROLE]"
warehouse = "[MYWAREHOUSE]"
    """, language = "toml")

    "Alternatively, you can use `~/.snowsql/config` (syntax is the same except the header)"
    st.code("""
# ~/.snowsql/config
[connections]
authenticator = "externalbrowser"
account = "[MYACCOUNT]"
user = "[username]"
role = "[MYROLE]"
warehouse = "[MYWAREHOUSE]"
    """, language = "toml")
    """
    *For questions on the required `account` value, see [here](https://docs.snowflake.com/en/user-guide/python-connector-api.html#label-account-format-info).
    Full list of supported parameters [here](https://docs.snowflake.com/en/user-guide/python-connector-api.html#connect).*
    """

"""
- View the [API Reference for SnowparkConnection](https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowparkconnection).
- View the [tutorial for connecting Streamlit to Snowflake](https://docs.streamlit.io/develop/tutorials/databases/snowflake).
"""

run_the_code = st.checkbox("Try running the code (requires local snowflake creds)")

st.subheader("Initialize a connection")
with st.echo():
    if run_the_code:
        conn = st.experimental_connection('snowpark')

        conn

st.subheader("query() for convenience")

"`conn.query()` will cache by default and return a pandas dataframe."

with st.expander("⚠️ **NOTE:** On query and native Snowpark dataframes"):
    """
    - `conn.query()` returns a pandas dataframe, meaning that any further calculations or transformations
      will run in the app execution thread directly. This might be fine for initial prototyping or smaller scale
      use cases.
    - However in many cases, it will be faster to run processing natively in a Snowpark Dataframe, particularly for
      large data sets or intensive use cases. In this case, you will need to use the Snowpark Session as described below.
    """

with st.echo():
    if run_the_code:
        query = """
            select 50 as high_fives, 25 as fist_bumps, 'Q1' as quarter
            union
            select 20 as high_fives, 35 as fist_bumps, 'Q2' as quarter
            union
            select 60 as high_fives, 30 as fist_bumps, 'Q3' as quarter
        """
        df = conn.query(query)
        st.dataframe(df)

st.subheader("safe_session() for thread safety")

"Use `conn.safe_session()` in a `with` block to get thread safe access to a [Snowpark Session](https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/session.html) for more advanced (and often faster) operations."

"You may want to wrap this in a function with `@st.cache_data` to be even faster!"
with st.echo():
    if run_the_code:
        with conn.safe_session() as session:
            local_df = pd.DataFrame({"OWNER": ["jerry", "barbara", "alex"], "PET": ["fish", "cat", "puppy"], "COUNT": [4, 2, 1]})
            snow_df = session.create_dataframe(local_df)
            snow_df = snow_df.filter(col('COUNT') > 1)
            st.dataframe(snow_df)


st.subheader("session for full operations")
"You can also use `conn.session` to get direct access to the Snowpark Session, in this case you are responsible for handling thread safety."

"You may want to wrap this in a function with `@st.cache_data` to be even faster!"
with st.echo():
    if run_the_code:
        sess = conn.session
        local_df = pd.DataFrame({"OWNER": ["jerry", "barbara", "alex"], "PET": ["fish", "cat", "puppy"], "COUNT": [4, 2, 1]})
        snow_df = sess.create_dataframe(local_df)
        snow_df = snow_df.filter(col('COUNT') > 1)
        st.dataframe(snow_df)


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/pages/06_🙌_Community_connections.py
================================================
import streamlit as st

st.set_page_config(
    page_title='Community connections',
    page_icon='🙌'
)

st.title("🙌 Community connections")

"""
We're excited for the community to extend and build on the st.experimental_connection interface and make it easier than ever to build Streamlit apps
with a wide variety of data sources. We've built the interface with this in mind. To use a community-built connection in your Streamlit app,
you just need to install and import it, then pass the class to st.experimental_connection(), like this:

```python
import streamlit as st
from st_gsheets_connection import GSheetsConnection

conn = st.experimental_connection("pets_gsheet", type=GSheetsConnection)
pet_owners = conn.read(worksheet="Pet Owners")
st.dataframe(pet_owners)
```

These type of connections work exactly the same as the ones built into Streamlit and have access to all the same capabilities.
"""


================================================
File: /python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/pages/07_🏗️_Build_your_own.py
================================================
import streamlit as st

st.set_page_config(
    page_title='Build your own Connection',
    page_icon='🏗️'
)

st.title('🏗️ Build your own Connection')


st.info("`ExperimentalBaseConnection` makes it easy to build, use and share your own connection implementations.", icon="💡")

"""
You can build your own Connection by extending the [built-in ExperimentalBaseConnection.](https://docs.streamlit.io/develop/api-reference/connections/st.connections.experimentalbaseconnection)
To demonstrate this, this app has a simple [DuckDB](https://duckdb.org/) Connection built in.
You can view the connection source code
[here](https://github.com/streamlit/release-demos/blob/master/1.22/st-experimental-connection/duckdb_connection/connection.py).
"""

"""
1. Create a new connection class that extends Streamlit's ExperimentalBaseConnection. It also needs the type
of the underlying connection object to be specified.

```python
from streamlit.connections import ExperimentalBaseConnection
import duckdb

class DuckDBConnection(ExperimentalBaseConnection[duckdb.DuckDBPyConnection])
```

2. Add a `_connect()` method that sets up and returns the underlying connection object. It can pull
secrets specific to the connection from the `self._secrets` property.

```python
def _connect(self, **kwargs) -> duckdb.DuckDBPyConnection:
    if 'database' in kwargs:
        db = kwargs.pop('database')
    else:
        db = self._secrets['database']
    return duckdb.connect(database=db, **kwargs)
```

3. Add a way to get the underlying connection object. ExperimentalBaseConnection has a `_instance` property that does this
by default. Most connections will want some domain-specific property or method that exposes this.

```python
def cursor(self) -> duckdb.DuckDBPyConnection:
    return self._instance.cursor()
```

4. Add any convenience read / getter methods. These should be wrapped with @st.cache_data by default,
and conform to the st.experimental_connection best practices.

```python
def query(self, query: str, ttl: int = 3600, **kwargs) -> pd.DataFrame:
    @cache_data(ttl=ttl)
    def _query(query: str, **kwargs) -> pd.DataFrame:
        cursor = self.cursor()
        cursor.execute(query, **kwargs)
        return cursor.df()
    
    return _query(query, **kwargs)
```

**:tada: That's it! You've implemented a minimal Connection class that is ready to be used with st.experimental_connection. :balloon:**
"""

with st.expander("To show it's that easy, see the DuckDB code running here :rocket:"):
    """
    You can view the DuckDB connection source code
    [here](https://github.com/streamlit/release-demos/blob/master/1.22/st-experimental-connection/duckdb_connection/connection.py).
    """

    with st.echo():
        from duckdb_connection import DuckDBConnection

        conn = st.experimental_connection("duckdb", type=DuckDBConnection, database=':memory:')
        conn

    "Let's insert some data with the underlying duckdb cursor"
    with st.echo():
        c = conn.cursor()
        # create a table
        c.execute("CREATE TABLE IF NOT EXISTS items(item VARCHAR, value DECIMAL(10,2), count INTEGER)")
        # drop any existing data from a prior run ;)
        c.execute("DELETE FROM items")
        # insert two items into the table
        c.execute("INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)")
        # insert a row using prepared statements
        c.execute("INSERT INTO items VALUES (?, ?, ?)", ['laptop', 2000, 1])

    "Now check out the awesome convenience method!"

    with st.echo():
        df = conn.query("select * from items")
        st.dataframe(df)


================================================
File: /python/api-examples-source/st-experimental-connection/util/release_helper.py
================================================
import streamlit as st


def create_avatar(contributor):
    return f"""
    <a href="https://www.github.com/{contributor}" title="{contributor}" target="_blank">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50">
              <clipPath id="clipCircle-{contributor}">
                <circle r="25" cx="25" cy="25"/>
              </clipPath>
              <image
                xlink:href="https://avatars.githubusercontent.com/{contributor}"
                width="50" height="50"
                clip-path="url(#clipCircle-{contributor})"
            />
          </svg>
      </a>
    """

def generate_contributors(contributors):
    avatar_badge = ""
    for contributor in contributors:
        avatar_badge += create_avatar(contributor)

    st.markdown(avatar_badge, unsafe_allow_html=True)

def create_static_notes(contributors, previous_version, current_version):
    st.write(f"""
        ### Release Details

        - If you'd like to know what _exactly_ went into this release, check out the [commit
        diff](https://github.com/streamlit/streamlit/compare/{previous_version}...{st.__version__}).
        - If you're curious, please see the source code in [Github](https://github.com/streamlit/release-demos/tree/{current_version}/{current_version}).

    """)

    if len(contributors):
        st.write("### Thanks for Contributing")
        generate_contributors(contributors)
        st.write(" ")

    st.write(f"""
        As always, thank you to [all our contributors](https://github.com/streamlit/streamlit/graphs/contributors) who help make Streamlit awesome!

        ---

        ### Connect With Us

        - We can be found at https://streamlit.io and https://twitter.com/streamlit
        - Come by
        [the forums](https://discuss.streamlit.io/c/official-announcements/6) if you'd like to ask questions,
        post awesome apps, or just say hi!
    """)


================================================
File: /python/api-examples-source/theming/charts.altair_chart.py
================================================
import altair as alt
import streamlit as st
from vega_datasets import data


@st.cache_data
def get_chart(use_container_width: bool):
    import altair as alt
    from vega_datasets import data

    source = data.cars()

    chart = (
        alt.Chart(source)
        .mark_circle()
        .encode(
            x="Horsepower",
            y="Miles_per_Gallon",
            color="Origin",
        )
        .interactive()
    )

    tab1, tab2 = st.tabs(["Streamlit theme (default)", "Altair native theme"])

    with tab1:
        st.altair_chart(
            chart, use_container_width=use_container_width, theme="streamlit"
        )
    with tab2:
        st.altair_chart(chart, use_container_width=use_container_width, theme=None)


try:
    get_chart(use_container_width=True)
except Exception as e:
    st.exception(e)


================================================
File: /python/api-examples-source/theming/charts.altair_custom_colors.py
================================================
import altair as alt
import streamlit as st
from vega_datasets import data


@st.cache_data
def get_chart(use_container_width: bool):
    import altair as alt
    from vega_datasets import data

    source = data.seattle_weather()

    scale = alt.Scale(
        domain=["sun", "fog", "drizzle", "rain", "snow"],
        range=["#e7ba52", "#a7a7a7", "#aec7e8", "#1f77b4", "#9467bd"],
    )
    color = alt.Color("weather:N", scale=scale)

    # We create two selections:
    # - a brush that is active on the top panel
    # - a multi-click that is active on sthe bottom panel
    brush = alt.selection_interval(encodings=["x"])
    click = alt.selection_multi(encodings=["color"])

    # Top panel is scatter plot of temperature vs time
    points = (
        alt.Chart()
        .mark_point()
        .encode(
            alt.X("monthdate(date):T", title="Date"),
            alt.Y(
                "temp_max:Q",
                title="Maximum Daily Temperature (C)",
                scale=alt.Scale(domain=[-5, 40]),
            ),
            color=alt.condition(brush, color, alt.value("lightgray")),
            size=alt.Size("precipitation:Q", scale=alt.Scale(range=[5, 200])),
        )
        .properties(width=550, height=300)
        .add_selection(brush)
        .transform_filter(click)
    )

    # Bottom panel is a bar chart of weather type
    bars = (
        alt.Chart()
        .mark_bar()
        .encode(
            x="count()",
            y="weather:N",
            color=alt.condition(click, color, alt.value("lightgray")),
        )
        .transform_filter(brush)
        .properties(
            width=550,
        )
        .add_selection(click)
    )

    chart = alt.vconcat(points, bars, data=source, title="Seattle Weather: 2012-2015")

    tab1, tab2 = st.tabs(["Streamlit theme (default)", "Altair native theme"])

    with tab1:
        st.altair_chart(
            chart, use_container_width=use_container_width, theme="streamlit"
        )
    with tab2:
        st.altair_chart(chart, use_container_width=use_container_width, theme=None)


try:
    get_chart(use_container_width=True)
except Exception as e:
    st.exception(e)


================================================
File: /python/api-examples-source/theming/charts.plotly_chart_theme.py
================================================
import plotly.express as px
import streamlit as st


@st.cache_data
def get_chart(use_container_width: bool):
    df = px.data.gapminder()

    fig = px.scatter(
        df.query("year==2007"),
        x="gdpPercap",
        y="lifeExp",
        size="pop",
        color="continent",
        hover_name="country",
        log_x=True,
        size_max=60,
    )

    tab1, tab2 = st.tabs(["Streamlit theme (default)", "Plotly native theme"])
    with tab1:
        st.plotly_chart(fig, use_container_width=use_container_width, theme="streamlit")
    with tab2:
        st.plotly_chart(fig, use_container_width=use_container_width, theme=None)


try:
    get_chart(use_container_width=True)
except Exception as e:
    st.exception(e)


================================================
File: /python/api-examples-source/theming/charts.plotly_custom_colors.py
================================================
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st


@st.cache_data
def get_chart_1111(use_conatiner_width: bool):
    st.subheader("Define a custom colorscale")
    df = px.data.iris()  # replace with your own data source
    fig = px.scatter(
        df,
        x="sepal_width",
        y="sepal_length",
        color="sepal_length",
        color_continuous_scale="reds",
    )

    tab1, tab2 = st.tabs(["Streamlit theme (default)", "Plotly native theme"])
    with tab1:
        st.plotly_chart(fig, use_conatiner_width=use_conatiner_width, theme="streamlit")
    with tab2:
        st.plotly_chart(fig, use_conatiner_width=use_conatiner_width, theme=None)


try:
    get_chart_1111(use_conatiner_width=True)
except Exception as e:
    st.exception(e)


================================================
File: /python/api-examples-source/theming/charts.vega_lite_theme.py
================================================
import streamlit as st
from vega_datasets import data


@st.cache_data
def get_chart(use_container_width: bool):
    source = data.cars()

    chart = {
        "mark": "point",
        "encoding": {
            "x": {
                "field": "Horsepower",
                "type": "quantitative",
            },
            "y": {
                "field": "Miles_per_Gallon",
                "type": "quantitative",
            },
            "color": {"field": "Origin", "type": "nominal"},
            "shape": {"field": "Origin", "type": "nominal"},
        },
    }

    tab1, tab2 = st.tabs(["Streamlit theme (default)", "Vega-Lite native theme"])

    with tab1:
        st.vega_lite_chart(
            source, chart, use_container_width=use_container_width, theme="streamlit"
        )
    with tab2:
        st.vega_lite_chart(
            source, chart, use_container_width=use_container_width, theme=None
        )


try:
    get_chart(use_container_width=True)
except Exception as e:
    st.exception(e)


================================================
File: /python/api-examples-source/theming/requirements.txt
================================================
streamlit>=1.41.0
vega_datasets
altair==4.2.0
plotly==5.13.0

================================================
File: /python/api-examples-source/tutorials/create-a-simple-grid.py
================================================
import streamlit as st
from random import randint, choices


def create_grid(row_count, col_count, height):
    grid = []
    for row_num in range(row_count):
        row = st.columns(col_count)
        grid.append([col.container(border=True, height=height) for col in row])
    return grid


def pick_flowers(n):
    flowers = [
        ":tulip:",
        ":cherry_blossom:",
        ":rose:" ":hibiscus:",
        ":sunflower:",
        ":blossom:",
    ]
    return choices(flowers, k=n)


grid = create_grid(3, 5, 120)
for tile in [tile for row in grid for tile in row]:
    bouquet = "".join(pick_flowers(randint(2, 12)))
    tile.title(bouquet)


================================================
File: /python/api-examples-source/tutorials/requirements.txt
================================================
streamlit>=1.41.0


================================================
File: /python/api-examples-source/tutorials/chat/requirements.txt
================================================
lorem

================================================
File: /python/api-examples-source/tutorials/chat/tutorial-chat-feedback.py
================================================
import streamlit as st
import time


def chat_stream(prompt):
    response = f'You said, "{prompt}" ...interesting.'
    for char in response:
        yield char
        time.sleep(0.02)


def save_feedback(index):
    st.session_state.history[index]["feedback"] = st.session_state[f"feedback_{index}"]


if "history" not in st.session_state:
    st.session_state.history = []

for i, message in enumerate(st.session_state.history):
    with st.chat_message(message["role"]):
        st.write(message["content"])
        if message["role"] == "assistant":
            feedback = message.get("feedback", None)
            st.session_state[f"feedback_{i}"] = feedback
            st.feedback(
                "thumbs",
                key=f"feedback_{i}",
                disabled=feedback is not None,
                on_change=save_feedback,
                args=[i],
            )

if prompt := st.chat_input("Say something"):
    with st.chat_message("user"):
        st.write(prompt)
    st.session_state.history.append({"role": "user", "content": prompt})
    with st.chat_message("assistant"):
        response = st.write_stream(chat_stream(prompt))
        st.feedback(
            "thumbs",
            key=f"feedback_{len(st.session_state.history)}",
            on_change=save_feedback,
            args=[len(st.session_state.history)],
        )
    st.session_state.history.append({"role": "assistant", "content": response})


================================================
File: /python/api-examples-source/tutorials/chat/tutorial-chat-revision.py
================================================
import streamlit as st
import lorem
from random import randint
import time

if "stage" not in st.session_state:
    st.session_state.stage = "user"
    st.session_state.history = []
    st.session_state.pending = None
    st.session_state.validation = {}


def chat_stream():
    for i in range(randint(3, 9)):
        yield lorem.sentence() + " "
        time.sleep(0.2)


def validate(response):
    response_sentences = response.split(". ")
    response_sentences = [
        sentence.strip(". ") + "."
        for sentence in response_sentences
        if sentence.strip(". ") != ""
    ]
    validation_list = [
        True if sentence.count(" ") > 4 else False for sentence in response_sentences
    ]
    return response_sentences, validation_list


def add_highlights(response_sentences, validation_list, bg="red", text="red"):
    return [
        f":{text}[:{bg}-background[" + sentence + "]]" if not is_valid else sentence
        for sentence, is_valid in zip(response_sentences, validation_list)
    ]


for message in st.session_state.history:
    with st.chat_message(message["role"]):
        st.write(message["content"])

if st.session_state.stage == "user":
    if user_input := st.chat_input("Enter a prompt"):
        st.session_state.history.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.write(user_input)
        with st.chat_message("assistant"):
            response = st.write_stream(chat_stream())
            st.session_state.pending = response
            st.session_state.stage = "validate"
            st.rerun()

elif st.session_state.stage == "validate":
    st.chat_input("Accept, correct, or rewrite the answer above.", disabled=True)
    response_sentences, validation_list = validate(st.session_state.pending)
    highlighted_sentences = add_highlights(response_sentences, validation_list)
    with st.chat_message("assistant"):
        st.markdown(" ".join(highlighted_sentences))
        st.divider()
        cols = st.columns(3)
        if cols[0].button(
            "Correct errors", type="primary", disabled=all(validation_list)
        ):
            st.session_state.validation = {
                "sentences": response_sentences,
                "valid": validation_list,
            }
            st.session_state.stage = "correct"
            st.rerun()
        if cols[1].button("Accept"):
            st.session_state.history.append(
                {"role": "assistant", "content": st.session_state.pending}
            )
            st.session_state.pending = None
            st.session_state.validation = {}
            st.session_state.stage = "user"
            st.rerun()
        if cols[2].button("Rewrite answer", type="tertiary"):
            st.session_state.stage = "rewrite"
            st.rerun()

elif st.session_state.stage == "correct":
    st.chat_input("Accept, correct, or rewrite the answer above.", disabled=True)
    response_sentences = st.session_state.validation["sentences"]
    validation_list = st.session_state.validation["valid"]
    highlighted_sentences = add_highlights(
        response_sentences, validation_list, "gray", "gray"
    )
    if not all(validation_list):
        focus = validation_list.index(False)
        highlighted_sentences[focus] = ":red[:red" + highlighted_sentences[focus][11:]
    else:
        focus = None
    with st.chat_message("assistant"):
        st.markdown(" ".join(highlighted_sentences))
        st.divider()
        if focus is not None:
            new_sentence = st.text_input(
                "Replacement text:", value=response_sentences[focus]
            )
            cols = st.columns(2)
            if cols[0].button(
                "Update", type="primary", disabled=len(new_sentence.strip()) < 1
            ):
                st.session_state.validation["sentences"][focus] = (
                    new_sentence.strip(". ") + "."
                )
                st.session_state.validation["valid"][focus] = True
                st.session_state.pending = " ".join(
                    st.session_state.validation["sentences"]
                )
                st.rerun()
            if cols[1].button("Remove"):
                st.session_state.validation["sentences"].pop(focus)
                st.session_state.validation["valid"].pop(focus)
                st.session_state.pending = " ".join(
                    st.session_state.validation["sentences"]
                )
                st.rerun()
        else:
            cols = st.columns(2)
            if cols[0].button("Accept", type="primary"):
                st.session_state.history.append(
                    {"role": "assistant", "content": st.session_state.pending}
                )
                st.session_state.pending = None
                st.session_state.validation = {}
                st.session_state.stage = "user"
                st.rerun()
            if cols[1].button("Re-validate"):
                st.session_state.validation = {}
                st.session_state.stage = "validate"
                st.rerun()

elif st.session_state.stage == "rewrite":
    st.chat_input("Accept, correct, or rewrite the answer above.", disabled=True)
    with st.chat_message("assistant"):
        new = st.text_area("Rewrite the answer", value=st.session_state.pending)
        if st.button(
            "Update", type="primary", disabled=new is None or new.strip(". ") == ""
        ):
            st.session_state.history.append({"role": "assistant", "content": new})
            st.session_state.pending = None
            st.session_state.validation = {}
            st.session_state.stage = "user"
            st.rerun()


================================================
File: /python/api-examples-source/tutorials/custom-navigation/app.py
================================================
import streamlit as st
from menu import menu

st.set_option("client.showSidebarNavigation", False)

# Initialize st.session_state.role to None
if "role" not in st.session_state:
    st.session_state.role = None

# Retrieve the role from Session State to initialize the widget
st.session_state._role = st.session_state.role


def set_role():
    # Callback function to save the role selection to Session State
    st.session_state.role = st.session_state._role


# Selectbox to choose role
st.selectbox(
    "Select your role:",
    [None, "user", "admin", "super-admin"],
    key="_role",
    on_change=set_role,
)
menu() # Render the dynamic menu!


================================================
File: /python/api-examples-source/tutorials/custom-navigation/menu.py
================================================
import streamlit as st


def authenticated_menu():
    # Show a navigation menu for authenticated users
    st.sidebar.page_link("app.py", label="Switch accounts")
    st.sidebar.page_link("pages/user.py", label="Your profile")
    if st.session_state.role in ["admin", "super-admin"]:
        st.sidebar.page_link("pages/admin.py", label="Manage users")
        st.sidebar.page_link(
            "pages/super-admin.py",
            label="Manage admin access",
            disabled=st.session_state.role != "super-admin",
        )


def unauthenticated_menu():
    # Show a navigation menu for unauthenticated users
    st.sidebar.page_link("app.py", label="Log in")


def menu():
    # Determine if a user is logged in or not, then show the correct
    # navigation menu
    if "role" not in st.session_state or st.session_state.role is None:
        unauthenticated_menu()
        return
    authenticated_menu()


def menu_with_redirect():
    # Redirect users to the main page if not logged in, otherwise continue to
    # render the navigation menu
    if "role" not in st.session_state or st.session_state.role is None:
        st.switch_page("app.py")
    menu()


================================================
File: /python/api-examples-source/tutorials/custom-navigation/requirements.txt
================================================
streamlit>=1.41.0


================================================
File: /python/api-examples-source/tutorials/custom-navigation/pages/admin.py
================================================
import streamlit as st
from menu import menu_with_redirect

st.set_option("client.showSidebarNavigation", False)

# Redirect to app.py if not logged in, otherwise show the navigation menu
menu_with_redirect()

# Verify the user's role
if st.session_state.role not in ["admin", "super-admin"]:
    st.warning("You do not have permission to view this page.")
    st.stop()

st.title("This page is available to all admins")
st.markdown(f"You are currently logged with the role of {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/custom-navigation/pages/super-admin.py
================================================
import streamlit as st
from menu import menu_with_redirect

st.set_option("client.showSidebarNavigation", False)

# Redirect to app.py if not logged in, otherwise show the navigation menu
menu_with_redirect()

# Verify the user's role
if st.session_state.role not in ["super-admin"]:
    st.warning("You do not have permission to view this page.")
    st.stop()

st.title("This page is available to super-admins")
st.markdown(f"You are currently logged with the role of {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/custom-navigation/pages/user.py
================================================
import streamlit as st
from menu import menu_with_redirect

st.set_option("client.showSidebarNavigation", False)

# Redirect to app.py if not logged in, otherwise show the navigation menu
menu_with_redirect()

st.title("This page is available to all users")
st.markdown(f"You are currently logged with the role of {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/settings.py
================================================
import streamlit as st

st.header("Settings")
st.write(f"You are logged in as {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/streamlit_app.py
================================================
import streamlit as st

if "role" not in st.session_state:
    st.session_state.role = None

ROLES = [None, "Requester", "Responder", "Admin"]


def login():

    st.header("Log in")
    role = st.selectbox("Choose your role", ROLES)

    if st.button("Log in"):
        st.session_state.role = role
        st.rerun()


def logout():
    st.session_state.role = None
    st.rerun()


role = st.session_state.role

logout_page = st.Page(logout, title="Log out", icon=":material/logout:")
settings = st.Page("settings.py", title="Settings", icon=":material/settings:")
request_1 = st.Page(
    "request/request_1.py",
    title="Request 1",
    icon=":material/help:",
    default=(role == "Requester"),
)
request_2 = st.Page(
    "request/request_2.py", title="Request 2", icon=":material/bug_report:"
)
respond_1 = st.Page(
    "respond/respond_1.py",
    title="Respond 1",
    icon=":material/healing:",
    default=(role == "Responder"),
)
respond_2 = st.Page(
    "respond/respond_2.py", title="Respond 2", icon=":material/handyman:"
)
admin_1 = st.Page(
    "admin/admin_1.py",
    title="Admin 1",
    icon=":material/person_add:",
    default=(role == "Admin"),
)
admin_2 = st.Page("admin/admin_2.py", title="Admin 2", icon=":material/security:")

account_pages = [logout_page, settings]
request_pages = [request_1, request_2]
respond_pages = [respond_1, respond_2]
admin_pages = [admin_1, admin_2]

st.title("Request manager")
st.logo(
    "python/api-examples-source/tutorials/dynamic-navigation/images/horizontal_blue.png",
    icon_image="python/api-examples-source/tutorials/dynamic-navigation/images/icon_blue.png",
)

page_dict = {}
if st.session_state.role in ["Requester", "Admin"]:
    page_dict["Request"] = request_pages
if st.session_state.role in ["Responder", "Admin"]:
    page_dict["Respond"] = respond_pages
if st.session_state.role == "Admin":
    page_dict["Admin"] = admin_pages

if len(page_dict) > 0:
    pg = st.navigation({"Account": account_pages} | page_dict)
else:
    pg = st.navigation([st.Page(login)])

pg.run()


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/admin/admin_1.py
================================================
import streamlit as st

st.header("Admin 1")
st.write(f"You are logged in as {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/admin/admin_2.py
================================================
import streamlit as st

st.header("Admin 2")
st.write(f"You are logged in as {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/request/request_1.py
================================================
import streamlit as st

st.header("Request 1")
st.write(f"You are logged in as {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/request/request_2.py
================================================
import streamlit as st

st.header("Request 2")
st.write(f"You are logged in as {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/respond/respond_1.py
================================================
import streamlit as st

st.header("Respond 1")
st.write(f"You are logged in as {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/dynamic-navigation/respond/respond_2.py
================================================
import streamlit as st

st.header("Respond 2")
st.write(f"You are logged in as {st.session_state.role}.")


================================================
File: /python/api-examples-source/tutorials/elements/charts/annotations-in-altair.py
================================================
import streamlit as st
import altair as alt
import pandas as pd
from vega_datasets import data


@st.cache_data
def get_data():
    source = data.stocks()
    source = source[source.date.gt("2004-01-01")]
    return source


stock_data = get_data()

hover = alt.selection_single(
    fields=["date"],
    nearest=True,
    on="mouseover",
    empty="none",
)

lines = (
    alt.Chart(stock_data, title="Evolution of stock prices")
    .mark_line()
    .encode(
        x="date",
        y="price",
        color="symbol",
    )
)

points = lines.transform_filter(hover).mark_circle(size=65)

tooltips = (
    alt.Chart(stock_data)
    .mark_rule()
    .encode(
        x="yearmonthdate(date)",
        y="price",
        opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),
        tooltip=[
            alt.Tooltip("date", title="Date"),
            alt.Tooltip("price", title="Price (USD)"),
        ],
    )
    .add_selection(hover)
)

data_layer = lines + points + tooltips


event_picker = alt.selection_point("events")


ANNOTATIONS = [
    ("Sep 01, 2007", 400, "🙂", "Something's going well for GOOG & AAPL."),
    ("Nov 01, 2008", 180, "🙂", "The market is recovering."),
    ("Dec 01, 2007", 700, "😱", "Something's going wrong for GOOG & AAPL."),
    ("Dec 01, 2009", 650, "😱", "A hiccup for GOOG."),
]
annotations_df = pd.DataFrame(
    ANNOTATIONS, columns=["date", "y", "marker", "description"]
)
annotations_df.date = pd.to_datetime(annotations_df.date)

annotation_layer = (
    alt.Chart(annotations_df)
    .mark_text(size=20, dx=-8, dy=-10, align="left")
    .encode(x="date:T", y=alt.Y("y:Q"), text="marker", tooltip="description")
)

combined_chart = data_layer + annotation_layer
st.altair_chart(combined_chart, use_container_width=True)

================================================
File: /python/api-examples-source/tutorials/elements/charts/requirements.txt
================================================
vega_datasets
streamlit==1.38.0

================================================
File: /python/api-examples-source/tutorials/elements/dataframes/dataframe-row-selections.py
================================================
import random

import numpy as np
import pandas as pd
import streamlit as st


@st.cache_data
def get_profile_dataset(number_of_items: int = 20, seed: int = 0) -> pd.DataFrame:
    from faker import Faker

    new_data = []

    fake = Faker()
    random.seed(seed)
    Faker.seed(seed)

    for i in range(number_of_items):
        profile = fake.profile()
        new_data.append(
            {
                "avatar": f"https://picsum.photos/400/200?lock={i}",
                "name": profile["name"],
                "daily_activity": np.random.rand(25),
                "activity": np.random.randint(2, 90, size=12),
            }
        )

    profile_df = pd.DataFrame(new_data)
    return profile_df


column_configuration = {
    "name": st.column_config.TextColumn(
        "Name", help="The name of the user", max_chars=100, width="medium"
    ),
    "avatar": st.column_config.ImageColumn("Avatar", help="The user's avatar"),
    "activity": st.column_config.LineChartColumn(
        "Activity (1 year)",
        help="The user's activity over the last 1 year",
        width="large",
        y_min=0,
        y_max=100,
    ),
    "daily_activity": st.column_config.BarChartColumn(
        "Activity (daily)",
        help="The user's activity in the last 25 days",
        width="medium",
        y_min=0,
        y_max=1,
    ),
}

select, compare = st.tabs(["Select members", "Compare selected"])

with select:
    st.header("All members")

    df = get_profile_dataset()

    event = st.dataframe(
        df,
        column_config=column_configuration,
        use_container_width=True,
        hide_index=True,
        on_select="rerun",
        selection_mode="multi-row",
    )

    st.header("Selected members")
    people = event.selection.rows
    filtered_df = df.iloc[people]
    st.dataframe(
        filtered_df,
        column_config=column_configuration,
        use_container_width=True,
    )

with compare:
    activity_df = {}
    for person in people:
        activity_df[df.iloc[person]["name"]] = df.iloc[person]["activity"]
    activity_df = pd.DataFrame(activity_df)

    daily_activity_df = {}
    for person in people:
        daily_activity_df[df.iloc[person]["name"]] = df.iloc[person]["daily_activity"]
    daily_activity_df = pd.DataFrame(daily_activity_df)

    if len(people) > 0:
        st.header("Daily activity comparison")
        st.bar_chart(daily_activity_df)
        st.header("Yearly activity comparison")
        st.line_chart(activity_df)
    else:
        st.markdown("No members selected.")


================================================
File: /python/api-examples-source/tutorials/elements/dataframes/requirements.txt
================================================
Faker
streamlit==1.38.0

================================================
File: /python/api-examples-source/tutorials/execution-flow/fragments/tutorial-fragment-multiple-container.py
================================================
import streamlit as st
import time

st.title("Cats!")

row1 = st.columns(3)
row2 = st.columns(3)

grid = [col.container(height=200) for col in row1 + row2]
safe_grid = [card.empty() for card in grid]


def black_cats():
    time.sleep(1)
    st.title("🐈‍⬛ 🐈‍⬛")
    st.markdown("🐾 🐾 🐾 🐾")


def orange_cats():
    time.sleep(1)
    st.title("🐈 🐈")
    st.markdown("🐾 🐾 🐾 🐾")


@st.fragment
def herd_black_cats(card_a, card_b, card_c):
    st.button("Herd the black cats")
    container_a = card_a.container()
    container_b = card_b.container()
    container_c = card_c.container()
    with container_a:
        black_cats()
    with container_b:
        black_cats()
    with container_c:
        black_cats()


@st.fragment
def herd_orange_cats(card_a, card_b, card_c):
    st.button("Herd the orange cats")
    container_a = card_a.container()
    container_b = card_b.container()
    container_c = card_c.container()
    with container_a:
        orange_cats()
    with container_b:
        orange_cats()
    with container_c:
        orange_cats()


with st.sidebar:
    herd_black_cats(grid[0].empty(), grid[2].empty(), grid[4].empty())
    herd_orange_cats(grid[1].empty(), grid[3].empty(), grid[5].empty())
    st.button("Herd all the cats")

================================================
File: /python/api-examples-source/tutorials/execution-flow/fragments/tutorial-fragment-rerun.py
================================================
import streamlit as st
import pandas as pd
import numpy as np
from datetime import date, timedelta
import string
import time


@st.cache_data
def get_data():
    """Generate random sales data for Widget A through Widget Z"""

    product_names = ["Widget " + letter for letter in string.ascii_uppercase]
    average_daily_sales = np.random.normal(1_000, 300, len(product_names))
    products = dict(zip(product_names, average_daily_sales))

    data = pd.DataFrame({})
    sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1))
    for product, sales in products.items():
        data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)
    data.index = sales_dates
    data.index = data.index.date
    return data


@st.fragment
def show_daily_sales(data):
    time.sleep(1)
    with st.container(height=100):
        selected_date = st.date_input(
            "Pick a day ",
            value=date(2023, 1, 1),
            min_value=date(2023, 1, 1),
            max_value=date(2023, 12, 31),
            key="selected_date",
        )

    if "previous_date" not in st.session_state:
        st.session_state.previous_date = selected_date
    previous_date = st.session_state.previous_date
    st.session_state.previous_date = selected_date
    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)
    if is_new_month:
        st.rerun()

    with st.container(height=510):
        st.header(f"Best sellers, {selected_date:%m/%d/%y}")
        top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]
        cols = st.columns([1, 4])
        cols[0].dataframe(top_ten)
        cols[1].bar_chart(top_ten)

    with st.container(height=510):
        st.header(f"Worst sellers, {selected_date:%m/%d/%y}")
        bottom_ten = data.loc[selected_date].sort_values()[0:10]
        cols = st.columns([1, 4])
        cols[0].dataframe(bottom_ten)
        cols[1].bar_chart(bottom_ten)


def show_monthly_sales(data):
    time.sleep(1)
    selected_date = st.session_state.selected_date
    this_month = selected_date.replace(day=1)
    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)

    st.container(height=100, border=False)
    with st.container(height=510):
        st.header(f"Daily sales for all products, {this_month:%B %Y}")
        monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]
        st.write(monthly_sales)
    with st.container(height=510):
        st.header(f"Total sales for all products, {this_month:%B %Y}")
        st.bar_chart(monthly_sales.sum())


st.set_page_config(layout="wide")

st.title("Daily vs monthly sales, by product")
st.markdown("This app shows the 2023 daily sales for Widget A through Widget Z.")

data = get_data()
daily, monthly = st.columns(2)
with daily:
    show_daily_sales(data)
with monthly:
    show_monthly_sales(data)

================================================
File: /python/api-examples-source/tutorials/execution-flow/fragments/tutorial-fragment-streaming.py
================================================
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta


def get_recent_data(last_timestamp):
    """Generate and return data from last timestamp to now, at most 60 seconds."""
    now = datetime.now()
    if now - last_timestamp > timedelta(seconds=60):
        last_timestamp = now - timedelta(seconds=60)
    sample_time = timedelta(seconds=0.5)  # time between data points
    next_timestamp = last_timestamp + sample_time
    timestamps = np.arange(next_timestamp, now, sample_time)
    sample_values = np.random.randn(len(timestamps), 2)

    data = pd.DataFrame(sample_values, index=timestamps, columns=["A", "B"])
    return data


if "data" not in st.session_state:
    st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))

if "stream" not in st.session_state:
    st.session_state.stream = False


def toggle_streaming():
    st.session_state.stream = not st.session_state.stream


st.title("Data feed")
st.sidebar.slider(
    "Check for updates every: (seconds)", 0.5, 5.0, value=1.0, key="run_every"
)
st.sidebar.button(
    "Start streaming", disabled=st.session_state.stream, on_click=toggle_streaming
)
st.sidebar.button(
    "Stop streaming", disabled=not st.session_state.stream, on_click=toggle_streaming
)

if st.session_state.stream is True:
    run_every = st.session_state.run_every
else:
    run_every = None


@st.fragment(run_every=run_every)
def show_latest_data():
    last_timestamp = st.session_state.data.index[-1]
    st.session_state.data = pd.concat(
        [st.session_state.data, get_recent_data(last_timestamp)]
    )
    st.session_state.data = st.session_state.data[-100:]
    st.line_chart(st.session_state.data)


show_latest_data()

================================================
File: /python/api-examples-source/utilities.switch_page/requirements.txt
================================================
streamlit>=1.41.0


================================================
File: /python/api-examples-source/utilities.switch_page/your_app.py
================================================
import streamlit as st

if st.button("Home"):
    st.switch_page("your_app.py")
if st.button("Page 1"):
    st.switch_page("pages/page_1.py")
if st.button("Page 2"):
    st.switch_page("pages/page_2.py")


================================================
File: /python/api-examples-source/utilities.switch_page/pages/page_1.py
================================================
import streamlit as st

if st.button("Home"):
    st.switch_page("your_app.py")
if st.button("Page 1"):
    st.switch_page("pages/page_1.py")
if st.button("Page 2"):
    st.switch_page("pages/page_2.py")


================================================
File: /python/api-examples-source/utilities.switch_page/pages/page_2.py
================================================
import streamlit as st

if st.button("Home"):
    st.switch_page("your_app.py")
if st.button("Page 1"):
    st.switch_page("pages/page_1.py")
if st.button("Page 2"):
    st.switch_page("pages/page_2.py")


================================================
File: /python/api-examples-source/widget.page_link/requirements.txt
================================================
streamlit>=1.41.0


================================================
File: /python/api-examples-source/widget.page_link/your_app.py
================================================
import streamlit as st

st.page_link("your_app.py", label="Home", icon="🏠")
st.page_link("pages/page_1.py", label="Page 1", icon="1️⃣")
st.page_link("pages/page_2.py", label="Page 2", icon="2️⃣", disabled=True)
st.page_link("http://www.google.com", label="Google", icon="🌎")


================================================
File: /python/api-examples-source/widget.page_link/pages/page_1.py
================================================
import streamlit as st

st.page_link("your_app.py", label="Home", icon="🏠")
st.page_link("pages/page_1.py", label="Page 1", icon="1️⃣")
st.page_link("pages/page_2.py", label="Page 2", icon="2️⃣", disabled=True)
st.page_link("http://www.google.com", label="Google", icon="🌎")


================================================
File: /python/api-examples-source/widget.page_link/pages/page_2.py
================================================
import streamlit as st

st.page_link("your_app.py", label="Home", icon="🏠")
st.page_link("pages/page_1.py", label="Page 1", icon="1️⃣")
st.page_link("pages/page_2.py", label="Page 2", icon="2️⃣", disabled=True)
st.page_link("http://www.google.com", label="Google", icon="🌎")


================================================
File: /python/concept-source/multithreading-expose-context.py
================================================
import streamlit as st
from streamlit.runtime.scriptrunner import add_script_run_ctx, get_script_run_ctx
import time
from threading import Thread


class WorkerThread(Thread):
    def __init__(self, delay, target):
        super().__init__()
        self.delay = delay
        self.target = target

    def run(self):
        # runs in custom thread, but can call Streamlit APIs
        start_time = time.time()
        time.sleep(self.delay)
        end_time = time.time()
        self.target.write(f"start: {start_time}, end: {end_time}")


delays = [5, 4, 3, 2, 1]
result_containers = []
for i, delay in enumerate(delays):
    st.header(f"Thread {i}")
    result_containers.append(st.container())

threads = [
    WorkerThread(delay, container)
    for delay, container in zip(delays, result_containers)
]
for thread in threads:
    add_script_run_ctx(thread, get_script_run_ctx())
    thread.start()

for thread in threads:
    thread.join()

st.button("Rerun")


================================================
File: /python/concept-source/multithreading-no-streamlit-batched.py
================================================
import streamlit as st
import time
from threading import Thread


class WorkerThread(Thread):
    def __init__(self, delay):
        super().__init__()
        self.delay = delay
        self.return_value = None

    def run(self):
        start_time = time.time()
        time.sleep(self.delay)
        end_time = time.time()
        self.return_value = f"start: {start_time}, end: {end_time}"


delays = [5, 4, 3, 2, 1]
threads = [WorkerThread(delay) for delay in delays]
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
for i, thread in enumerate(threads):
    st.header(f"Thread {i}")
    st.write(thread.return_value)

st.button("Rerun")


================================================
File: /python/concept-source/multithreading-no-streamlit-iterative.py
================================================
import streamlit as st
import time
from threading import Thread


class WorkerThread(Thread):
    def __init__(self, delay):
        super().__init__()
        self.delay = delay
        self.return_value = None

    def run(self):
        start_time = time.time()
        time.sleep(self.delay)
        end_time = time.time()
        self.return_value = f"start: {start_time}, end: {end_time}"


delays = [5, 4, 3, 2, 1]
result_containers = []
for i, delay in enumerate(delays):
    st.header(f"Thread {i}")
    result_containers.append(st.container())

threads = [WorkerThread(delay) for delay in delays]
for thread in threads:
    thread.start()
thread_lives = [True] * len(threads)

while any(thread_lives):
    for i, thread in enumerate(threads):
        if thread_lives[i] and not thread.is_alive():
            result_containers[i].write(thread.return_value)
            thread_lives[i] = False
    time.sleep(0.5)

for thread in threads:
    thread.join()

st.button("Rerun")


================================================
File: /python/concept-source/requirements.txt
================================================
streamlit>=1.41.0

================================================
File: /python/tutorial-source/llm-18-lines-of-code/requirements.txt
================================================
streamlit>=1.41.0
langchain-openai


================================================
File: /python/tutorial-source/llm-18-lines-of-code/streamlit_app.py
================================================
import streamlit as st
from langchain_openai.chat_models import ChatOpenAI

st.title("🦜🔗 Quickstart App")

openai_api_key = st.sidebar.text_input("OpenAI API Key", type="password")


def generate_response(input_text):
    model = ChatOpenAI(temperature=0.7, api_key=openai_api_key)
    st.info(model.invoke(input_text))


with st.form("my_form"):
    text = st.text_area(
        "Enter text:",
        "What are the three key pieces of advice for learning how to code?",
    )
    submitted = st.form_submit_button("Submit")
    if not openai_api_key.startswith("sk-"):
        st.warning("Please enter your OpenAI API key!", icon="⚠")
    if submitted and openai_api_key.startswith("sk-"):
        generate_response(text)


================================================
File: /python/.streamlit/local_id.txt
================================================
60ffa7be65c0595315696a67

================================================
File: /python/.streamlit/local_uuid.txt
================================================
c789bd11-3737-4cbf-a1da-be180684e27d

================================================
File: /python/.vscode/launch.json
================================================
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Python: Current File",
      "type": "python",
      "request": "launch",
      "program": "${file}",
      "console": "integratedTerminal",
      "justMyCode": false
    }
  ]
}


================================================
File: /scripts/build-offline-docs.js
================================================
const matter = require("gray-matter");
const puppeteer = require("puppeteer");
const path = require("path");
const fs = require("fs");

let browser;

const getSitemapLinks = async () => {
  // Launch puppeteer
  browser = await puppeteer.launch();

  console.log("Getting the URLs from the menu...");

  const menuFile = path.join(__dirname, "../content/menu.md");
  const fileContents = fs.readFileSync(menuFile, "utf8");
  const matterResult = matter(fileContents);
  const urls = matterResult.data.site_menu;

  console.log(
    `Finished getting the URLs from the menu. Got ${urls.length} entries`
  );

  console.log("Moving on to creating PDFs for these pages...");

  urls.map((url, index) => (url.order = index));

  const promises = urls.map((page) => getPDFs(page));

  Promise.all(promises).then((results) => {
    console.log("Done creating all PDFs. Exiting the process!");
    process.exit();
  });
};

// Function to go to the page, download the pdf, and close it
const getPDFs = async (url) => {
  console.log(`Creating PDF for ${url.url}...`);

  // If it's an external URL, skip it
  if (url.url.includes("http")) {
    return;
  }

  // Puppeteer stuff
  const page = await browser.newPage();
  await page.setDefaultNavigationTimeout(0);
  await page.goto(`http://localhost:3000${url.url}`, {
    waitUntil: ["networkidle2"],
  });
  await page.emulateMediaType("print");

  const pageName = `${url.order}${url.url.replaceAll("/", "-")}`;

  // Creating the PDF
  await page.pdf({
    path: `public/pdf/pages/${pageName}.pdf`,
    format: "a4",
  });

  console.log(`Done! Created PDF for ${url.url}`);
  page.close();
};

getSitemapLinks();


================================================
File: /scripts/build-search-index.js
================================================
const dotenv = require("dotenv");
const fs = require("fs");
const path = require("path");
const utils = require("../lib/utils.js");
const contentDirectory = path.join(process.cwd(), ".next/server/pages");
const parser = require("node-html-parser");
const algoliasearch = require("algoliasearch");
const { convert } = require("html-to-text");

const SKIP_THESE = [
  "/menu",
  "/404",
  "/500",
  "/develop/api-reference/caching-and-state/st.experimental_get_query_params",
  "/develop/api-reference/caching-and-state/st.experimental_set_query_params",
  "/develop/api-reference/connections/st.connections.experimentalbaseconnection",
  "/develop/api-reference/connections/st.experimental_connection",
  "/develop/api-reference/caching-and-state/st.experimental_memo",
  "/develop/api-reference/caching-and-state/st.experimental_singleton",
  "/develop/api-reference/execution-flow/st.experimental_rerun",
  "/develop/api-reference/data/st.experimental_data_editor",
];

function getAllFilesInDirectory(articleDirectory, files) {
  files = files ? files : [];
  fs.readdirSync(articleDirectory).forEach(function (file) {
    const subpath = path.join(articleDirectory, file);
    if (fs.lstatSync(subpath).isDirectory()) {
      getAllFilesInDirectory(subpath, files);
    } else {
      files.push(subpath);
    }
  });
  return files;
}

(async function () {
  dotenv.config();

  console.log("Updating search index through Algolia...");

  // Let's check that we have a .next folder and then parse through the HTML files.
  const pages = [];
  const data = {};
  const to_index = [];
  let menu;

  files = getAllFilesInDirectory(contentDirectory);

  for (const index in files) {
    if (files[index].endsWith(".html")) {
      pages.push(files[index]);
    }
    if (files[index].endsWith(".json")) {
      const url = files[index].split(contentDirectory)[1].split(".json")[0];
      data[url] = files[index];
    }
  }

  console.log(`... found ${pages.length} pages to index.`);

  for (const index in pages) {
    let icon;
    let color;
    let category;
    let breadCrumbs;
    // Parse each HTML file and get the content we need
    const contents = fs.readFileSync(pages[index], "utf8");
    const url = pages[index]
      .split(contentDirectory)[1]
      .match(/^(.*?)\.html$/)[1];

    if (url in data) {
      meta = JSON.parse(fs.readFileSync(data[url], "utf8"));
      if ("menu" in meta.pageProps) {
        menu = meta.pageProps.menu;
        breadCrumbs = utils.breadcrumbsForSlug(menu, url);
        if (breadCrumbs.length > 0) {
          category = breadCrumbs[0].name;
          icon = breadCrumbs[0].icon ? breadCrumbs[0].icon : "text_snippet";
          color = breadCrumbs[0].color ? breadCrumbs[0].color : "orange-70";
        }
      }
    }

    if (SKIP_THESE.includes(url)) {
      console.warn(`!!! Skipping ${url} because you told me to.`);
      continue;
    }

    const root = parser.parse(contents);
    const doc_title = root.querySelector("title");

    // Clean up some tags we don't want, like:
    // 1. <select> tags, due to autofunc pages
    // 2. <label> tags, due to "select streamlit version" text
    // 3. <form> tags, to remove the "helful" form
    const remove_tags = ["select", "label", "form"];
    for (const i in remove_tags) {
      const tags = root.querySelectorAll(remove_tags[i]);
      for (const ii in tags) {
        if (tags[ii].parentNode) {
          tags[ii].parentNode.removeChild(tags[ii]);
        }
      }
    }

    const compileOptions = {
      hideLinkHrefIfSameAsText: true,
      ignoreHref: true,
      ignoreImage: true,
    };

    let keywords = "";
    let title = root.querySelector("h1");
    const sub_title = root.querySelector("h2");
    const meta_keywords = root.querySelector("meta[name=keywords]");
    const content = convert(
      root.querySelector("article").innerHTML,
      compileOptions,
    );
    const slug = url.split("/");
    const isnum = /^[\d\.]+$/.test(slug[1]);
    const isSiS = /^SiS[\d\.]*$/.test(slug[1]);
    const version = isnum || isSiS ? slug[1] : "latest";

    if (meta_keywords) {
      keywords = meta_keywords.getAttribute("content");
    }

    if (version !== "latest") {
      console.warn(`!!! Skipping ${url} because it's for an older version.`);
      continue;
    }

    if ((!title && !sub_title) || !doc_title) {
      console.warn(
        `!!! Skipping ${url} because the document has no title or H1 tag.`,
      );
      continue;
    }

    if (!title && sub_title) {
      title = sub_title;
    }

    if (!content) {
      console.warn(
        `!!! Skipping ${url} because the document has no ARTICLE tag.`,
      );
      continue;
    }

    if (content.length > 100000) {
      console.warn(
        `!!! Skipping ${url} the content is too long.`,
        "See https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/reducing-object-size/",
        "for solutions.",
      );
      continue;
    }

    to_index.push({
      title: title.text,
      content: content,
      url: url,
      category: category,
      icon: icon,
      color: color,
      version: version,
      keywords: keywords,
    });

    console.log(`... prepared ${title.text} at ${url}.`);
  }

  console.log(`... uploading ${to_index.length} pages to Algolia.`);

  const client = algoliasearch("XNXFGO6BQ1", process.env.ALGOLIA_SECRET);

  const index = client.initIndex("documentation");
  const tmp_index = client.initIndex("documentation_tmp");

  client
    .copyIndex(index.indexName, tmp_index.indexName, [
      "settings",
      "synonyms",
      "rules",
    ])
    .then(({ taskID }) => {
      tmp_index.waitTask(taskID);
    })
    .then(() => {
      return tmp_index.addObjects(to_index);
    })
    .then(({ taskID }) => {
      tmp_index.waitTask(taskID);
    })
    .then(() => {
      client.moveIndex(tmp_index.indexName, index.indexName);
      console.log("... updating index");
    })
    .then(() => {
      console.log("Index updated. 🎉");
    })
    .catch((err) => {
      console.error(err);
      process.exit(1);
    });
})();


================================================
File: /scripts/merge-pdfs.js
================================================
const path = require("path");
const fs = require("fs");
const PDFMerger = require("pdf-merger-js");
const isPDFValid = require("is-pdf-valid");

// Initialize the merger
const merger = new PDFMerger();
const pagesPath = path.join(__dirname, "../public/pdf/pages");
const pdfPath = path.join(__dirname, "../public/pdf");

const getPDFs = () => {
  console.log("Running the PDF merger...");

  // Get all pdfs inside the directory path
  fs.readdir(pagesPath, async function (err, files) {
    // Sort pages on their correct order
    files.sort((a, b) => {
      const aNumber = a.replace(/[^0-9]/g, "");
      const bNumber = b.replace(/[^0-9]/g, "");

      return aNumber - bNumber;
    });

    // Loop through all files and check its validity
    files.forEach(function (file) {
      console.log(`Adding ${file}...`);

      const isFileValid = isPDFValid(fs.readFileSync(`${pagesPath}/${file}`));
      if (isFileValid === true) {
        try {
          merger.add(`${pagesPath}/${file}`);
          console.log(`Done! ${file} added`);
        } catch (e) {
          console.log(
            `Skipping ${file} because the PDF wasn't generated properly. See error below:`
          );
          console.log(e);
        }
      }
    });

    console.log("Merging the PDF...");

    await merger.save(`${pdfPath}/offline-docs.pdf`);

    console.log(`Done! PDF generated on ${pdfPath}/offline-docs.pdf`);
  });
};

getPDFs();


================================================
File: /styles/admonition.scss
================================================
// Styles for notes, warnings, etc., inside API reference page
div.admonition {
  @apply p-4 rounded-xl mt-8 mb-12;

  // Title
  p.first.admonition-title {
    @apply text-lg font-bold;
  }

  // Text
  p {
    @apply mb-0;
  }

  // Note
  &.note {
    @apply bg-lightBlue-10 dark:bg-lightBlue-100/30;

    p.first.admonition-title {
      @apply text-lightBlue-80 dark:text-lightBlue-60;
    }
  }

  // Tip
  &.tip {
    @apply bg-indigo-10 dark:bg-indigo-100;

    p.first.admonition-title {
      @apply text-indigo-70;
    }
  }

  // Important
  &.important {
    @apply bg-orange-10 dark:bg-orange-100/30;

    p.first.admonition-title {
      @apply text-orange-70;
    }
  }

  // Warning
  &.warning {
    @apply bg-orange-10 dark:bg-orange-100/30;

    p.first.admonition-title {
      @apply text-orange-70;
    }
  }
}


================================================
File: /styles/fonts.scss
================================================
.material-icons,
i {
  @apply font-normal text-2xl not-italic leading-none tracking-normal no-underline inline-block whitespace-nowrap;
  word-wrap: normal;
  direction: ltr;
  -webkit-font-feature-settings: "liga";
  -webkit-font-smoothing: antialiased;
}


================================================
File: /styles/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

html {
  @apply overflow-x-hidden overflow-y-auto scroll-pt-24;
}

body {
  @apply bg-white;
  @apply scroll-m-12;
}

.dark body {
  @apply bg-gray-100;
}

/* Utility to hide text that only is needed in screen readers */
.sr-only {
  @apply absolute top-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-none;
  clip: rect(0, 0, 0, 0);
}


================================================
File: /styles/lists.scss
================================================
/* Styles for nested lists inside markdown */
ol,
ul {
  @apply my-0 mx-6 p-0 mt-4 text-gray-90 dark:text-gray-40;
}

ol li,
ul li {
  @apply mb-4;
}

ol {
  @apply list-decimal;

  ol {
    list-style-type: lower-roman;
  }
}

ul {
  @apply list-disc;

  ul {
    list-style: circle;

    ul {
      @apply list-disc;

      ul {
        list-style: circle;
      }
    }
  }
}

ol + ul,
ul + ol,
ol + ol,
ul + ul {
  @apply mt-4;
}


================================================
File: /styles/main.scss
================================================
@import "./fonts.scss";
@import "./text.scss";
@import "./lists.scss";
@import "./tables.scss";
@import "./scrollbars.scss";
@import "./admonition.scss";

@import "./print.scss";


================================================
File: /styles/print.scss
================================================
@media print {
  // Hide the elements we don't want to show on the PDF
  // #content-container + section, #content-container + section ~ section, #content-container div section:last-child
  header,
  footer,
  iframe,
  #documentation .psa_Container___KGYF,
  #documentation .arrowLink_Container__GdJWF,
  #content-container .helpful_FormContainer__aXrIB {
    display: none;
  }

  * {
    -webkit-print-color-adjust: exact;
  }
}


================================================
File: /styles/scrollbars.scss
================================================
@supports (scrollbar-color: #000 #111) {
  * {
    scrollbar-width: thin;
    scrollbar-color: transparent transparent;
  }

  :hover {
    scrollbar-color: theme("colors.gray.40") transparent;
  }

  .dark:hover,
  .dark :hover {
    scrollbar-color: theme("colors.gray.70") transparent;
  }
}

@supports not (scrollbar-color: #000 #111) {
  ::-webkit-scrollbar {
    @apply h-2 w-2 bg-transparent;
  }

  ::-webkit-scrollbar-thumb {
    @apply rounded-full;
  }

  :hover::-webkit-scrollbar-thumb {
    @apply bg-gray-50 bg-opacity-70;
  }

  ::-webkit-scrollbar-thumb:hover,
  :hover::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-50 bg-opacity-100;
  }

  ::-webkit-scrollbar-thumb:active,
  :hover::-webkit-scrollbar-thumb:active {
    @apply bg-gray-70 bg-opacity-100;
  }
}


================================================
File: /styles/tables.scss
================================================
/* Styles for markdown tables */
#content-container table:not(.full-width) {
  @apply w-full border-collapse;
}

#content-container table:not(.full-width) tr th,
#content-container table:not(.full-width) tr td {
  @apply border-t border-t-gray-20 py-3 text-xs leading-loose tracking-normal text-gray-90 dark:text-gray-40;
}

#content-container table:not(.full-width) tr th a,
#content-container table:not(.full-width) tr td a {
  @apply underline hover:no-underline;
}


================================================
File: /styles/text.scss
================================================
/* Styles for headings inside markdown */
h1,
h2 {
  @apply font-bold leading-tight tracking-tight mb-5;
}

h2,
h4,
h5,
h6 {
  @apply mt-12;
}

h3 {
  @apply mt-8;
}

/* Size modifiers */

h1 {
  @apply text-5xl;
}

h2 {
  @apply lg:text-4xl text-2xl;
}

h3 {
  @apply text-2xl;
}

h4 {
  @apply text-xl;
}

h5 {
  @apply text-lg;
}

h6 {
  @apply text-base;
}

/* Dark mode modifiers */
h1,
h2,
h3,
h4,
h5,
h6 {
  @apply dark:text-gray-40;
}

/* Margin modifiers */
h1:first-child,
h2:first-child,
h3:first-child,
h4:first-child,
h5:first-child,
h6:first-child {
  @apply mt-0;
}

/* Styles for text inside markdown */
p,
li,
a {
  @apply leading-relaxed tracking-tight;
}

p {
  @apply mb-4 text-gray-90 break-words dark:text-gray-40;
}

summary {
  @apply mb-4 text-gray-90 dark:text-gray-40;
}

sup a {
  @apply underline hover:no-underline dark:text-gray-40;
}

p:last-child,
li p:only-child {
  @apply mb-0;
}

.code {
  @apply font-mono font-normal break-words;
}

.bold,
strong {
  @apply font-bold dark:font-extrabold;
}

ol + p,
ul + p {
  @apply mt-8;
}

/* Focus styles */
a:focus,
a:focus-visible,
button:focus,
button:focus-visible {
  @apply outline-2 outline-gray-40;
}

/* Inline code blocks */
p code,
/* Inline code blocks in docstrings */
tt.docutils.literal {
  @apply break-words px-1 rounded;
  @apply text-green-80 bg-green-80/5;
  @apply dark:text-green-50 dark:bg-green-50/10;
  @apply text-base;
}

/* One-line code descriptions in docstrings */
div.code-desc {
  @apply mb-4 text-gray-90 dark:text-gray-40;
}


================================================
File: /.devcontainer/Dockerfile
================================================
# See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.209.6/containers/python-3/.devcontainer/base.Dockerfile

# [Choice] Python version (use -bullseye variants on local arm64/Apple Silicon): 3, 3.10, 3.9, 3.8, 3.7, 3.6, 3-bullseye, 3.10-bullseye, 3.9-bullseye, 3.8-bullseye, 3.7-bullseye, 3.6-bullseye, 3-buster, 3.10-buster, 3.9-buster, 3.8-buster, 3.7-buster, 3.6-buster
ARG VARIANT="3.10-bullseye"
FROM mcr.microsoft.com/vscode/devcontainers/python:0-${VARIANT}

# [Choice] Node.js version: none, lts/*, 16, 14, 12, 10
ARG NODE_VERSION="none"
RUN if [ "${NODE_VERSION}" != "none" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1"; fi

ENV PATH="/home/vscode/.local/bin:${PATH}"

# [Optional] Uncomment this section to install additional OS packages.
# RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
#     && apt-get -y install --no-install-recommends <your-package-list-here>

# [Optional] Uncomment this line to install global node packages.
# RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1


================================================
File: /.devcontainer/devcontainer.json
================================================
// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.209.6/containers/python-3
{
	"name": "Python 3",
	"build": {
		"dockerfile": "Dockerfile",
		"context": "..",
		"args": {
			// Update 'VARIANT' to pick a Python version: 3, 3.10, 3.9, 3.8, 3.7, 3.6
			// Append -bullseye or -buster to pin to an OS version.
			// Use -bullseye variants on local on arm64/Apple Silicon.
			"VARIANT": "3.7",
			// Options
			"NODE_VERSION": "lts/*"
		}
	},
	// Set *default* container specific settings.json values on container create.
	"settings": {
		"python.defaultInterpreterPath": "/usr/local/bin/python",
	},
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"ms-python.python",
		"ms-python.vscode-pylance"
	],
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [
		3000
	],
	// Use 'postCreateCommand' to run commands after the container is created.
	// Install NPM dependencies.
	"postCreateCommand": "make",
  // Use 'postStartCommand' to run 'make up' every time the container is started.
	"postStartCommand": "make up",
	// Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode",
	"features": {
		"git": "latest",
		"github-cli": "latest"
	}
}


================================================
File: /.github/CODEOWNERS
================================================
# Each line is a file pattern followed by one or more owners, which can be an individual user, multiple users, or a team.
# For lines that contain two or more owners, the first owner is the primary topic writer, the second owner is the secondary writer.
# The LAST matched pattern takes precedence, so specific items should be placed LATER in the file.

# Format for owners is
# Username @sfc-gh-<ldap_name>
# Team @snowflakedb/team
# Email email@snowflake.com

# * @global-owner-of-last-resort

# You can also use email addresses if you prefer. They'll be
# used to look up users just like we do for commit author
# emails.

# *.foo foo@snowflake.com

# Jenkinsfile @snowflakedb/repository-test-owner

# We are not aiming to identify ownership for every directory or file yet, but for now add a few rules as examples so we can update as we go.

# More details:
  # https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners

  # Syntax, which is based on the rules for the .gitignore file: https://git-scm.com/docs/gitignore#_pattern_format

#**************************************************************
# General structure and notes
# - Top to bottom starting in the root directory.
# - Directories first, then individual files.
# - Keep it alphabetical in the sections.
# - A forward slash (/) matches everything in a directory.
# - A wildcard (*) matches everything except the forward slash.
#**************************************************************

# DOCS CONTENT

/content* @streamlit/docs-writers


================================================
File: /.github/pull_request_template.md
================================================
## 📚 Context

<!-- Why do you want to make this change? What background should the reviewer know? -->

## 🧠 Description of Changes

<!-- What was specifically changed? Which files, algorithms, links, media? -->
<!-- Please add them here as a bulleted list -->

**Revised:**

_Insert screenshot of your updated UI/code here_

**Current:**

_Insert screenshot of existing UI/code here_

## 💥 Impact

<!-- what is the scale of this change -->

Size:

- [ ] Small <!-- Small bug fix or small edit to existing code that amounts to few lines) -->
- [ ] Not small <!-- Everything else -->

## 🌐 References

<!-- Add link to a Design Document, forum thread, or a ticket that has the greater context for this change. -->
<!-- For small isolated changes, you can skip this section -->

- [ ] [Notion](...)

<!-- Want to edit this template? https://github.com/streamlit/docs/edit/master/.github/pull_request_template.md -->

**Contribution License Agreement**

By submitting this pull request you agree that all contributions to this project are made under the Apache 2.0 license.


================================================
File: /.github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: Bug report
about: Create a report to help us improve
title: ""
labels: bug, needs triage
assignees: ""
---

### Summary

Type here a clear and concise description of the bug. Aim for 2-3 sentences.

### Steps to reproduce

Code snippet:

```

```

Screenshot(s):

(Please provide a code snippet and/or screenshots! These will help expedite us finding and solving the problem.)

If applicable, please provide the steps we should take to reproduce the bug:

1. Go to '...'
2. Click on '....'
3. Scroll down to '....'

**Expected behavior:**

Explain what you expect to happen when you go through the steps above, assuming there were no bugs.

**Actual behavior:**

Explain the buggy behavior you experience when you go through the steps above.
If applicable, add screenshots to help explain your problem.

### Is this a regression?

That is, did this use to work the way you expected in the past?
yes / no

### Debug info

- Docs page link: (do you have a link to the docs page containing the bug?)
- npm version: (get it with `npm -v`)
- node version: (get it with `node -v`)
- OS version:
- Browser version:

### Additional information

If needed, add any other context about the problem here. For example, did this bug come from <https://discuss.streamlit.io> or another site? Link the original source here!


================================================
File: /.github/ISSUE_TEMPLATE/config.yml
================================================
blank_issues_enabled: false
contact_links:
  - name: Streamlit community support
    url: https://discuss.streamlit.io/
    about: Please ask and answer questions here.
  - name: Streamlit documentation
    url: https://docs.streamlit.io/
    about: To learn more about how Streamlit works.
  - name: Streamlit docs README
    url: https://github.com/streamlit/docs/blob/main/README.md
    about: To learn how Streamlit's documentation works.


================================================
File: /.github/ISSUE_TEMPLATE/doc_improvement.md
================================================
---
name: Documentation improvement request
about: Let us know how our docs could be better
title: ""
labels: docs, needs triage
assignees: ""
---

**Link to doc page in question (if any):**

**Name of the Streamlit feature whose docs need improvement:**

**What you think the docs should say:**


================================================
File: /.github/ISSUE_TEMPLATE/feature_request.md
================================================
---
name: Feature request
about: Suggest an idea for this project
title: ""
labels: enhancement, needs triage
assignees: ""
---

_(Note, you don't have to fill out every section here. They're just here for guidance. That said, nicely detailed feature requests are more likely to get eng attention sooner)_

### Problem

Is your feature request related to a problem? Please describe the problem here. Ex. I'm always frustrated when [...]

### Solution

**MVP:** What's the smallest possible solution that would get 80% of the problem out of the way?

**Possible additions:** What are other things that could be added to the MVP over time to make it better?

**Preferred solution:** If you don't like the MVP above, tell us why, and what you'd like done instead.

### Additional context

Add any other context or screenshots about the feature request here. For example, did this FR come from <https://discuss.streamlit.io> or another site? Link the original source here!


================================================
File: /.github/workflows/postbuild-scripts.yml
================================================
name: postbuild-scripts
run-name: Build the site, update Algolia's search index, and regenerate the sitemap
on:
  push:
    branches:
      - "main"

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  build-search-index:
    runs-on: ubuntu-latest
    name: Build Algolia search index
    environment: Build Search Index

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Setup node, build the site and search index afterwards
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - run: npm install
      - run: npm run export
      - name: Run build-search-index script
        run: node ./scripts/build-search-index.js
        env:
          ALGOLIA_SECRET: ${{ secrets.ALGOLIA_SECRET }}
  build-sitemap:
    runs-on: ubuntu-latest
    name: Build sitemap

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Setup node, build the site, and generate the sitemap
        id: sitemap
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - run: npm install
      - run: npm run export
      - run: npm run sitemap

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          title: "Automated sitemap update"
          body: >
            Sitemap updated by the [generate-sitemap](https://github.com/cicirello/generate-sitemap) 
            GitHub action. Automated pull-request generated by the 
            [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action.


================================================
File: /.husky/pre-commit
================================================
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx lint-staged


================================================
File: /.streamlit/config.toml
================================================
[global]
storeCachedForwardMessagesInMemory=false

[logger]
level = "error"


