Voc√™ pode verificar em <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>:

<img src="/img/tutorial/behind-a-proxy/image01.png">

Mas se acessarmos a interface de documenta√ß√£o no URL "oficial" usando o proxy com a porta `9999`, em `/api/v1/docs`, ela funciona corretamente! üéâ

Voc√™ pode verificar em <a href="http://127.0.0.1:9999/api/v1/docs" class="external-link" target="_blank">http://127.0.0.1:9999/api/v1/docs</a>:

<img src="/img/tutorial/behind-a-proxy/image02.png">

Exatamente como quer√≠amos. ‚úîÔ∏è

Isso porque o FastAPI usa esse `root_path` para criar o `server` padr√£o no OpenAPI com o URL fornecido pelo `root_path`.

## Servidores adicionais

/// warning | Aviso

Este √© um caso de uso mais avan√ßado. Sinta-se √† vontade para pular.

///

Por padr√£o, o **FastAPI** criar√° um `server` no OpenAPI schema com o URL para o `root_path`.

Mas voc√™ tamb√©m pode fornecer outros `servers` alternativos, por exemplo, se quiser que a *mesma* interface de documenta√ß√£o interaja com ambientes de staging e produ√ß√£o.

Se voc√™ passar uma lista personalizada de `servers` e houver um `root_path` (porque sua API est√° atr√°s de um proxy), o **FastAPI** inserir√° um "server" com esse `root_path` no in√≠cio da lista.

Por exemplo:

{* ../../docs_src/behind_a_proxy/tutorial003.py hl[4:7] *}

Gerar√° um OpenAPI schema como:

```JSON hl_lines="5-7"
{
    "openapi": "3.1.0",
    // Mais coisas aqui
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Staging environment"
        },
        {
            "url": "https://prod.example.com",
            "description": "Production environment"
        }
    ],
    "paths": {
            // Mais coisas aqui
    }
}
```

/// tip | Dica

Perceba o servidor gerado automaticamente com um valor `url` de `/api/v1`, retirado do `root_path`.

///

Na interface de documenta√ß√£o em <a href="http://127.0.0.1:9999/api/v1/docs" class="external-link" target="_blank">http://127.0.0.1:9999/api/v1/docs</a> parecer√°:

<img src="/img/tutorial/behind-a-proxy/image03.png">

/// tip | Dica

A interface de documenta√ß√£o interagir√° com o servidor que voc√™ selecionar.

///

### Desabilitar servidor autom√°tico de `root_path`

Se voc√™ n√£o quiser que o **FastAPI** inclua um servidor autom√°tico usando o `root_path`, voc√™ pode usar o par√¢metro `root_path_in_servers=False`:

{* ../../docs_src/behind_a_proxy/tutorial004.py hl[9] *}

e ent√£o ele n√£o ser√° inclu√≠do no OpenAPI schema.

## Montando uma sub-aplica√ß√£o

Se voc√™ precisar montar uma sub-aplica√ß√£o (como descrito em [Sub Aplica√ß√µes - Montagens](sub-applications.md){.internal-link target=_blank}) enquanto tamb√©m usa um proxy com `root_path`, voc√™ pode fazer isso normalmente, como esperaria.

O FastAPI usar√° internamente o `root_path` de forma inteligente, ent√£o tudo funcionar√°. ‚ú®


================================================
File: /docs/pt/docs/advanced/custom-response.md
================================================
# Resposta Personalizada - HTML, Stream, File e outras

Por padr√£o, o **FastAPI** ir√° retornar respostas utilizando `JSONResponse`.

Mas voc√™ pode sobrescrever esse comportamento utilizando `Response` diretamente, como visto em [Retornando uma Resposta Diretamente](response-directly.md){.internal-link target=_blank}.

Mas se voc√™ retornar uma `Response` diretamente (ou qualquer subclasse, como `JSONResponse`), os dados n√£o ser√£o convertidos automaticamente (mesmo que voc√™ declare um `response_model`), e a documenta√ß√£o n√£o ser√° gerada automaticamente (por exemplo, incluindo o "media type", no cabe√ßalho HTTP `Content-Type` como parte do esquema OpenAPI gerado).

Mas voc√™ tamb√©m pode declarar a `Response` que voc√™ deseja utilizar (e.g. qualquer subclasse de `Response`), em um *decorador de opera√ß√£o de rota* utilizando o par√¢metro `response_class`.

Os conte√∫dos que voc√™ retorna em sua *fun√ß√£o de operador de rota* ser√£o colocados dentro dessa `Response`.

E se a `Response` tiver um media type JSON (`application/json`), como √© o caso com `JSONResponse` e `UJSONResponse`, os dados que voc√™ retornar ser√£o automaticamente convertidos (e filtrados) com qualquer `response_model` do Pydantic que for declarado em sua *fun√ß√£o de operador de rota*.

/// note | Nota

Se voc√™ utilizar uma classe de Resposta sem media type, o FastAPI esperar√° que sua resposta n√£o tenha conte√∫do, ent√£o ele n√£o ir√° documentar o formato da resposta na documenta√ß√£o OpenAPI gerada.

///

## Utilizando `ORJSONResponse`

Por exemplo, se voc√™ precisa bastante de performance, voc√™ pode instalar e utilizar o <a href="https://github.com/ijl/orjson" class="external-link" target="_blank">`orjson`</a> e definir a resposta para ser uma `ORJSONResponse`.

Importe a classe, ou subclasse, de `Response` que voc√™ deseja utilizar e declare ela no *decorador de opera√ß√£o de rota*.

Para respostas grandes, retornar uma `Response` diretamente √© muito mais r√°pido que retornar um dicion√°rio.

Isso ocorre por que, por padr√£o, o FastAPI ir√° verificar cada item dentro do dicion√°rio e garantir que ele seja serializ√°vel para JSON, utilizando o mesmo[Codificador Compat√≠vel com JSON](../tutorial/encoder.md){.internal-link target=_blank} explicado no tutorial. Isso permite que voc√™ retorne **objetos abstratos**, como modelos do banco de dados, por exemplo.

Mas se voc√™ tem certeza que o conte√∫do que voc√™ est√° retornando √© **serializ√°vel com JSON**, voc√™ pode pass√°-lo diretamente para a classe de resposta e evitar o trabalho extra que o FastAPI teria ao passar o conte√∫do pelo `jsonable_encoder` antes de passar para a classe de resposta.

{* ../../docs_src/custom_response/tutorial001b.py hl[2,7] *}

/// info | Informa√ß√£o

O par√¢metro `response_class` tamb√©m ser√° usado para definir o "media type" da resposta.

Neste caso, o cabe√ßalho HTTP `Content-Type` ir√° ser definido como `application/json`.

E ser√° documentado como tal no OpenAPI.

///

/// tip | Dica

A `ORJSONResponse` est√° dispon√≠vel apenas no FastAPI, e n√£o no Starlette.

///

## Resposta HTML

Para retornar uma resposta com HTML diretamente do **FastAPI**, utilize `HTMLResponse`.

* Importe `HTMLResponse`
* Passe `HTMLResponse` como o par√¢metro de `response_class` do seu *decorador de opera√ß√£o de rota*.

{* ../../docs_src/custom_response/tutorial002.py hl[2,7] *}

/// info | Informa√ß√£o

O par√¢metro `response_class` tamb√©m ser√° usado para definir o "media type" da resposta.

Neste caso, o cabe√ßalho HTTP `Content-Type` ser√° definido como `text/html`.

E ser√° documentado como tal no OpenAPI.

///

### Retornando uma `Response`

Como visto em [Retornando uma Resposta Diretamente](response-directly.md){.internal-link target=_blank}, voc√™ tamb√©m pode sobrescrever a resposta diretamente na sua *opera√ß√£o de rota*, ao retornar ela.

O mesmo exemplo de antes, retornando uma `HTMLResponse`, poderia parecer com:

{* ../../docs_src/custom_response/tutorial003.py hl[2,7,19] *}

/// warning | Aviso

Uma `Response` retornada diretamente em sua *fun√ß√£o de opera√ß√£o de rota* n√£o ser√° documentada no OpenAPI (por exemplo, o `Content-Type` n√£o ser√° documentado) e n√£o ser√° vis√≠vel na documenta√ß√£o interativa autom√°tica.

///

/// info | Informa√ß√£o

Obviamente, o cabe√ßalho `Content-Type`, o c√≥digo de status, etc, vir√£o do objeto `Response` que voc√™ retornou.

///

### Documentar no OpenAPI e sobrescrever `Response`

Se voc√™ deseja sobrescrever a resposta dentro de uma fun√ß√£o, mas ao mesmo tempo documentar o "media type" no OpenAPI, voc√™ pode utilizar o par√¢metro `response_class` E retornar um objeto `Response`.

A `response_class` ser√° usada apenas para documentar o OpenAPI da *opera√ß√£o de rota*, mas sua `Response` ser√° usada como foi definida.

##### Retornando uma `HTMLResponse` diretamente

Por exemplo, poderia ser algo como:

{* ../../docs_src/custom_response/tutorial004.py hl[7,21,23] *}

Neste exemplo, a fun√ß√£o `generate_html_response()` j√° cria e retorna uma `Response` em vez de retornar o HTML em uma `str`.

Ao retornar o resultado chamando `generate_html_response()`, voc√™ j√° est√° retornando uma `Response` que ir√° sobrescrever o comportamento padr√£o do **FastAPI**.

Mas se voc√™ passasse uma `HTMLResponse` em `response_class` tamb√©m, o **FastAPI** saberia como documentar isso no OpenAPI e na documenta√ß√£o interativa como um HTML com `text/html`:

<img src="/img/tutorial/custom-response/image01.png">

## Respostas dispon√≠veis

Aqui est√£o algumas dos tipos de resposta dispon√≠veis.

Lembre-se que voc√™ pode utilizar `Response` para retornar qualquer outra coisa, ou at√© mesmo criar uma subclasse personalizada.

/// note | Detalhes T√©cnicos

Voc√™ tamb√©m pode utilizar `from starlette.responses import HTMLResponse`.

O **FastAPI** prov√™ a mesma `starlette.responses` como `fastapi.responses` apenas como uma facilidade para voc√™, desenvolvedor. Mas a maioria das respostas dispon√≠veis v√™m diretamente do Starlette.

///

### `Response`

A classe principal de respostas, todas as outras respostas herdam dela.

Voc√™ pode retorn√°-la diretamente.

Ela aceita os seguintes par√¢metros:

* `content` - Uma sequ√™ncia de caracteres (`str`) ou `bytes`.
* `status_code` - Um c√≥digo de status HTTP do tipo `int`.
* `headers` - Um dicion√°rio `dict` de strings.
* `media_type` - Uma `str` informando o media type. E.g. `"text/html"`.

O FastAPI (Starlette, na verdade) ir√° incluir o cabe√ßalho Content-Length automaticamente. Ele tamb√©m ir√° incluir o cabe√ßalho Content-Type, baseado no `media_type` e acrescentando uma codifica√ß√£o para tipos textuais.

{* ../../docs_src/response_directly/tutorial002.py hl[1,18] *}

### `HTMLResponse`

Usa algum texto ou sequ√™ncia de bytes e retorna uma resposta HTML. Como voc√™ leu acima.

### `PlainTextResponse`

Usa algum texto ou sequ√™ncia de bytes para retornar uma resposta de texto n√£o formatado.

{* ../../docs_src/custom_response/tutorial005.py hl[2,7,9] *}

### `JSONResponse`

Pega alguns dados e retorna uma resposta com codifica√ß√£o `application/json`.

√â a resposta padr√£o utilizada no **FastAPI**, como voc√™ leu acima.

### `ORJSONResponse`

Uma alternativa mais r√°pida de resposta JSON utilizando o <a href="https://github.com/ijl/orjson" class="external-link" target="_blank">`orjson`</a>, como voc√™ leu acima.

/// info | Informa√ß√£o

Essa resposta requer a instala√ß√£o do pacote `orjson`, com o comando `pip install orjson`, por exemplo.

///

### `UJSONResponse`

Uma alternativa de resposta JSON utilizando a biblioteca <a href="https://github.com/ultrajson/ultrajson" class="external-link" target="_blank">`ujson`</a>.

/// info | Informa√ß√£o

Essa resposta requer a instala√ß√£o do pacote `ujson`, com o comando `pip install ujson`, por exemplo.

///

/// warning | Aviso

`ujson` √© menos cauteloso que a implementa√ß√£o nativa do Python na forma que os casos especiais s√£o tratados

///

{* ../../docs_src/custom_response/tutorial001.py hl[2,7] *}

/// tip | Dica

√â poss√≠vel que `ORJSONResponse` seja uma alternativa mais r√°pida.

///

### `RedirectResponse`

Retorna um redirecionamento HTTP. Utiliza o c√≥digo de status 307 (Redirecionamento Tempor√°rio) por padr√£o.

Voc√™ pode retornar uma `RedirectResponse` diretamente:

{* ../../docs_src/custom_response/tutorial006.py hl[2,9] *}

---

Ou voc√™ pode utiliz√°-la no par√¢metro `response_class`:

{* ../../docs_src/custom_response/tutorial006b.py hl[2,7,9] *}

Se voc√™ fizer isso, ent√£o voc√™ pode retornar a URL diretamente da sua *fun√ß√£o de opera√ß√£o de rota*

Neste caso, o `status_code` utilizada ser√° o padr√£o de `RedirectResponse`, que √© `307`.

---

Voc√™ tamb√©m pode utilizar o par√¢metro `status_code` combinado com o par√¢metro `response_class`:

{* ../../docs_src/custom_response/tutorial006c.py hl[2,7,9] *}

### `StreamingResponse`

Recebe uma gerador ass√≠ncrono ou um gerador/iterador comum e retorna o corpo da requisi√ß√£o continuamente (stream).

{* ../../docs_src/custom_response/tutorial007.py hl[2,14] *}

#### Utilizando `StreamingResponse` com objetos semelhantes a arquivos

Se voc√™ tiver um objeto semelhante a um arquivo (e.g. o objeto retornado por `open()`), voc√™ pode criar uma fun√ß√£o geradora para iterar sobre esse objeto.

Dessa forma, voc√™ n√£o precisa ler todo o arquivo na mem√≥ria primeiro, e voc√™ pode passar essa fun√ß√£o geradora para `StreamingResponse` e retorn√°-la.

Isso inclui muitas bibliotecas que interagem com armazenamento em nuvem, processamento de v√≠deos, entre outras.

```{ .python .annotate hl_lines="2  10-12  14" }
{!../../docs_src/custom_response/tutorial008.py!}
```

1. Essa √© a fun√ß√£o geradora. √â definida como "fun√ß√£o geradora" porque cont√©m declara√ß√µes `yield` nela.
2. Ao utilizar o bloco `with`, n√≥s garantimos que o objeto semelhante a um arquivo √© fechado ap√≥s a fun√ß√£o geradora ser finalizada. Isto √©, ap√≥s a resposta terminar de ser enivada.
3. Essa declara√ß√£o `yield from` informa a fun√ß√£o para iterar sobre essa coisa nomeada de `file_like`. E ent√£o, para cada parte iterada, fornece essa parte como se viesse dessa fun√ß√£o geradora (`iterfile`).

    Ent√£o, √© uma fun√ß√£o geradora que transfere o trabalho de "gera√ß√£o" para alguma outra coisa interna.

    Fazendo dessa forma, podemos coloc√°-la em um bloco `with`, e assim garantir que o objeto semelhante a um arquivo √© fechado quando a fun√ß√£o termina.

/// tip | Dica

Perceba que aqui estamos utilizando o `open()` da biblioteca padr√£o que n√£o suporta `async` e `await`, e declaramos a opera√ß√£o de rota com o `def` b√°sico.

///

### `FileResponse`

Envia um arquivo  de forma ass√≠ncrona e cont√≠nua (stream).
*
Recebe um conjunto de argumentos do construtor diferente dos outros tipos de resposta:

* `path` - O caminho do arquivo que ser√° transmitido
* `headers` - quaisquer cabe√ßalhos que ser√£o inclu√≠dos, como um dicion√°rio.
* `media_type` - Uma string com o media type. Se n√£o for definida, o media type √© inferido a partir do nome ou caminho do arquivo.
* `filename` - Se for definido, √© inclu√≠do no cabe√ßalho `Content-Disposition`.

Respostas de Arquivos incluem o tamanho do arquivo, data da √∫ltima modifica√ß√£o e ETags apropriados, nos cabe√ßalhos `Content-Length`, `Last-Modified` e `ETag`, respectivamente.

{* ../../docs_src/custom_response/tutorial009.py hl[2,10] *}

Voc√™ tamb√©m pode usar o par√¢metro `response_class`:

{* ../../docs_src/custom_response/tutorial009b.py hl[2,8,10] *}

Nesse caso, voc√™ pode retornar o caminho do arquivo diretamente da sua *fun√ß√£o de opera√ß√£o de rota*.

## Classe de resposta personalizada

Voc√™ pode criar sua pr√≥pria classe de resposta, herdando de `Response` e usando essa nova classe.

Por exemplo, vamos supor que voc√™ queira utilizar o <a href="https://github.com/ijl/orjson" class="external-link" target="_blank">`orjson`</a>, mas com algumas configura√ß√µes personalizadas que n√£o est√£o inclu√≠das na classe `ORJSONResponse`.

Vamos supor tamb√©m que voc√™ queira retornar um JSON indentado e formatado, ent√£o voc√™ quer utilizar a op√ß√£o `orjson.OPT_INDENT_2` do orjson.

Voc√™ poderia criar uma classe `CustomORJSONResponse`. A principal coisa a ser feita √© sobrecarregar o m√©todo render da classe Response, `Response.render(content)`, que retorna o conte√∫do em bytes, para retornar o conte√∫do que voc√™ deseja:

{* ../../docs_src/custom_response/tutorial009c.py hl[9:14,17] *}

Agora em vez de retornar:

```json
{"message": "Hello World"}
```

...essa resposta retornar√°:

```json
{
  "message": "Hello World"
}
```

Obviamente, voc√™ provavelmente vai encontrar maneiras muito melhores de se aproveitar disso do que a formata√ß√£o de JSON. üòâ

## Classe de resposta padr√£o

Quando voc√™ criar uma inst√¢ncia da classe **FastAPI** ou um `APIRouter` voc√™ pode especificar qual classe de resposta utilizar por padr√£o.

O padr√£o que define isso √© o `default_response_class`.

No exemplo abaixo, o **FastAPI** ir√° utilizar `ORJSONResponse` por padr√£o, em todas as *opera√ß√µes de rota*, em vez de `JSONResponse`.

{* ../../docs_src/custom_response/tutorial010.py hl[2,4] *}

/// tip | Dica

Voc√™ ainda pode substituir `response_class` em *opera√ß√µes de rota* como antes.

///

## Documenta√ß√£o adicional

Voc√™ tamb√©m pode declarar o media type e muitos outros detalhes no OpenAPI utilizando `responses`: [Retornos Adicionais no OpenAPI](additional-responses.md){.internal-link target=_blank}.


================================================
File: /docs/pt/docs/advanced/dataclasses.md
================================================
# Usando Dataclasses

FastAPI √© constru√≠do em cima do **Pydantic**, e eu tenho mostrado como usar modelos Pydantic para declarar requisi√ß√µes e respostas.

Mas o FastAPI tamb√©m suporta o uso de <a href="https://docs.python.org/3/library/dataclasses.html" class="external-link" target="_blank">`dataclasses`</a> da mesma forma:

{* ../../docs_src/dataclasses/tutorial001.py hl[1,7:12,19:20] *}

Isso ainda √© suportado gra√ßas ao **Pydantic**, pois ele tem <a href="https://docs.pydantic.dev/latest/concepts/dataclasses/#use-of-stdlib-dataclasses-with-basemodel" class="external-link" target="_blank">suporte interno para `dataclasses`</a>.

Ent√£o, mesmo com o c√≥digo acima que n√£o usa Pydantic explicitamente, o FastAPI est√° usando Pydantic para converter essas dataclasses padr√£o para a vers√£o do Pydantic.

E claro, ele suporta o mesmo:

* valida√ß√£o de dados
* serializa√ß√£o de dados
* documenta√ß√£o de dados, etc.

Isso funciona da mesma forma que com os modelos Pydantic. E na verdade √© alcan√ßado da mesma maneira por baixo dos panos, usando Pydantic.

/// info | Informa√ß√£o

Lembre-se de que dataclasses n√£o podem fazer tudo o que os modelos Pydantic podem fazer.

Ent√£o, voc√™ ainda pode precisar usar modelos Pydantic.

Mas se voc√™ tem um monte de dataclasses por a√≠, este √© um truque legal para us√°-las para alimentar uma API web usando FastAPI. ü§ì

///

## Dataclasses em `response_model`

Voc√™ tamb√©m pode usar `dataclasses` no par√¢metro `response_model`:

{* ../../docs_src/dataclasses/tutorial002.py hl[1,7:13,19] *}

A dataclass ser√° automaticamente convertida para uma dataclass Pydantic.

Dessa forma, seu esquema aparecer√° na interface de documenta√ß√£o da API:

<img src="/img/tutorial/dataclasses/image01.png">

## Dataclasses em Estruturas de Dados Aninhadas

Voc√™ tamb√©m pode combinar `dataclasses` com outras anota√ß√µes de tipo para criar estruturas de dados aninhadas.

Em alguns casos, voc√™ ainda pode ter que usar a vers√£o do Pydantic das `dataclasses`. Por exemplo, se voc√™ tiver erros com a documenta√ß√£o da API gerada automaticamente.

Nesse caso, voc√™ pode simplesmente trocar as `dataclasses` padr√£o por `pydantic.dataclasses`, que √© um substituto direto:

```{ .python .annotate hl_lines="1  5  8-11  14-17  23-25  28" }
{!../../docs_src/dataclasses/tutorial003.py!}
```

1. Ainda importamos `field` das `dataclasses` padr√£o.

2. `pydantic.dataclasses` √© um substituto direto para `dataclasses`.

3. A dataclass `Author` inclui uma lista de dataclasses `Item`.

4. A dataclass `Author` √© usada como o par√¢metro `response_model`.

5. Voc√™ pode usar outras anota√ß√µes de tipo padr√£o com dataclasses como o corpo da requisi√ß√£o.

    Neste caso, √© uma lista de dataclasses `Item`.

6. Aqui estamos retornando um dicion√°rio que cont√©m `items`, que √© uma lista de dataclasses.

    O FastAPI ainda √© capaz de <abbr title="converter os dados para um formato que pode ser transmitido">serializar</abbr> os dados para JSON.

7. Aqui o `response_model` est√° usando uma anota√ß√£o de tipo de uma lista de dataclasses `Author`.

    Novamente, voc√™ pode combinar `dataclasses` com anota√ß√µes de tipo padr√£o.

8. Note que esta *fun√ß√£o de opera√ß√£o de rota* usa `def` regular em vez de `async def`.

    Como sempre, no FastAPI voc√™ pode combinar `def` e `async def` conforme necess√°rio.

    Se voc√™ precisar de uma atualiza√ß√£o sobre quando usar qual, confira a se√ß√£o _"Com pressa?"_ na documenta√ß√£o sobre [`async` e `await`](../async.md#in-a-hurry){.internal-link target=_blank}.

9. Esta *fun√ß√£o de opera√ß√£o de rota* n√£o est√° retornando dataclasses (embora pudesse), mas uma lista de dicion√°rios com dados internos.

    O FastAPI usar√° o par√¢metro `response_model` (que inclui dataclasses) para converter a resposta.

Voc√™ pode combinar `dataclasses` com outras anota√ß√µes de tipo em muitas combina√ß√µes diferentes para formar estruturas de dados complexas.

Confira as dicas de anota√ß√£o no c√≥digo acima para ver mais detalhes espec√≠ficos.

## Saiba Mais

Voc√™ tamb√©m pode combinar `dataclasses` com outros modelos Pydantic, herdar deles, inclu√≠-los em seus pr√≥prios modelos, etc.

Para saber mais, confira a <a href="https://docs.pydantic.dev/latest/concepts/dataclasses/" class="external-link" target="_blank">documenta√ß√£o do Pydantic sobre dataclasses</a>.

## Vers√£o

Isso est√° dispon√≠vel desde a vers√£o `0.67.0` do FastAPI. üîñ


================================================
File: /docs/pt/docs/advanced/events.md
================================================
# Eventos de vida √∫til

Voc√™ pode definir a l√≥gica (c√≥digo) que poderia ser executada antes da aplica√ß√£o **inicializar**. Isso significa que esse c√≥digo ser√° executado **uma vez**, **antes** da aplica√ß√£o **come√ßar a receber requisi√ß√µes**.

Do mesmo modo, voc√™ pode definir a l√≥gica (c√≥digo) que ser√° executada quando a aplica√ß√£o estiver sendo **encerrada**. Nesse caso, este c√≥digo ser√° executado **uma vez**, **depois** de ter possivelmente tratado **v√°rias requisi√ß√µes**.

Por conta desse c√≥digo ser executado antes da aplica√ß√£o **come√ßar** a receber requisi√ß√µes, e logo ap√≥s **terminar** de lidar com as requisi√ß√µes, ele cobre toda a **vida √∫til** (_lifespan_) da aplica√ß√£o (o termo "vida √∫til" ser√° importante em um segundo üòâ).

Pode ser muito √∫til para configurar **recursos** que voc√™ precisa usar por toda aplica√ß√£o, e que s√£o **compartilhados** entre as requisi√ß√µes, e/ou que voc√™ precisa **limpar** depois. Por exemplo, o pool de uma conex√£o com o banco de dados ou carregamento de um modelo compartilhado de aprendizado de m√°quina (_machine learning_).

## Caso de uso

Vamos iniciar com um exemplo de **caso de uso** e ent√£o ver como resolv√™-lo com isso.

Vamos imaginar que voc√™ tem alguns **modelos de _machine learning_** que deseja usar para lidar com as requisi√ß√µes. ü§ñ

Os mesmos modelos s√£o compartilhados entre as requisi√ß√µes, ent√£o n√£o √© um modelo por requisi√ß√£o, ou um por usu√°rio ou algo parecido.

Vamos imaginar que o carregamento do modelo pode **demorar bastante tempo**, porque ele tem que ler muitos **dados do disco**. Ent√£o voc√™ n√£o quer fazer isso a cada requisi√ß√£o.

Voc√™ poderia carreg√°-lo no n√≠vel mais alto do m√≥dulo/arquivo, mas isso tamb√©m poderia significaria **carregar o modelo** mesmo se voc√™ estiver executando um simples teste automatizado, ent√£o esse teste poderia ser **lento** porque teria que esperar o carregamento do modelo antes de ser capaz de executar uma parte independente do c√≥digo.


Isso √© que n√≥s iremos resolver, vamos carregar o modelo antes das requisi√ß√µes serem manuseadas, mas apenas um pouco antes da aplica√ß√£o come√ßar a receber requisi√ß√µes, n√£o enquanto o c√≥digo estiver sendo carregado.

## Vida √∫til (_Lifespan_)

Voc√™ pode definir essa l√≥gica de *inicializa√ß√£o* e *encerramento* usando os par√¢metros de `lifespan` da aplica√ß√£o `FastAPI`, e um "gerenciador de contexto" (te mostrarei o que √© isso a seguir).

Vamos iniciar com um exemplo e ver isso detalhadamente.

N√≥s criamos uma fun√ß√£o ass√≠ncrona chamada `lifespan()` com `yield` como este:

{* ../../docs_src/events/tutorial003.py hl[16,19] *}

Aqui n√≥s estamos simulando a *inicializa√ß√£o* custosa do carregamento do modelo colocando a (falsa) fun√ß√£o de modelo no dicion√°rio com modelos de _machine learning_ antes do `yield`. Este c√≥digo ser√° executado **antes** da aplica√ß√£o **come√ßar a receber requisi√ß√µes**, durante a *inicializa√ß√£o*.

E ent√£o, logo ap√≥s o `yield`, descarregaremos o modelo. Esse c√≥digo ser√° executado **ap√≥s** a aplica√ß√£o **terminar de lidar com as requisi√ß√µes**, pouco antes do *encerramento*. Isso poderia, por exemplo, liberar recursos como mem√≥ria ou GPU.

/// tip | Dica

O `shutdown` aconteceria quando voc√™ estivesse **encerrando** a aplica√ß√£o.

Talvez voc√™ precise inicializar uma nova vers√£o, ou apenas cansou de execut√°-la. ü§∑

///

### Fun√ß√£o _lifespan_

A primeira coisa a notar, √© que estamos definindo uma fun√ß√£o ass√≠ncrona com `yield`. Isso √© muito semelhante √† Depend√™ncias com `yield`.

{* ../../docs_src/events/tutorial003.py hl[14:19] *}

A primeira parte da fun√ß√£o, antes do `yield`, ser√°  executada **antes** da aplica√ß√£o inicializar.

E a parte posterior do `yield` ir√° executar **ap√≥s** a aplica√ß√£o ser encerrada.

### Gerenciador de Contexto Ass√≠ncrono

Se voc√™ verificar, a fun√ß√£o est√° decorada com um `@asynccontextmanager`.

Que converte a fun√ß√£o em algo chamado de "**Gerenciador de Contexto Ass√≠ncrono**".

{* ../../docs_src/events/tutorial003.py hl[1,13] *}

Um **gerenciador de contexto** em Python √© algo que voc√™ pode usar em uma declara√ß√£o `with`, por exemplo, `open()` pode ser usado como um gerenciador de contexto:

```Python
with open("file.txt") as file:
    file.read()
```

Nas vers√µes mais recentes de Python, h√° tamb√©m um **gerenciador de contexto ass√≠ncrono**. Voc√™ o usaria com `async with`:

```Python
async with lifespan(app):
    await do_stuff()
```

Quando voc√™ cria um gerenciador de contexto ou um gerenciador de contexto ass√≠ncrono como mencionado acima, o que ele faz √© que, antes de entrar no bloco `with`, ele ir√° executar o c√≥digo anterior ao `yield`, e depois de sair do bloco `with`, ele ir√° executar o c√≥digo depois do `yield`.

No nosso exemplo de c√≥digo acima, n√≥s n√£o usamos ele diretamente, mas n√≥s passamos para o FastAPI para ele us√°-lo.

O par√¢metro `lifespan` da aplica√ß√£o `FastAPI` usa um **Gerenciador de Contexto Ass√≠ncrono**, ent√£o n√≥s podemos passar nosso novo gerenciador de contexto ass√≠ncrono do `lifespan` para ele.

{* ../../docs_src/events/tutorial003.py hl[22] *}

## Eventos alternativos (deprecados)

/// warning | Aviso

A maneira recomendada para lidar com a *inicializa√ß√£o* e o *encerramento* √© usando o par√¢metro `lifespan` da aplica√ß√£o `FastAPI` como descrito acima.

Voc√™ provavelmente pode pular essa parte.

///

Existe uma forma alternativa para definir a execu√ß√£o dessa l√≥gica durante *inicializa√ß√£o* e durante *encerramento*.

Voc√™ pode definir manipuladores de eventos (fun√ß√µes) que precisam ser executadas antes da aplica√ß√£o inicializar, ou quando a aplica√ß√£o estiver encerrando.

Essas fun√ß√µes podem ser declaradas com `async def` ou `def` normal.

### Evento `startup`

Para adicionar uma fun√ß√£o que deve rodar antes da aplica√ß√£o iniciar, declare-a com o evento `"startup"`:

{* ../../docs_src/events/tutorial001.py hl[8] *}

Nesse caso, a fun√ß√£o de manipula√ß√£o de evento `startup` ir√° inicializar os itens do "banco de dados" (s√≥ um `dict`) com alguns valores.

Voc√™ pode adicionar mais que uma fun√ß√£o de manipula√ß√£o de evento.

E sua aplica√ß√£o n√£o ir√° come√ßar a receber requisi√ß√µes at√© que todos os manipuladores de eventos de `startup` sejam conclu√≠dos.

### Evento `shutdown`

Para adicionar uma fun√ß√£o que deve ser executada quando a aplica√ß√£o estiver encerrando, declare ela com o evento `"shutdown"`:

{* ../../docs_src/events/tutorial002.py hl[6] *}

Aqui, a fun√ß√£o de manipula√ß√£o de evento `shutdown` ir√° escrever uma linha de texto `"Application shutdown"` no arquivo `log.txt`.

/// info | Informa√ß√£o

Na fun√ß√£o `open()`, o `mode="a"` significa "acrescentar", ent√£o, a linha ir√° ser adicionada depois de qualquer coisa que esteja naquele arquivo, sem sobrescrever o conte√∫do anterior.

///

/// tip | Dica

Perceba que nesse caso n√≥s estamos usando a fun√ß√£o padr√£o do Python `open()` que interage com um arquivo.

Ent√£o, isso envolve I/O (input/output), que exige "esperar" que coisas sejam escritas em disco.

Mas `open()` n√£o usa `async` e `await`.

Ent√£o, n√≥s declaramos uma fun√ß√£o de manipula√ß√£o de evento com o padr√£o `def` ao inv√©s de `async def`.

///

### `startup` e `shutdown` juntos

H√° uma grande chance que a l√≥gica para sua *inicializa√ß√£o* e *encerramento* esteja conectada, voc√™ pode querer iniciar alguma coisa e ent√£o finaliz√°-la, adquirir um recurso e ent√£o liber√°-lo, etc.

Fazendo isso em fun√ß√µes separadas que n√£o compartilham l√≥gica ou vari√°veis entre elas √© mais dif√≠cil j√° que voc√™ precisa armazenar os valores em vari√°veis globais ou truques parecidos.

Por causa disso, agora √© recomendado em vez disso usar o `lifespan` como explicado acima.

## Detalhes t√©cnicos

S√≥ um detalhe t√©cnico para nerds curiosos. ü§ì

Por baixo, na especifica√ß√£o t√©cnica ASGI, essa √© a parte do <a href="https://asgi.readthedocs.io/en/latest/specs/lifespan.html" class="external-link" target="_blank">Protocolo Lifespan</a>, e define eventos chamados `startup` e `shutdown`.

/// info | Informa√ß√£o

Voc√™ pode ler mais sobre o manipulador `lifespan` do Starlette na <a href="https://www.starlette.io/lifespan/" class="external-link" target="_blank">Documenta√ß√£o do Lifespan Starlette</a>.

Incluindo como manipular estado do lifespan que pode ser usado em outras √°reas do seu c√≥digo.

///

## Sub Aplica√ß√µes

üö® Tenha em mente que esses eventos de lifespan (de inicializa√ß√£o e desligamento) ir√£o somente ser executados para a aplica√ß√£o principal, n√£o para [Sub Aplica√ß√µes - Montagem](sub-applications.md){.internal-link target=_blank}.


================================================
File: /docs/pt/docs/advanced/generate-clients.md
================================================
# Generate Clients

Como o **FastAPI** √© baseado na especifica√ß√£o **OpenAPI**, voc√™ obt√©m compatibilidade autom√°tica com muitas ferramentas, incluindo a documenta√ß√£o autom√°tica da API (fornecida pelo Swagger UI).

Uma vantagem particular que nem sempre √© √≥bvia √© que voc√™ pode **gerar clientes** (√†s vezes chamados de <abbr title="Software Development Kits">**SDKs**</abbr>) para a sua API, para muitas **linguagens de programa√ß√£o** diferentes.

## Geradores de Clientes OpenAPI

Existem muitas ferramentas para gerar clientes a partir do **OpenAPI**.

Uma ferramenta comum √© o <a href="https://openapi-generator.tech/" class="external-link" target="_blank">OpenAPI Generator</a>.

Se voce est√° construindo um **frontend**, uma alternativa muito interessante √© o <a href="https://github.com/hey-api/openapi-ts" class="external-link" target="_blank">openapi-ts</a>.

## Geradores de Clientes e SDKs - Patrocinadores

Existem tamb√©m alguns geradores de clientes e SDKs baseados na OpenAPI (FastAPI) **patrocinados por empresas**, em alguns casos eles podem oferecer **recursos adicionais** al√©m de SDKs/clientes gerados de alta qualidade.

Alguns deles tamb√©m ‚ú® [**patrocinam o FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ‚ú®, isso garante o **desenvolvimento** cont√≠nuo e saud√°vel do FastAPI e seu **ecossistema**.

E isso mostra o verdadeiro compromisso deles com o FastAPI e sua **comunidade** (voc√™), pois eles n√£o apenas querem fornecer um **bom servi√ßo**, mas tamb√©m querem garantir que voc√™ tenha um **framework bom e saud√°vel**, o FastAPI. üôá

Por exemplo, voc√™ pode querer experimentar:

* <a href="https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship" class="external-link" target="_blank">Speakeasy</a>
* <a href="https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral" class="external-link" target="_blank">Stainless</a>
* <a href="https://developers.liblab.com/tutorials/sdk-for-fastapi/?utm_source=fastapi" class="external-link" target="_blank">liblab</a>

Existem tamb√©m v√°rias outras empresas que oferecem servi√ßos semelhantes que voc√™ pode pesquisar e encontrar online. ü§ì

## Gerar um Cliente Frontend TypeScript

Vamos come√ßar com um aplicativo **FastAPI** simples:

{* ../../docs_src/generate_clients/tutorial001_py39.py hl[7:9,12:13,16:17,21] *}

Note que as *opera√ß√µes de rota* definem os modelos que usam para o corpo da requisi√ß√£o e o corpo da resposta, usando os modelos `Item` e `ResponseMessage`.

### Documenta√ß√£o da API

Se voc√™ acessar a documenta√ß√£o da API, ver√° que ela tem os **schemas** para os dados a serem enviados nas requisi√ß√µes e recebidos nas respostas:

<img src="/img/tutorial/generate-clients/image01.png">

Voc√™ pode ver esses schemas porque eles foram declarados com os modelos no app.

Essas informa√ß√µes est√£o dispon√≠veis no **OpenAPI schema** do app e s√£o mostradas na documenta√ß√£o da API (pelo Swagger UI).

E essas mesmas informa√ß√µes dos modelos que est√£o inclu√≠das no OpenAPI s√£o o que pode ser usado para **gerar o c√≥digo do cliente**.

### Gerar um Cliente TypeScript

Agora que temos o app com os modelos, podemos gerar o c√≥digo do cliente para o frontend.

#### Instalar o `openapi-ts`

Voc√™ pode instalar o `openapi-ts` no seu c√≥digo frontend com:

<div class="termy">

```console
$ npm install @hey-api/openapi-ts --save-dev

---> 100%
```

</div>

#### Gerar o C√≥digo do Cliente

Para gerar o c√≥digo do cliente, voc√™ pode usar a aplica√ß√£o de linha de comando `openapi-ts` que agora est√° instalada.

Como ela est√° instalada no projeto local, voc√™ provavelmente n√£o conseguiria chamar esse comando diretamente, mas voc√™ o colocaria no seu arquivo `package.json`.

Poderia ser assim:

```JSON  hl_lines="7"
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

Depois de ter esse script NPM `generate-client` l√°, voc√™ pode execut√°-lo com:

<div class="termy">

```console
$ npm run generate-client

frontend-app@1.0.0 generate-client /home/user/code/frontend-app
> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios
```

</div>

Esse comando gerar√° o c√≥digo em `./src/client` e usar√° o `axios` (a biblioteca HTTP frontend) internamente.

### Experimente o C√≥digo do Cliente

Agora voc√™ pode importar e usar o c√≥digo do cliente, ele poderia ser assim, observe que voc√™ obt√©m preenchimento autom√°tico para os m√©todos:

<img src="/img/tutorial/generate-clients/image02.png">

Voc√™ tamb√©m obter√° preenchimento autom√°tico para o corpo a ser enviado:

<img src="/img/tutorial/generate-clients/image03.png">

/// tip | Dica

Observe o preenchimento autom√°tico para `name` e `price`, que foi definido no aplicativo FastAPI, no modelo `Item`.

///

Voc√™ ter√° erros em linha para os dados que voc√™ envia:

<img src="/img/tutorial/generate-clients/image04.png">

O objeto de resposta tamb√©m ter√° preenchimento autom√°tico:

<img src="/img/tutorial/generate-clients/image05.png">

## App FastAPI com Tags

Em muitos casos seu app FastAPI ser√° maior, e voc√™ provavelmente usar√° tags para separar diferentes grupos de *opera√ß√µes de rota*.

Por exemplo, voc√™ poderia ter uma se√ß√£o para **items** e outra se√ß√£o para **users**, e elas poderiam ser separadas por tags:

{* ../../docs_src/generate_clients/tutorial002_py39.py hl[21,26,34] *}

### Gerar um Cliente TypeScript com Tags

Se voc√™ gerar um cliente para um app FastAPI usando tags, normalmente tamb√©m separar√° o c√≥digo do cliente com base nas tags.

Dessa forma, voc√™ poder√° ter as coisas ordenadas e agrupadas corretamente para o c√≥digo do cliente:

<img src="/img/tutorial/generate-clients/image06.png">

Nesse caso voc√™ tem:

* `ItemsService`
* `UsersService`

### Nomes dos M√©todos do Cliente

Agora os nomes dos m√©todos gerados como `createItemItemsPost` n√£o parecem muito "limpos":

```TypeScript
ItemsService.createItemItemsPost({name: "Plumbus", price: 5})
```

...isto ocorre porque o gerador de clientes usa o **operation ID** interno do OpenAPI para cada *opera√ß√£o de rota*.

O OpenAPI exige que cada operation ID seja √∫nico em todas as *opera√ß√µes de rota*, ent√£o o FastAPI usa o **nome da fun√ß√£o**, o **caminho** e o **m√©todo/operacao HTTP** para gerar esse operation ID, porque dessa forma ele pode garantir que os operation IDs sejam √∫nicos.

Mas eu vou te mostrar como melhorar isso a seguir. ü§ì

### IDs de Opera√ß√£o Personalizados e Melhores Nomes de M√©todo

Voc√™ pode **modificar** a maneira como esses IDs de opera√ß√£o s√£o **gerados** para torn√°-los mais simples e ter **nomes de m√©todo mais simples** nos clientes.

Neste caso, voc√™ ter√° que garantir que cada ID de opera√ß√£o seja **√∫nico** de alguma outra maneira.

Por exemplo, voc√™ poderia garantir que cada *opera√ß√£o de rota* tenha uma tag, e ent√£o gerar o ID da opera√ß√£o com base na **tag** e no **nome** da *opera√ß√£o de rota* (o nome da fun√ß√£o).

### Fun√ß√£o Personalizada para Gerar IDs de Opera√ß√£o √önicos

O FastAPI usa um **ID √∫nico** para cada *opera√ß√£o de rota*, ele √© usado para o **ID da opera√ß√£o** e tamb√©m para os nomes de quaisquer modelos personalizados necess√°rios, para requisi√ß√µes ou respostas.

Voc√™ pode personalizar essa fun√ß√£o. Ela recebe uma `APIRoute` e gera uma string.

Por exemplo, aqui est√° usando a primeira tag (voc√™ provavelmente ter√° apenas uma tag) e o nome da *opera√ß√£o de rota* (o nome da fun√ß√£o).

Voc√™ pode ent√£o passar essa fun√ß√£o personalizada para o **FastAPI** como o par√¢metro `generate_unique_id_function`:

{* ../../docs_src/generate_clients/tutorial003_py39.py hl[6:7,10] *}

### Gerar um Cliente TypeScript com IDs de Opera√ß√£o Personalizados

Agora, se voc√™ gerar o cliente novamente, ver√° que ele tem os nomes dos m√©todos melhorados:

<img src="/img/tutorial/generate-clients/image07.png">

Como voc√™ pode ver, os nomes dos m√©todos agora t√™m a tag e, em seguida, o nome da fun√ß√£o. Agora eles n√£o incluem informa√ß√µes do caminho da URL e da opera√ß√£o HTTP.

### Pr√©-processar a Especifica√ß√£o OpenAPI para o Gerador de Clientes

O c√≥digo gerado ainda tem algumas **informa√ß√µes duplicadas**.

N√≥s j√° sabemos que esse m√©todo est√° relacionado aos **items** porque essa palavra est√° no `ItemsService` (retirada da tag), mas ainda temos o nome da tag prefixado no nome do m√©todo tamb√©m. üòï

Provavelmente ainda queremos mant√™-lo para o OpenAPI em geral, pois isso garantir√° que os IDs de opera√ß√£o sejam **√∫nicos**.

Mas para o cliente gerado, poder√≠amos **modificar** os IDs de opera√ß√£o do OpenAPI logo antes de gerar os clientes, apenas para tornar esses nomes de m√©todo mais **simples**.

Poder√≠amos baixar o JSON do OpenAPI para um arquivo `openapi.json` e ent√£o poder√≠amos **remover essa tag prefixada** com um script como este:

{* ../../docs_src/generate_clients/tutorial004.py *}

//// tab | Node.js

```Javascript
{!> ../../docs_src/generate_clients/tutorial004.js!}
```

////

Com isso, os IDs de opera√ß√£o seriam renomeados de coisas como `items-get_items` para apenas `get_items`, dessa forma o gerador de clientes pode gerar nomes de m√©todos mais simples.

### Gerar um Cliente TypeScript com o OpenAPI Pr√©-processado

Agora, como o resultado final est√° em um arquivo `openapi.json`, voc√™ modificaria o `package.json` para usar esse arquivo local, por exemplo:

```JSON  hl_lines="7"
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

Depois de gerar o novo cliente, voc√™ teria agora **nomes de m√©todos "limpos"**, com todo o **preenchimento autom√°tico**, **erros em linha**, etc:

<img src="/img/tutorial/generate-clients/image08.png">

## Benef√≠cios

Ao usar os clientes gerados automaticamente, voc√™ teria **preenchimento autom√°tico** para:

* M√©todos.
* Corpo de requisi√ß√µes, par√¢metros da query, etc.
* Corpo de respostas.

Voc√™ tamb√©m teria **erros em linha** para tudo.

E sempre que voc√™ atualizar o c√≥digo do backend, e **regenerar** o frontend, ele teria quaisquer novas *opera√ß√µes de rota* dispon√≠veis como m√©todos, as antigas removidas, e qualquer outra altera√ß√£o seria refletida no c√≥digo gerado. ü§ì

Isso tamb√©m significa que se algo mudar, ser√° **refletido** no c√≥digo do cliente automaticamente. E se voc√™ **construir** o cliente, ele dar√° erro se houver alguma **incompatibilidade** nos dados usados.

Ent√£o, voc√™ **detectaria v√°rios erros** muito cedo no ciclo de desenvolvimento, em vez de ter que esperar que os erros apare√ßam para seus usu√°rios finais em produ√ß√£o e ent√£o tentar depurar onde est√° o problema. ‚ú®


================================================
File: /docs/pt/docs/advanced/index.md
================================================
# Guia de Usu√°rio Avan√ßado

## Recursos Adicionais

O [Tutorial - Guia de Usu√°rio](../tutorial/index.md){.internal-link target=_blank} deve ser o suficiente para dar a voc√™ um tour por todos os principais recursos do **FastAPI**.

Na pr√≥xima se√ß√£o voc√™ ver√° outras op√ß√µes, configura√ß√µes, e recursos adicionais.

/// tip | Dica

As pr√≥ximas se√ß√µes **n√£o s√£o necess√°riamente "avan√ßadas"**

E √© poss√≠vel que para seu caso de uso, a solu√ß√£o esteja em uma delas.

///

## Leia o Tutorial primeiro

Voc√™ ainda pode usar a maior parte dos recursos no **FastAPI** com o conhecimento do [Tutorial - Guia de Usu√°rio](../tutorial/index.md){.internal-link target=_blank}.

E as pr√≥ximas se√ß√µes assumem que voc√™ j√° leu ele, e que voc√™ conhece suas ideias principais.

## Curso TestDriven.io

Se voc√™ gostaria de fazer um curso avan√ßado-iniciante para complementar essa se√ß√£o da documenta√ß√£o, voc√™ pode querer conferir: <a href="https://testdriven.io/courses/tdd-fastapi/" class="external-link" target="_blank">Test-Driven Development com FastAPI e Docker</a> por **TestDriven.io**.

Eles est√£o atualmente doando 10% de todos os lucros para o desenvolvimento do **FastAPI**. üéâ üòÑ


================================================
File: /docs/pt/docs/advanced/middleware.md
================================================
# Middleware Avan√ßado

No tutorial principal voc√™ leu como adicionar [Middleware Personalizado](../tutorial/middleware.md){.internal-link target=_blank} √† sua aplica√ß√£o.

E ent√£o voc√™ tamb√©m leu como lidar com [CORS com o `CORSMiddleware`](../tutorial/cors.md){.internal-link target=_blank}.

Nesta se√ß√£o, veremos como usar outros middlewares.

## Adicionando middlewares ASGI

Como o **FastAPI** √© baseado no Starlette e implementa a especifica√ß√£o <abbr title="Asynchronous Server Gateway Interface">ASGI</abbr>, voc√™ pode usar qualquer middleware ASGI.

O middleware n√£o precisa ser feito para o FastAPI ou Starlette para funcionar, desde que siga a especifica√ß√£o ASGI.

No geral, os middlewares ASGI s√£o classes que esperam receber um aplicativo ASGI como o primeiro argumento.

Ent√£o, na documenta√ß√£o de middlewares ASGI de terceiros, eles provavelmente dir√£o para voc√™ fazer algo como:

```Python
from unicorn import UnicornMiddleware

app = SomeASGIApp()

new_app = UnicornMiddleware(app, some_config="rainbow")
```

Mas, o FastAPI (na verdade, o Starlette) fornece uma maneira mais simples de fazer isso que garante que os middlewares internos lidem com erros do servidor e que os manipuladores de exce√ß√µes personalizados funcionem corretamente.

Para isso, voc√™ usa `app.add_middleware()` (como no exemplo para CORS).

```Python
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

`app.add_middleware()` recebe uma classe de middleware como o primeiro argumento e quaisquer argumentos adicionais a serem passados para o middleware.

## Middlewares Integrados

**FastAPI** inclui v√°rios middlewares para casos de uso comuns, veremos a seguir como us√°-los.

/// note | Detalhes T√©cnicos

Para o pr√≥ximo exemplo, voc√™ tamb√©m poderia usar `from starlette.middleware.something import SomethingMiddleware`.

**FastAPI** fornece v√°rios middlewares em `fastapi.middleware` apenas como uma conveni√™ncia para voc√™, o desenvolvedor. Mas a maioria dos middlewares dispon√≠veis vem diretamente do Starlette.

///

## `HTTPSRedirectMiddleware`

Garante que todas as requisi√ß√µes devem ser `https` ou `wss`.

Qualquer requisi√ß√£o para `http` ou `ws` ser√° redirecionada para o esquema seguro.

{* ../../docs_src/advanced_middleware/tutorial001.py hl[2,6] *}

## `TrustedHostMiddleware`

Garante que todas as requisi√ß√µes recebidas tenham um cabe√ßalho `Host` corretamente configurado, a fim de proteger contra ataques de cabe√ßalho de host HTTP.

{* ../../docs_src/advanced_middleware/tutorial002.py hl[2,6:8] *}

Os seguintes argumentos s√£o suportados:

* `allowed_hosts` - Uma lista de nomes de dom√≠nio que s√£o permitidos como nomes de host. Dom√≠nios com coringa, como `*.example.com`, s√£o suportados para corresponder a subdom√≠nios. Para permitir qualquer nome de host, use `allowed_hosts=["*"]` ou omita o middleware.

Se uma requisi√ß√£o recebida n√£o for validada corretamente, uma resposta `400` ser√° enviada.

## `GZipMiddleware`

Gerencia respostas GZip para qualquer requisi√ß√£o que inclua `"gzip"` no cabe√ßalho `Accept-Encoding`.

O middleware lidar√° com respostas padr√£o e de streaming.

{* ../../docs_src/advanced_middleware/tutorial003.py hl[2,6] *}

Os seguintes argumentos s√£o suportados:

* `minimum_size` - N√£o comprima respostas menores que este tamanho m√≠nimo em bytes. O padr√£o √© `500`.
* `compresslevel` - Usado durante a compress√£o GZip. √â um inteiro variando de 1 a 9. O padr√£o √© `9`. Um valor menor resulta em uma compress√£o mais r√°pida, mas em arquivos maiores, enquanto um valor maior resulta em uma compress√£o mais lenta, mas em arquivos menores.

## Outros middlewares

H√° muitos outros middlewares ASGI.

Por exemplo:

* <a href="https://github.com/encode/uvicorn/blob/master/uvicorn/middleware/proxy_headers.py" class="external-link" target="_blank">Uvicorn's `ProxyHeadersMiddleware`</a>
* <a href="https://github.com/florimondmanca/msgpack-asgi" class="external-link" target="_blank">MessagePack</a>

Para checar outros middlewares dispon√≠veis, confira <a href="https://www.starlette.io/middleware/" class="external-link" target="_blank">Documenta√ß√£o de Middlewares do Starlette</a> e a  <a href="https://github.com/florimondmanca/awesome-asgi" class="external-link" target="_blank">Lista Incr√≠vel do ASGI</a>.


================================================
File: /docs/pt/docs/advanced/openapi-callbacks.md
================================================
# Callbacks na OpenAPI

Voc√™ poderia criar uma API com uma *opera√ß√£o de rota* que poderia acionar uma solicita√ß√£o a uma *API externa* criada por outra pessoa (provavelmente o mesmo desenvolvedor que estaria *usando* sua API).

O processo que acontece quando seu aplicativo de API chama a *API externa* √© chamado de "callback". Porque o software que o desenvolvedor externo escreveu envia uma solicita√ß√£o para sua API e ent√£o sua API *chama de volta*, enviando uma solicita√ß√£o para uma *API externa* (que provavelmente foi criada pelo mesmo desenvolvedor).

Nesse caso, voc√™ poderia querer documentar como essa API externa *deveria* ser. Que *opera√ß√£o de rota* ela deveria ter, que corpo ela deveria esperar, que resposta ela deveria retornar, etc.

## Um aplicativo com callbacks

Vamos ver tudo isso com um exemplo.

Imagine que voc√™ tem um aplicativo que permite criar faturas.

Essas faturas ter√£o um `id`, `title` (opcional), `customer` e `total`.

O usu√°rio da sua API (um desenvolvedor externo) criar√° uma fatura em sua API com uma solicita√ß√£o POST.

Ent√£o sua API ir√° (vamos imaginar):

* Enviar uma solicita√ß√£o de pagamento para o desenvolvedor externo.
* Coletar o dinheiro.
* Enviar a notifica√ß√£o de volta para o usu√°rio da API (o desenvolvedor externo).
* Isso ser√° feito enviando uma solicita√ß√£o POST (de *sua API*) para alguma *API externa* fornecida por esse desenvolvedor externo (este √© o "callback").

## O aplicativo **FastAPI** normal

Vamos primeiro ver como o aplicativo da API normal se pareceria antes de adicionar o callback.

Ele ter√° uma *opera√ß√£o de rota* que receber√° um corpo `Invoice`, e um par√¢metro de consulta `callback_url` que conter√° a URL para o callback.

Essa parte √© bastante normal, a maior parte do c√≥digo provavelmente j√° √© familiar para voc√™:

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[9:13,36:53] *}

/// tip | Dica

O par√¢metro de consulta `callback_url` usa um tipo Pydantic <a href="https://docs.pydantic.dev/latest/api/networks/" class="external-link" target="_blank">Url</a>.

///

A √∫nica coisa nova √© o argumento `callbacks=invoices_callback_router.routes` no decorador da *opera√ß√£o de rota*. Veremos o que √© isso a seguir.

## Documentando o callback

O c√≥digo real do callback depender√° muito do seu pr√≥prio aplicativo de API.

E provavelmente variar√° muito de um aplicativo para o outro.

Poderia ser apenas uma ou duas linhas de c√≥digo, como:

```Python
callback_url = "https://example.com/api/v1/invoices/events/"
httpx.post(callback_url, json={"description": "Invoice paid", "paid": True})
```

Mas possivelmente a parte mais importante do callback √© garantir que o usu√°rio da sua API (o desenvolvedor externo) implemente a *API externa* corretamente, de acordo com os dados que *sua API* vai enviar no corpo da solicita√ß√£o do callback, etc.

Ent√£o, o que faremos a seguir √© adicionar o c√≥digo para documentar como essa *API externa* deve ser para receber o callback de *sua API*.

A documenta√ß√£o aparecer√° na interface do Swagger em `/docs` em sua API, e permitir√° que os desenvolvedores externos saibam como construir a *API externa*.

Esse exemplo n√£o implementa o callback em si (que poderia ser apenas uma linha de c√≥digo), apenas a parte da documenta√ß√£o.

/// tip | Dica

O callback real √© apenas uma solicita√ß√£o HTTP.

Quando implementando o callback por voc√™ mesmo, voc√™ pode usar algo como <a href="https://www.python-httpx.org" class="external-link" target="_blank">HTTPX</a> ou <a href="https://requests.readthedocs.io/" class="external-link" target="_blank">Requisi√ß√µes</a>.

///

## Escrevendo o c√≥digo de documenta√ß√£o do callback

Esse c√≥digo n√£o ser√° executado em seu aplicativo, n√≥s s√≥ precisamos dele para *documentar* como essa *API externa* deveria ser.

Mas, voc√™ j√° sabe como criar facilmente documenta√ß√£o autom√°tica para uma API com o **FastAPI**.

Ent√£o vamos usar esse mesmo conhecimento para documentar como a *API externa* deveria ser... criando as *opera√ß√µes de rota* que a *API externa* deveria implementar (as que sua API ir√° chamar).

/// tip | Dica

Quando escrever o c√≥digo para documentar um callback, pode ser √∫til imaginar que voc√™ √© aquele *desenvolvedor externo*. E que voc√™ est√° atualmente implementando a *API externa*, n√£o *sua API*.

Adotar temporariamente esse ponto de vista (do *desenvolvedor externo*) pode ajudar a sentir que √© mais √≥bvio onde colocar os par√¢metros, o modelo Pydantic para o corpo, para a resposta, etc. para essa *API externa*.

///

### Criar um `APIRouter` para o callback

Primeiramente crie um novo `APIRouter` que conter√° um ou mais callbacks.

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[3,25] *}

### Crie a *opera√ß√£o de rota* do callback

Para criar a *opera√ß√£o de rota* do callback, use o mesmo `APIRouter` que voc√™ criou acima.

Ele deve parecer exatamente como uma *opera√ß√£o de rota* normal do FastAPI:

* Ele provavelmente deveria ter uma declara√ß√£o do corpo que deveria receber, por exemplo. `body: InvoiceEvent`.
* E tamb√©m deveria ter uma declara√ß√£o de um c√≥digo de status de resposta, por exemplo. `response_model=InvoiceEventReceived`.

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[16:18,21:22,28:32] *}

H√° 2 diferen√ßas principais de uma *opera√ß√£o de rota* normal:

* Ela n√£o necessita ter nenhum c√≥digo real, porque seu aplicativo nunca chamar√° esse c√≥digo. Ele √© usado apenas para documentar a *API externa*. Ent√£o, a fun√ß√£o poderia ter apenas `pass`.
* A *rota* pode conter uma <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#key-expression" class="external-link" target="_blank">express√£o OpenAPI 3</a> (veja mais abaixo) onde pode usar vari√°veis com par√¢metros e partes da solicita√ß√£o original enviada para *sua API*.

### A express√£o do caminho do callback

A *rota* do callback pode ter uma <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#key-expression" class="external-link" target="_blank">express√£o OpenAPI 3</a> que pode conter partes da solicita√ß√£o original enviada para *sua API*.

Nesse caso, √© a `str`:

```Python
"{$callback_url}/invoices/{$request.body.id}"
```

Ent√£o, se o usu√°rio da sua API (o desenvolvedor externo) enviar uma solicita√ß√£o para *sua API* para:

```
https://yourapi.com/invoices/?callback_url=https://www.external.org/events
```

com um corpo JSON de:

```JSON
{
    "id": "2expen51ve",
    "customer": "Mr. Richie Rich",
    "total": "9999"
}
```

ent√£o *sua API* processar√° a fatura e, em algum momento posterior, enviar√° uma solicita√ß√£o de callback para o `callback_url` (a *API externa*):

```
https://www.external.org/events/invoices/2expen51ve
```

com um corpo JSON contendo algo como:

```JSON
{
    "description": "Payment celebration",
    "paid": true
}
```

e esperaria uma resposta daquela *API externa* com um corpo JSON como:

```JSON
{
    "ok": true
}
```

/// tip | Dica

Perceba como a URL de callback usada cont√©m a URL recebida como um par√¢metro de consulta em `callback_url` (`https://www.external.org/events`) e tamb√©m o `id` da fatura de dentro do corpo JSON (`2expen51ve`).

///

### Adicionar o roteador de callback

Nesse ponto voc√™ tem a(s) *opera√ß√£o de rota de callback* necess√°ria(s) (a(s) que o *desenvolvedor externo* deveria implementar na *API externa*) no roteador de callback que voc√™ criou acima.

Agora use o par√¢metro `callbacks` no decorador da *opera√ß√£o de rota de sua API* para passar o atributo `.routes` (que √© na verdade apenas uma `list` de rotas/*opera√ß√µes de rota*) do roteador de callback que voc√™ criou acima:

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[35] *}

/// tip | Dica

Perceba que voc√™ n√£o est√° passando o roteador em si (`invoices_callback_router`) para `callback=`, mas o atributo `.routes`, como em `invoices_callback_router.routes`.

///

### Verifique a documenta√ß√£o

Agora voc√™ pode iniciar seu aplicativo e ir para <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Voc√™ ver√° sua documenta√ß√£o incluindo uma se√ß√£o "Callbacks" para sua *opera√ß√£o de rota* que mostra como a *API externa* deveria ser:

<img src="/img/tutorial/openapi-callbacks/image01.png">


================================================
File: /docs/pt/docs/advanced/openapi-webhooks.md
================================================
# Webhooks OpenAPI

Existem situa√ß√µes onde voc√™ deseja informar os **usu√°rios** da sua API que a sua aplica√ß√£o pode chamar a aplica√ß√£o *deles* (enviando uma requisi√ß√£o) com alguns dados, normalmente para **notificar** algum tipo de **evento**.

Isso significa que no lugar do processo normal de seus usu√°rios enviarem requisi√ß√µes para a sua API, √© a **sua API** (ou sua aplica√ß√£o) que poderia **enviar requisi√ß√µes para o sistema deles** (para a API deles, a aplica√ß√£o deles).

Isso normalmente √© chamado de **webhook**.

## Etapas dos Webhooks

Normalmente, o processo √© que **voc√™ define** em seu c√≥digo qual √© a mensagem que voc√™ ir√° mandar, o **corpo da sua requisi√ß√£o**.

Voc√™ tamb√©m define de alguma maneira em quais **momentos** a sua aplica√ß√£o mandar√° essas requisi√ß√µes ou eventos.

E os **seus usu√°rios** definem de alguma forma (em algum painel por exemplo) a **URL** que a sua aplica√ß√£o deve enviar essas requisi√ß√µes.

Toda a **l√≥gica** sobre como cadastrar as URLs para os webhooks e o c√≥digo para enviar de fato as requisi√ß√µes cabe a voc√™ definir. Voc√™ escreve da maneira que voc√™ desejar no **seu pr√≥prio c√≥digo**.

## Documentando webhooks com o FastAPI e OpenAPI

Com o **FastAPI**, utilizando o OpenAPI, voc√™ pode definir os nomes destes webhooks, os tipos das opera√ß√µes HTTP que a sua aplica√ß√£o pode enviar (e.g. `POST`, `PUT`, etc.) e os **corpos** da requisi√ß√£o que a sua aplica√ß√£o enviaria.

Isto pode facilitar bastante para os seus usu√°rios **implementarem as APIs deles** para receber as requisi√ß√µes dos seus **webhooks**, eles podem inclusive ser capazes de gerar parte do c√≥digo da API deles.

/// info | Informa√ß√£o

Webhooks est√£o dispon√≠veis a partir do OpenAPI 3.1.0, e possui suporte do FastAPI a partir da vers√£o `0.99.0`.

///

## Uma aplica√ß√£o com webhooks

Quando voc√™ cria uma aplica√ß√£o com o **FastAPI**, existe um atributo chamado `webhooks`, que voc√™ utilizar para defini-los da mesma maneira que voc√™ definiria as suas **opera√ß√µes de rotas**, utilizando por exemplo `@app.webhooks.post()`.

{* ../../docs_src/openapi_webhooks/tutorial001.py hl[9:13,36:53] *}

Os webhooks que voc√™ define aparecer√£o no esquema do **OpenAPI** e na **p√°gina de documenta√ß√£o** gerada automaticamente.

/// info | Informa√ß√£o

O objeto `app.webhooks` √© na verdade apenas um `APIRouter`, o mesmo tipo que voc√™ utilizaria ao estruturar a sua aplica√ß√£o com diversos arquivos.

///

Note que utilizando webhooks voc√™ n√£o est√° de fato declarando uma **rota** (como `/items/`), o texto que informa √© apenas um **identificador** do webhook (o nome do evento), por exemplo em `@app.webhooks.post("new-subscription")`, o nome do webhook √© `new-subscription`.

Isto porque espera-se que os **seus usu√°rios** definam o verdadeiro **caminho da URL** onde eles desejam receber a requisi√ß√£o do webhook de algum outra maneira. (e.g. um painel).

### Confira a documenta√ß√£o

Agora voc√™ pode iniciar a sua aplica√ß√£o e ir at√© <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Voc√™ ver√° que a sua documenta√ß√£o possui as *opera√ß√µes de rota* normais e agora tamb√©m possui alguns **webhooks**:

<img src="/img/tutorial/openapi-webhooks/image01.png">


================================================
File: /docs/pt/docs/advanced/path-operation-advanced-configuration.md
================================================
# Configura√ß√£o Avan√ßada da Opera√ß√£o de Rota

## operationId do OpenAPI

/// warning | Aviso

Se voc√™ n√£o √© um "especialista" no OpenAPI, voc√™ provavelmente n√£o precisa disso.

///

Voc√™ pode definir o `operationId` do OpenAPI que ser√° utilizado na sua *opera√ß√£o de rota* com o par√¢metro `operation_id`.

Voc√™ precisa ter certeza que ele √© √∫nico para cada opera√ß√£o.

{* ../../docs_src/path_operation_advanced_configuration/tutorial001.py hl[6] *}

### Utilizando o nome da *fun√ß√£o de opera√ß√£o de rota* como o operationId

Se voc√™ quiser utilizar o nome das fun√ß√µes da sua API como `operationId`s, voc√™ pode iterar sobre todos esses nomes e sobrescrever o `operationId` em  cada *opera√ß√£o de rota* utilizando o `APIRoute.name` dela.

Voc√™ deve fazer isso depois de adicionar todas as suas *opera√ß√µes de rota*.

{* ../../docs_src/path_operation_advanced_configuration/tutorial002.py hl[2,12:21,24] *}

/// tip | Dica

Se voc√™ chamar `app.openapi()` manualmente, os `operationId`s devem ser atualizados antes dessa chamada.

///

/// warning | Aviso

Se voc√™ fizer isso, voc√™ tem que ter certeza de que cada uma das suas *fun√ß√µes de opera√ß√£o de rota* tem um nome √∫nico.

Mesmo que elas estejam em m√≥dulos (arquivos Python) diferentes.

///

## Excluir do OpenAPI

Para excluir uma *opera√ß√£o de rota* do esquema OpenAPI gerado (e por consequ√™ncia, dos sistemas de documenta√ß√£o autom√°ticos), utilize o par√¢metro `include_in_schema` e defina ele como `False`:

{* ../../docs_src/path_operation_advanced_configuration/tutorial003.py hl[6] *}

## Descri√ß√£o avan√ßada a partir de docstring

Voc√™ pode limitar as linhas utilizadas a partir de uma docstring de uma *fun√ß√£o de opera√ß√£o de rota* para o OpenAPI.

Adicionar um `\f` (um caractere de escape para alimenta√ß√£o de formul√°rio) faz com que o **FastAPI** restrinja a sa√≠da utilizada pelo OpenAPI at√© esse ponto.

Ele n√£o ser√° mostrado na documenta√ß√£o, mas outras ferramentas (como o Sphinx) ser√£o capazes de utilizar o resto do texto.

{* ../../docs_src/path_operation_advanced_configuration/tutorial004.py hl[19:29] *}

## Respostas Adicionais

Voc√™ provavelmente j√° viu como declarar o `response_model` e `status_code` para uma *opera√ß√£o de rota*.

Isso define os metadados sobre a resposta principal da *opera√ß√£o de rota*.

Voc√™ tamb√©m pode declarar respostas adicionais, com seus modelos, c√≥digos de status, etc.

Existe um cap√≠tulo inteiro da nossa documenta√ß√£o sobre isso, voc√™ pode ler em [Retornos Adicionais no OpenAPI](additional-responses.md){.internal-link target=_blank}.

## Extras do OpenAPI

Quando voc√™ declara uma *opera√ß√£o de rota* na sua aplica√ß√£o, o **FastAPI** ir√° gerar os metadados relevantes da *opera√ß√£o de rota* automaticamente para serem inclu√≠dos no esquema do OpenAPI.

/// note | Nota

Na especifica√ß√£o do OpenAPI, isso √© chamado de um <a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#operation-object" class="external-link" target="_blank">Objeto de Opera√ß√£o</a>.

///

Ele possui toda a informa√ß√£o sobre a *opera√ß√£o de rota* e √© usado para gerar a documenta√ß√£o automaticamente.

Ele inclui os atributos `tags`, `parameters`, `requestBody`, `responses`, etc.

Esse esquema espec√≠fico para uma *opera√ß√£o de rota* normalmente √© gerado automaticamente pelo **FastAPI**, mas voc√™ tamb√©m pode estender ele.

/// tip | Dica

Esse √© um ponto de extens√£o de baixo n√≠vel.

Caso voc√™ s√≥ precise declarar respostas adicionais, uma forma conveniente de fazer isso √© com [Retornos Adicionais no OpenAPI](additional-responses.md){.internal-link target=_blank}.

///

Voc√™ pode estender o esquema do OpenAPI para uma *opera√ß√£o de rota* utilizando o par√¢metro `openapi_extra`.

### Extens√µes do OpenAPI

Esse par√¢metro `openapi_extra` pode ser √∫til, por exemplo, para declarar [Extens√µes do OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specificationExtensions):

{* ../../docs_src/path_operation_advanced_configuration/tutorial005.py hl[6] *}

Se voc√™ abrir os documentos criados automaticamente para a API, sua extens√£o aparecer√° no final da *opera√ß√£o de rota* espec√≠fica.

<img src="/img/tutorial/path-operation-advanced-configuration/image01.png">

E se voc√™ olhar o esquema OpenAPI resultante (na rota `/openapi.json` da sua API), voc√™ ver√° que a sua extens√£o tamb√©m faz parte da *opera√ß√£o de rota* espec√≠fica:

```JSON hl_lines="22"
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "summary": "Read Items",
                "operationId": "read_items_items__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "x-aperture-labs-portal": "blue"
            }
        }
    }
}
```

### Esquema de *opera√ß√£o de rota* do OpenAPI personalizado

O dicion√°rio em `openapi_extra` vai ter todos os seus n√≠veis mesclados dentro do esquema OpenAPI gerado automaticamente para a *opera√ß√£o de rota*.

Ent√£o, voc√™ pode adicionar dados extras para o esquema gerado automaticamente.

Por exemplo, voc√™ poderia optar por ler e validar a requisi√ß√£o com seu pr√≥prio c√≥digo, sem utilizar funcionalidades automatizadas do FastAPI com o Pydantic, mas voc√™ ainda pode quere definir a requisi√ß√£o no esquema OpenAPI.

Voc√™ pode fazer isso com `openapi_extra`:

{* ../../docs_src/path_operation_advanced_configuration/tutorial006.py hl[19:36,39:40] *}

Nesse exemplo, n√≥s n√£o declaramos nenhum modelo do Pydantic. Na verdade, o corpo da requisi√ß√£o n√£o est√° nem mesmo <abbr title="convertido de um formato plano, como bytes, para objetos Python">analisado</abbr> como JSON, ele √© lido diretamente como `bytes` e a fun√ß√£o `magic_data_reader()` seria a respons√°vel por analisar ele de alguma forma.

De toda forma, n√≥s podemos declarar o esquema esperado para o corpo da requisi√ß√£o.

### Tipo de conte√∫do do OpenAPI personalizado

Utilizando esse mesmo truque, voc√™ pode utilizar um modelo Pydantic para definir o esquema JSON que √© ent√£o inclu√≠do na se√ß√£o do esquema personalizado do OpenAPI na *opera√ß√£o de rota*.

E voc√™ pode fazer isso at√© mesmo quando os dados da requisi√ß√£o n√£o seguem o formato JSON.

Por exemplo, nesta aplica√ß√£o n√≥s n√£o usamos a funcionalidade integrada ao FastAPI de extrair o esquema JSON dos modelos Pydantic nem a valida√ß√£o autom√°tica do JSON. Na verdade, estamos declarando o tipo do conte√∫do da requisi√ß√£o como YAML, em vez de JSON:

//// tab | Pydantic v2

{* ../../docs_src/path_operation_advanced_configuration/tutorial007.py hl[17:22,24] *}

////

//// tab | Pydantic v1

{* ../../docs_src/path_operation_advanced_configuration/tutorial007_pv1.py hl[17:22,24] *}

////

/// info | Informa√ß√£o

Na vers√£o 1 do Pydantic, o m√©todo para obter o esquema JSON de um modelo √© `Item.schema()`, na vers√£o 2 do Pydantic, o m√©todo √© `Item.model_json_schema()`

///

Entretanto, mesmo que n√£o utilizemos a funcionalidade integrada por padr√£o, ainda estamos usando um modelo Pydantic para gerar um esquema JSON manualmente para os dados que queremos receber no formato YAML.

Ent√£o utilizamos a requisi√ß√£o diretamente, e extra√≠mos o corpo como `bytes`. Isso significa que o FastAPI n√£o vai sequer tentar analisar o corpo da requisi√ß√£o como JSON.

E ent√£o no nosso c√≥digo, n√≥s analisamos o conte√∫do YAML diretamente, e estamos utilizando o mesmo modelo Pydantic para validar o conte√∫do YAML:

//// tab | Pydantic v2

{* ../../docs_src/path_operation_advanced_configuration/tutorial007.py hl[26:33] *}

////

//// tab | Pydantic v1

{* ../../docs_src/path_operation_advanced_configuration/tutorial007_pv1.py hl[26:33] *}

////

/// info | Informa√ß√£o

Na vers√£o 1 do Pydantic, o m√©todo para analisar e validar um objeto era `Item.parse_obj()`, na vers√£o 2 do Pydantic, o m√©todo √© chamado de `Item.model_validate()`.

///

///tip | Dica

Aqui reutilizamos o mesmo modelo do Pydantic.

Mas da mesma forma, n√≥s poder√≠amos ter validado de alguma outra forma.

///


================================================
File: /docs/pt/docs/advanced/response-change-status-code.md
================================================
# Retorno - Altere o C√≥digo de Status

Voc√™ provavelmente leu anteriormente que voc√™ pode definir um [C√≥digo de Status do Retorno](../tutorial/response-status-code.md){.internal-link target=_blank} padr√£o.

Por√©m em alguns casos voc√™ precisa retornar um c√≥digo de status diferente do padr√£o.

## Caso de uso

Por exemplo, imagine que voc√™ deseja retornar um c√≥digo de status HTTP de "OK" `200` por padr√£o.

Mas se o dado n√£o existir, voc√™ quer cri√°-lo e retornar um c√≥digo de status HTTP de "CREATED" `201`.

Mas voc√™ ainda quer ser capaz de filtrar e converter o dado que voc√™ retornar√° com um `response_model`.

Para estes casos, voc√™ pode utilizar um par√¢metro `Response`.

## Use um par√¢metro `Response`

Voc√™ pode declarar um par√¢metro do tipo `Response` em sua *fun√ß√£o de opera√ß√£o de rota* (assim como voc√™ pode fazer para cookies e headers).

E ent√£o voc√™ pode definir o `status_code` neste objeto de retorno temporal.

{* ../../docs_src/response_change_status_code/tutorial001.py hl[1,9,12] *}

E ent√£o voc√™ pode retornar qualquer objeto que voc√™ precise, como voc√™ faria normalmente (um `dict`, um modelo de banco de dados, etc.).

E se voc√™ declarar um `response_model`, ele ainda ser√° utilizado para filtrar e converter o objeto que voc√™ retornou.

O **FastAPI** utilizar√° este retorno *temporal* para extrair o c√≥digo de status (e tamb√©m cookies e headers), e ir√° coloc√°-los no retorno final que cont√©m o valor que voc√™ retornou, filtrado por qualquer `response_model`.

Voc√™ tamb√©m pode declarar o par√¢metro `Response` nas depend√™ncias, e definir o c√≥digo de status nelas. Mas lembre-se que o √∫ltimo que for definido √© o que prevalecer√°.


================================================
File: /docs/pt/docs/advanced/response-cookies.md
================================================
# Cookies de Resposta

## Usando um par√¢metro `Response`

Voc√™ pode declarar um par√¢metro do tipo `Response` na sua *fun√ß√£o de opera√ß√£o de rota*.

E ent√£o voc√™ pode definir cookies nesse objeto de resposta *tempor√°rio*.

{* ../../docs_src/response_cookies/tutorial002.py hl[1,8:9] *}

Em seguida, voc√™ pode retornar qualquer objeto que precise, como normalmente faria (um `dict`, um modelo de banco de dados, etc).

E se voc√™ declarou um `response_model`, ele ainda ser√° usado para filtrar e converter o objeto que voc√™ retornou.

**FastAPI** usar√° essa resposta *tempor√°ria* para extrair os cookies (tamb√©m os cabe√ßalhos e c√≥digo de status) e os colocar√° na resposta final que cont√©m o valor que voc√™ retornou, filtrado por qualquer `response_model`.

Voc√™ tamb√©m pode declarar o par√¢metro `Response` em depend√™ncias e definir cookies (e cabe√ßalhos) nelas.

## Retornando uma `Response` diretamente

Voc√™ tamb√©m pode criar cookies ao retornar uma `Response` diretamente no seu c√≥digo.

Para fazer isso, voc√™ pode criar uma resposta como descrito em [Retornando uma Resposta Diretamente](response-directly.md){.internal-link target=_blank}.

Ent√£o, defina os cookies nela e a retorne:

{* ../../docs_src/response_cookies/tutorial001.py hl[10:12] *}

/// tip | Dica

Lembre-se de que se voc√™ retornar uma resposta diretamente em vez de usar o par√¢metro `Response`, FastAPI a retornar√° diretamente.

Portanto, voc√™ ter√° que garantir que seus dados sejam do tipo correto. E.g. ser√° compat√≠vel com JSON se voc√™ estiver retornando um `JSONResponse`.

E tamb√©m que voc√™ n√£o esteja enviando nenhum dado que deveria ter sido filtrado por um `response_model`.

///

### Mais informa√ß√µes

/// note | Detalhes T√©cnicos

Voc√™ tamb√©m poderia usar `from starlette.responses import Response` ou `from starlette.responses import JSONResponse`.

**FastAPI** fornece as mesmas `starlette.responses` em `fastapi.responses` apenas como uma conveni√™ncia para voc√™, o desenvolvedor. Mas a maioria das respostas dispon√≠veis vem diretamente do Starlette.

E como o `Response` pode ser usado frequentemente para definir cabe√ßalhos e cookies, o **FastAPI** tamb√©m o fornece em `fastapi.Response`.

///

Para ver todos os par√¢metros e op√ß√µes dispon√≠veis, verifique a <a href="https://www.starlette.io/responses/#set-cookie" class="external-link" target="_blank">documenta√ß√£o no Starlette</a>.


================================================
File: /docs/pt/docs/advanced/response-directly.md
================================================
# Retornando uma Resposta Diretamente

Quando voc√™ cria uma *opera√ß√£o de rota* no **FastAPI** voc√™ pode retornar qualquer dado nela: um dicion√°rio (`dict`), uma lista (`list`), um modelo do Pydantic ou do seu banco de dados, etc.

Por padr√£o, o **FastAPI** ir√° converter automaticamente o valor do retorno para JSON utilizando o `jsonable_encoder` explicado em [JSON Compatible Encoder](../tutorial/encoder.md){.internal-link target=_blank}.

Ent√£o, por baixo dos panos, ele incluiria esses dados compat√≠veis com JSON (e.g. um `dict`) dentro de uma `JSONResponse` que √© utilizada para enviar uma resposta para o cliente.

Mas voc√™ pode retornar a `JSONResponse` diretamente nas suas *opera√ß√µes de rota*.

Pode ser √∫til para retornar cabe√ßalhos e cookies personalizados, por exemplo.

## Retornando uma `Response`

Na verdade, voc√™ pode retornar qualquer `Response` ou subclasse dela.

/// tip | Dica

A pr√≥pria `JSONResponse` √© uma subclasse de `Response`.

///

E quando voc√™ retorna uma `Response`, o **FastAPI** vai repass√°-la diretamente.

Ele n√£o vai fazer convers√µes de dados com modelos do Pydantic, n√£o ir√° converter a tipagem de nenhum conte√∫do, etc.

Isso te d√° bastante flexibilidade. Voc√™ pode retornar qualquer tipo de dado, sobrescrever qualquer declara√ß√£o e valida√ß√£o nos dados, etc.

## Utilizando o `jsonable_encoder` em uma `Response`

Como o **FastAPI** n√£o realiza nenhuma mudan√ßa na `Response` que voc√™ retorna, voc√™ precisa garantir que o conte√∫do dela est√° pronto para uso.

Por exemplo, voc√™ n√£o pode colocar um modelo do Pydantic em uma `JSONResponse` sem antes convert√™-lo em um `dict` com todos os tipos de dados (como `datetime`, `UUID`, etc) convertidos para tipos compat√≠veis com JSON.

Para esses casos, voc√™ pode usar o `jsonable_encoder` para converter seus dados antes de repass√°-los para a resposta:

{* ../../docs_src/response_directly/tutorial001.py hl[6:7,21:22] *}

/// note | Detalhes T√©cnicos

Voc√™ tamb√©m pode utilizar `from starlette.responses import JSONResponse`.

**FastAPI** utiliza a mesma `starlette.responses` como `fastapi.responses` apenas como uma conveni√™ncia para voc√™, desenvolvedor. Mas maior parte das respostas dispon√≠veis vem diretamente do Starlette.

///

## Retornando uma `Response`

O exemplo acima mostra todas as partes que voc√™ precisa, mas ainda n√£o √© muito √∫til, j√° que voc√™ poderia ter retornado o `item` diretamente, e o **FastAPI** colocaria em uma `JSONResponse` para voc√™, convertendo em um `dict`, etc. Tudo isso por padr√£o.

Agora, vamos ver como voc√™ pode usar isso para retornar uma resposta personalizada.

Vamos dizer quer retornar uma resposta <a href="https://pt.wikipedia.org/wiki/XML" class="external-link" target="_blank">XML</a>.

Voc√™ pode colocar o seu conte√∫do XML em uma string, colocar em uma `Response`, e retorn√°-lo:

{* ../../docs_src/response_directly/tutorial002.py hl[1,18] *}

## Notas

Quando voc√™ retorna uma `Response` diretamente os dados n√£o s√£o validados, convertidos (serializados) ou documentados automaticamente.

Mas voc√™ ainda pode documentar como descrito em [Retornos Adicionais no OpenAPI
](additional-responses.md){.internal-link target=_blank}.

Voc√™ pode ver nas pr√≥ximas se√ß√µes como usar/declarar essas `Responses` customizadas enquanto mant√©m a convers√£o e documenta√ß√£o autom√°tica dos dados.


================================================
File: /docs/pt/docs/advanced/response-headers.md
================================================
# Cabe√ßalhos de resposta

## Usando um par√¢metro `Response`

Voc√™ pode declarar um par√¢metro do tipo `Response` na sua *fun√ß√£o de opera√ß√£o de rota* (assim como voc√™ pode fazer para cookies).

Ent√£o voc√™ pode definir os cabe√ßalhos nesse objeto de resposta *tempor√°rio*.

{* ../../docs_src/response_headers/tutorial002.py hl[1,7:8] *}

Em seguida voc√™ pode retornar qualquer objeto que precisar, da maneira que faria normalmente (um `dict`, um modelo de banco de dados, etc.).

Se voc√™ declarou um `response_model`, ele ainda ser√° utilizado para filtrar e converter o objeto que voc√™ retornou.

**FastAPI** usar√° essa resposta *tempor√°ria* para extrair os cabe√ßalhos (cookies e c√≥digo de status tamb√©m) e os colocar√° na resposta final que cont√©m o valor que voc√™ retornou, filtrado por qualquer `response_model`.

Voc√™ tamb√©m pode declarar o par√¢metro `Response` em depend√™ncias e definir cabe√ßalhos (e cookies) nelas.

## Retornar uma `Response` diretamente

Voc√™ tamb√©m pode adicionar cabe√ßalhos quando retornar uma `Response` diretamente.

Crie uma resposta conforme descrito em [Retornar uma resposta diretamente](response-directly.md){.internal-link target=_blank} e passe os cabe√ßalhos como um par√¢metro adicional:

{* ../../docs_src/response_headers/tutorial001.py hl[10:12] *}

/// note | Detalhes t√©cnicos

Voc√™ tamb√©m pode usar `from starlette.responses import Response` ou `from starlette.responses import JSONResponse`.

**FastAPI** fornece as mesmas `starlette.responses` como `fastapi.responses` apenas como uma conveni√™ncia para voc√™, desenvolvedor. Mas a maioria das respostas dispon√≠veis vem diretamente do Starlette.

E como a `Response` pode ser usada frequentemente para definir cabe√ßalhos e cookies, **FastAPI** tamb√©m a fornece em `fastapi.Response`.

///

## Cabe√ßalhos personalizados

Tenha em mente que cabe√ßalhos personalizados propriet√°rios podem ser adicionados <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" class="external-link" target="_blank">usando o prefixo 'X-'</a>.

Por√©m, se voce tiver cabe√ßalhos personalizados que deseja que um cliente no navegador possa ver, voc√™ precisa adicion√°-los √†s suas configura√ß√µes de CORS (saiba mais em [CORS (Cross-Origin Resource Sharing)](../tutorial/cors.md){.internal-link target=_blank}), usando o par√¢metro `expose_headers` descrito na <a href="https://www.starlette.io/middleware/#corsmiddleware" class="external-link" target="_blank">documenta√ß√£o de CORS do Starlette</a>.


================================================
File: /docs/pt/docs/advanced/settings.md
================================================
# Configura√ß√µes e Vari√°veis de Ambiente

Em muitos casos a sua aplica√ß√£o pode precisar de configura√ß√µes externas, como chaves secretas, credenciais de banco de dados, credenciais para servi√ßos de email, etc.

A maioria dessas configura√ß√µes √© vari√°vel (podem mudar), como URLs de bancos de dados. E muitas delas podem conter dados sens√≠veis, como tokens secretos.

Por isso √© comum prover essas configura√ß√µes como vari√°veis de ambiente que s√£o utilizidas pela aplica√ß√£o.

## Vari√°veis de Ambiente

/// dica

Se voc√™ j√° sabe o que s√£o vari√°veis de ambiente e como utiliz√°-las, sinta-se livre para avan√ßar para o pr√≥ximo t√≥pico.

///

Uma <a href="https://pt.wikipedia.org/wiki/Vari√°vel_de_ambiente" class="external-link" target="_blank">vari√°vel de ambiente</a> (abreviada em ingl√™s para "env var") √© uma vari√°vel definida fora do c√≥digo Python, no sistema operacional, e pode ser lida pelo seu c√≥digo Python (ou por outros programas).

Voc√™ pode criar e utilizar vari√°veis de ambiente no terminal, sem precisar utilizar Python:

//// tab | Linux, macOS, Windows Bash

<div class="termy">

```console
// Voc√™ pode criar uma env var MY_NAME usando
$ export MY_NAME="Wade Wilson"

// E utiliz√°-la em outros programas, como
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

</div>

////

//// tab | Windows PowerShell

<div class="termy">

```console
// Criando env var MY_NAME
$ $Env:MY_NAME = "Wade Wilson"

// Usando em outros programas, como
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

</div>

////

### Lendo vari√°veis de ambiente com Python

Voc√™ tamb√©m pode criar vari√°veis de ambiente fora do Python, no terminal (ou com qualquer outro m√©todo), e realizar a leitura delas no Python.

Por exemplo, voc√™ pode definir um arquivo `main.py` com o seguinte c√≥digo:

```Python hl_lines="3"
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

/// dica

O segundo par√¢metro em <a href="https://docs.python.org/3.8/library/os.html#os.getenv" class="external-link" target="_blank">`os.getenv()`</a> √© o valor padr√£o para o retorno.

Se nenhum valor for informado, `None` √© utilizado por padr√£o, aqui definimos `"World"` como o valor padr√£o a ser utilizado.

///

E depois voc√™ pode executar esse arquivo:

<div class="termy">

```console
// Aqui ainda n√£o definimos a env var
$ python main.py

// Por isso obtemos o valor padr√£o

Hello World from Python

// Mas se definirmos uma vari√°vel de ambiente primeiro
$ export MY_NAME="Wade Wilson"

// E executarmos o programa novamente
$ python main.py

// Agora ele pode ler a vari√°vel de ambiente

Hello Wade Wilson from Python
```

</div>

Como vari√°veis de ambiente podem ser definidas fora do c√≥digo da aplica√ß√£o, mas acessadas pela aplica√ß√£o, e n√£o precisam ser armazenadas (versionadas com `git`) junto dos outros arquivos, √© comum utiliz√°-las para guardar configura√ß√µes.

Voc√™ tamb√©m pode criar uma vari√°vel de ambiente espec√≠fica para uma invoca√ß√£o de um programa, que √© acess√≠vel somente para esse programa, e somente enquanto ele estiver executando.

Para fazer isso, crie a vari√°vel imediatamente antes de iniciar o programa, na mesma linha:

<div class="termy">

```console
// Criando uma env var MY_NAME na mesma linha da execu√ß√£o do programa
$ MY_NAME="Wade Wilson" python main.py

// Agora a aplica√ß√£o consegue ler a vari√°vel de ambiente

Hello Wade Wilson from Python

// E a vari√°vel deixa de existir ap√≥s isso
$ python main.py

Hello World from Python
```

</div>

/// dica

Voc√™ pode ler mais sobre isso em: <a href="https://12factor.net/pt_br/config" class="external-link" target="_blank">The Twelve-Factor App: Configura√ß√µes</a>.

///

### Tipagem e Valida√ß√£o

Essas vari√°veis de ambiente suportam apenas strings, por serem externas ao Python e por que precisam ser compat√≠veis com outros programas e o resto do sistema (e at√© mesmo com outros sistemas operacionais, como Linux, Windows e macOS).

Isso significa que qualquer valor obtido de uma vari√°vel de ambiente em Python ter√° o tipo `str`, e qualquer convers√£o para um tipo diferente ou valida√ß√£o deve ser realizada no c√≥digo.

## Pydantic `Settings`

Por sorte, o Pydantic possui uma funcionalidade para lidar com essas configura√ß√µes vindas de vari√°veis de ambiente utilizando <a href="https://docs.pydantic.dev/latest/usage/pydantic_settings/" class="external-link" target="_blank">Pydantic: Settings management</a>.

### Instalando `pydantic-settings`

Primeiro, instale o pacote `pydantic-settings`:

<div class="termy">

```console
$ pip install pydantic-settings
---> 100%
```

</div>

Ele tamb√©m est√° inclu√≠do no fastapi quando voc√™ instala com a op√ß√£o `all`:

<div class="termy">

```console
$ pip install "fastapi[all]"
---> 100%
```

</div>

/// info

Na v1 do Pydantic ele estava inclu√≠do no pacote principal. Agora ele est√° distribuido como um pacote independente para que voc√™ possa optar por instalar ou n√£o caso voc√™ n√£o precise dessa funcionalidade.

///

### Criando o objeto `Settings`

Importe a classe `BaseSettings` do Pydantic e crie uma nova subclasse, de forma parecida com um modelo do Pydantic.

Os atributos da classe s√£o declarados com anota√ß√µes de tipo, e poss√≠veis valores padr√£o, da mesma maneira que os modelos do Pydantic.

Voc√™ pode utilizar todas as ferramentas e funcionalidades de valida√ß√£o que s√£o utilizadas nos modelos do Pydantic, como tipos de dados diferentes e valida√ß√µes adicionei com `Field()`.

//// tab | Pydantic v2

{* ../../docs_src/settings/tutorial001.py hl[2,5:8,11] *}

////

//// tab | Pydantic v1

/// info

Na vers√£o 1 do Pydantic voc√™ importaria `BaseSettings` diretamente do m√≥dulo `pydantic` em vez do m√≥dulo `pydantic_settings`.

///

{* ../../docs_src/settings/tutorial001_pv1.py hl[2,5:8,11] *}

////

/// dica

Se voc√™ quiser algo pronto para copiar e colar na sua aplica√ß√£o, n√£o use esse exemplo, mas sim o exemplo abaixo.

///

Portanto, quando voc√™ cria uma inst√¢ncia da classe `Settings` (nesse caso, o objeto `settings`), o Pydantic l√™ as vari√°veis de ambiente sem diferenciar mai√∫sculas e min√∫sculas, por isso, uma vari√°vel mai√∫scula `APP_NAME` ser√° usada para o atributo `app_name`.

Depois ele ir√° converter e validar os dados. Assim, quando voc√™ utilizar aquele objeto `settings`, os dados ter√£o o tipo que voc√™ declarou (e.g. `items_per_user` ser√° do tipo `int`).

### Usando o objeto `settings`

Depois, Voc√™ pode utilizar o novo objeto `settings` na sua aplica√ß√£o:

{* ../../docs_src/settings/tutorial001.py hl[18:20] *}

### Executando o servidor

No pr√≥ximo passo, voc√™ pode inicializar o servidor passando as configura√ß√µes em forma de vari√°veis de ambiente, por exemplo, voc√™ poderia definir `ADMIN_EMAIL` e `APP_NAME` da seguinte forma:

<div class="termy">

```console
$ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" fastapi run main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

/// dica

Para definir m√∫ltiplas vari√°veis de ambiente para um √∫nico comando basta separ√°-las utilizando espa√ßos, e incluir todas elas antes do comando.

///

Assim, o atributo `admin_email` seria definido como `"deadpool@example.com"`.

`app_name` seria `"ChimichangApp"`.

E `items_per_user` manteria o valor padr√£o de `50`.

## Configura√ß√µes em um m√≥dulo separado

Voc√™ tamb√©m pode incluir essas configura√ß√µes em um arquivo de um m√≥dulo separado como visto em [Bigger Applications - Multiple Files](../tutorial/bigger-applications.md){.internal-link target=\_blank}.

Por exemplo, voc√™ pode adicionar um arquivo `config.py` com:

{* ../../docs_src/settings/app01/config.py *}

E utilizar essa configura√ß√£o em `main.py`:

{* ../../docs_src/settings/app01/main.py hl[3,11:13] *}

/// dica

Voc√™ tamb√©m precisa incluir um arquivo `__init__.py` como visto em [Bigger Applications - Multiple Files](../tutorial/bigger-applications.md){.internal-link target=\_blank}.

///

## Configura√ß√µes em uma depend√™ncia

Em certas ocasi√µes, pode ser √∫til fornecer essas configura√ß√µes a partir de uma depend√™ncia, em vez de definir um objeto global `settings` que √© utilizado em toda a aplica√ß√£o.

Isso √© especialmente √∫til durante os testes, j√° que √© bastante simples sobrescrever uma depend√™ncia com suas configura√ß√µes personalizadas.

### O arquivo de configura√ß√£o

Baseando-se no exemplo anterior, seu arquivo `config.py` seria parecido com isso:

{* ../../docs_src/settings/app02/config.py hl[10] *}

Perceba que dessa vez n√£o criamos uma inst√¢ncia padr√£o `settings = Settings()`.

### O arquivo principal da aplica√ß√£o

Agora criamos a depend√™ncia que retorna um novo objeto `config.Settings()`.

{* ../../docs_src/settings/app02_an_py39/main.py hl[6,12:13] *}

/// dica

Vamos discutir sobre `@lru_cache` logo mais.

Por enquanto, voc√™ pode considerar `get_settings()` como uma fun√ß√£o normal.

///

E ent√£o podemos declarar essas configura√ß√µes como uma depend√™ncia na fun√ß√£o de opera√ß√£o da rota e utilizar onde for necess√°rio.

{* ../../docs_src/settings/app02_an_py39/main.py hl[17,19:21] *}

### Configura√ß√µes e testes

Ent√£o seria muito f√°cil fornecer uma configura√ß√£o diferente durante a execu√ß√£o dos testes sobrescrevendo a depend√™ncia de `get_settings`:

{* ../../docs_src/settings/app02/test_main.py hl[9:10,13,21] *}

Na sobrescrita da depend√™ncia, definimos um novo valor para `admin_email` quando instanciamos um novo objeto `Settings`, e ent√£o retornamos esse novo objeto.

Ap√≥s isso, podemos testar se o valor est√° sendo utilizado.

## Lendo um arquivo `.env`

Se voc√™ tiver muitas configura√ß√µes que variem bastante, talvez em ambientes distintos, pode ser √∫til coloc√°-las em um arquivo e depois l√™-las como se fossem vari√°veis de ambiente.

Essa pr√°tica √© t√£o comum que possui um nome, essas vari√°veis de ambiente normalmente s√£o colocadas em um arquivo `.env`, e esse arquivo √© chamado de "dotenv".

/// dica

Um arquivo iniciando com um ponto final (`.`) √© um arquivo oculto em sistemas baseados em Unix, como Linux e MacOS.

Mas um arquivo dotenv n√£o precisa ter esse nome exato.

///

Pydantic suporta a leitura desses tipos de arquivos utilizando uma biblioteca externa. Voc√™ pode ler mais em <a href="https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dotenv-env-support" class="external-link" target="_blank">Pydantic Settings: Dotenv (.env) support</a>.

/// dica

Para que isso funcione voc√™ precisa executar `pip install python-dotenv`.

///

### O arquivo `.env`

Voc√™ pode definir um arquivo `.env` com o seguinte conte√∫do:

```bash
ADMIN_EMAIL="deadpool@example.com"
APP_NAME="ChimichangApp"
```

### Obtendo configura√ß√µes do `.env`

E ent√£o adicionar o seguinte c√≥digo em `config.py`:

//// tab | Pydantic v2

{* ../../docs_src/settings/app03_an/config.py hl[9] *}

/// dica

O atributo `model_config` √© usado apenas para configura√ß√£o do Pydantic. Voc√™ pode ler mais em <a href="https://docs.pydantic.dev/latest/usage/model_config/" class="external-link" target="_blank">Pydantic Model Config</a>.

///

////

//// tab | Pydantic v1

{* ../../docs_src/settings/app03_an/config_pv1.py hl[9:10] *}

/// dica

A classe `Config` √© usada apenas para configura√ß√£o do Pydantic. Voc√™ pode ler mais em <a href="https://docs.pydantic.dev/1.10/usage/model_config/" class="external-link" target="_blank">Pydantic Model Config</a>.

///

////

/// info

Na vers√£o 1 do Pydantic a configura√ß√£o √© realizada por uma classe interna `Config`, na vers√£o 2 do Pydantic isso √© feito com o atributo `model_config`. Esse atributo recebe um `dict`, para utilizar o autocomplete e checagem de erros do seu editor de texto voc√™ pode importar e utilizar `SettingsConfigDict` para definir esse `dict`.

///

Aqui definimos a configura√ß√£o `env_file` dentro da classe `Settings` do Pydantic, e definimos o valor como o nome do arquivo dotenv que queremos utilizar.

### Declarando `Settings` apenas uma vez com `lru_cache`

Ler o conte√∫do de um arquivo em disco normalmente √© uma opera√ß√£o custosa (lenta), ent√£o voc√™ provavelmente quer fazer isso apenas um vez e reutilizar o mesmo objeto settings depois, em vez de ler os valores a cada requisi√ß√£o.

Mas cada vez que fazemos:

```Python
Settings()
```

um novo objeto `Settings` √© instanciado, e durante a instancia√ß√£o, o arquivo `.env` √© lido novamente.

Se a fun√ß√£o da depend√™ncia fosse apenas:

```Python
def get_settings():
    return Settings()
```

Iriamos criar um novo objeto a cada requisi√ß√£o, e estar√≠amos lendo o arquivo `.env` a cada requisi√ß√£o. ‚ö†Ô∏è

Mas como estamos utilizando o decorador `@lru_cache` acima, o objeto `Settings` √© criado apenas uma vez, na primeira vez que a fun√ß√£o √© chamada. ‚úîÔ∏è

{* ../../docs_src/settings/app03_an_py39/main.py hl[1,11] *}

Dessa forma, todas as chamadas da fun√ß√£o `get_settings()` nas depend√™ncias das pr√≥ximas requisi√ß√µes, em vez de executar o c√≥digo interno de `get_settings()` e instanciar um novo objeto `Settings`, ir√£o retornar o mesmo objeto que foi retornado na primeira chamada, de novo e de novo.

#### Detalhes T√©cnicos de `lru_cache`

`@lru_cache` modifica a fun√ß√£o decorada para retornar o mesmo valor que foi retornado na primeira vez, em vez de calcul√°-lo novamente, executando o c√≥digo da fun√ß√£o toda vez.

Assim, a fun√ß√£o abaixo do decorador √© executada uma √∫nica vez para cada combina√ß√£o dos argumentos passados. E os valores retornados para cada combina√ß√£o de argumentos s√£o sempre reutilizados para cada nova chamada da fun√ß√£o com a mesma combina√ß√£o de argumentos.

Por exemplo, se voc√™ definir uma fun√ß√£o:

```Python
@lru_cache
def say_hi(name: str, salutation: str = "Ms."):
    return f"Hello {salutation} {name}"
```

Seu programa poderia executar dessa forma:

```mermaid
sequenceDiagram

participant code as C√≥digo
participant function as say_hi()
participant execute as Executar Fun√ß√£o

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Camila")
        function ->> execute: executar c√≥digo da fun√ß√£o
        execute ->> code: retornar o resultado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: retornar resultado armazenado
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick")
        function ->> execute: executar c√≥digo da fun√ß√£o
        execute ->> code: retornar o resultado
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick", salutation="Mr.")
        function ->> execute: executar c√≥digo da fun√ß√£o
        execute ->> code: retornar o resultado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Rick")
        function ->> code: retornar resultado armazenado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: retornar resultado armazenado
    end
```

No caso da nossa depend√™ncia `get_settings()`, a fun√ß√£o n√£o recebe nenhum argumento, ent√£o ela sempre retorna o mesmo valor.

Dessa forma, ela se comporta praticamente como uma vari√°vel global, mas ao ser utilizada como uma fun√ß√£o de uma depend√™ncia, pode facilmente ser sobrescrita durante os testes.

`@lru_cache` √© definido no m√≥dulo `functools` que faz parte da biblioteca padr√£o do Python, voc√™ pode ler mais sobre esse decorador no link <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" class="external-link" target="_blank">Python Docs sobre `@lru_cache`</a>.

## Recapitulando

Voc√™ pode usar o m√≥dulo Pydantic Settings para gerenciar as configura√ß√µes de sua aplica√ß√£o, utilizando todo o poder dos modelos Pydantic.

- Utilizar depend√™ncias simplifica os testes.
- Voc√™ pode utilizar arquivos .env junto das configura√ß√µes do Pydantic.
- Utilizar o decorador `@lru_cache` evita que o arquivo .env seja lido de novo e de novo para cada requisi√ß√£o, enquanto permite que voc√™ sobrescreva durante os testes.


================================================
File: /docs/pt/docs/advanced/sub-applications.md
================================================
# Sub Aplica√ß√µes - Montagens

Se voc√™ precisar ter duas aplica√ß√µes FastAPI independentes, cada uma com seu pr√≥prio OpenAPI e suas pr√≥prias interfaces de documenta√ß√£o, voc√™ pode ter um aplicativo principal e "montar" uma (ou mais) sub-aplica√ß√µes.

## Montando uma aplica√ß√£o **FastAPI**

"Montar" significa adicionar uma aplica√ß√£o completamente "independente" em um caminho espec√≠fico, que ent√£o se encarrega de lidar com tudo sob esse caminho, com as opera√ß√µes de rota declaradas nessa sub-aplica√ß√£o.

### Aplica√ß√£o de n√≠vel superior

Primeiro, crie a aplica√ß√£o principal, de n√≠vel superior, **FastAPI**, e suas *opera√ß√µes de rota*:

{* ../../docs_src/sub_applications/tutorial001.py hl[3,6:8] *}

### Sub-aplica√ß√£o

Em seguida, crie sua sub-aplica√ß√£o e suas *opera√ß√µes de rota*.

Essa sub-aplica√ß√£o √© apenas outra aplica√ß√£o FastAPI padr√£o, mas esta √© a que ser√° "montada":

{* ../../docs_src/sub_applications/tutorial001.py hl[11,14:16] *}

### Monte a sub-aplica√ß√£o

Na sua aplica√ß√£o de n√≠vel superior, `app`, monte a sub-aplica√ß√£o, `subapi`.

Neste caso, ela ser√° montada no caminho `/subapi`:

{* ../../docs_src/sub_applications/tutorial001.py hl[11,19] *}

### Verifique a documenta√ß√£o autom√°tica da API

Agora, execute `uvicorn` com a aplica√ß√£o principal, se o seu arquivo for `main.py`, seria:

<div class="termy">

```console
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

E abra a documenta√ß√£o em <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Voc√™ ver√° a documenta√ß√£o autom√°tica da API para a aplica√ß√£o principal, incluindo apenas suas pr√≥prias _opera√ß√µes de rota_:

<img src="/img/tutorial/sub-applications/image01.png">

E ent√£o, abra a documenta√ß√£o para a sub-aplica√ß√£o, em <a href="http://127.0.0.1:8000/subapi/docs" class="external-link" target="_blank">http://127.0.0.1:8000/subapi/docs</a>.

Voc√™ ver√° a documenta√ß√£o autom√°tica da API para a sub-aplica√ß√£o, incluindo apenas suas pr√≥prias _opera√ß√µes de rota_, todas sob o prefixo de sub-caminho correto `/subapi`:

<img src="/img/tutorial/sub-applications/image02.png">

Se voc√™ tentar interagir com qualquer uma das duas interfaces de usu√°rio, elas funcionar√£o corretamente, porque o navegador ser√° capaz de se comunicar com cada aplica√ß√£o ou sub-aplica√ß√£o espec√≠fica.

### Detalhes T√©cnicos: `root_path`

Quando voc√™ monta uma sub-aplica√ß√£o como descrito acima, o FastAPI se encarrega de comunicar o caminho de montagem para a sub-aplica√ß√£o usando um mecanismo da especifica√ß√£o ASGI chamado `root_path`.

Dessa forma, a sub-aplica√ß√£o saber√° usar esse prefixo de caminho para a interface de documenta√ß√£o.

E a sub-aplica√ß√£o tamb√©m poderia ter suas pr√≥prias sub-aplica√ß√µes montadas e tudo funcionaria corretamente, porque o FastAPI lida com todos esses `root_path`s automaticamente.

Voc√™ aprender√° mais sobre o `root_path` e como us√°-lo explicitamente na se√ß√£o sobre [Atr√°s de um Proxy](behind-a-proxy.md){.internal-link target=_blank}.


================================================
File: /docs/pt/docs/advanced/templates.md
================================================
# Templates

Voc√™ pode usar qualquer template engine com o **FastAPI**.

Uma escolha comum √© o Jinja2, o mesmo usado pelo Flask e outras ferramentas.

Existem utilit√°rios para configur√°-lo facilmente que voc√™ pode usar diretamente em sua aplica√ß√£o **FastAPI** (fornecidos pelo Starlette).

## Instala√ß√£o de depend√™ncias

Para instalar o `jinja2`, siga o c√≥digo abaixo:

<div class="termy">

```console
$ pip install jinja2
```

</div>

## Usando `Jinja2Templates`

* Importe `Jinja2Templates`.
* Crie um `templates` que voc√™ possa reutilizar posteriormente.
* Declare um par√¢metro `Request` no *path operation* que retornar√° um template.
* Use o `template` que voc√™ criou para renderizar e retornar uma `TemplateResponse`, passe o nome do template, o request object, e um "context" dict com pares chave-valor a serem usados dentro do template do Jinja2.

{* ../../docs_src/templates/tutorial001.py hl[4,11,15:18] *}

/// note

Antes do FastAPI 0.108.0, Starlette 0.29.0, `name` era o primeiro par√¢metro.

Al√©m disso, em vers√µes anteriores, o objeto `request` era passado como parte dos pares chave-valor no "context" dict para o Jinja2.

///

/// tip | Dica

Ao declarar `response_class=HTMLResponse`, a documenta√ß√£o entender√° que a resposta ser√° HTML.

///

/// note | Detalhes T√©cnicos

Voc√™ tamb√©m poderia usar `from starlette.templating import Jinja2Templates`.

**FastAPI** fornece o mesmo `starlette.templating` como `fastapi.templating` apenas como uma conveni√™ncia para voc√™, o desenvolvedor. Mas a maioria das respostas dispon√≠veis v√™m diretamente do Starlette. O mesmo acontece com `Request` e `StaticFiles`.

///

## Escrevendo Templates

Ent√£o voc√™ pode escrever um template em `templates/item.html`, por exemplo:

```jinja hl_lines="7"
{!../../docs_src/templates/templates/item.html!}
```

### Interpola√ß√£o de Valores no Template

No c√≥digo HTML que cont√©m:

{% raw %}

```jinja
Item ID: {{ id }}
```

{% endraw %}

...aparecer√° o `id` obtido do "context" `dict` que voc√™ passou:

```Python
{"id": id}
```

Por exemplo, dado um ID de valor `42`, aparecer√°:

```html
Item ID: 42
```

### Argumentos do `url_for`

Voc√™ tamb√©m pode usar `url_for()` dentro do template, ele recebe como argumentos os mesmos argumentos que seriam usados pela sua *path operation function*.

Logo, a se√ß√£o com:

{% raw %}

```jinja
<a href="{{ url_for('read_item', id=id) }}">
```

{% endraw %}

...ir√° gerar um link para a mesma URL que ser√° tratada pela *path operation function* `read_item(id=id)`.

Por exemplo, com um ID de `42`, isso renderizar√°:

```html
<a href="/items/42">
```

## Templates e Arquivos Est√°ticos

Voc√™ tamb√©m pode usar `url_for()` dentro do template e us√°-lo, por examplo, com o `StaticFiles` que voc√™ montou com o `name="static"`.

```jinja hl_lines="4"
{!../../docs_src/templates/templates/item.html!}
```

Neste exemplo, ele seria vinculado a um arquivo CSS em `static/styles.css` com:

```CSS hl_lines="4"
{!../../docs_src/templates/static/styles.css!}
```

E como voc√™ est√° usando `StaticFiles`, este arquivo CSS ser√° automaticamente servido pela sua aplica√ß√£o FastAPI na URL `/static/styles.css`.

## Mais detalhes

Para obter mais detalhes, incluindo como testar templates, consulte a <a href="https://www.starlette.io/templates/" class="external-link" target="_blank">documenta√ß√£o da Starlette sobre templates</a>.


================================================
File: /docs/pt/docs/advanced/testing-dependencies.md
================================================
# Testando Depend√™ncias com Sobreposi√ß√£o (Overrides)

## Sobrepondo depend√™ncias durante os testes

Existem alguns cen√°rios onde voc√™ deseje sobrepor uma depend√™ncia durante os testes.

Voc√™ n√£o quer que a depend√™ncia original execute (e nenhuma das subdepend√™ncias que voc√™ possa ter).

Em vez disso, voc√™ deseja fornecer uma depend√™ncia diferente que ser√° usada somente durante os testes (possivelmente apenas para alguns testes espec√≠ficos) e fornecer√° um valor que pode ser usado onde o valor da depend√™ncia original foi usado.

### Casos de uso: servi√ßo externo

Um exemplo pode ser que voc√™ possua um provedor de autentica√ß√£o externo que voc√™ precisa chamar.

Voc√™ envia ao servi√ßo um *token* e ele retorna um usu√°rio autenticado.

Este provedor pode cobrar por requisi√ß√£o, e cham√°-lo pode levar mais tempo do que se voc√™ tivesse um usu√°rio fixo para os testes.

Voc√™ provavelmente quer testar o provedor externo uma vez, mas n√£o necessariamente cham√°-lo em todos os testes que executarem.

Neste caso, voc√™ pode sobrepor (*override*) a depend√™ncia que chama o provedor, e utilizar uma depend√™ncia customizada que retorna um *mock* do usu√°rio, apenas para os seus testes.

### Utilize o atributo `app.dependency_overrides`

Para estes casos, a sua aplica√ß√£o **FastAPI** possui o atributo `app.dependency_overrides`. Ele √© um simples `dict`.

Para sobrepor a depend√™ncia para os testes, voc√™ coloca como chave a depend√™ncia original (a fun√ß√£o), e como valor, a sua sobreposi√ß√£o da depend√™ncia (outra fun√ß√£o).

E ent√£o o **FastAPI** chamar√° a sobreposi√ß√£o no lugar da depend√™ncia original.

{* ../../docs_src/dependency_testing/tutorial001_an_py310.py hl[26:27,30] *}

/// tip | Dica

Voc√™ pode definir uma sobreposi√ß√£o de depend√™ncia para uma depend√™ncia que √© utilizada em qualquer lugar da sua aplica√ß√£o **FastAPI**.

A depend√™ncia original pode estar sendo utilizada em uma *fun√ß√£o de opera√ß√£o de rota*, um *docorador de opera√ß√£o de rota* (quando voc√™ n√£o utiliza o valor retornado), uma chamada ao `.include_router()`, etc.

O FastAPI ainda poder√° sobrescrev√™-lo.

///

E ent√£o voc√™ pode redefinir as suas sobreposi√ß√µes (remov√™-las) definindo o `app.dependency_overrides` como um `dict` vazio:

```Python
app.dependency_overrides = {}
```

/// tip | Dica

Se voc√™ quer sobrepor uma depend√™ncia apenas para alguns testes, voc√™ pode definir a sobreposi√ß√£o no in√≠cio do testes (dentro da fun√ß√£o de teste) e reinici√°-la ao final (no final da fun√ß√£o de teste).

///


================================================
File: /docs/pt/docs/advanced/testing-events.md
================================================
# Testando Eventos: inicializa√ß√£o - encerramento

Quando voc√™ precisa que os seus manipuladores de eventos (`startup` e `shutdown`) sejam executados em seus testes, voc√™ pode utilizar o `TestClient` usando a instru√ß√£o `with`:

{* ../../docs_src/app_testing/tutorial003.py hl[9:12,20:24] *}


================================================
File: /docs/pt/docs/advanced/testing-websockets.md
================================================
# Testando WebSockets

Voc√™ pode usar o mesmo `TestClient` para testar WebSockets.

Para isso, voc√™ utiliza o `TestClient` dentro de uma instru√ß√£o `with`, conectando com o WebSocket:

{* ../../docs_src/app_testing/tutorial002.py hl[27:31] *}

/// note | Nota

Para mais detalhes, confira a documenta√ß√£o do Starlette para <a href="https://www.starlette.io/testclient/#testing-websocket-sessions" class="external-link" target="_blank">testar WebSockets</a>.

///


================================================
File: /docs/pt/docs/advanced/using-request-directly.md
================================================
# Utilizando o Request diretamente

At√© agora voc√™ declarou as partes da requisi√ß√£o que voc√™ precisa utilizando os seus tipos.

Obtendo dados de:

* Os par√¢metros das rotas.
* Cabe√ßalhos (*Headers*).
* Cookies.
* etc.

E ao fazer isso, o **FastAPI** est√° validando as informa√ß√µes, convertendo-as e gerando documenta√ß√£o para a sua API automaticamente.

Por√©m h√° situa√ß√µes em que voc√™ possa precisar acessar o objeto `Request` diretamente.

## Detalhes sobre o objeto `Request`

Como o **FastAPI** √© na verdade o **Starlette** por baixo, com camadas de diversas funcionalidades por cima, voc√™ pode utilizar o objeto <a href="https://www.starlette.io/requests/" class="external-link" target="_blank">`Request`</a> do Starlette diretamente quando precisar.

Isso significaria tamb√©m que se voc√™ obtiver informa√ß√µes do objeto `Request` diretamente (ler o corpo da requisi√ß√£o por exemplo), as informa√ß√µes n√£o ser√£o validadas, convertidas ou documentadas (com o OpenAPI, para a interface de usu√°rio autom√°tica da API) pelo FastAPI.

Embora qualquer outro par√¢metro declarado normalmente (o corpo da requisi√ß√£o com um modelo Pydantic, por exemplo) ainda seria validado, convertido, anotado, etc.

Mas h√° situa√ß√µes espec√≠ficas onde √© √∫til utilizar o objeto `Request`.

## Utilize o objeto `Request` diretamente

Vamos imaginar que voc√™ deseja obter o endere√ßo de IP/host do cliente dentro da sua *fun√ß√£o de opera√ß√£o de rota*.

Para isso voc√™ precisa acessar a requisi√ß√£o diretamente.

{* ../../docs_src/using_request_directly/tutorial001.py hl[1,7:8] *}

Ao declarar o par√¢metro com o tipo sendo um `Request` em sua *fun√ß√£o de opera√ß√£o de rota*, o **FastAPI** saber√° como passar o `Request` neste par√¢metro.

/// tip | Dica

Note que neste caso, n√≥s estamos declarando o par√¢metro da rota ao lado do par√¢metro da requisi√ß√£o.

Assim, o par√¢metro da rota ser√° extra√≠do, validado, convertido para o tipo especificado e anotado com OpenAPI.

Do mesmo jeito, voc√™ pode declarar qualquer outro par√¢metro normalmente, e al√©m disso, obter o `Request` tamb√©m.

///

## Documenta√ß√£o do `Request`

Voc√™ pode ler mais sobre os detalhes do objeto <a href="https://www.starlette.io/requests/" class="external-link" target="_blank">`Request` no site da documenta√ß√£o oficial do Starlette.</a>.

/// note | Detalhes T√©cnicos

Voc√™ tamb√©m pode utilizar `from starlette.requests import Request`.

O **FastAPI** fornece isso diretamente apenas como uma conveni√™ncia para voc√™, o desenvolvedor. Mas ele vem diretamente do Starlette.

///


================================================
File: /docs/pt/docs/advanced/websockets.md
================================================
# WebSockets

Voc√™ pode usar <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" class="external-link" target="_blank">WebSockets</a> com **FastAPI**.

## Instalando `WebSockets`

Garanta que voc√™ criou um [ambiente virtual](../virtual-environments.md){.internal-link target=_blank}, o ativou e instalou o `websockets`:

<div class="termy">

```console
$ pip install websockets

---> 100%
```

</div>

## Cliente WebSockets

### Em produ√ß√£o

Em seu sistema de produ√ß√£o, voc√™ provavelmente tem um frontend criado com um framework moderno como React, Vue.js ou Angular.

E para comunicar usando WebSockets com seu backend, voc√™ provavelmente usaria as utilidades do seu frontend.

Ou voc√™ pode ter um aplicativo m√≥vel nativo que se comunica diretamente com seu backend WebSocket, em c√≥digo nativo.

Ou voc√™ pode ter qualquer outra forma de comunicar com o endpoint WebSocket.

---

Mas para este exemplo, usaremos um documento HTML muito simples com algum JavaScript, tudo dentro de uma string longa.

Esse, √© claro, n√£o √© o ideal e voc√™ n√£o o usaria para produ√ß√£o.

Na produ√ß√£o, voc√™ teria uma das op√ß√µes acima.

Mas √© a maneira mais simples de focar no lado do servidor de WebSockets e ter um exemplo funcional:

{* ../../docs_src/websockets/tutorial001.py hl[2,6:38,41:43] *}

## Criando um `websocket`

Em sua aplica√ß√£o **FastAPI**, crie um `websocket`:

{*../../docs_src/websockets/tutorial001.py hl[46:47]*}

/// note | Detalhes T√©cnicos

Voc√™ tamb√©m poderia usar `from starlette.websockets import WebSocket`.

A **FastAPI** fornece o mesmo `WebSocket` diretamente apenas como uma conveni√™ncia para voc√™, o desenvolvedor. Mas ele vem diretamente do Starlette.

///

## Aguardar por mensagens e enviar mensagens

Em sua rota WebSocket voc√™ pode esperar (`await`) por mensagens e enviar mensagens.

{*../../docs_src/websockets/tutorial001.py hl[48:52]*}

Voc√™ pode receber e enviar dados bin√°rios, de texto e JSON.

## Tente voc√™ mesmo

Se seu arquivo for nomeado `main.py`, execute sua aplica√ß√£o com:

<div class="termy">

```console
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Abra seu navegador em: <a href="http://127.0.0.1:8000" class="external-link" target="_blank">http://127.0.0.1:8000</a>.

Voc√™ ver√° uma p√°gina simples como:

<img src="/img/tutorial/websockets/image01.png">

Voc√™ pode digitar mensagens na caixa de entrada e envi√°-las:

<img src="/img/tutorial/websockets/image02.png">

E sua aplica√ß√£o **FastAPI** com WebSockets responder√° de volta:

<img src="/img/tutorial/websockets/image03.png">

Voc√™ pode enviar (e receber) muitas mensagens:

<img src="/img/tutorial/websockets/image04.png">

E todas elas usar√£o a mesma conex√£o WebSocket.

## Usando `Depends` e outros

Nos endpoints WebSocket voc√™ pode importar do `fastapi` e usar:

* `Depends`
* `Security`
* `Cookie`
* `Header`
* `Path`
* `Query`

Eles funcionam da mesma forma que para outros endpoints FastAPI/*opera√ß√µes de rota*:

{*../../docs_src/websockets/tutorial002_an_py310.py hl[68:69,82]*}

/// info | Informa√ß√£o

Como isso √© um WebSocket, n√£o faz muito sentido levantar uma `HTTPException`, em vez disso levantamos uma `WebSocketException`.

Voc√™ pode usar um c√≥digo de fechamento dos <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1" class="external-link" target="_blank">c√≥digos v√°lidos definidos na especifica√ß√£o</a>.

///

### Tente os WebSockets com depend√™ncias

Se seu arquivo for nomeado `main.py`, execute sua aplica√ß√£o com:

<div class="termy">

```console
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Abrar seu browser em: <a href="http://127.0.0.1:8000" class="external-link" target="_blank">http://127.0.0.1:8000</a>.

L√° voc√™ pode definir:

* O "Item ID", usado na rota.
* O "Token" usado como um par√¢metro de consulta.

/// tip | Dica

Perceba que a consulta `token` ser√° manipulada por uma depend√™ncia.

///

Com isso voc√™ pode conectar o WebSocket e ent√£o enviar e receber mensagens:

<img src="/img/tutorial/websockets/image05.png">

## Lidando com desconex√µes e m√∫ltiplos clientes

Quando uma conex√£o WebSocket √© fechada, o `await websocket.receive_text()` levantar√° uma exce√ß√£o `WebSocketDisconnect`, que voc√™ pode ent√£o capturar e lidar como neste exemplo.

{*../../docs_src/websockets/tutorial003_py39.py hl[79:81]*}

Para testar:

* Abrar o aplicativo com v√°rias abas do navegador.
* Escreva mensagens a partir delas.
* Ent√£o feche uma das abas.

Isso levantar√° a exce√ß√£o `WebSocketDisconnect`, e todos os outros clientes receber√£o uma mensagem como:

```
Client #1596980209979 left the chat
```

/// tip | Dica

O app acima √© um exemplo m√≠nimo e simples para demonstrar como lidar e transmitir mensagens para v√°rias conex√µes WebSocket.

Mas tenha em mente que, como tudo √© manipulado na mem√≥ria, em uma √∫nica lista, ele s√≥ funcionar√° enquanto o processo estiver em execu√ß√£o e s√≥ funcionar√° com um √∫nico processo.

Se voc√™ precisa de algo f√°cil de integrar com o FastAPI, mas que seja mais robusto, suportado por Redis, PostgreSQL ou outros, verifique o <a href="https://github.com/encode/broadcaster" class="external-link" target="_blank">encode/broadcaster</a>.

///

## Mais informa√ß√µes

Para aprender mais sobre as op√ß√µes, verifique a documenta√ß√£o do Starlette para:

* <a href="https://www.starlette.io/websockets/" class="external-link" target="_blank">A classe `WebSocket`</a>.
* <a href="https://www.starlette.io/endpoints/#websocketendpoint" class="external-link" target="_blank">Manipula√ß√£o de WebSockets baseada em classes</a>.


================================================
File: /docs/pt/docs/advanced/wsgi.md
================================================
# Adicionando WSGI - Flask, Django, entre outros

Como voc√™ viu em [Sub Applications - Mounts](sub-applications.md){.internal-link target=_blank} e [Behind a Proxy](behind-a-proxy.md){.internal-link target=_blank}, voc√™ pode **"montar"** aplica√ß√µes WSGI.

Para isso, voc√™ pode utilizar o `WSGIMiddleware` para encapsular a sua aplica√ß√£o WSGI, como por exemplo Flask, Django, etc.

## Usando o `WSGIMiddleware`

Voc√™ precisa importar o `WSGIMiddleware`.

Em seguinda, encapsular a aplica√ß√£o WSGI (e.g. Flask) com o middleware.

E ent√£o **"montar"** em um caminho de rota.

{* ../../docs_src/wsgi/tutorial001.py hl[2:3,23] *}

## Conferindo

Agora todas as requisi√ß√µes sob o caminho `/v1/` ser√£o manipuladas pela aplica√ß√£o utilizando Flask.

E o resto ser√° manipulado pelo **FastAPI**.

Se voc√™ rodar a aplica√ß√£o e ir at√© <a href="http://localhost:8000/v1/" class="external-link" target="_blank">http://localhost:8000/v1/</a>, voc√™ ver√° o retorno do Flask:

```txt
Hello, World from Flask!
```

E se voc√™ for at√© <a href="http://localhost:8000/v2" class="external-link" target="_blank">http://localhost:8000/v2</a>, voc√™ ver√° o retorno do FastAPI:

```JSON
{
    "message": "Hello World"
}
```


================================================
File: /docs/pt/docs/advanced/security/http-basic-auth.md
================================================
# HTTP Basic Auth

Para os casos mais simples, voc√™ pode utilizar o HTTP Basic Auth.

No HTTP Basic Auth, a aplica√ß√£o espera um cabe√ßalho que cont√©m um usu√°rio e uma senha.

Caso ela n√£o receba, ela retorna um erro HTTP 401 "Unauthorized" (*N√£o Autorizado*).

E retorna um cabe√ßalho `WWW-Authenticate` com o valor `Basic`, e um par√¢metro opcional `realm`.

Isso sinaliza ao navegador para mostrar o prompt integrado para um usu√°rio e senha.

Ent√£o, quando voc√™ digitar o usu√°rio e senha, o navegador os envia automaticamente no cabe√ßalho.

## HTTP Basic Auth Simples

* Importe `HTTPBasic` e `HTTPBasicCredentials`.
* Crie um "esquema `security`" utilizando `HTTPBasic`.
* Utilize o `security` com uma depend√™ncia em sua *opera√ß√£o de rota*.
* Isso retorna um objeto do tipo `HTTPBasicCredentials`:
    * Isto cont√©m o `username` e o `password` enviado.

{* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}

Quando voc√™ tentar abrir a URL pela primeira vez (ou clicar no bot√£o "Executar" nos documentos) o navegador vai pedir pelo seu usu√°rio e senha:

<img src="/img/tutorial/security/image12.png">

## Verifique o usu√°rio

Aqui est√° um exemplo mais completo.

Utilize uma depend√™ncia para verificar se o usu√°rio e a senha est√£o corretos.

Para isso, utilize o m√≥dulo padr√£o do Python <a href="https://docs.python.org/3/library/secrets.html" class="external-link" target="_blank">`secrets`</a> para verificar o usu√°rio e senha.

O `secrets.compare_digest()` necessita receber `bytes` ou `str` que possuem apenas caracteres ASCII (os em ingl√™s). Isso significa que n√£o funcionaria com caracteres como o `√°`, como em `Sebasti√°n`.

Para lidar com isso, primeiramente n√≥s convertemos o `username` e o `password` para `bytes`, codificando-os com UTF-8.

Ent√£o n√≥s podemos utilizar o `secrets.compare_digest()` para garantir que o `credentials.username` √© `"stanleyjobson"`, e que o `credentials.password` √© `"swordfish"`.

{* ../../docs_src/security/tutorial007_an_py39.py hl[1,12:24] *}

Isso seria parecido com:

```Python
if not (credentials.username == "stanleyjobson") or not (credentials.password == "swordfish"):
    # Return some error
    ...
```

Por√©m, ao utilizar o `secrets.compare_digest()`, isso estar√° seguro contra um tipo de ataque chamado "timing attacks" (ataques de temporiza√ß√£o).

### Ataques de Temporiza√ß√£o

Mas o que √© um "timing attack" (ataque de temporiza√ß√£o)?

Vamos imaginar que alguns invasores est√£o tentando adivinhar o usu√°rio e a senha.

E eles enviam uma requisi√ß√£o com um usu√°rio `johndoe` e uma senha `love123`.

Ent√£o o c√≥digo Python em sua aplica√ß√£o seria equivalente a algo como:

```Python
if "johndoe" == "stanleyjobson" and "love123" == "swordfish":
    ...
```

Mas no exato momento que o Python compara o primeiro `j` em `johndoe` contra o primeiro `s` em `stanleyjobson`, ele retornar√° `False`, porque ele j√° sabe que aquelas duas strings n√£o s√£o a mesma, pensando que "n√£o existe a necessidade de desperdi√ßar mais poder computacional comparando o resto das letras". E a sua aplica√ß√£o dir√° "Usu√°rio ou senha incorretos".

Ent√£o os invasores v√£o tentar com o usu√°rio `stanleyjobsox` e a senha `love123`.

E a sua aplica√ß√£o faz algo como:

```Python
if "stanleyjobsox" == "stanleyjobson" and "love123" == "swordfish":
    ...
```

O Python ter√° que comparar todo o `stanleyjobso` tanto em `stanleyjobsox` como em `stanleyjobson` antes de perceber que as strings n√£o s√£o a mesma. Ent√£o isso levar√° alguns microssegundos a mais para retornar "Usu√°rio ou senha incorretos".

#### O tempo para responder ajuda os invasores

Neste ponto, ao perceber que o servidor demorou alguns microssegundos a mais para enviar o retorno "Usu√°rio ou senha incorretos", os invasores ir√£o saber que eles acertaram _alguma coisa_, algumas das letras iniciais estavam certas.

E eles podem tentar de novo sabendo que provavelmente √© algo mais parecido com `stanleyjobsox` do que com `johndoe`.

#### Um ataque "profissional"

Claro, os invasores n√£o tentariam tudo isso de forma manual, eles escreveriam um programa para fazer isso, possivelmente com milhares ou milh√µes de testes por segundo. E obteriam apenas uma letra a mais por vez.

Mas fazendo isso, em alguns minutos ou horas os invasores teriam adivinhado o usu√°rio e senha corretos, com a "ajuda" da nossa aplica√ß√£o, apenas usando o tempo levado para responder.

#### Corrija com o `secrets.compare_digest()`

Mas em nosso c√≥digo j√° estamos utilizando o `secrets.compare_digest()`.

Resumindo, levar√° o mesmo tempo para comparar `stanleyjobsox` com `stanleyjobson` do que comparar `johndoe` com `stanleyjobson`. E o mesmo para a senha.

Deste modo, ao utilizar `secrets.compare_digest()` no c√≥digo de sua aplica√ß√£o, ela estar√° a salvo contra toda essa gama de ataques de seguran√ßa.


### Retorne o erro

Ap√≥s detectar que as credenciais est√£o incorretas, retorne um `HTTPException` com o status 401 (o mesmo retornado quando nenhuma credencial foi informada) e adicione o cabe√ßalho `WWW-Authenticate` para fazer com que o navegador mostre o prompt de login novamente:

{* ../../docs_src/security/tutorial007_an_py39.py hl[26:30] *}


================================================
File: /docs/pt/docs/advanced/security/index.md
================================================
# Seguran√ßa Avan√ßada

## Funcionalidades Adicionais

Existem algumas funcionalidades adicionais para lidar com seguran√ßa al√©m das cobertas em [Tutorial - Guia de Usu√°rio: Seguran√ßa](../../tutorial/security/index.md){.internal-link target=_blank}.

/// tip | Dica

As pr√≥ximas se√ß√µes **n√£o s√£o necessariamente "avan√ßadas"**.

E √© poss√≠vel que para o seu caso de uso, a solu√ß√£o est√° em uma delas.

///

## Leia o Tutorial primeiro

As pr√≥ximas se√ß√µes pressup√µem que voc√™ j√° leu o principal [Tutorial - Guia de Usu√°rio: Seguran√ßa](../../tutorial/security/index.md){.internal-link target=_blank}.

Todas elas s√£o baseadas nos mesmos conceitos, mas permitem algumas funcionalidades extras.


================================================
File: /docs/pt/docs/advanced/security/oauth2-scopes.md
================================================
# Escopos OAuth2

Voc√™ pode utilizar escopos do OAuth2 diretamente com o **FastAPI**, eles s√£o integrados para funcionar perfeitamente.

Isso permitiria que voc√™ tivesse um sistema de permissionamento mais refinado, seguindo o padr√£o do OAuth2 integrado na sua aplica√ß√£o OpenAPI (e as documenta√ß√µes da API).

OAuth2 com escopos √© o mecanismo utilizado por muitos provedores de autentica√ß√£o, como o Facebook, Google, GitHub, Microsoft, Twitter, etc. Eles utilizam isso para prover permiss√µes espec√≠ficas para os usu√°rios e aplica√ß√µes.

Toda vez que voc√™ "se autentica com" Facebook, Google, GitHub, Microsoft, Twitter, aquela aplica√ß√£o est√° utilizando o OAuth2 com escopos.

Nesta se√ß√£o, voc√™ ver√° como gerenciar a autentica√ß√£o e autoriza√ß√£o com os mesmos escopos do OAuth2 em sua aplica√ß√£o **FastAPI**.

/// warning | Aviso

Isso √© uma se√ß√£o mais ou menos avan√ßada. Se voc√™ est√° apenas come√ßando, voc√™ pode pular.

Voc√™ n√£o necessariamente precisa de escopos do OAuth2, e voc√™ pode lidar com autentica√ß√£o e autoriza√ß√£o da maneira que voc√™ achar melhor.

Mas o OAuth2 com escopos pode ser integrado de maneira f√°cil em sua API (com OpenAPI) e a sua documenta√ß√£o de API.

No entando, voc√™ ainda aplica estes escopos, ou qualquer outro requisito de seguran√ßa/autoriza√ß√£o, conforme necess√°rio, em seu c√≥digo.

Em muitos casos, OAuth2 com escopos pode ser um exagero.

Mas se voc√™ sabe que precisa, ou est√° curioso, continue lendo.

///

## Escopos OAuth2 e OpenAPI

A especifica√ß√£o OAuth2 define "escopos" como uma lista de strings separadas por espa√ßos.

O conte√∫do de cada uma dessas strings pode ter qualquer formato, mas n√£o devem possuir espa√ßos.

Estes escopos representam "permiss√µes".

No OpenAPI (e.g. os documentos da API), voc√™ pode definir "esquemas de seguran√ßa".

Quando um desses esquemas de seguran√ßa utiliza OAuth2, voc√™ pode tamb√©m declarar e utilizar escopos.

Cada "escopo" √© apenas uma string (sem espa√ßos).

Eles s√£o normalmente utilizados para declarar permiss√µes de seguran√ßa espec√≠ficas, como por exemplo:

* `users:read` or `users:write` s√£o exemplos comuns.
* `instagram_basic` √© utilizado pelo Facebook / Instagram.
* `https://www.googleapis.com/auth/drive` √© utilizado pelo Google.

/// info | Informa√ß√£o

No OAuth2, um "escopo" √© apenas uma string que declara uma permiss√£o espec√≠fica necess√°ria.

N√£o importa se ela cont√©m outros caracteres como `:` ou se ela √© uma URL.

Estes detalhes s√£o espec√≠ficos da implementa√ß√£o.

Para o OAuth2, eles s√£o apenas strings.

///

## Vis√£o global

Primeiro, vamos olhar rapidamente as partes que mudam dos exemplos do **Tutorial - Guia de Usu√°rio** para [OAuth2 com Senha (e hash), Bearer com tokens JWT](../../tutorial/security/oauth2-jwt.md){.internal-link target=_blank}. Agora utilizando escopos OAuth2:

{* ../../docs_src/security/tutorial005_an_py310.py hl[5,9,13,47,65,106,108:116,122:125,129:135,140,156] *}

Agora vamos revisar essas mudan√ßas passo a passo.

## Esquema de seguran√ßa OAuth2

A primeira mudan√ßa √© que agora n√≥s estamos declarando o esquema de seguran√ßa OAuth2 com dois escopos dispon√≠veis, `me` e `items`.

O par√¢metro `scopes` recebe um `dict` contendo cada escopo como chave e a descri√ß√£o como valor:

{* ../../docs_src/security/tutorial005_an_py310.py hl[63:66] *}

Pelo motivo de estarmos declarando estes escopos, eles aparecer√£o nos documentos da API quando voc√™ se autenticar/autorizar.

E voc√™ poder√° selecionar quais escopos voc√™ deseja dar acesso: `me` e `items`.

Este √© o mesmo mecanismo utilizado quando voc√™ adiciona permiss√µes enquanto se autentica com o Facebook, Google, GitHub, etc:

<img src="/img/tutorial/security/image11.png">

## Token JWT com escopos

Agora, modifique o *caminho de rota* para retornar os escopos solicitados.

N√≥s ainda estamos utilizando o mesmo `OAuth2PasswordRequestForm`. Ele inclui a propriedade `scopes` com uma `list` de `str`, com cada escopo que ele recebeu na requisi√ß√£o.

E n√≥s retornamos os escopos como parte do token JWT.

/// danger | Cuidado

Para manter as coisas simples, aqui n√≥s estamos apenas adicionando os escopos recebidos diretamente ao token.

Por√©m em sua aplica√ß√£o, por seguran√ßa, voc√™ deve garantir que voc√™ apenas adiciona os escopos que o usu√°rio possui permiss√£o de fato, ou aqueles que voc√™ predefiniu.

///

{* ../../docs_src/security/tutorial005_an_py310.py hl[156] *}

## Declare escopos em *opera√ß√µes de rota* e depend√™ncias

Agora n√≥s declaramos que a *opera√ß√£o de rota* para `/users/me/items/` exige o escopo `items`.

Para isso, n√≥s importamos e utilizamos `Security` de `fastapi`.

Voc√™ pode utilizar `Security` para declarar depend√™ncias (assim como `Depends`), por√©m o `Security` tamb√©m recebe o par√¢metros `scopes` com uma lista de escopos (strings).

Neste caso, n√≥s passamos a fun√ß√£o `get_current_active_user` como depend√™ncia para `Security` (da mesma forma que n√≥s far√≠amos com `Depends`).

Mas n√≥s tamb√©m passamos uma `list` de escopos, neste caso com apenas um escopo: `items` (poderia ter mais).

E a fun√ß√£o de depend√™ncia `get_current_active_user` tamb√©m pode declarar subdepend√™ncias, n√£o apenas com `Depends`, mas tamb√©m com `Security`. Ao declarar sua pr√≥pria fun√ß√£o de subdepend√™ncia (`get_current_user`), e mais requisitos de escopo.

Neste caso, ele requer o escopo `me` (poderia requerer mais de um escopo).

/// note | Nota

Voc√™ n√£o necessariamente precisa adicionar diferentes escopos em diferentes lugares.

N√≥s estamos fazendo isso aqui para demonstrar como o **FastAPI** lida com escopos declarados em diferentes n√≠veis.

///

{* ../../docs_src/security/tutorial005_an_py310.py hl[5,140,171] *}

/// info | Informa√ß√µes T√©cnicas

`Security` √© na verdade uma subclasse de `Depends`, e ele possui apenas um par√¢metro extra que veremos depois.

Por√©m ao utilizar `Security` no lugar de `Depends`, o **FastAPI** saber√° que ele pode declarar escopos de seguran√ßa, utiliz√°-los internamente, e documentar a API com o OpenAPI.

Mas quando voc√™ importa `Query`, `Path`, `Depends`, `Security` entre outros de `fastapi`, eles s√£o na verdade fun√ß√µes que retornam classes especiais.

///

## Utilize `SecurityScopes`

Agora atualize a depend√™ncia `get_current_user`.

Este √© o usado pelas depend√™ncias acima.

Aqui √© onde estamos utilizando o mesmo esquema OAuth2 que n√≥s declaramos antes, declarando-o como uma depend√™ncia: `oauth2_scheme`.

Porque esta fun√ß√£o de depend√™ncia n√£o possui nenhum requerimento de escopo, n√≥s podemos utilizar `Depends` com o `oauth2_scheme`. N√≥s n√£o precisamos utilizar `Security` quando n√≥s n√£o precisamos especificar escopos de seguran√ßa.

N√≥s tamb√©m declaramos um par√¢metro especial do tipo `SecurityScopes`, importado de `fastapi.security`.

A classe `SecurityScopes` √© semelhante √† classe `Request` (`Request` foi utilizada para obter o objeto da requisi√ß√£o diretamente).

{* ../../docs_src/security/tutorial005_an_py310.py hl[9,106] *}

## Utilize os `scopes`

O par√¢metro `security_scopes` ser√° do tipo `SecurityScopes`.

Ele ter√° a propriedade `scopes` com uma lista contendo todos os escopos requeridos por ele e todas as depend√™ncias que utilizam ele como uma subdepend√™ncia. Isso significa, todos  os "dependentes"... pode soar meio confuso, e isso ser√° explicado novamente mais adiante.

O objeto `security_scopes` (da classe `SecurityScopes`) tamb√©m oferece um atributo `scope_str` com uma √∫nica string, contendo os escopos separados por espa√ßos (n√≥s vamos utilizar isso).

N√≥s criamos uma `HTTPException` que n√≥s podemos reutilizar (`raise`) mais tarde em diversos lugares.

Nesta exce√ß√£o, n√≥s inclu√≠mos os escopos necess√°rios (se houver algum) como uma string separada por espa√ßos (utilizando `scope_str`). N√≥s colocamos esta string contendo os escopos no cabe√ßalho `WWW-Authenticate` (isso √© parte da especifica√ß√£o).

{* ../../docs_src/security/tutorial005_an_py310.py hl[106,108:116] *}

## Verifique o `username` e o formato dos dados

N√≥s verificamos que n√≥s obtemos um `username`, e extra√≠mos os escopos.

E depois n√≥s validamos esse dado com o modelo Pydantic (capturando a exce√ß√£o `ValidationError`), e se n√≥s obtemos um erro ao ler o token JWT ou validando os dados com o Pydantic, n√≥s levantamos a exce√ß√£o `HTTPException` que criamos anteriormente.

Para isso, n√≥s atualizamos o modelo Pydantic `TokenData` com a nova propriedade `scopes`.

Ao validar os dados com o Pydantic n√≥s podemos garantir que temos, por exemplo, exatamente uma `list` de `str` com os escopos e uma `str` com o `username`.

No lugar de, por exemplo, um `dict`, ou alguma outra coisa, que poderia quebrar a aplica√ß√£o em algum lugar mais tarde, tornando isso um risco de seguran√ßa.

N√≥s tamb√©m verificamos que n√≥s temos um usu√°rio com o "*username*", e caso contr√°rio, n√≥s levantamos a mesma exce√ß√£o que criamos anteriormente.

{* ../../docs_src/security/tutorial005_an_py310.py hl[47,117:128] *}

## Verifique os `scopes`

N√≥s verificamos agora que todos os escopos necess√°rios, por essa depend√™ncia e todos os dependentes (incluindo as *opera√ß√µes de rota*) est√£o inclu√≠das nos escopos fornecidos pelo token recebido, caso contr√°rio, levantamos uma `HTTPException`.

Para isso, n√≥s utilizamos `security_scopes.scopes`, que cont√©m uma `list` com todos esses escopos como uma `str`.

{* ../../docs_src/security/tutorial005_an_py310.py hl[129:135] *}

## √Årvore de depend√™ncia e escopos

Vamos rever novamente essa √°rvore de depend√™ncia e os escopos.

Como a depend√™ncia `get_current_active_user` possui uma subdepend√™ncia em `get_current_user`, o escopo `"me"` declarado em `get_current_active_user` ser√° inclu√≠do na lista de escopos necess√°rios em `security_scopes.scopes` passado para `get_current_user`.

A pr√≥pria *opera√ß√£o de rota* tamb√©m declara o escopo, `"items"`, ent√£o ele tamb√©m estar√° na lista de `security_scopes.scopes` passado para o `get_current_user`.

Aqui est√° como a hierarquia de depend√™ncias e escopos parecem:

* A *opera√ß√£o de rota* `read_own_items` possui:
    * Escopos necess√°rios `["items"]` com a depend√™ncia:
    * `get_current_active_user`:
        *  A fun√ß√£o de depend√™ncia `get_current_active_user` possui:
            * Escopos necess√°rios `["me"]` com a depend√™ncia:
            * `get_current_user`:
                * A fun√ß√£o de depend√™ncia `get_current_user` possui:
                    * Nenhum escopo necess√°rio.
                    * Uma depend√™ncia utilizando `oauth2_scheme`.
                    * Um par√¢metro `security_scopes` do tipo `SecurityScopes`:
                        * Este par√¢metro `security_scopes` possui uma propriedade `scopes` com uma `list` contendo todos estes escopos declarados acima, ent√£o:
                            * `security_scopes.scopes` ter√° `["me", "items"]` para a *opera√ß√£o de rota* `read_own_items`.
                            * `security_scopes.scopes` ter√° `["me"]` para a *opera√ß√£o de rota* `read_users_me`, porque ela declarou na depend√™ncia `get_current_active_user`.
                            * `security_scopes.scopes` ter√° `[]` (nada) para a *opera√ß√£o de rota* `read_system_status`, porque ele n√£o declarou nenhum `Security` com `scopes`, e sua depend√™ncia, `get_current_user`, n√£o declara nenhum `scopes` tamb√©m.

/// tip | Dica

A coisa importante e "m√°gica" aqui √© que `get_current_user` ter√° diferentes listas de `scopes` para validar para cada *opera√ß√£o de rota*.

Tudo depende dos `scopes` declarados em cada *opera√ß√£o de rota* e cada depend√™ncia da √°rvore de depend√™ncias para aquela *opera√ß√£o de rota* espec√≠fica.

///

## Mais detalhes sobre `SecurityScopes`

Voc√™ pode utilizar `SecurityScopes` em qualquer lugar, e em diversos lugares. Ele n√£o precisa estar na depend√™ncia "raiz".

Ele sempre ter√° os escopos de seguran√ßa declarados nas depend√™ncias atuais de `Security` e todos os dependentes para **aquela** *opera√ß√£o de rota* **espec√≠fica** e **aquela** √°rvore de depend√™ncia **espec√≠fica**.

Porque o `SecurityScopes` ter√° todos os escopos declarados por dependentes, voc√™ pode utiliz√°-lo para verificar se o token possui os escopos necess√°rios em uma fun√ß√£o de depend√™ncia central, e depois declarar diferentes requisitos de escopo em diferentes *opera√ß√µes de rota*.

Todos eles ser√£o validados independentemente para cada *opera√ß√£o de rota*.

## Verifique

Se voc√™ abrir os documentos da API, voc√™ pode antenticar e especificar quais escopos voc√™ quer autorizar.

<img src="/img/tutorial/security/image11.png">

Se voc√™ n√£o selecionar nenhum escopo, voc√™ ter√° "autenticado", mas quando voc√™ tentar acessar `/users/me/` ou `/users/me/items/`, voc√™ vai obter um erro dizendo que voc√™ n√£o possui as permiss√µes necess√°rias. Voc√™ ainda poder√° acessar `/status/`.

E se voc√™ selecionar o escopo `me`, mas n√£o o escopo `items`, voc√™ poder√° acessar `/users/me/`, mas n√£o `/users/me/items/`.

Isso √© o que aconteceria se uma aplica√ß√£o terceira que tentou acessar uma dessas *opera√ß√µes de rota* com um token fornecido por um usu√°rio, dependendo de quantas permiss√µes o usu√°rio forneceu para a aplica√ß√£o.

## Sobre integra√ß√µes de terceiros

Neste exemplos n√≥s estamos utilizando o fluxo de senha do OAuth2.

Isso √© apropriado quando n√≥s estamos autenticando em nossa pr√≥pria aplica√ß√£o, provavelmente com o nosso pr√≥prio "*frontend*".

Porque n√≥s podemos confiar nele para receber o `username` e o `password`, pois n√≥s controlamos isso.

Mas se n√≥s estamos construindo uma aplica√ß√£o OAuth2 que outros poderiam conectar (i.e., se voc√™ est√° construindo um provedor de autentica√ß√£o equivalente ao Facebook, Google, GitHub, etc.) voc√™ deveria utilizar um dos outros fluxos.

O mais comum √© o fluxo impl√≠cito.

O mais seguro √© o fluxo de c√≥digo, mas ele √© mais complexo para implementar, pois ele necessita mais passos. Como ele √© mais complexo, muitos provedores terminam sugerindo o fluxo impl√≠cito.

/// note | Nota

√â comum que cada provedor de autentica√ß√£o nomeie os seus fluxos de forma diferente, para torn√°-lo parte de sua marca.

Mas no final, eles est√£o implementando o mesmo padr√£o OAuth2.

///

O **FastAPI** inclui utilit√°rios para todos esses fluxos de autentica√ß√£o OAuth2 em `fastapi.security.oauth2`.

## `Security` em docoradores de `depend√™ncias`

Da mesma forma que voc√™ pode definir uma `list` de `Depends` no par√¢metro de `dependencias` do decorador (como explicado em [Depend√™ncias em decoradores de opera√ß√µes de rota](../../tutorial/dependencies/dependencies-in-path-operation-decorators.md){.internal-link target=_blank}), voc√™ tamb√©m pode utilizar `Security` com escopos l√°.


================================================
File: /docs/pt/docs/deployment/cloud.md
================================================
# Implantar FastAPI em provedores de nuvem

Voc√™ pode usar praticamente **qualquer provedor de nuvem** para implantar seu aplicativo FastAPI.

Na maioria dos casos, os principais provedores de nuvem t√™m guias para implantar o FastAPI com eles.

## Provedores de Nuvem - Patrocinadores

Alguns provedores de nuvem ‚ú® [**patrocinam o FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ‚ú®, o que garante o **desenvolvimento** cont√≠nuo e saud√°vel do FastAPI e seu **ecossistema**.

E isso mostra seu verdadeiro comprometimento com o FastAPI e sua **comunidade** (voc√™), pois eles n√£o querem apenas fornecer a voc√™ um **bom servi√ßo**, mas tamb√©m querem ter certeza de que voc√™ tenha uma **estrutura boa e saud√°vel**, o FastAPI. üôá

Talvez voc√™ queira experimentar os servi√ßos deles e seguir os guias:

* <a href="https://docs.platform.sh/languages/python.html?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023" class="external-link" target="_blank">Platform.sh</a>
* <a href="https://docs.porter.run/language-specific-guides/fastapi" class="external-link" target="_blank">Porter</a>
* <a href="https://www.withcoherence.com/?utm_medium=advertising&utm_source=fastapi&utm_campaign=website" class="external-link" target="_blank">Coherence</a>


================================================
File: /docs/pt/docs/deployment/concepts.md
================================================
# Conceitos de Implanta√ß√µes

Ao implantar um aplicativo **FastAPI**, ou na verdade, qualquer tipo de API da web, h√° v√°rios conceitos com os quais voc√™ provavelmente se importa e, usando-os, voc√™ pode encontrar a maneira **mais apropriada** de **implantar seu aplicativo**.

Alguns dos conceitos importantes s√£o:

* Seguran√ßa - HTTPS
* Executando na inicializa√ß√£o
* Reinicializa√ß√µes
* Replica√ß√£o (o n√∫mero de processos em execu√ß√£o)
* Mem√≥ria
* Etapas anteriores antes de iniciar

Veremos como eles afetariam as **implanta√ß√µes**.

No final, o principal objetivo √© ser capaz de **atender seus clientes de API** de uma forma **segura**, **evitar interrup√ß√µes** e usar os **recursos de computa√ß√£o** (por exemplo, servidores remotos/m√°quinas virtuais) da forma mais eficiente poss√≠vel. üöÄ

Vou lhe contar um pouco mais sobre esses **conceitos** aqui, e espero que isso lhe d√™ a **intui√ß√£o** necess√°ria para decidir como implantar sua API em ambientes muito diferentes, possivelmente at√© mesmo em **futuros** ambientes que ainda n√£o existem.

Ao considerar esses conceitos, voc√™ ser√° capaz de **avaliar e projetar** a melhor maneira de implantar **suas pr√≥prias APIs**.

Nos pr√≥ximos cap√≠tulos, darei a voc√™ mais **receitas concretas** para implantar aplicativos FastAPI.

Mas por enquanto, vamos verificar essas importantes **ideias conceituais**. Esses conceitos tamb√©m se aplicam a qualquer outro tipo de API da web. üí°

## Seguran√ßa - HTTPS

No [cap√≠tulo anterior sobre HTTPS](https.md){.internal-link target=_blank} aprendemos como o HTTPS fornece criptografia para sua API.

Tamb√©m vimos que o HTTPS normalmente √© fornecido por um componente **externo** ao seu servidor de aplicativos, um **Proxy de termina√ß√£o TLS**.

E tem que haver algo respons√°vel por **renovar os certificados HTTPS**, pode ser o mesmo componente ou pode ser algo diferente.

### Ferramentas de exemplo para HTTPS

Algumas das ferramentas que voc√™ pode usar como um proxy de termina√ß√£o TLS s√£o:

* Traefik
    * Lida automaticamente com renova√ß√µes de certificados ‚ú®
* Caddy
    * Lida automaticamente com renova√ß√µes de certificados ‚ú®
* Nginx
    * Com um componente externo como o Certbot para renova√ß√µes de certificados
* HAProxy
    * Com um componente externo como o Certbot para renova√ß√µes de certificados
* Kubernetes com um controlador Ingress como o Nginx
    * Com um componente externo como cert-manager para renova√ß√µes de certificados
* Gerenciado internamente por um provedor de nuvem como parte de seus servi√ßos (leia abaixo üëá)

Outra op√ß√£o √© que voc√™ poderia usar um **servi√ßo de nuvem** que faz mais do trabalho, incluindo a configura√ß√£o de HTTPS. Ele pode ter algumas restri√ß√µes ou cobrar mais, etc. Mas, nesse caso, voc√™ n√£o teria que configurar um Proxy de termina√ß√£o TLS sozinho.

Mostrarei alguns exemplos concretos nos pr√≥ximos cap√≠tulos.

---

Os pr√≥ximos conceitos a serem considerados s√£o todos sobre o programa que executa sua API real (por exemplo, Uvicorn).

## Programa e Processo

Falaremos muito sobre o "**processo**" em execu√ß√£o, ent√£o √© √∫til ter clareza sobre o que ele significa e qual √© a diferen√ßa com a palavra "**programa**".

### O que √© um Programa

A palavra **programa** √© comumente usada para descrever muitas coisas:

* O **c√≥digo** que voc√™ escreve, os **arquivos Python**.
* O **arquivo** que pode ser **executado** pelo sistema operacional, por exemplo: `python`, `python.exe` ou `uvicorn`.
* Um programa espec√≠fico enquanto est√° **em execu√ß√£o** no sistema operacional, usando a CPU e armazenando coisas na mem√≥ria. Isso tamb√©m √© chamado de **processo**.

### O que √© um Processo

A palavra **processo** normalmente √© usada de forma mais espec√≠fica, referindo-se apenas ao que est√° sendo executado no sistema operacional (como no √∫ltimo ponto acima):

* Um programa espec√≠fico enquanto est√° **em execu√ß√£o** no sistema operacional.
    * Isso n√£o se refere ao arquivo, nem ao c√≥digo, refere-se **especificamente** √† coisa que est√° sendo **executada** e gerenciada pelo sistema operacional.
* Qualquer programa, qualquer c√≥digo, **s√≥ pode fazer coisas** quando est√° sendo **executado**. Ent√£o, quando h√° um **processo em execu√ß√£o**.
* O processo pode ser **terminado** (ou "morto") por voc√™, ou pelo sistema operacional. Nesse ponto, ele para de rodar/ser executado, e ele **n√£o pode mais fazer coisas**.
* Cada aplicativo que voc√™ tem em execu√ß√£o no seu computador tem algum processo por tr√°s dele, cada programa em execu√ß√£o, cada janela, etc. E normalmente h√° muitos processos em execu√ß√£o **ao mesmo tempo** enquanto um computador est√° ligado.
* Pode haver **v√°rios processos** do **mesmo programa** em execu√ß√£o ao mesmo tempo.

Se voc√™ verificar o "gerenciador de tarefas" ou o "monitor do sistema" (ou ferramentas semelhantes) no seu sistema operacional, poder√° ver muitos desses processos em execu√ß√£o.

E, por exemplo, voc√™ provavelmente ver√° que h√° v√°rios processos executando o mesmo programa de navegador (Firefox, Chrome, Edge, etc.). Eles normalmente executam um processo por aba, al√©m de alguns outros processos extras.

<img class="shadow" src="/img/deployment/concepts/image01.png">

---

Agora que sabemos a diferen√ßa entre os termos **processo** e **programa**, vamos continuar falando sobre implanta√ß√µes.

## Executando na inicializa√ß√£o

Na maioria dos casos, quando voc√™ cria uma API web, voc√™ quer que ela esteja **sempre em execu√ß√£o**, ininterrupta, para que seus clientes possam sempre acess√°-la. Isso √© claro, a menos que voc√™ tenha um motivo espec√≠fico para querer que ela seja executada somente em certas situa√ß√µes, mas na maioria das vezes voc√™ quer que ela esteja constantemente em execu√ß√£o e **dispon√≠vel**.

### Em um servidor remoto

Ao configurar um servidor remoto (um servidor em nuvem, uma m√°quina virtual, etc.), a coisa mais simples que voc√™ pode fazer √© usar `fastapi run` (que usa Uvicorn) ou algo semelhante, manualmente, da mesma forma que voc√™ faz ao desenvolver localmente.

E funcionar√° e ser√° √∫til **durante o desenvolvimento**.

Mas se sua conex√£o com o servidor for perdida, o **processo em execu√ß√£o** provavelmente morrer√°.

E se o servidor for reiniciado (por exemplo, ap√≥s atualiza√ß√µes ou migra√ß√µes do provedor de nuvem), voc√™ provavelmente **n√£o notar√°**. E por causa disso, voc√™ nem saber√° que precisa reiniciar o processo manualmente. Ent√£o, sua API simplesmente permanecer√° inativa. üò±

### Executar automaticamente na inicializa√ß√£o

Em geral, voc√™ provavelmente desejar√° que o programa do servidor (por exemplo, Uvicorn) seja iniciado automaticamente na inicializa√ß√£o do servidor e, sem precisar de nenhuma **interven√ß√£o humana**, tenha um processo sempre em execu√ß√£o com sua API (por exemplo, Uvicorn executando seu aplicativo FastAPI).

### Programa separado

Para conseguir isso, voc√™ normalmente ter√° um **programa separado** que garantiria que seu aplicativo fosse executado na inicializa√ß√£o. E em muitos casos, ele tamb√©m garantiria que outros componentes ou aplicativos tamb√©m fossem executados, por exemplo, um banco de dados.

### Ferramentas de exemplo para executar na inicializa√ß√£o

Alguns exemplos de ferramentas que podem fazer esse trabalho s√£o:

* Docker
* Kubernetes
* Docker Compose
* Docker em Modo Swarm
* Systemd
* Supervisor
* Gerenciado internamente por um provedor de nuvem como parte de seus servi√ßos
* Outros...

Darei exemplos mais concretos nos pr√≥ximos cap√≠tulos.

## Reinicializa√ß√µes

Semelhante a garantir que seu aplicativo seja executado na inicializa√ß√£o, voc√™ provavelmente tamb√©m deseja garantir que ele seja **reiniciado** ap√≥s falhas.

### N√≥s cometemos erros

N√≥s, como humanos, cometemos **erros** o tempo todo. O software quase *sempre* tem **bugs** escondidos em lugares diferentes. üêõ

E n√≥s, como desenvolvedores, continuamos aprimorando o c√≥digo √† medida que encontramos esses bugs e implementamos novos recursos (possivelmente adicionando novos bugs tamb√©m üòÖ).

### Pequenos erros s√£o tratados automaticamente

Ao criar APIs da web com FastAPI, se houver um erro em nosso c√≥digo, o FastAPI normalmente o conter√° na √∫nica solicita√ß√£o que acionou o erro. üõ°

O cliente receber√° um **Erro Interno do Servidor 500** para essa solicita√ß√£o, mas o aplicativo continuar√° funcionando para as pr√≥ximas solicita√ß√µes em vez de travar completamente.

### Erros maiores - Travamentos

No entanto, pode haver casos em que escrevemos algum c√≥digo que **trava todo o aplicativo**, fazendo com que o Uvicorn e o Python travem. üí•

E ainda assim, voc√™ provavelmente n√£o gostaria que o aplicativo permanecesse inativo porque houve um erro em um lugar, voc√™ provavelmente quer que ele **continue em execu√ß√£o** pelo menos para as *opera√ß√µes de caminho* que n√£o est√£o quebradas.

### Reiniciar ap√≥s falha

Mas nos casos com erros realmente graves que travam o **processo** em execu√ß√£o, voc√™ vai querer um componente externo que seja respons√°vel por **reiniciar** o processo, pelo menos algumas vezes...

/// tip | Dica

...Embora se o aplicativo inteiro estiver **travando imediatamente**, provavelmente n√£o fa√ßa sentido reinici√°-lo para sempre. Mas nesses casos, voc√™ provavelmente notar√° isso durante o desenvolvimento, ou pelo menos logo ap√≥s a implanta√ß√£o.

Ent√£o, vamos nos concentrar nos casos principais, onde ele pode travar completamente em alguns casos espec√≠ficos **no futuro**, e ainda faz sentido reinici√°-lo.

///

Voc√™ provavelmente gostaria de ter a coisa respons√°vel por reiniciar seu aplicativo como um **componente externo**, porque a essa altura, o mesmo aplicativo com Uvicorn e Python j√° havia travado, ent√£o n√£o h√° nada no mesmo c√≥digo do mesmo aplicativo que possa fazer algo a respeito.

### Ferramentas de exemplo para reiniciar automaticamente

Na maioria dos casos, a mesma ferramenta usada para **executar o programa na inicializa√ß√£o** tamb√©m √© usada para lidar com **reinicializa√ß√µes** autom√°ticas.

Por exemplo, isso poderia ser resolvido por:

* Docker
* Kubernetes
* Docker Compose
* Docker no Modo Swarm
* Systemd
* Supervisor
* Gerenciado internamente por um provedor de nuvem como parte de seus servi√ßos
* Outros...

## Replica√ß√£o - Processos e Mem√≥ria

Com um aplicativo FastAPI, usando um programa de servidor como o comando `fastapi` que executa o Uvicorn, execut√°-lo uma vez em **um processo** pode atender a v√°rios clientes simultaneamente.

Mas em muitos casos, voc√™ desejar√° executar v√°rios processos de trabalho ao mesmo tempo.

### Processos M√∫ltiplos - Trabalhadores

Se voc√™ tiver mais clientes do que um √∫nico processo pode manipular (por exemplo, se a m√°quina virtual n√£o for muito grande) e tiver **v√°rios n√∫cleos** na CPU do servidor, voc√™ poder√° ter **v√°rios processos** em execu√ß√£o com o mesmo aplicativo ao mesmo tempo e distribuir todas as solicita√ß√µes entre eles.

Quando voc√™ executa **v√°rios processos** do mesmo programa de API, eles s√£o comumente chamados de **trabalhadores**.

### Processos do Trabalhador e Portas

Lembra da documenta√ß√£o [Sobre HTTPS](https.md){.internal-link target=_blank} que diz que apenas um processo pode escutar em uma combina√ß√£o de porta e endere√ßo IP em um servidor?

Isso ainda √© verdade.

Ent√£o, para poder ter **v√°rios processos** ao mesmo tempo, tem que haver um **√∫nico processo escutando em uma porta** que ent√£o transmite a comunica√ß√£o para cada processo de trabalho de alguma forma.

### Mem√≥ria por Processo

Agora, quando o programa carrega coisas na mem√≥ria, por exemplo, um modelo de aprendizado de m√°quina em uma vari√°vel, ou o conte√∫do de um arquivo grande em uma vari√°vel, tudo isso **consome um pouco da mem√≥ria (RAM)** do servidor.

E v√°rios processos normalmente **n√£o compartilham nenhuma mem√≥ria**. Isso significa que cada processo em execu√ß√£o tem suas pr√≥prias coisas, vari√°veis ‚Äã‚Äãe mem√≥ria. E se voc√™ estiver consumindo uma grande quantidade de mem√≥ria em seu c√≥digo, **cada processo** consumir√° uma quantidade equivalente de mem√≥ria.

### Mem√≥ria do servidor

Por exemplo, se seu c√≥digo carrega um modelo de Machine Learning com **1 GB de tamanho**, quando voc√™ executa um processo com sua API, ele consumir√° pelo menos 1 GB de RAM. E se voc√™ iniciar **4 processos** (4 trabalhadores), cada um consumir√° 1 GB de RAM. Ent√£o, no total, sua API consumir√° **4 GB de RAM**.

E se o seu servidor remoto ou m√°quina virtual tiver apenas 3 GB de RAM, tentar carregar mais de 4 GB de RAM causar√° problemas. üö®

### Processos M√∫ltiplos - Um Exemplo

Neste exemplo, h√° um **Processo Gerenciador** que inicia e controla dois **Processos de Trabalhadores**.

Este Processo de Gerenciador provavelmente seria o que escutaria na **porta** no IP. E ele transmitiria toda a comunica√ß√£o para os processos de trabalho.

Esses processos de trabalho seriam aqueles que executariam seu aplicativo, eles executariam os c√°lculos principais para receber uma **solicita√ß√£o** e retornar uma **resposta**, e carregariam qualquer coisa que voc√™ colocasse em vari√°veis ‚Äã‚Äãna RAM.

<img src="/img/deployment/concepts/process-ram.svg">

E, claro, a mesma m√°quina provavelmente teria **outros processos** em execu√ß√£o, al√©m do seu aplicativo.

Um detalhe interessante √© que a porcentagem da **CPU usada** por cada processo pode **variar** muito ao longo do tempo, mas a **mem√≥ria (RAM)** normalmente fica mais ou menos **est√°vel**.

Se voc√™ tiver uma API que faz uma quantidade compar√°vel de c√°lculos todas as vezes e tiver muitos clientes, ent√£o a **utiliza√ß√£o da CPU** provavelmente *tamb√©m ser√° est√°vel* (em vez de ficar constantemente subindo e descendo rapidamente).

### Exemplos de ferramentas e estrat√©gias de replica√ß√£o

Pode haver v√°rias abordagens para conseguir isso, e falarei mais sobre estrat√©gias espec√≠ficas nos pr√≥ximos cap√≠tulos, por exemplo, ao falar sobre Docker e cont√™ineres.

A principal restri√ß√£o a ser considerada √© que tem que haver um **√∫nico** componente manipulando a **porta** no **IP p√∫blico**. E ent√£o tem que ter uma maneira de **transmitir** a comunica√ß√£o para os **processos/trabalhadores** replicados.

Aqui est√£o algumas combina√ß√µes e estrat√©gias poss√≠veis:

* **Uvicorn** com `--workers`
    * Um **gerenciador de processos** Uvicorn escutaria no **IP** e na **porta** e iniciaria **v√°rios processos de trabalho Uvicorn**.
* **Kubernetes** e outros **sistemas de cont√™ineres** distribu√≠dos
    * Algo na camada **Kubernetes** escutaria no **IP** e na **porta**. A replica√ß√£o seria por ter **v√°rios cont√™ineres**, cada um com **um processo Uvicorn** em execu√ß√£o.
* **Servi√ßos de nuvem** que cuidam disso para voc√™
    * O servi√ßo de nuvem provavelmente **cuidar√° da replica√ß√£o para voc√™**. Ele possivelmente deixaria voc√™ definir **um processo para executar**, ou uma **imagem de cont√™iner** para usar, em qualquer caso, provavelmente seria **um √∫nico processo Uvicorn**, e o servi√ßo de nuvem seria respons√°vel por replic√°-lo.

/// tip | Dica

N√£o se preocupe se alguns desses itens sobre **cont√™ineres**, Docker ou Kubernetes ainda n√£o fizerem muito sentido.

Falarei mais sobre imagens de cont√™iner, Docker, Kubernetes, etc. em um cap√≠tulo futuro: [FastAPI em cont√™ineres - Docker](docker.md){.internal-link target=_blank}.

///

## Etapas anteriores antes de come√ßar

H√° muitos casos em que voc√™ deseja executar algumas etapas **antes de iniciar** sua aplica√ß√£o.

Por exemplo, voc√™ pode querer executar **migra√ß√µes de banco de dados**.

Mas na maioria dos casos, voc√™ precisar√° executar essas etapas apenas **uma vez**.

Portanto, voc√™ vai querer ter um **processo √∫nico** para executar essas **etapas anteriores** antes de iniciar o aplicativo.

E voc√™ ter√° que se certificar de que √© um √∫nico processo executando essas etapas anteriores *mesmo* se depois, voc√™ iniciar **v√°rios processos** (v√°rios trabalhadores) para o pr√≥prio aplicativo. Se essas etapas fossem executadas por **v√°rios processos**, eles **duplicariam** o trabalho executando-o em **paralelo**, e se as etapas fossem algo delicado como uma migra√ß√£o de banco de dados, elas poderiam causar conflitos entre si.

Claro, h√° alguns casos em que n√£o h√° problema em executar as etapas anteriores v√°rias vezes; nesse caso, √© muito mais f√°cil de lidar.

/// tip | Dica

Al√©m disso, tenha em mente que, dependendo da sua configura√ß√£o, em alguns casos voc√™ **pode nem precisar de nenhuma etapa anterior** antes de iniciar sua aplica√ß√£o.

Nesse caso, voc√™ n√£o precisaria se preocupar com nada disso. ü§∑

///

### Exemplos de estrat√©gias de etapas anteriores

Isso **depender√° muito** da maneira como voc√™ **implanta seu sistema** e provavelmente estar√° conectado √† maneira como voc√™ inicia programas, lida com reinicializa√ß√µes, etc.

Aqui est√£o algumas ideias poss√≠veis:

* Um "Init Container" no Kubernetes que roda antes do seu app container
* Um script bash que roda os passos anteriores e ent√£o inicia seu aplicativo
    * Voc√™ ainda precisaria de uma maneira de iniciar/reiniciar *aquele* script bash, detectar erros, etc.

/// tip | Dica

Darei exemplos mais concretos de como fazer isso com cont√™ineres em um cap√≠tulo futuro: [FastAPI em cont√™ineres - Docker](docker.md){.internal-link target=_blank}.

///

## Utiliza√ß√£o de recursos

Seu(s) servidor(es) √©(s√£o) um **recurso** que voc√™ pode consumir ou **utilizar**, com seus programas, o tempo de computa√ß√£o nas CPUs e a mem√≥ria RAM dispon√≠vel.

Quanto dos recursos do sistema voc√™ quer consumir/utilizar? Pode ser f√°cil pensar "n√£o muito", mas, na realidade, voc√™ provavelmente vai querer consumir **o m√°ximo poss√≠vel sem travar**.

Se voc√™ est√° pagando por 3 servidores, mas est√° usando apenas um pouco de RAM e CPU, voc√™ provavelmente est√° **desperdi√ßando dinheiro** üí∏, e provavelmente **desperdi√ßando energia el√©trica do servidor** üåé, etc.

Nesse caso, seria melhor ter apenas 2 servidores e usar uma porcentagem maior de seus recursos (CPU, mem√≥ria, disco, largura de banda de rede, etc).

Por outro lado, se voc√™ tem 2 servidores e est√° usando **100% da CPU e RAM deles**, em algum momento um processo pedir√° mais mem√≥ria, e o servidor ter√° que usar o disco como "mem√≥ria" (o que pode ser milhares de vezes mais lento), ou at√© mesmo **travar**. Ou um processo pode precisar fazer alguma computa√ß√£o e teria que esperar at√© que a CPU esteja livre novamente.

Nesse caso, seria melhor obter **um servidor extra** e executar alguns processos nele para que todos tenham **RAM e tempo de CPU suficientes**.

Tamb√©m h√° a chance de que, por algum motivo, voc√™ tenha um **pico** de uso da sua API. Talvez ela tenha se tornado viral, ou talvez alguns outros servi√ßos ou bots comecem a us√°-la. E voc√™ pode querer ter recursos extras para estar seguro nesses casos.

Voc√™ poderia colocar um **n√∫mero arbitr√°rio** para atingir, por exemplo, algo **entre 50% a 90%** da utiliza√ß√£o de recursos. O ponto √© que essas s√£o provavelmente as principais coisas que voc√™ vai querer medir e usar para ajustar suas implanta√ß√µes.

Voc√™ pode usar ferramentas simples como `htop` para ver a CPU e a RAM usadas no seu servidor ou a quantidade usada por cada processo. Ou voc√™ pode usar ferramentas de monitoramento mais complexas, que podem ser distribu√≠das entre servidores, etc.

## Recapitular

Voc√™ leu aqui alguns dos principais conceitos que provavelmente precisa ter em mente ao decidir como implantar seu aplicativo:

* Seguran√ßa - HTTPS
* Executando na inicializa√ß√£o
* Reinicializa√ß√µes
* Replica√ß√£o (o n√∫mero de processos em execu√ß√£o)
* Mem√≥ria
* Etapas anteriores antes de iniciar

Entender essas ideias e como aplic√°-las deve lhe dar a intui√ß√£o necess√°ria para tomar qualquer decis√£o ao configurar e ajustar suas implanta√ß√µes. ü§ì

Nas pr√≥ximas se√ß√µes, darei exemplos mais concretos de poss√≠veis estrat√©gias que voc√™ pode seguir. üöÄ


================================================
File: /docs/pt/docs/deployment/docker.md
================================================
# FastAPI em cont√™ineres - Docker

Ao fazer o deploy de aplica√ß√µes FastAPI uma abordagem comum √© construir uma **imagem de cont√™iner Linux**. Isso normalmente √© feito usando o <a href="https://www.docker.com/" class="external-link" target="_blank">**Docker**</a>. Voc√™ pode a partir disso fazer o deploy dessa imagem de algumas maneiras.

Usando cont√™ineres Linux voc√™ tem diversas vantagens incluindo **seguran√ßa**, **replicabilidade**, **simplicidade**, entre outras.

/// tip | Dica

Est√° com pressa e j√° sabe dessas coisas? Pode ir direto para [`Dockerfile` abaixo üëá](#construindo-uma-imagem-docker-para-fastapi).

///

<details>
<summary>Visualiza√ß√£o do Dockerfile üëÄ</summary>

```Dockerfile
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

</details>

## O que √© um Cont√™iner

Cont√™ineres (especificamente cont√™ineres Linux) s√£o um jeito muito **leve** de empacotar aplica√ß√µes contendo todas as depend√™ncias e arquivos necess√°rios enquanto os mant√©m isolados de outros cont√™ineres (outras aplica√ß√µes ou componentes) no mesmo sistema.

Cont√™ineres Linux rodam usando o mesmo kernel Linux do hospedeiro (m√°quina, m√°quina virtual, servidor na nuvem, etc). Isso simplesmente significa que eles s√£o muito leves (comparados com m√°quinas virtuais emulando um sistema operacional completo).

Dessa forma, cont√™ineres consomem **poucos recursos**, uma quantidade compar√°vel com rodar os processos diretamente (uma m√°quina virtual consumiria muito mais).

Cont√™ineres tamb√©m possuem seus pr√≥prios processos (comumente um √∫nico processo), sistema de arquivos e rede **isolados** simplificando deploy, seguran√ßa, desenvolvimento, etc.

## O que √© uma Imagem de Cont√™iner

Um **cont√™iner** roda a partir de uma **imagem de cont√™iner**.

Uma imagem de cont√™iner √© uma vers√£o **est√°tica** de todos os arquivos, vari√°veis de ambiente e do comando/programa padr√£o que deve estar presente num cont√™iner. **Est√°tica** aqui significa que a **imagem** de cont√™iner n√£o est√° rodando, n√£o est√° sendo executada, somente cont√©m os arquivos e metadados empacotados.

Em contraste com a "**imagem de cont√™iner**" que cont√©m os conte√∫dos est√°ticos armazenados, um "**cont√™iner**" normalmente se refere √† inst√¢ncia rodando, a coisa que est√° sendo **executada**.

Quando o **cont√™iner** √© iniciado e est√° rodando (iniciado a partir de uma **imagem de cont√™iner**), ele pode criar ou modificar arquivos, vari√°veis de ambiente, etc. Essas mudan√ßas v√£o existir somente nesse cont√™iner, mas n√£o persistir√£o na imagem subjacente do container (n√£o ser√£o salvas no disco).

Uma imagem de cont√™iner √© compar√°vel ao arquivo de **programa** e seus conte√∫dos, ex.: `python` e algum arquivo `main.py`.

E o **cont√™iner** em si (em contraste √† **imagem de cont√™iner**) √© a pr√≥pria inst√¢ncia da imagem rodando, compar√°vel a um **processo**. Na verdade, um cont√™iner est√° rodando somente quando h√° um **processo rodando** (e normalmente √© somente um processo). O cont√™iner finaliza quando n√£o h√° um processo rodando nele.

## Imagens de cont√™iner

Docker tem sido uma das principais ferramentas para criar e gerenciar **imagens de cont√™iner** e **cont√™ineres**.

E existe um <a href="https://hub.docker.com/" class="external-link" target="_blank">Docker Hub</a> p√∫blico com **imagens de cont√™iner oficiais** pr√©-prontas para diversas ferramentas, ambientes, bancos de dados e aplica√ß√µes.

Por exemplo, h√° uma <a href="https://hub.docker.com/_/python" class="external-link" target="_blank">Imagem Python</a> oficial.

E existe muitas outras imagens para diferentes coisas, como bancos de dados, por exemplo:

* <a href="https://hub.docker.com/_/postgres" class="external-link" target="_blank">PostgreSQL</a>
* <a href="https://hub.docker.com/_/mysql" class="external-link" target="_blank">MySQL</a>
* <a href="https://hub.docker.com/_/mongo" class="external-link" target="_blank">MongoDB</a>
* <a href="https://hub.docker.com/_/redis" class="external-link" target="_blank">Redis</a>, etc.

Usando imagens de cont√™iner pr√©-prontas √© muito f√°cil **combinar** e usar diferentes ferramentas. Por exemplo, para testar um novo banco de dados. Em muitos casos, voc√™ pode usar as **imagens oficiais** precisando somente de vari√°veis de ambiente para configur√°-las.

Dessa forma, em muitos casos voc√™ pode aprender sobre cont√™ineres e Docker e re-usar essa experi√™ncia com diversos componentes e ferramentas.

Ent√£o, voc√™ rodaria **v√°rios cont√™ineres** com coisas diferentes, como um banco de dados, uma aplica√ß√£o Python, um servidor web com uma aplica√ß√£o frontend React, e conect√°-los juntos via sua rede interna.

Todos os sistemas de gerenciamento de cont√™ineres (como Docker ou Kubernetes) possuem essas funcionalidades de rede integradas a eles.

## Cont√™ineres e Processos

Uma **imagem de cont√™iner** normalmente inclui em seus metadados o programa padr√£o ou comando que deve ser executado quando o **cont√™iner** √© iniciado e os par√¢metros a serem passados para esse programa. Muito similar ao que seria se estivesse na linha de comando.

Quando um **cont√™iner** √© iniciado, ele ir√° rodar esse comando/programa (embora voc√™ possa sobrescrev√™-lo e fazer com que ele rode um comando/programa diferente).

Um cont√™iner est√° rodando enquanto o **processo principal** (comando ou programa) estiver rodando.

Um cont√™iner normalmente tem um **√∫nico processo**, mas tamb√©m √© poss√≠vel iniciar sub-processos a partir do processo principal, e dessa forma voc√™ ter√° **v√°rios processos** no mesmo cont√™iner.

Mas n√£o √© poss√≠vel ter um cont√™iner rodando sem **pelo menos um processo rodando**. Se o processo principal parar, o cont√™iner tamb√©m para.

## Construindo uma Imagem Docker para FastAPI

Okay, vamos construir algo agora! üöÄ

Eu vou mostrar como construir uma **imagem Docker** para FastAPI **do zero**, baseado na **imagem oficial do Python**.

Isso √© o que voc√™ quer fazer na **maioria dos casos**, por exemplo:

* Usando **Kubernetes** ou ferramentas similares
* Quando rodando em uma **Raspberry Pi**
* Usando um servi√ßo em nuvem que ir√° rodar uma imagem de cont√™iner para voc√™, etc.

### O Pacote Requirements

Voc√™ normalmente teria os **requisitos do pacote** para sua aplica√ß√£o em algum arquivo.

Isso pode depender principalmente da ferramenta que voc√™ usa para **instalar** esses requisitos.

O caminho mais comum de fazer isso √© ter um arquivo `requirements.txt` com os nomes dos pacotes e suas vers√µes, um por linha.

Voc√™, naturalmente, usaria as mesmas ideias que voc√™ leu em [Sobre Vers√µes do FastAPI](versions.md){.internal-link target=_blank} para definir os intervalos de vers√µes.

Por exemplo, seu `requirements.txt` poderia parecer com:

```
fastapi>=0.68.0,<0.69.0
pydantic>=1.8.0,<2.0.0
uvicorn>=0.15.0,<0.16.0
```

E voc√™ normalmente instalaria essas depend√™ncias de pacote com `pip`, por exemplo:

<div class="termy">

```console
$ pip install -r requirements.txt
---> 100%
Successfully installed fastapi pydantic uvicorn
```

</div>

/// info

H√° outros formatos e ferramentas para definir e instalar depend√™ncias de pacote.

Eu vou mostrar um exemplo depois usando Poetry em uma se√ß√£o abaixo. üëá

///

### Criando o C√≥digo do **FastAPI**

* Crie um diret√≥rio `app` e entre nele.
* Crie um arquivo vazio `__init__.py`.
* Crie um arquivo `main.py` com:

```Python
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

### Dockerfile

Agora, no mesmo diret√≥rio do projeto, crie um arquivo `Dockerfile` com:

```{ .dockerfile .annotate }
# (1)
FROM python:3.9

# (2)
WORKDIR /code

# (3)
COPY ./requirements.txt /code/requirements.txt

# (4)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)
COPY ./app /code/app

# (6)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

1. Inicie a partir da imagem base oficial do Python.

2. Defina o diret√≥rio de trabalho atual para `/code`.

    Esse √© o diret√≥rio onde colocaremos o arquivo `requirements.txt` e o diret√≥rio `app`.

3. Copie o arquivo com os requisitos para o diret√≥rio `/code`.

    Copie **somente** o arquivo com os requisitos primeiro, n√£o o resto do c√≥digo.

    Como esse arquivo **n√£o muda com frequ√™ncia**, o Docker ir√° detect√°-lo e usar o **cache** para esse passo, habilitando o cache para o pr√≥ximo passo tamb√©m.

4. Instale as depend√™ncias de pacote vindas do arquivo de requisitos.

    A op√ß√£o `--no-cache-dir` diz ao `pip` para n√£o salvar os pacotes baixados localmente, pois isso s√≥ aconteceria se `pip` fosse executado novamente para instalar os mesmos pacotes, mas esse n√£o √© o caso quando trabalhamos com cont√™ineres.

    /// note

    `--no-cache-dir` √© apenas relacionado ao `pip`, n√£o tem nada a ver com Docker ou cont√™ineres.

    ///

    A op√ß√£o `--upgrade` diz ao `pip` para atualizar os pacotes se eles j√° estiverem instalados.

    Por causa do passo anterior de copiar o arquivo, ele pode ser detectado pelo **cache do Docker**, esse passo tamb√©m **usar√° o cache do Docker** quando dispon√≠vel.

    Usando o cache nesse passo ir√° **salvar** muito **tempo** quando voc√™ for construir a imagem repetidas vezes durante o desenvolvimento, ao inv√©s de **baixar e instalar** todas as depend√™ncias **toda vez**.

5. Copie o diret√≥rio `./app` dentro do diret√≥rio `/code`.

    Como isso tem todo o c√≥digo contendo o que **muda com mais frequ√™ncia**, o **cache do Docker** n√£o ser√° usado para esse passo ou para **qualquer passo seguinte** facilmente.

    Ent√£o, √© importante colocar isso **perto do final** do `Dockerfile`, para otimizar o tempo de constru√ß√£o da imagem do cont√™iner.

6. Defina o **comando** para rodar o servidor `uvicorn`.

    `CMD` recebe uma lista de strings, cada uma dessas strings √© o que voc√™ digitaria na linha de comando separado por espa√ßos.

    Esse comando ser√° executado a partir do **diret√≥rio de trabalho atual**, o mesmo diret√≥rio `/code` que voc√™ definiu acima com `WORKDIR /code`.

    Porque o programa ser√° iniciado em `/code` e dentro dele est√° o diret√≥rio `./app` com seu c√≥digo, o **Uvicorn** ser√° capaz de ver e **importar** `app` de `app.main`.

/// tip

Revise o que cada linha faz clicando em cada bolha com o n√∫mero no c√≥digo. üëÜ

///

Agora voc√™ deve ter uma estrutura de diret√≥rio como:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ Dockerfile
‚îî‚îÄ‚îÄ requirements.txt
```

#### Por Tr√°s de um Proxy de Termina√ß√£o TLS

Se voc√™ est√° executando seu cont√™iner atr√°s de um Proxy de Termina√ß√£o TLS (load balancer) como Nginx ou Traefik, adicione a op√ß√£o `--proxy-headers`, isso far√° com que o Uvicorn confie nos cabe√ßalhos enviados por esse proxy, informando que o aplicativo est√° sendo executado atr√°s do HTTPS, etc.

```Dockerfile
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

#### Cache Docker

Existe um truque importante nesse `Dockerfile`, primeiro copiamos o **arquivo com as depend√™ncias sozinho**, n√£o o resto do c√≥digo. Deixe-me te contar o porqu√™ disso.

```Dockerfile
COPY ./requirements.txt /code/requirements.txt
```

Docker e outras ferramentas **constr√≥em** essas imagens de cont√™iner **incrementalmente**, adicionando **uma camada em cima da outra**, come√ßando do topo do `Dockerfile` e adicionando qualquer arquivo criado por cada uma das instru√ß√µes do `Dockerfile`.

Docker e ferramentas similares tamb√©m usam um **cache interno** ao construir a imagem, se um arquivo n√£o mudou desde a √∫ltima vez que a imagem do cont√™iner foi constru√≠da, ent√£o ele ir√° **reutilizar a mesma camada** criada na √∫ltima vez, ao inv√©s de copiar o arquivo novamente e criar uma nova camada do zero.

Somente evitar a c√≥pia de arquivos n√£o melhora muito as coisas, mas porque ele usou o cache para esse passo, ele pode **usar o cache para o pr√≥ximo passo**. Por exemplo, ele pode usar o cache para a instru√ß√£o que instala as depend√™ncias com:

```Dockerfile
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

O arquivo com os requisitos de pacote **n√£o muda com frequ√™ncia**. Ent√£o, ao copiar apenas esse arquivo, o Docker ser√° capaz de **usar o cache** para esse passo.

E ent√£o, o Docker ser√° capaz de **usar o cache para o pr√≥ximo passo** que baixa e instala essas depend√™ncias. E √© aqui que **salvamos muito tempo**. ‚ú® ...e evitamos t√©dio esperando. üò™üòÜ

Baixar e instalar as depend√™ncias do pacote **pode levar minutos**, mas usando o **cache** leva **segundos** no m√°ximo.

E como voc√™ estaria construindo a imagem do cont√™iner novamente e novamente durante o desenvolvimento para verificar se suas altera√ß√µes de c√≥digo est√£o funcionando, h√° muito tempo acumulado que isso economizaria.

A partir da√≠, perto do final do `Dockerfile`, copiamos todo o c√≥digo. Como isso √© o que **muda com mais frequ√™ncia**, colocamos perto do final, porque quase sempre, qualquer coisa depois desse passo n√£o ser√° capaz de usar o cache.

```Dockerfile
COPY ./app /code/app
```

### Construindo a Imagem Docker

Agora que todos os arquivos est√£o no lugar, vamos construir a imagem do cont√™iner.

* V√° para o diret√≥rio do projeto (onde est√° o seu `Dockerfile`, contendo o diret√≥rio `app`).
* Construa sua imagem FastAPI:

<div class="termy">

```console
$ docker build -t myimage .

---> 100%
```

</div>

/// tip

Note o `.` no final, √© equivalente a `./`, ele diz ao Docker o diret√≥rio a ser usado para construir a imagem do cont√™iner.

Nesse caso, √© o mesmo diret√≥rio atual (`.`).

///

### Inicie o cont√™iner Docker

* Execute um cont√™iner baseado na sua imagem:

<div class="termy">

```console
$ docker run -d --name mycont√™iner -p 80:80 myimage
```

</div>

## Verifique

Voc√™ deve ser capaz de verificar isso no URL do seu cont√™iner Docker, por exemplo: <a href="http://192.168.99.100/items/5?q=somequery" class="external-link" target="_blank">http://192.168.99.100/items/5?q=somequery</a> ou <a href="http://127.0.0.1/items/5?q=somequery" class="external-link" target="_blank">http://127.0.0.1/items/5?q=somequery</a> (ou equivalente, usando seu host Docker).

Voc√™ ver√° algo como:

```JSON
{"item_id": 5, "q": "somequery"}
```

## Documenta√ß√£o interativa da API

Agora voc√™ pode ir para <a href="http://192.168.99.100/docs" class="external-link" target="_blank">http://192.168.99.100/docs</a> ou <a href="http://127.0.0.1/docs" class="external-link" target="_blank">http://127.0.0.1/docs</a> (ou equivalente, usando seu host Docker).

Voc√™ ver√° a documenta√ß√£o interativa autom√°tica da API (fornecida pelo <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a>):

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)

## Documenta√ß√£o alternativa da API

E voc√™ tamb√©m pode ir para <a href="http://192.168.99.100/redoc" class="external-link" target="_blank">http://192.168.99.100/redoc</a> ou <a href="http://127.0.0.1/redoc" class="external-link" target="_blank">http://127.0.0.1/redoc</a> (ou equivalente, usando seu host Docker).

Voc√™ ver√° a documenta√ß√£o alternativa autom√°tica (fornecida pela <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a>):

![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)

## Construindo uma Imagem Docker com um Arquivo √önico FastAPI

Se seu FastAPI for um √∫nico arquivo, por exemplo, `main.py` sem um diret√≥rio `./app`, sua estrutura de arquivos poderia ser assim:

```
.
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ requirements.txt
```

Ent√£o voc√™ s√≥ teria que alterar os caminhos correspondentes para copiar o arquivo dentro do `Dockerfile`:

```{ .dockerfile .annotate hl_lines="10  13" }
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

1. Copie o arquivo `main.py` para o diret√≥rio `/code` diretamente (sem nenhum diret√≥rio `./app`).

2. Execute o Uvicorn e diga a ele para importar o objeto `app` de `main` (em vez de importar de `app.main`).

Ent√£o ajuste o comando Uvicorn para usar o novo m√≥dulo `main` em vez de `app.main` para importar o objeto FastAPI `app`.

## Conceitos de Implanta√ß√£o

Vamos falar novamente sobre alguns dos mesmos [Conceitos de Implanta√ß√£o](concepts.md){.internal-link target=_blank} em termos de cont√™ineres.

Cont√™ineres s√£o principalmente uma ferramenta para simplificar o processo de **constru√ß√£o e implanta√ß√£o** de um aplicativo, mas eles n√£o imp√µem uma abordagem particular para lidar com esses **conceitos de implanta√ß√£o** e existem v√°rias estrat√©gias poss√≠veis.

A **boa not√≠cia** √© que com cada estrat√©gia diferente h√° uma maneira de cobrir todos os conceitos de implanta√ß√£o. üéâ

Vamos revisar esses **conceitos de implanta√ß√£o** em termos de cont√™ineres:

* HTTPS
* Executando na inicializa√ß√£o
* Reinicializa√ß√µes
* Replica√ß√£o (n√∫mero de processos rodando)
* Mem√≥ria
* Passos anteriores antes de come√ßar

## HTTPS

Se nos concentrarmos apenas na **imagem do cont√™iner** para um aplicativo FastAPI (e posteriormente no **cont√™iner** em execu√ß√£o), o HTTPS normalmente seria tratado **externamente** por outra ferramenta.

Isso poderia ser outro cont√™iner, por exemplo, com <a href="https://traefik.io/" class="external-link" target="_blank">Traefik</a>, lidando com **HTTPS** e aquisi√ß√£o **autom√°tica** de **certificados**.

/// tip

Traefik tem integra√ß√µes com Docker, Kubernetes e outros, portanto, √© muito f√°cil configurar e configurar o HTTPS para seus cont√™ineres com ele.

///

Alternativamente, o HTTPS poderia ser tratado por um provedor de nuvem como um de seus servi√ßos (enquanto ainda executasse o aplicativo em um cont√™iner).

## Executando na inicializa√ß√£o e reinicializa√ß√µes

Normalmente, outra ferramenta √© respons√°vel por **iniciar e executar** seu cont√™iner.

Ela poderia ser o **Docker** diretamente, **Docker Compose**, **Kubernetes**, um **servi√ßo de nuvem**, etc.

Na maioria (ou em todos) os casos, h√° uma op√ß√£o simples para habilitar a execu√ß√£o do cont√™iner na inicializa√ß√£o e habilitar reinicializa√ß√µes em falhas. Por exemplo, no Docker, √© a op√ß√£o de linha de comando `--restart`.

Sem usar cont√™ineres, fazer aplicativos executarem na inicializa√ß√£o e com reinicializa√ß√µes pode ser trabalhoso e dif√≠cil. Mas quando **trabalhando com cont√™ineres** em muitos casos essa funcionalidade √© inclu√≠da por padr√£o. ‚ú®

## Replica√ß√£o - N√∫mero de Processos

Se voc√™ tiver um <abbr title="Um grupo de m√°quinas que s√£o configuradas para estarem conectadas e trabalharem juntas de alguma forma">cluster</abbr> de m√°quinas com **Kubernetes**, Docker Swarm Mode, Nomad ou outro sistema complexo semelhante para gerenciar cont√™ineres distribu√≠dos em v√°rias m√°quinas, ent√£o provavelmente desejar√° **lidar com a replica√ß√£o** no **n√≠vel do cluster** em vez de usar um **gerenciador de processos** (como o Gunicorn com workers) em cada cont√™iner.

Um desses sistemas de gerenciamento de cont√™ineres distribu√≠dos como o Kubernetes normalmente tem alguma maneira integrada de lidar com a **replica√ß√£o de cont√™ineres** enquanto ainda oferece **balanceamento de carga** para as solicita√ß√µes recebidas. Tudo no **n√≠vel do cluster**.

Nesses casos, voc√™ provavelmente desejar√° criar uma **imagem do cont√™iner do zero** como [explicado acima](#dockerfile), instalando suas depend√™ncias e executando **um √∫nico processo Uvicorn** em vez de executar algo como Gunicorn com trabalhadores Uvicorn.

### Balanceamento de Carga

Quando usando cont√™ineres, normalmente voc√™ ter√° algum componente **escutando na porta principal**. Poderia ser outro cont√™iner que tamb√©m √© um **Proxy de Termina√ß√£o TLS** para lidar com **HTTPS** ou alguma ferramenta semelhante.

Como esse componente assumiria a **carga** de solicita√ß√µes e distribuiria isso entre os trabalhadores de uma maneira (esperan√ßosamente) **balanceada**, ele tamb√©m √© comumente chamado de **Balanceador de Carga**.

/// tip

O mesmo componente **Proxy de Termina√ß√£o TLS** usado para HTTPS provavelmente tamb√©m seria um **Balanceador de Carga**.

///

E quando trabalhar com cont√™ineres, o mesmo sistema que voc√™ usa para iniciar e gerenci√°-los j√° ter√° ferramentas internas para transmitir a **comunica√ß√£o de rede** (por exemplo, solicita√ß√µes HTTP) do **balanceador de carga** (que tamb√©m pode ser um **Proxy de Termina√ß√£o TLS**) para o(s) cont√™iner(es) com seu aplicativo.

### Um Balanceador de Carga - M√∫ltiplos Cont√™ineres de Workers

Quando trabalhando com **Kubernetes** ou sistemas similares de gerenciamento de cont√™iner distribu√≠do, usando seus mecanismos de rede internos permitiria que o √∫nico **balanceador de carga** que estivesse escutando na **porta principal** transmitisse comunica√ß√£o (solicita√ß√µes) para possivelmente **m√∫ltiplos cont√™ineres** executando seu aplicativo.

Cada um desses cont√™ineres executando seu aplicativo normalmente teria **apenas um processo** (ex.: um processo Uvicorn executando seu aplicativo FastAPI). Todos seriam **cont√™ineres id√™nticos**, executando a mesma coisa, mas cada um com seu pr√≥prio processo, mem√≥ria, etc. Dessa forma, voc√™ aproveitaria a **paraleliza√ß√£o** em **n√∫cleos diferentes** da CPU, ou at√© mesmo em **m√°quinas diferentes**.

E o sistema de cont√™iner com o **balanceador de carga** iria **distribuir as solicita√ß√µes** para cada um dos cont√™ineres com seu aplicativo **em turnos**. Portanto, cada solicita√ß√£o poderia ser tratada por um dos m√∫ltiplos **cont√™ineres replicados** executando seu aplicativo.

E normalmente esse **balanceador de carga** seria capaz de lidar com solicita√ß√µes que v√£o para *outros* aplicativos em seu cluster (por exemplo, para um dom√≠nio diferente, ou sob um prefixo de URL diferente), e transmitiria essa comunica√ß√£o para os cont√™ineres certos para *esse outro* aplicativo em execu√ß√£o em seu cluster.

### Um Processo por Cont√™iner

Nesse tipo de cen√°rio, provavelmente voc√™ desejar√° ter **um √∫nico processo (Uvicorn) por cont√™iner**, pois j√° estaria lidando com a replica√ß√£o no n√≠vel do cluster.

Ent√£o, nesse caso, voc√™ **n√£o** desejar√° ter um gerenciador de processos como o Gunicorn com trabalhadores Uvicorn, ou o Uvicorn usando seus pr√≥prios trabalhadores Uvicorn. Voc√™ desejar√° ter apenas um **√∫nico processo Uvicorn** por cont√™iner (mas provavelmente v√°rios cont√™ineres).

Tendo outro gerenciador de processos dentro do cont√™iner (como seria com o Gunicorn ou o Uvicorn gerenciando trabalhadores Uvicorn) s√≥ adicionaria **complexidade desnecess√°ria** que voc√™ provavelmente j√° est√° cuidando com seu sistema de cluster.

### Cont√™ineres com M√∫ltiplos Processos e Casos Especiais

Claro, existem **casos especiais** em que voc√™ pode querer ter um **cont√™iner** com um **gerenciador de processos Gunicorn** iniciando v√°rios **processos trabalhadores Uvicorn** dentro.

Nesses casos, voc√™ pode usar a **imagem oficial do Docker** que inclui o **Gunicorn** como um gerenciador de processos executando v√°rios **processos trabalhadores Uvicorn**, e algumas configura√ß√µes padr√£o para ajustar o n√∫mero de trabalhadores com base nos atuais n√∫cleos da CPU automaticamente. Eu vou te contar mais sobre isso abaixo em [Imagem Oficial do Docker com Gunicorn - Uvicorn](#imagem-oficial-do-docker-com-gunicorn-uvicorn).

Aqui est√£o alguns exemplos de quando isso pode fazer sentido:

#### Um Aplicativo Simples

Voc√™ pode querer um gerenciador de processos no cont√™iner se seu aplicativo for **simples o suficiente** para que voc√™ n√£o precise (pelo menos n√£o agora) ajustar muito o n√∫mero de processos, e voc√™ pode simplesmente usar um padr√£o automatizado (com a imagem oficial do Docker), e voc√™ est√° executando em um **√∫nico servidor**, n√£o em um cluster.

#### Docker Compose

Voc√™ pode estar implantando em um **√∫nico servidor** (n√£o em um cluster) com o **Docker Compose**, ent√£o voc√™ n√£o teria uma maneira f√°cil de gerenciar a replica√ß√£o de cont√™ineres (com o Docker Compose) enquanto preserva a rede compartilhada e o **balanceamento de carga**.

Ent√£o voc√™ pode querer ter **um √∫nico cont√™iner** com um **gerenciador de processos** iniciando **v√°rios processos trabalhadores** dentro.

#### Prometheus and Outros Motivos

Voc√™ tamb√©m pode ter **outros motivos** que tornariam mais f√°cil ter um **√∫nico cont√™iner** com **m√∫ltiplos processos** em vez de ter **m√∫ltiplos cont√™ineres** com **um √∫nico processo** em cada um deles.

Por exemplo (dependendo de sua configura√ß√£o), voc√™ poderia ter alguma ferramenta como um exportador do Prometheus no mesmo cont√™iner que deve ter acesso a **cada uma das solicita√ß√µes** que chegam.

Nesse caso, se voc√™ tivesse **m√∫ltiplos cont√™ineres**, por padr√£o, quando o Prometheus fosse **ler as m√©tricas**, ele receberia as m√©tricas de **um √∫nico cont√™iner cada vez** (para o cont√™iner que tratou essa solicita√ß√£o espec√≠fica), em vez de receber as **m√©tricas acumuladas** de todos os cont√™ineres replicados.

Ent√£o, nesse caso, poderia ser mais simples ter **um √∫nico cont√™iner** com **m√∫ltiplos processos**, e uma ferramenta local (por exemplo, um exportador do Prometheus) no mesmo cont√™iner coletando m√©tricas do Prometheus para todos os processos internos e expor essas m√©tricas no √∫nico cont√™iner.

---

O ponto principal √© que **nenhum** desses s√£o **regras escritas em pedra** que voc√™ deve seguir cegamente. Voc√™ pode usar essas id√©ias para **avaliar seu pr√≥prio caso de uso** e decidir qual √© a melhor abordagem para seu sistema, verificando como gerenciar os conceitos de:

* Seguran√ßa - HTTPS
* Executando na inicializa√ß√£o
* Reinicializa√ß√µes
* Replica√ß√£o (o n√∫mero de processos em execu√ß√£o)
* Mem√≥ria
* Passos anteriores antes de inicializar

## Mem√≥ria

Se voc√™ executar **um √∫nico processo por cont√™iner**, ter√° uma quantidade mais ou menos bem definida, est√°vel e limitada de mem√≥ria consumida por cada um desses cont√™ineres (mais de um se eles forem replicados).

E ent√£o voc√™ pode definir esses mesmos limites e requisitos de mem√≥ria em suas configura√ß√µes para seu sistema de gerenciamento de cont√™ineres (por exemplo, no **Kubernetes**). Dessa forma, ele poder√° **replicar os cont√™ineres** nas **m√°quinas dispon√≠veis** levando em considera√ß√£o a quantidade de mem√≥ria necess√°ria por eles e a quantidade dispon√≠vel nas m√°quinas no cluster.

Se sua aplica√ß√£o for **simples**, isso provavelmente **n√£o ser√° um problema**, e voc√™ pode n√£o precisar especificar limites de mem√≥ria r√≠gidos. Mas se voc√™ estiver **usando muita mem√≥ria** (por exemplo, com **modelos de aprendizado de m√°quina**), deve verificar quanta mem√≥ria est√° consumindo e ajustar o **n√∫mero de cont√™ineres** que executa em **cada m√°quina** (e talvez adicionar mais m√°quinas ao seu cluster).

Se voc√™ executar **m√∫ltiplos processos por cont√™iner** (por exemplo, com a imagem oficial do Docker), deve garantir que o n√∫mero de processos iniciados n√£o **consuma mais mem√≥ria** do que o dispon√≠vel.

## Passos anteriores antes de inicializar e cont√™ineres

Se voc√™ estiver usando cont√™ineres (por exemplo, Docker, Kubernetes), existem duas abordagens principais que voc√™ pode usar.

### Cont√™ineres M√∫ltiplos

Se voc√™ tiver **m√∫ltiplos cont√™ineres**, provavelmente cada um executando um **√∫nico processo** (por exemplo, em um cluster do **Kubernetes**), ent√£o provavelmente voc√™ gostaria de ter um **cont√™iner separado** fazendo o trabalho dos **passos anteriores** em um √∫nico cont√™iner, executando um √∫nico processo, **antes** de executar os cont√™ineres trabalhadores replicados.

/// info

Se voc√™ estiver usando o Kubernetes, provavelmente ser√° um <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/" class="external-link" target="_blank">Init Container</a>.

///

Se no seu caso de uso n√£o houver problema em executar esses passos anteriores **em paralelo v√°rias vezes** (por exemplo, se voc√™ n√£o estiver executando migra√ß√µes de banco de dados, mas apenas verificando se o banco de dados est√° pronto), ent√£o voc√™ tamb√©m pode coloc√°-los em cada cont√™iner logo antes de iniciar o processo principal.

### Cont√™iner √önico

Se voc√™ tiver uma configura√ß√£o simples, com um **√∫nico cont√™iner** que ent√£o inicia v√°rios **processos trabalhadores** (ou tamb√©m apenas um processo), ent√£o poderia executar esses passos anteriores no mesmo cont√™iner, logo antes de iniciar o processo com o aplicativo. A imagem oficial do Docker suporta isso internamente.

## Imagem Oficial do Docker com Gunicorn - Uvicorn

H√° uma imagem oficial do Docker que inclui o Gunicorn executando com trabalhadores Uvicorn, conforme detalhado em um cap√≠tulo anterior: [Server Workers - Gunicorn com Uvicorn](server-workers.md){.internal-link target=_blank}.

Essa imagem seria √∫til principalmente nas situa√ß√µes descritas acima em: [Cont√™ineres com M√∫ltiplos Processos e Casos Especiais](#conteineres-com-multiplos-processos-e-casos-especiais).

* <a href="https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker" class="external-link" target="_blank">tiangolo/uvicorn-gunicorn-fastapi</a>.

/// warning

Existe uma grande chance de que voc√™ **n√£o** precise dessa imagem base ou de qualquer outra semelhante, e seria melhor construir a imagem do zero, como [descrito acima em: Construa uma Imagem Docker para o FastAPI](#construindo-uma-imagem-docker-para-fastapi).

///

Essa imagem tem um mecanismo de **auto-ajuste** inclu√≠do para definir o **n√∫mero de processos trabalhadores** com base nos n√∫cleos de CPU dispon√≠veis.

Isso tem **padr√µes sens√≠veis**, mas voc√™ ainda pode alterar e atualizar todas as configura√ß√µes com **vari√°veis de ambiente** ou arquivos de configura√ß√£o.

H√° tamb√©m suporte para executar <a href="https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker#pre_start_path" class="external-link" target="_blank">**passos anteriores antes de iniciar**</a> com um script.

/// tip

Para ver todas as configura√ß√µes e op√ß√µes, v√° para a p√°gina da imagem Docker:  <a href="https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker" class="external-link" target="_blank">tiangolo/uvicorn-gunicorn-fastapi</a>.

///

### N√∫mero de Processos na Imagem Oficial do Docker

O **n√∫mero de processos** nesta imagem √© **calculado automaticamente** a partir dos **n√∫cleos de CPU** dispon√≠veis.

Isso significa que ele tentar√° **aproveitar** o m√°ximo de **desempenho** da CPU poss√≠vel.

Voc√™ tamb√©m pode ajust√°-lo com as configura√ß√µes usando **vari√°veis de ambiente**, etc.

Mas isso tamb√©m significa que, como o n√∫mero de processos depende da CPU do cont√™iner em execu√ß√£o, a **quantidade de mem√≥ria consumida** tamb√©m depender√° disso.

Ent√£o, se seu aplicativo consumir muito mem√≥ria (por exemplo, com modelos de aprendizado de m√°quina), e seu servidor tiver muitos n√∫cleos de CPU **mas pouca mem√≥ria**, ent√£o seu cont√™iner pode acabar tentando usar mais mem√≥ria do que est√° dispon√≠vel e degradar o desempenho muito (ou at√© mesmo travar). üö®

### Criando um `Dockerfile`

Aqui est√° como voc√™ criaria um `Dockerfile` baseado nessa imagem:

```Dockerfile
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

### Aplica√ß√µes Maiores

Se voc√™ seguiu a se√ß√£o sobre a cria√ß√£o de [Aplica√ß√µes Maiores com M√∫ltiplos Arquivos](../tutorial/bigger-applications.md){.internal-link target=_blank}, seu `Dockerfile` pode parecer com isso:

```Dockerfile

```Dockerfile hl_lines="7"
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

### Quando Usar

Voc√™ provavelmente **n√£o** deve usar essa imagem base oficial (ou qualquer outra semelhante) se estiver usando **Kubernetes** (ou outros) e j√° estiver definindo **replica√ß√£o** no n√≠vel do cluster, com v√°rios **cont√™ineres**. Nesses casos, √© melhor **construir uma imagem do zero** conforme descrito acima: [Construindo uma Imagem Docker para FastAPI](#construindo-uma-imagem-docker-para-fastapi).

Essa imagem seria √∫til principalmente nos casos especiais descritos acima em [Cont√™ineres com M√∫ltiplos Processos e Casos Especiais](#conteineres-com-multiplos-processos-e-casos-especiais). Por exemplo, se sua aplica√ß√£o for **simples o suficiente** para que a configura√ß√£o padr√£o de n√∫mero de processos com base na CPU funcione bem, voc√™ n√£o quer se preocupar com a configura√ß√£o manual da replica√ß√£o no n√≠vel do cluster e n√£o est√° executando mais de um cont√™iner com seu aplicativo. Ou se voc√™ estiver implantando com **Docker Compose**, executando em um √∫nico servidor, etc.

## Deploy da Imagem do Cont√™iner

Depois de ter uma imagem de cont√™iner (Docker), existem v√°rias maneiras de implant√°-la.

Por exemplo:

* Com **Docker Compose** em um √∫nico servidor
* Com um cluster **Kubernetes**
* Com um cluster Docker Swarm Mode
* Com outra ferramenta como o Nomad
* Com um servi√ßo de nuvem que pega sua imagem de cont√™iner e a implanta

## Imagem Docker com Poetry

Se voc√™ usa <a href="https://python-poetry.org/" class="external-link" target="_blank">Poetry</a> para gerenciar as depend√™ncias do seu projeto, pode usar a constru√ß√£o multi-est√°gio do Docker:

```{ .dockerfile .annotate }
# (1)
FROM python:3.9 as requirements-stage

# (2)
WORKDIR /tmp

# (3)
RUN pip install poetry

# (4)
COPY ./pyproject.toml ./poetry.lock* /tmp/

# (5)
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# (6)
FROM python:3.9

# (7)
WORKDIR /code

# (8)
COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

# (9)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (10)
COPY ./app /code/app

# (11)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

1. Esse √© o primeiro est√°gio, ele √© chamado `requirements-stage`.

2. Defina `/tmp` como o diret√≥rio de trabalho atual.

    Aqui √© onde geraremos o arquivo `requirements.txt`

3. Instale o Poetry nesse est√°gio do Docker.

4. Copie os arquivos `pyproject.toml` e `poetry.lock` para o diret√≥rio `/tmp`.

    Porque est√° usando `./poetry.lock*` (terminando com um `*`), n√£o ir√° falhar se esse arquivo ainda n√£o estiver dispon√≠vel.

5. Gere o arquivo `requirements.txt`.

6. Este √© o est√°gio final, tudo aqui ser√° preservado na imagem final do cont√™iner.

7. Defina o diret√≥rio de trabalho atual como `/code`.

8. Copie o arquivo `requirements.txt` para o diret√≥rio `/code`.

    Essse arquivo s√≥ existe no est√°gio anterior do Docker, √© por isso que usamos `--from-requirements-stage` para copi√°-lo.

9. Instale as depend√™ncias de pacote do arquivo `requirements.txt` gerado.

10. Copie o diret√≥rio `app` para o diret√≥rio `/code`.

11. Execute o comando `uvicorn`, informando-o para usar o objeto `app` importado de `app.main`.

/// tip

Clique nos n√∫meros das bolhas para ver o que cada linha faz.

///

Um **est√°gio do Docker** √© uma parte de um `Dockerfile` que funciona como uma **imagem tempor√°ria do cont√™iner** que s√≥ √© usada para gerar alguns arquivos para serem usados posteriormente.

O primeiro est√°gio ser√° usado apenas para **instalar Poetry** e para **gerar o `requirements.txt`** com as depend√™ncias do seu projeto a partir do arquivo `pyproject.toml` do Poetry.

Esse arquivo `requirements.txt` ser√° usado com `pip` mais tarde no **pr√≥ximo est√°gio**.

Na imagem final do cont√™iner, **somente o est√°gio final** √© preservado. Os est√°gios anteriores ser√£o descartados.

Quando usar Poetry, faz sentido usar **constru√ß√µes multi-est√°gio do Docker** porque voc√™ realmente n√£o precisa ter o Poetry e suas depend√™ncias instaladas na imagem final do cont√™iner, voc√™ **apenas precisa** ter o arquivo `requirements.txt` gerado para instalar as depend√™ncias do seu projeto.

Ent√£o, no pr√≥ximo (e √∫ltimo) est√°gio, voc√™ construiria a imagem mais ou menos da mesma maneira descrita anteriormente.

### Por tr√°s de um proxy de termina√ß√£o TLS - Poetry

Novamente, se voc√™ estiver executando seu cont√™iner atr√°s de um proxy de termina√ß√£o TLS (balanceador de carga) como Nginx ou Traefik, adicione a op√ß√£o `--proxy-headers` ao comando:

```Dockerfile
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

## Recapitulando

Usando sistemas de cont√™iner (por exemplo, com **Docker** e **Kubernetes**), torna-se bastante simples lidar com todos os **conceitos de implanta√ß√£o**:

* HTTPS
* Executando na inicializa√ß√£o
* Rein√≠cios
* Replica√ß√£o (o n√∫mero de processos rodando)
* Mem√≥ria
* Passos anteriores antes de inicializar

Na maioria dos casos, voc√™ provavelmente n√£o desejar√° usar nenhuma imagem base e, em vez disso, **construir uma imagem de cont√™iner do zero** baseada na imagem oficial do Docker Python.

Tendo cuidado com a **ordem** das instru√ß√µes no `Dockerfile` e o **cache do Docker**, voc√™ pode **minimizar os tempos de constru√ß√£o**, para maximizar sua produtividade (e evitar a t√©dio). üòé

Em alguns casos especiais, voc√™ pode querer usar a imagem oficial do Docker para o FastAPI. ü§ì


================================================
File: /docs/pt/docs/deployment/https.md
================================================
# Sobre HTTPS

√â f√°cil assumir que HTTPS √© algo que √© apenas "habilitado" ou n√£o.

Mas √© bem mais complexo do que isso.

/// tip | Dica

Se voc√™ est√° com pressa ou n√£o se importa, continue com as se√ß√µes seguintes para instru√ß√µes passo a passo para configurar tudo com diferentes t√©cnicas.

///

Para aprender o b√°sico de HTTPS de uma perspectiva do usu√°rio, verifique <a href="https://howhttps.works/pt-br/" class="external-link" target="_blank">https://howhttps.works/pt-br/</a>.

Agora, a partir de uma perspectiva do desenvolvedor, aqui est√£o algumas coisas para ter em mente ao pensar em HTTPS:

* Para HTTPS, o servidor precisa ter certificados gerados por um terceiro.
    * Esses certificados s√£o adquiridos de um terceiro, eles n√£o s√£o simplesmente "gerados".
* Certificados t√™m um tempo de vida.
    * Eles expiram.
    * E ent√£o eles precisam ser renovados, adquirindo-os novamente de um terceiro.
* A criptografia da conex√£o acontece no n√≠vel TCP.
    * Essa √© uma camada abaixo do HTTP.
    * Portanto, o manuseio do certificado e da criptografia √© feito antes do HTTP.
* O TCP n√£o sabe sobre "dom√≠nios". Apenas sobre endere√ßos IP.
    * As informa√ß√µes sobre o dom√≠nio solicitado v√£o nos dados HTTP.
* Os certificados HTTPS ‚Äúcertificam‚Äù um determinado dom√≠nio, mas o protocolo e a encripta√ß√£o acontecem ao n√≠vel do TCP, antes de sabermos de que dom√≠nio se trata.
* Por padr√£o, isso significa que voc√™ s√≥ pode ter um certificado HTTPS por endere√ßo IP.
    * N√£o importa o tamanho do seu servidor ou qu√£o pequeno cada aplicativo que voc√™ tem nele possa ser.
    * No entanto, existe uma solu√ß√£o para isso.
* H√° uma extens√£o para o protocolo TLS (aquele que lida com a criptografia no n√≠vel TCP, antes do HTTP) chamado <a href="https://en.wikipedia.org/wiki/Server_Name_Indication" class="external-link" target="_blank"><abbr title="Server Name Indication">SNI</abbr></a>.
    * Esta extens√£o SNI permite que um √∫nico servidor (com um √∫nico endere√ßo IP) tenha v√°rios certificados HTTPS e atenda a v√°rios dom√≠nios / aplicativos HTTPS.
    * Para que isso funcione, um √∫nico componente (programa) em execu√ß√£o no servidor, ouvindo no endere√ßo IP p√∫blico, deve ter todos os certificados HTTPS no servidor.
* Depois de obter uma conex√£o segura, o protocolo de comunica√ß√£o ainda √© HTTP.
    * Os conte√∫dos s√£o criptografados, embora sejam enviados com o protocolo HTTP.

√â uma pr√°tica comum ter um programa/servidor HTTP em execu√ß√£o no servidor (m√°quina, host, etc.) e gerenciar todas as partes HTTPS: enviando as solicita√ß√µes HTTP descriptografadas para o aplicativo HTTP real em execu√ß√£o no mesmo servidor (a aplica√ß√£o **FastAPI**, neste caso), pegue a resposta HTTP do aplicativo, criptografe-a usando o certificado apropriado e envie-a de volta ao cliente usando HTTPS. Este servidor √© frequentemente chamado de <a href="https://en.wikipedia.org/wiki/TLS_termination_proxy" class="external-link" target="_blank">TLS Termination Proxy</a>.

## Let's Encrypt

Antes de Let's Encrypt, esses certificados HTTPS eram vendidos por terceiros confi√°veis.

O processo de aquisi√ß√£o de um desses certificados costumava ser complicado, exigia bastante papelada e os certificados eram bastante caros.

Mas ent√£o <a href="https://letsencrypt.org/" class="external-link" target="_blank">Let's Encrypt</a> foi criado.

Ele √© um projeto da Linux Foundation que fornece certificados HTTPS gratuitamente. De forma automatizada. Esses certificados usam toda a seguran√ßa criptogr√°fica padr√£o e t√™m vida curta (cerca de 3 meses), ent√£o a seguran√ßa √© realmente melhor por causa de sua vida √∫til reduzida.

Os dom√≠nios s√£o verificados com seguran√ßa e os certificados s√£o gerados automaticamente. Isso tamb√©m permite automatizar a renova√ß√£o desses certificados.

A ideia √© automatizar a aquisi√ß√£o e renova√ß√£o desses certificados, para que voc√™ tenha HTTPS seguro, de gra√ßa e para sempre.


================================================
File: /docs/pt/docs/deployment/index.md
================================================
# Implanta√ß√£o

A implanta√ß√£o de uma aplica√ß√£o **FastAPI** √© relativamente simples.

Existem v√°rias maneiras para fazer isso, dependendo do seu caso espec√≠fico e das ferramentas que voc√™ utiliza.

Voc√™ ver√° mais detalhes para se ter em mente e algumas das t√©cnicas para a implanta√ß√£o nas pr√≥ximas se√ß√µes.


================================================
File: /docs/pt/docs/deployment/manually.md
================================================
# Execute um Servidor Manualmente

## Utilize o comando `fastapi run`

Em resumo, utilize o comando `fastapi run` para inicializar sua aplica√ß√£o FastAPI:

<div class="termy">

```console
$ <font color="#4E9A06">fastapi</font> run <u style="text-decoration-style:solid">main.py</u>

  <span style="background-color:#009485"><font color="#D3D7CF"> FastAPI </font></span>  Starting production server üöÄ

             Searching for package file structure from directories
             with <font color="#3465A4">__init__.py</font> files
             Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> module </font></span>  üêç main.py

     <span style="background-color:#007166"><font color="#D3D7CF"> code </font></span>  Importing the FastAPI app object from the module with
             the following code:

             <u style="text-decoration-style:solid">from </u><u style="text-decoration-style:solid"><b>main</b></u><u style="text-decoration-style:solid"> import </u><u style="text-decoration-style:solid"><b>app</b></u>

      <span style="background-color:#007166"><font color="#D3D7CF"> app </font></span>  Using import string: <font color="#3465A4">main:app</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Server started at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font>
   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Documentation at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000/docs</u></font>

             Logs:

     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>2306215</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Uvicorn running on <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font> <b>(</b>Press CTRL+C
             to quit<b>)</b>
```

</div>

Isto deve funcionar para a maioria dos casos. üòé

Voc√™ pode utilizar esse comando, por exemplo, para iniciar sua aplica√ß√£o **FastAPI** em um cont√™iner, em um servidor, etc.

## Servidores ASGI

Vamos nos aprofundar um pouco mais em detalhes.

FastAPI utiliza um padr√£o para construir frameworks e servidores web em Python chamado <abbr title="Asynchronous Server Gateway Interface">ASGI</abbr>. FastAPI √© um framework web ASGI.

A principal coisa que voc√™ precisa para executar uma aplica√ß√£o **FastAPI** (ou qualquer outra aplica√ß√£o ASGI) em uma m√°quina de servidor remoto √© um programa de servidor ASGI como o **Uvicorn**, que √© o que vem por padr√£o no comando `fastapi`.

Existem diversas alternativas, incluindo:

* <a href="https://www.uvicorn.org/" class="external-link" target="_blank">Uvicorn</a>: um servidor ASGI de alta performance.
* <a href="https://hypercorn.readthedocs.io/" class="external-link" target="_blank">Hypercorn</a>: um servidor ASGI comp√°tivel com HTTP/2, Trio e outros recursos.
* <a href="https://github.com/django/daphne" class="external-link" target="_blank">Daphne</a>: servidor ASGI constru√≠do para Django Channels.
* <a href="https://github.com/emmett-framework/granian" class="external-link" target="_blank">Granian</a>: um servidor HTTP Rust para aplica√ß√µes Python.
* <a href="https://unit.nginx.org/howto/fastapi/" class="external-link" target="_blank">NGINX Unit</a>: NGINX Unit √© um runtime de aplica√ß√£o web leve e vers√°til.

## M√°quina Servidora e Programa Servidor

Existe um pequeno detalhe sobre estes nomes para se manter em mente. üí°

A palavra "**servidor**" √© comumente usada para se referir tanto ao computador remoto/nuvem (a m√°quina f√≠sica ou virtual) quanto ao programa que est√° sendo executado nessa m√°quina (por exemplo, Uvicorn).

Apenas tenha em mente que quando voc√™ ler "servidor" em geral, isso pode se referir a uma dessas duas coisas.

Quando se refere √† m√°quina remota, √© comum cham√°-la de **servidor**, mas tamb√©m de **m√°quina**, **VM** (m√°quina virtual), **n√≥**. Todos esses termos se referem a algum tipo de m√°quina remota, normalmente executando Linux, onde voc√™ executa programas.

## Instale o Programa Servidor

Quando voc√™ instala o FastAPI, ele vem com um servidor de produ√ß√£o, o Uvicorn, e voc√™ pode inici√°-lo com o comando `fastapi run`.

Mas voc√™ tamb√©m pode instalar um servidor ASGI manualmente.

Certifique-se de criar um [ambiente virtual](../virtual-environments.md){.internal-link target=_blank}, ativ√°-lo e, em seguida, voc√™ pode instalar a aplica√ß√£o do servidor.

Por exemplo, para instalar o Uvicorn:

<div class="termy">

```console
$ pip install "uvicorn[standard]"

---> 100%
```

</div>

Um processo semelhante se aplicaria a qualquer outro programa de servidor ASGI.

/// tip | Dica

Adicionando o `standard`, o Uvicorn instalar√° e usar√° algumas depend√™ncias extras recomendadas.

Isso inclui o `uvloop`, a substitui√ß√£o de alto desempenho para `asyncio`, que fornece um grande aumento de desempenho de concorr√™ncia.

Quando voc√™ instala o FastAPI com algo como `pip install "fastapi[standard]"`, voc√™ j√° obt√©m `uvicorn[standard]` tamb√©m.

///

## Execute o Programa Servidor

Se voc√™ instalou um servidor ASGI manualmente, normalmente precisar√° passar uma string de importa√ß√£o em um formato especial para que ele importe sua aplica√ß√£o FastAPI:

<div class="termy">

```console
$ uvicorn main:app --host 0.0.0.0 --port 80

<span style="color: green;">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)
```

</div>

/// note | Nota

O comando `uvicorn main:app` refere-se a:

* `main`: o arquivo `main.py` (o "m√≥dulo" Python).
* `app`: o objeto criado dentro de `main.py` com a linha `app = FastAPI()`.

√â equivalente a:

```Python
from main import app
```

///

Cada programa de servidor ASGI alternativo teria um comando semelhante, voc√™ pode ler mais na documenta√ß√£o respectiva.

/// warning | Aviso

Uvicorn e outros servidores suportam a op√ß√£o `--reload` que √© √∫til durante o desenvolvimento.

A op√ß√£o `--reload` consome muito mais recursos, √© mais inst√°vel, etc.

Ela ajuda muito durante o **desenvolvimento**, mas voc√™ **n√£o deve** us√°-la em **produ√ß√£o**.

///

## Conceitos de Implanta√ß√£o

Esses exemplos executam o programa do servidor (por exemplo, Uvicorn), iniciando **um √∫nico processo**, ouvindo em todos os IPs (`0.0.0.0`) em uma porta predefinida (por exemplo, `80`).

Esta √© a ideia b√°sica. Mas voc√™ provavelmente vai querer cuidar de algumas coisas adicionais, como:

* Seguran√ßa - HTTPS
* Executando na inicializa√ß√£o
* Reinicializa√ß√µes
* Replica√ß√£o (o n√∫mero de processos em execu√ß√£o)
* Mem√≥ria
* Passos anteriores antes de come√ßar

Vou te contar mais sobre cada um desses conceitos, como pensar sobre eles e alguns exemplos concretos com estrat√©gias para lidar com eles nos pr√≥ximos cap√≠tulos. üöÄ


================================================
File: /docs/pt/docs/deployment/server-workers.md
================================================
# Trabalhadores do Servidor - Uvicorn com Trabalhadores

Vamos rever os conceitos de implanta√ß√£o anteriores:

* Seguran√ßa - HTTPS
* Executando na inicializa√ß√£o
* Reinicializa√ß√µes
* **Replica√ß√£o (o n√∫mero de processos em execu√ß√£o)**
* Mem√≥ria
* Etapas anteriores antes de iniciar

At√© este ponto, com todos os tutoriais nos documentos, voc√™ provavelmente estava executando um **programa de servidor**, por exemplo, usando o comando `fastapi`, que executa o Uvicorn, executando um **√∫nico processo**.

Ao implantar aplicativos, voc√™ provavelmente desejar√° ter alguma **replica√ß√£o de processos** para aproveitar **v√°rios n√∫cleos** e poder lidar com mais solicita√ß√µes.

Como voc√™ viu no cap√≠tulo anterior sobre [Conceitos de implanta√ß√£o](concepts.md){.internal-link target=_blank}, h√° v√°rias estrat√©gias que voc√™ pode usar.

Aqui mostrarei como usar o **Uvicorn** com **processos de trabalho** usando o comando `fastapi` ou o comando `uvicorn` diretamente.

/// info | Informa√ß√£o

Se voc√™ estiver usando cont√™ineres, por exemplo com Docker ou Kubernetes, falarei mais sobre isso no pr√≥ximo cap√≠tulo: [FastAPI em cont√™ineres - Docker](docker.md){.internal-link target=_blank}.

Em particular, ao executar no **Kubernetes** voc√™ provavelmente **n√£o** vai querer usar v√°rios trabalhadores e, em vez disso, executar **um √∫nico processo Uvicorn por cont√™iner**, mas falarei sobre isso mais adiante neste cap√≠tulo.

///

## V√°rios trabalhadores

Voc√™ pode iniciar v√°rios trabalhadores com a op√ß√£o de linha de comando `--workers`:

//// tab | `fastapi`

Se voc√™ usar o comando `fastapi`:

<div class="termy">

```console
$ <font color="#4E9A06">fastapi</font> run --workers 4 <u style="text-decoration-style:solid">main.py</u>

  <span style="background-color:#009485"><font color="#D3D7CF"> FastAPI </font></span>  Starting production server üöÄ

             Searching for package file structure from directories with
             <font color="#3465A4">__init__.py</font> files
             Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> module </font></span>  üêç main.py

     <span style="background-color:#007166"><font color="#D3D7CF"> code </font></span>  Importing the FastAPI app object from the module with the
             following code:

             <u style="text-decoration-style:solid">from </u><u style="text-decoration-style:solid"><b>main</b></u><u style="text-decoration-style:solid"> import </u><u style="text-decoration-style:solid"><b>app</b></u>

      <span style="background-color:#007166"><font color="#D3D7CF"> app </font></span>  Using import string: <font color="#3465A4">main:app</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Server started at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font>
   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Documentation at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000/docs</u></font>

             Logs:

     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Uvicorn running on <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font> <b>(</b>Press CTRL+C to
             quit<b>)</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started parent process <b>[</b><font color="#34E2E2"><b>27365</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>27368</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>27369</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>27370</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>27367</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
```

</div>

////

//// tab | `uvicorn`

Se voc√™ preferir usar o comando `uvicorn` diretamente:

<div class="termy">

```console
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
<font color="#A6E22E">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit)
<font color="#A6E22E">INFO</font>:     Started parent process [<font color="#A1EFE4"><b>27365</b></font>]
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27368</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27369</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27370</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27367</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
```

</div>

////

A √∫nica op√ß√£o nova aqui √© `--workers` informando ao Uvicorn para iniciar 4 processos de trabalho.

Voc√™ tamb√©m pode ver que ele mostra o **PID** de cada processo, `27365` para o processo pai (este √© o **gerenciador de processos**) e um para cada processo de trabalho: `27368`, `27369`, `27370` e `27367`.

## Conceitos de Implanta√ß√£o

Aqui voc√™ viu como usar v√°rios **trabalhadores** para **paralelizar** a execu√ß√£o do aplicativo, aproveitar **v√°rios n√∫cleos** na CPU e conseguir atender **mais solicita√ß√µes**.

Da lista de conceitos de implanta√ß√£o acima, o uso de trabalhadores ajudaria principalmente com a parte da **replica√ß√£o** e um pouco com as **reinicializa√ß√µes**, mas voc√™ ainda precisa cuidar dos outros:

* **Seguran√ßa - HTTPS**
* **Executando na inicializa√ß√£o**
* ***Reinicializa√ß√µes***
* Replica√ß√£o (o n√∫mero de processos em execu√ß√£o)
* **Mem√≥ria**
* **Etapas anteriores antes de iniciar**

## Cont√™ineres e Docker

No pr√≥ximo cap√≠tulo sobre [FastAPI em cont√™ineres - Docker](docker.md){.internal-link target=_blank}, explicarei algumas estrat√©gias que voc√™ pode usar para lidar com os outros **conceitos de implanta√ß√£o**.

Vou mostrar como **construir sua pr√≥pria imagem do zero** para executar um √∫nico processo Uvicorn. √â um processo simples e provavelmente √© o que voc√™ gostaria de fazer ao usar um sistema de gerenciamento de cont√™ineres distribu√≠dos como o **Kubernetes**.

## Recapitular

Voc√™ pode usar v√°rios processos de trabalho com a op√ß√£o CLI `--workers` com os comandos `fastapi` ou `uvicorn` para aproveitar as vantagens de **CPUs multi-core** e executar **v√°rios processos em paralelo**.

Voc√™ pode usar essas ferramentas e ideias se estiver configurando **seu pr√≥prio sistema de implanta√ß√£o** enquanto cuida dos outros conceitos de implanta√ß√£o.

Confira o pr√≥ximo cap√≠tulo para aprender sobre **FastAPI** com cont√™ineres (por exemplo, Docker e Kubernetes). Voc√™ ver√° que essas ferramentas t√™m maneiras simples de resolver os outros **conceitos de implanta√ß√£o** tamb√©m. ‚ú®


================================================
File: /docs/pt/docs/deployment/versions.md
================================================
# Sobre as vers√µes do FastAPI

**FastAPI** j√° est√° sendo usado em produ√ß√£o em diversas aplica√ß√µes e sistemas, a cobertura de testes √© mantida em 100%, mas seu desenvolvimento est√° avan√ßando rapidamente.

Novos recursos s√£o adicionados com frequ√™ncia, bugs s√£o corrigidos regularmente e o c√≥digo est√° sempre melhorando.

Esse √© o motivo das vers√µes atuais estarem em `0.x.x`, significando que em cada vers√£o pode haver mudan√ßas significativas, tudo isso seguindo as <a href="https://semver.org/lang/pt-BR/" class="external-link" target="_blank">conven√ß√µes de controle de vers√£o sem√¢ntica.</a>

J√° √© poss√≠vel criar aplicativos de produ√ß√£o com **FastAPI** (e provavelmente voc√™ j√° faz isso h√° algum tempo), apenas precisando ter certeza de usar uma vers√£o que funcione corretamente com o resto do seu c√≥digo.

## Fixe a sua vers√£o de `fastapi`

A primeira coisa que voc√™ deve fazer √© "fixar" a vers√£o do **FastAPI** que voc√™ est√° utilizando na mais atual, na qual voc√™ sabe que funciona corretamente para o seu aplicativo.

Por exemplo, supondo que voc√™ est√° usando a vers√£o `0.45.0` em sua aplica√ß√£o.

Caso voc√™ utilize o arquivo `requirements.txt`, voc√™ poderia especificar a vers√£o com:

```txt
fastapi==0.45.0
```

Isso significa que voc√™ conseguiria utilizar a vers√£o exata `0.45.0`.

Ou, voc√™ poderia fix√°-la com:

```txt
fastapi>=0.45.0,<0.46.0
```

isso significa que voc√™ iria usar as vers√µes `0.45.0` ou acima, mas inferiores √† `0.46.0`, por exemplo, a vers√£o `0.45.2` ainda seria aceita.

Se voc√™ usar qualquer outra ferramenta para gerenciar suas instala√ß√µes, como Poetry, Pipenv ou outras, todas elas t√™m uma maneira que voc√™ pode usar para definir as vers√µes espec√≠ficas dos seus pacotes.

## Vers√µes dispon√≠veis

Voc√™ pode ver as vers√µes dispon√≠veis (por exemplo, para verificar qual √© a vers√£o atual) em [Release Notes](../release-notes.md){.internal-link target=\_blank}.

## Sobre vers√µes

Seguindo as conven√ß√µes de controle de vers√£o sem√¢ntica, qualquer vers√£o abaixo de `1.0.0` pode adicionar mudan√ßas significativas.

FastAPI tamb√©m segue a conven√ß√£o de que qualquer altera√ß√£o de vers√£o "PATCH" √© para corre√ß√£o de bugs e altera√ß√µes n√£o significativas.

/// tip | Dica

O "PATCH" √© o √∫ltimo n√∫mero, por exemplo, em `0.2.3`, a vers√£o PATCH √© `3`.

///

Logo, voc√™ deveria conseguir fixar a vers√£o, como:

```txt
fastapi>=0.45.0,<0.46.0
```

Mudan√ßas significativas e novos recursos s√£o adicionados em vers√µes "MINOR".

/// tip | Dica

O "MINOR" √© o n√∫mero que est√° no meio, por exemplo, em `0.2.3`, a vers√£o MINOR √© `2`.

///

## Atualizando as vers√µes do FastAPI

Voc√™ deve adicionar testes para a sua aplica√ß√£o.

Com **FastAPI** isso √© muito f√°cil (gra√ßas a Starlette), verifique a documenta√ß√£o: [Testing](../tutorial/testing.md){.internal-link target=\_blank}

Ap√≥s a cria√ß√£o dos testes, voc√™ pode atualizar a sua vers√£o do **FastAPI** para uma mais recente, execute os testes para se certificar de que todo o seu c√≥digo est√° funcionando corretamente.

Se tudo estiver funcionando, ou ap√≥s voc√™ realizar as altera√ß√µes necess√°rias e todos os testes estiverem passando, ent√£o voc√™ pode fixar sua vers√£o de `FastAPI` para essa mais nova.

## Sobre Starlette

N√£o √© recomendado fixar a vers√£o de `starlette`.

Vers√µes diferentes de **FastAPI** utilizar√£o uma vers√£o espec√≠fica e mais recente de Starlette.

Ent√£o, voc√™ pode deixar **FastAPI** escolher a vers√£o compat√≠vel e correta de Starlette.

## Sobre Pydantic

Pydantic inclu√≠ os testes para **FastAPI** em seus pr√≥prios testes, ent√£o as novas vers√µes de Pydantic (acima da `1.0.0`) sempre ser√£o compat√≠veis com FastAPI.

Voc√™ pode fixar qualquer vers√£o de Pydantic que desejar, desde que seja acima da `1.0.0` e abaixo da `2.0.0`.

Por exemplo:

```txt
pydantic>=1.2.0,<2.0.0
```


================================================
File: /docs/pt/docs/how-to/conditional-openapi.md
================================================
# OpenAPI condicional

Se necess√°rio, voc√™ pode usar configura√ß√µes e vari√°veis ‚Äã‚Äãde ambiente para configurar o OpenAPI condicionalmente, dependendo do ambiente, e at√© mesmo desativ√°-lo completamente.

## Sobre seguran√ßa, APIs e documentos

Ocultar suas interfaces de usu√°rio de documenta√ß√£o na produ√ß√£o *n√£o deveria* ser a maneira de proteger sua API.

Isso n√£o adiciona nenhuma seguran√ßa extra √† sua API; as *opera√ß√µes de rotas* ainda estar√£o dispon√≠veis onde est√£o.

Se houver uma falha de seguran√ßa no seu c√≥digo, ela ainda existir√°.

Ocultar a documenta√ß√£o apenas torna mais dif√≠cil entender como interagir com sua API e pode dificultar sua depura√ß√£o na produ√ß√£o. Pode ser considerado simplesmente uma forma de <a href="https://en.wikipedia.org/wiki/Security_through_obscurity" class="external-link" target="_blank">Seguran√ßa atrav√©s da obscuridade</a>.

Se voc√™ quiser proteger sua API, h√° v√°rias coisas melhores que voc√™ pode fazer, por exemplo:

* Certifique-se de ter modelos Pydantic bem definidos para seus corpos de solicita√ß√£o e respostas.
* Configure quaisquer permiss√µes e fun√ß√µes necess√°rias usando depend√™ncias.
* Nunca armazene senhas em texto simples, apenas hashes de senha.
* Implemente e use ferramentas criptogr√°ficas bem conhecidas, como tokens JWT e Passlib, etc.
* Adicione controles de permiss√£o mais granulares com escopos OAuth2 quando necess√°rio.
* ...etc.

No entanto, voc√™ pode ter um caso de uso muito espec√≠fico em que realmente precisa desabilitar a documenta√ß√£o da API para algum ambiente (por exemplo, para produ√ß√£o) ou dependendo de configura√ß√µes de vari√°veis ‚Äã‚Äãde ambiente.

## OpenAPI condicional com configura√ß√µes e vari√°veis ‚Äã‚Äãde ambiente

Voc√™ pode usar facilmente as mesmas configura√ß√µes do Pydantic para configurar sua OpenAPI gerada e as interfaces de usu√°rio de documentos.

Por exemplo:

{* ../../docs_src/conditional_openapi/tutorial001.py hl[6,11] *}

Aqui declaramos a configura√ß√£o `openapi_url` com o mesmo padr√£o de `"/openapi.json"`.

E ent√£o o usamos ao criar o aplicativo `FastAPI`.

Ent√£o voc√™ pode desabilitar o OpenAPI (incluindo os documentos da interface do usu√°rio) definindo a vari√°vel de ambiente `OPENAPI_URL` como uma string vazia, como:

<div class="termy">

```console
$ OPENAPI_URL= uvicorn main:app

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Ent√£o, se voc√™ acessar as URLs em `/openapi.json`, `/docs` ou `/redoc`, voc√™ receber√° apenas um erro `404 N√£o Encontrado` como:

```JSON
{
    "detail": "Not Found"
}
```


================================================
File: /docs/pt/docs/how-to/configure-swagger-ui.md
================================================
# Configurar Swagger UI

Voc√™ pode configurar alguns <a href="https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/" class="external-link" target="_blank">par√¢metros extras da UI do Swagger</a>.

Para configur√°-los, passe o argumento `swagger_ui_parameters` ao criar o objeto de aplicativo `FastAPI()` ou para a fun√ß√£o `get_swagger_ui_html()`.

`swagger_ui_parameters` recebe um dicion√°rio com as configura√ß√µes passadas diretamente para o Swagger UI.

O FastAPI converte as configura√ß√µes para **JSON** para torn√°-las compat√≠veis com JavaScript, pois √© disso que o Swagger UI precisa.

## Desabilitar realce de sintaxe

Por exemplo, voc√™ pode desabilitar o destaque de sintaxe na UI do Swagger.

Sem alterar as configura√ß√µes, o destaque de sintaxe √© habilitado por padr√£o:

<img src="/img/tutorial/extending-openapi/image02.png">

Mas voc√™ pode desabilit√°-lo definindo `syntaxHighlight` como `False`:

{* ../../docs_src/configure_swagger_ui/tutorial001.py hl[3] *}

...e ent√£o o Swagger UI n√£o mostrar√° mais o destaque de sintaxe:

<img src="/img/tutorial/extending-openapi/image03.png">

## Alterar o tema

Da mesma forma que voc√™ pode definir o tema de destaque de sintaxe com a chave `"syntaxHighlight.theme"` (observe que h√° um ponto no meio):

{* ../../docs_src/configure_swagger_ui/tutorial002.py hl[3] *}

Essa configura√ß√£o alteraria o tema de cores de destaque de sintaxe:

<img src="/img/tutorial/extending-openapi/image04.png">

## Alterar par√¢metros de UI padr√£o do Swagger

O FastAPI inclui alguns par√¢metros de configura√ß√£o padr√£o apropriados para a maioria dos casos de uso.

Inclui estas configura√ß√µes padr√£o:

{* ../../fastapi/openapi/docs.py ln[7:23] *}

Voc√™ pode substituir qualquer um deles definindo um valor diferente no argumento `swagger_ui_parameters`.

Por exemplo, para desabilitar `deepLinking` voc√™ pode passar essas configura√ß√µes para `swagger_ui_parameters`:

{* ../../docs_src/configure_swagger_ui/tutorial003.py hl[3] *}

## Outros par√¢metros da UI do Swagger

Para ver todas as outras configura√ß√µes poss√≠veis que voc√™ pode usar, leia a <a href="https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/" class="external-link" target="_blank">documenta√ß√£o oficial dos par√¢metros da UI do Swagger</a>.

## Configura√ß√µes somente JavaScript

A interface do usu√°rio do Swagger tamb√©m permite que outras configura√ß√µes sejam objetos **somente JavaScript** (por exemplo, fun√ß√µes JavaScript).

O FastAPI tamb√©m inclui estas configura√ß√µes de `predefini√ß√µes` somente para JavaScript:

```JavaScript
presets: [
    SwaggerUIBundle.presets.apis,
    SwaggerUIBundle.SwaggerUIStandalonePreset
]
```

Esses s√£o objetos **JavaScript**, n√£o strings, ent√£o voc√™ n√£o pode pass√°-los diretamente do c√≥digo Python.

Se voc√™ precisar usar configura√ß√µes somente JavaScript como essas, voc√™ pode usar um dos m√©todos acima. Sobrescreva todas as *opera√ß√µes de rotas* do Swagger UI e escreva manualmente qualquer JavaScript que voc√™ precisar.


================================================
File: /docs/pt/docs/how-to/custom-docs-ui-assets.md
================================================
# Recursos Est√°ticos Personalizados para a UI de Documenta√ß√£o (Hospedagem Pr√≥pria)

A documenta√ß√£o da API usa **Swagger UI** e **ReDoc**, e cada um deles precisa de alguns arquivos JavaScript e CSS.

Por padr√£o, esses arquivos s√£o fornecidos por um <abbr title="Content Delivery Network: Um servi√ßo, normalmente composto por v√°rios servidores, que fornece arquivos est√°ticos, como JavaScript e CSS. √â comumente usado para providenciar esses arquivos do servidor mais pr√≥ximo do cliente, melhorando o desempenho.">CDN</abbr>.

Mas √© poss√≠vel personaliz√°-los, voc√™ pode definir um CDN espec√≠fico ou providenciar os arquivos voc√™ mesmo.

## CDN Personalizado para JavaScript e CSS

Vamos supor que voc√™ deseja usar um <abbr title="Content Delivery Network">CDN</abbr> diferente, por exemplo, voc√™ deseja usar `https://unpkg.com/`.

Isso pode ser √∫til se, por exemplo, voc√™ mora em um pa√≠s que restringe algumas URLs.

### Desativar a documenta√ß√£o autom√°tica

O primeiro passo √© desativar a documenta√ß√£o autom√°tica, pois por padr√£o, ela usa o CDN padr√£o.

Para desativ√°-los, defina suas URLs como `None` ao criar seu aplicativo `FastAPI`:

{* ../../docs_src/custom_docs_ui/tutorial001.py hl[8] *}

### Incluir a documenta√ß√£o personalizada

Agora voc√™ pode criar as *opera√ß√µes de rota* para a documenta√ß√£o personalizada.

Voc√™ pode reutilizar as fun√ß√µes internas do FastAPI para criar as p√°ginas HTML para a documenta√ß√£o e passar os argumentos necess√°rios:

* `openapi_url`: a URL onde a p√°gina HTML para a documenta√ß√£o pode obter o esquema OpenAPI para a sua API. Voc√™ pode usar aqui o atributo `app.openapi_url`.
* `title`: o t√≠tulo da sua API.
* `oauth2_redirect_url`: voc√™ pode usar `app.swagger_ui_oauth2_redirect_url` aqui para usar o padr√£o.
* `swagger_js_url`: a URL onde a p√°gina HTML para a sua documenta√ß√£o do Swagger UI pode obter o arquivo **JavaScript**. Este √© o URL do CDN personalizado.
* `swagger_css_url`: a URL onde a p√°gina HTML para a sua documenta√ß√£o do Swagger UI pode obter o arquivo **CSS**. Este √© o URL do CDN personalizado.

E de forma semelhante para o ReDoc...

{* ../../docs_src/custom_docs_ui/tutorial001.py hl[2:6,11:19,22:24,27:33] *}

/// tip | Dica

A *opera√ß√£o de rota* para `swagger_ui_redirect` √© um auxiliar para quando voc√™ usa OAuth2.

Se voc√™ integrar sua API com um provedor OAuth2, voc√™ poder√° autenticar e voltar para a documenta√ß√£o da API com as credenciais adquiridas. E interagir com ela usando a autentica√ß√£o OAuth2 real.

Swagger UI lidar√° com isso nos bastidores para voc√™, mas ele precisa desse auxiliar de "redirecionamento".

///

### Criar uma *opera√ß√£o de rota* para testar

Agora, para poder testar se tudo funciona, crie uma *opera√ß√£o de rota*:

{* ../../docs_src/custom_docs_ui/tutorial001.py hl[36:38] *}

### Teste

Agora, voc√™ deve ser capaz de ir para a documenta√ß√£o em <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>, e recarregar a p√°gina, ela carregar√° esses recursos do novo CDN.

## Hospedagem Pr√≥pria de JavaScript e CSS para a documenta√ß√£o

Hospedar o JavaScript e o CSS pode ser √∫til se, por exemplo, voc√™ precisa que seu aplicativo continue funcionando mesmo offline, sem acesso aberto √† Internet, ou em uma rede local.

Aqui voc√™ ver√° como providenciar esses arquivos voc√™ mesmo, no mesmo aplicativo FastAPI, e configurar a documenta√ß√£o para us√°-los.

### Estrutura de Arquivos do Projeto

Vamos supor que a estrutura de arquivos do seu projeto se pare√ßa com isso:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py
```

Agora crie um diret√≥rio para armazenar esses arquivos est√°ticos.

Sua nova estrutura de arquivos poderia se parecer com isso:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ static/
```

### Baixe os arquivos

Baixe os arquivos est√°ticos necess√°rios para a documenta√ß√£o e coloque-os no diret√≥rio `static/`.

Voc√™ provavelmente pode clicar com o bot√£o direito em cada link e selecionar uma op√ß√£o semelhante a `Salvar link como...`.

**Swagger UI** usa os arquivos:

* <a href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js" class="external-link" target="_blank">`swagger-ui-bundle.js`</a>
* <a href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css" class="external-link" target="_blank">`swagger-ui.css`</a>

E o **ReDoc** usa os arquivos:

* <a href="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js" class="external-link" target="_blank">`redoc.standalone.js`</a>

Depois disso, sua estrutura de arquivos deve se parecer com:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ static
    ‚îú‚îÄ‚îÄ redoc.standalone.js
    ‚îú‚îÄ‚îÄ swagger-ui-bundle.js
    ‚îî‚îÄ‚îÄ swagger-ui.css
```

### Prover os arquivos est√°ticos

* Importe `StaticFiles`.
* "Monte" a inst√¢ncia `StaticFiles()` em um caminho espec√≠fico.

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[7,11] *}

### Teste os arquivos est√°ticos

Inicialize seu aplicativo e v√° para <a href="http://127.0.0.1:8000/static/redoc.standalone.js" class="external-link" target="_blank">http://127.0.0.1:8000/static/redoc.standalone.js</a>.

Voc√™ dever√° ver um arquivo JavaScript muito longo para o **ReDoc**.

Esse arquivo pode come√ßar com algo como:

```JavaScript
/*!
 * ReDoc - OpenAPI/Swagger-generated API Reference Documentation
 * -------------------------------------------------------------
 *   Version: "2.0.0-rc.18"
 *   Repo: https://github.com/Redocly/redoc
 */
!function(e,t){"object"==typeof exports&&"object"==typeof m

...
```

Isso confirma que voc√™ est√° conseguindo fornecer arquivos est√°ticos do seu aplicativo e que voc√™ colocou os arquivos est√°ticos para a documenta√ß√£o no local correto.

Agora, podemos configurar o aplicativo para usar esses arquivos est√°ticos para a documenta√ß√£o.

### Desativar a documenta√ß√£o autom√°tica para arquivos est√°ticos

Da mesma forma que ao usar um CDN personalizado, o primeiro passo √© desativar a documenta√ß√£o autom√°tica, pois ela usa o CDN padr√£o.

Para desativ√°-los, defina suas URLs como `None` ao criar seu aplicativo `FastAPI`:

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[9] *}

### Incluir a documenta√ß√£o personalizada para arquivos est√°ticos

E da mesma forma que com um CDN personalizado, agora voc√™ pode criar as *opera√ß√µes de rota* para a documenta√ß√£o personalizada.

Novamente, voc√™ pode reutilizar as fun√ß√µes internas do FastAPI para criar as p√°ginas HTML para a documenta√ß√£o e passar os argumentos necess√°rios:

* `openapi_url`: a URL onde a p√°gina HTML para a documenta√ß√£o pode obter o esquema OpenAPI para a sua API. Voc√™ pode usar aqui o atributo `app.openapi_url`.
* `title`: o t√≠tulo da sua API.
* `oauth2_redirect_url`: Voc√™ pode usar `app.swagger_ui_oauth2_redirect_url` aqui para usar o padr√£o.
* `swagger_js_url`: a URL onde a p√°gina HTML para a sua documenta√ß√£o do Swagger UI pode obter o arquivo **JavaScript**. Este √© o URL do CDN personalizado. **Este √© o URL que seu aplicativo est√° fornecendo**.
* `swagger_css_url`: a URL onde a p√°gina HTML para a sua documenta√ß√£o do Swagger UI pode obter o arquivo **CSS**. **Esse √© o que seu aplicativo est√° fornecendo**.

E de forma semelhante para o ReDoc...

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[2:6,14:22,25:27,30:36] *}

/// tip | Dica

A *opera√ß√£o de rota* para `swagger_ui_redirect` √© um auxiliar para quando voc√™ usa OAuth2.

Se voc√™ integrar sua API com um provedor OAuth2, voc√™ poder√° autenticar e voltar para a documenta√ß√£o da API com as credenciais adquiridas. E, ent√£o, interagir com ela usando a autentica√ß√£o OAuth2 real.

Swagger UI lidar√° com isso nos bastidores para voc√™, mas ele precisa desse auxiliar de "redirect".

///

### Criar uma *opera√ß√£o de rota* para testar arquivos est√°ticos

Agora, para poder testar se tudo funciona, crie uma *opera√ß√£o de rota*:

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[39:41] *}

### Teste a UI de Arquivos Est√°ticos

Agora, voc√™ deve ser capaz de desconectar o WiFi, ir para a documenta√ß√£o em <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>, e recarregar a p√°gina.

E mesmo sem Internet, voc√™ ser√° capaz de ver a documenta√ß√£o da sua API e interagir com ela.


================================================
File: /docs/pt/docs/how-to/custom-request-and-route.md
================================================
# Requisi√ß√µes Personalizadas e Classes da APIRoute

Em algum casos, voc√™ pode querer sobreescrever a l√≥gica usada pelas classes `Request`e `APIRoute`.

Em particular, isso pode ser uma boa alternativa para uma l√≥gica em um middleware

Por exemplo, se voc√™ quiser ler ou manipular o corpo da requisi√ß√£o antes que ele seja processado pela sua aplica√ß√£o.

/// danger | Perigo

Isso √© um recurso "avan√ßado".

Se voc√™ for um iniciante em **FastAPI** voc√™ deve considerar pular essa se√ß√£o.

///

## Casos de Uso

Alguns casos de uso incluem:

* Converter requisi√ß√µes n√£o-JSON para JSON (por exemplo, <a href="https://msgpack.org/index.html" class="external-link" target="_blank">`msgpack`</a>).
* Descomprimir corpos de requisi√ß√£o comprimidos com gzip.
* Registrar automaticamente todos os corpos de requisi√ß√£o.

## Manipulando codifica√ß√µes de corpo de requisi√ß√£o personalizadas

Vamos ver como usar uma subclasse personalizada de `Request` para descomprimir requisi√ß√µes gzip.

E uma subclasse de `APIRoute` para usar essa classe de requisi√ß√£o personalizada.

### Criar uma classe `GzipRequest` personalizada

/// tip | Dica

Isso √© um exemplo de brincadeira para demonstrar como funciona, se voc√™ precisar de suporte para Gzip, voc√™ pode usar o [`GzipMiddleware`](../advanced/middleware.md#gzipmiddleware){.internal-link target=_blank} fornecido.

///

Primeiro, criamos uma classe `GzipRequest`, que ir√° sobrescrever o m√©todo `Request.body()` para descomprimir o corpo na presen√ßa de um cabe√ßalho apropriado.

Se n√£o houver `gzip` no cabe√ßalho, ele n√£o tentar√° descomprimir o corpo.

Dessa forma, a mesma classe de rota pode lidar com requisi√ß√µes comprimidas ou n√£o comprimidas.

{* ../../docs_src/custom_request_and_route/tutorial001.py hl[8:15] *}

### Criar uma classe `GzipRoute` personalizada

Em seguida, criamos uma subclasse personalizada de `fastapi.routing.APIRoute` que far√° uso do `GzipRequest`.

Dessa vez, ele ir√° sobrescrever o m√©todo `APIRoute.get_route_handler()`.

Esse m√©todo retorna uma fun√ß√£o. E essa fun√ß√£o √© o que ir√° receber uma requisi√ß√£o e retornar uma resposta.

Aqui n√≥s usamos para criar um `GzipRequest` a partir da requisi√ß√£o original.

{* ../../docs_src/custom_request_and_route/tutorial001.py hl[18:26] *}

/// note | Detalhes T√©cnicos

Um `Request` tamb√©m tem um `request.receive`, que √© uma fun√ß√£o para "receber" o corpo da requisi√ß√£o.

Um `Request` tamb√©m tem um `request.receive`, que √© uma fun√ß√£o para "receber" o corpo da requisi√ß√£o.

O dicion√°rio `scope` e a fun√ß√£o `receive` s√£o ambos parte da especifica√ß√£o ASGI.

E essas duas coisas, `scope` e `receive`, s√£o o que √© necess√°rio para criar uma nova inst√¢ncia de `Request`.

Para aprender mais sobre o `Request` confira a <a href="https://www.starlette.io/requests/" class="external-link" target="_blank">documenta√ß√£o do Starlette sobre Requests</a>.

///

A √∫nica coisa que a fun√ß√£o retornada por `GzipRequest.get_route_handler` faz de diferente √© converter o `Request` para um `GzipRequest`.

Fazendo isso, nosso `GzipRequest` ir√° cuidar de descomprimir os dados (se necess√°rio) antes de pass√°-los para nossas *opera√ß√µes de rota*.

Depois disso, toda a l√≥gica de processamento √© a mesma.

Mas por causa das nossas mudan√ßas em `GzipRequest.body`, o corpo da requisi√ß√£o ser√° automaticamente descomprimido quando for carregado pelo **FastAPI** quando necess√°rio.

## Acessando o corpo da requisi√ß√£o em um manipulador de exce√ß√£o

/// tip | Dica

Para resolver esse mesmo problema, √© provavelmente muito mais f√°cil usar o `body` em um manipulador personalizado para `RequestValidationError` ([Tratando Erros](../tutorial/handling-errors.md#use-the-requestvalidationerror-body){.internal-link target=_blank}).

Mas esse exemplo ainda √© valido e mostra como interagir com os componentes internos.

///

Tamb√©m podemos usar essa mesma abordagem para acessar o corpo da requisi√ß√£o em um manipulador de exce√ß√£o.

Tudo que precisamos fazer √© manipular a requisi√ß√£o dentro de um bloco `try`/`except`:

{* ../../docs_src/custom_request_and_route/tutorial002.py hl[13,15] *}

Se uma exce√ß√£o ocorrer, a inst√¢ncia `Request` ainda estar√° em escopo, ent√£o podemos ler e fazer uso do corpo da requisi√ß√£o ao lidar com o erro:

{* ../../docs_src/custom_request_and_route/tutorial002.py hl[16:18] *}

## Classe `APIRoute` personalizada em um router

voc√™ tamb√©m pode definir o parametro `route_class` de uma `APIRouter`;

{* ../../docs_src/custom_request_and_route/tutorial003.py hl[26] *}

Nesse exemplo, as *opera√ß√µes de rota* sob o `router` ir√£o usar a classe `TimedRoute` personalizada, e ter√£o um cabe√ßalho extra `X-Response-Time` na resposta com o tempo que levou para gerar a resposta:

{* ../../docs_src/custom_request_and_route/tutorial003.py hl[13:20] *}


================================================
File: /docs/pt/docs/how-to/extending-openapi.md
================================================
# Extendendo o OpenAPI

Existem alguns casos em que pode ser necess√°rio modificar o esquema OpenAPI gerado.

Nesta se√ß√£o, voc√™ ver√° como fazer isso.

## O processo normal

O processo normal (padr√£o) √© o seguinte:

Uma aplica√ß√£o (inst√¢ncia) do `FastAPI` possui um m√©todo `.openapi()` que deve retornar o esquema OpenAPI.

Como parte da cria√ß√£o do objeto de aplica√ß√£o, uma *opera√ß√£o de rota* para `/openapi.json` (ou para o que voc√™ definir como `openapi_url`) √© registrada.

Ela apenas retorna uma resposta JSON com o resultado do m√©todo `.openapi()` da aplica√ß√£o.

Por padr√£o, o que o m√©todo `.openapi()` faz √© verificar se a propriedade `.openapi_schema` tem conte√∫do e retorn√°-lo.

Se n√£o tiver, ele gera o conte√∫do usando a fun√ß√£o utilit√°ria em `fastapi.openapi.utils.get_openapi`.

E essa fun√ß√£o `get_openapi()` recebe como par√¢metros:

* `title`: O t√≠tulo do OpenAPI, exibido na documenta√ß√£o.
* `version`: A vers√£o da sua API, por exemplo, `2.5.0`.
* `openapi_version`: A vers√£o da especifica√ß√£o OpenAPI utilizada. Por padr√£o, a mais recente: `3.1.0`.
* `summary`: Um resumo curto da API.
* `description`: A descri√ß√£o da sua API, que pode incluir markdown e ser√° exibida na documenta√ß√£o.
* `routes`: Uma lista de rotas, que s√£o cada uma das *opera√ß√µes de rota* registradas. Elas s√£o obtidas de `app.routes`.

/// info | Informa√ß√£o

O par√¢metro `summary` est√° dispon√≠vel no OpenAPI 3.1.0 e superior, suportado pelo FastAPI 0.99.0 e superior.

///

## Sobrescrevendo os padr√µes

Com as informa√ß√µes acima, voc√™ pode usar a mesma fun√ß√£o utilit√°ria para gerar o esquema OpenAPI e sobrescrever cada parte que precisar.

Por exemplo, vamos adicionar <a href="https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#x-logo" class="external-link" target="_blank">Extens√£o OpenAPI do ReDoc para incluir um logo personalizado</a>.

### **FastAPI** Normal

Primeiro, escreva toda a sua aplica√ß√£o **FastAPI** normalmente:

{* ../../docs_src/extending_openapi/tutorial001.py hl[1,4,7:9] *}

### Gerar o esquema OpenAPI

Em seguida, use a mesma fun√ß√£o utilit√°ria para gerar o esquema OpenAPI, dentro de uma fun√ß√£o `custom_openapi()`:

{* ../../docs_src/extending_openapi/tutorial001.py hl[2,15:21] *}

### Modificar o esquema OpenAPI

Agora, voc√™ pode adicionar a extens√£o do ReDoc, incluindo um `x-logo` personalizado ao "objeto" `info` no esquema OpenAPI:

{* ../../docs_src/extending_openapi/tutorial001.py hl[22:24] *}

### Armazenar em cache o esquema OpenAPI

Voc√™ pode usar a propriedade `.openapi_schema` como um "cache" para armazenar o esquema gerado.

Dessa forma, sua aplica√ß√£o n√£o precisar√° gerar o esquema toda vez que um usu√°rio abrir a documenta√ß√£o da sua API.

Ele ser√° gerado apenas uma vez, e o mesmo esquema armazenado em cache ser√° utilizado nas pr√≥ximas requisi√ß√µes.

{* ../../docs_src/extending_openapi/tutorial001.py hl[13:14,25:26] *}

### Sobrescrever o m√©todo

Agora, voc√™ pode substituir o m√©todo `.openapi()` pela sua nova fun√ß√£o.

{* ../../docs_src/extending_openapi/tutorial001.py hl[29] *}

### Verificar

Uma vez que voc√™ acessar <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a>, ver√° que est√° usando seu logo personalizado (neste exemplo, o logo do **FastAPI**):

<img src="/docs/en/docs/img/tutorial/extending-openapi/image01.png">


================================================
File: /docs/pt/docs/how-to/general.md
================================================
# Geral - Como Fazer - Receitas

Aqui est√£o v√°rios links para outros locais na documenta√ß√£o, para perguntas gerais ou frequentes

## Filtro de dados- Seguran√ßa

Para assegurar que voc√™ n√£o vai retornar mais dados do que deveria, leia a se√ß√£o [Tutorial - Response Model - Return Type](../tutorial/response-model.md){.internal-link target=_blank}.

## Tags de Documenta√ß√£o - OpenAPI
Para adicionar tags √†s suas *rotas* e agrup√°-las na UI da documenta√ß√£o, leia a se√ß√£o [Tutorial - Path Operation Configurations - Tags](../tutorial/path-operation-configuration.md#tags){.internal-link target=_blank}.

## Resumo e Descri√ß√£o da documenta√ß√£o - OpenAPI

Para adicionar um resumo e uma descri√ß√£o √†s suas *rotas* e exibi-los na UI da documenta√ß√£o, leia a se√ß√£o [Tutorial - Path Operation Configurations - Summary and Description](../tutorial/path-operation-configuration.md#summary-and-description){.internal-link target=_blank}.

## Documenta√ß√£o das Descri√ß√µes de Resposta - OpenAPI

Para definir a descri√ß√£o de uma resposta exibida na interface da documenta√ß√£o, leia a se√ß√£o [Tutorial - Path Operation Configurations - Response description](../tutorial/path-operation-configuration.md#response-description){.internal-link target=_blank}.

## Documenta√ß√£o para Depreciar uma *Opera√ß√£o de Rota* - OpenAPI

Para depreciar uma *opera√ß√£o de rota* e exibi-la na interface da documenta√ß√£o, leia a se√ß√£o [Tutorial - Path Operation Configurations - Deprecation](../tutorial/path-operation-configuration.md#deprecate-a-path-operation){.internal-link target=_blank}.

## Converter qualquer dado para JSON


Para converter qualquer dado para um formato compat√≠vel com JSON, leia a se√ß√£o [Tutorial - JSON Compatible Encoder](../tutorial/encoder.md){.internal-link target=_blank}.

## OpenAPI Metadata - Docs

Para adicionar metadados ao seu esquema OpenAPI, incluindo  licensa, vers√£o, contato, etc, leia a se√ß√£o [Tutorial - Metadata and Docs URLs](../tutorial/metadata.md){.internal-link target=_blank}.

## OpenAPI com URL customizada

Para customizar a URL do OpenAPI (ou remov√™-la), leia a se√ß√£o [Tutorial - Metadata and Docs URLs](../tutorial/metadata.md#openapi-url){.internal-link target=_blank}.

## URLs de documenta√ß√£o do OpenAPI

Para alterar as URLs usadas ‚Äã‚Äãpara as interfaces de usu√°rio da documenta√ß√£o gerada automaticamente, leia a se√ß√£o [Tutorial - Metadata and Docs URLs](../tutorial/metadata.md#docs-urls){.internal-link target=_blank}.


================================================
File: /docs/pt/docs/how-to/graphql.md
================================================
# GraphQL

Como o **FastAPI** √© baseado no padr√£o **ASGI**, √© muito f√°cil integrar qualquer biblioteca **GraphQL** tamb√©m compat√≠vel com ASGI.

Voc√™ pode combinar *opera√ß√µes de rota* normais do FastAPI com GraphQL na mesma aplica√ß√£o.

/// tip | Dica

**GraphQL** resolve alguns casos de uso muito espec√≠ficos.

Ele tem **vantagens** e **desvantagens** quando comparado a **web APIs** comuns.

Certifique-se de avaliar se os **benef√≠cios** para o seu caso de uso compensam as **desvantagens**. ü§ì

///

## Bibliotecas GraphQL

Aqui est√£o algumas das bibliotecas **GraphQL** que t√™m suporte **ASGI**. Voc√™ pode us√°-las com **FastAPI**:

* <a href="https://strawberry.rocks/" class="external-link" target="_blank">Strawberry</a> üçì
    * Com <a href="https://strawberry.rocks/docs/integrations/fastapi" class="external-link" target="_blank">docs para FastAPI</a>
* <a href="https://ariadnegraphql.org/" class="external-link" target="_blank">Ariadne</a>
    * Com <a href="https://ariadnegraphql.org/docs/fastapi-integration" class="external-link" target="_blank">docs para FastAPI</a>
* <a href="https://tartiflette.io/" class="external-link" target="_blank">Tartiflette</a>
    * Com <a href="https://tartiflette.github.io/tartiflette-asgi/" class="external-link" target="_blank">Tartiflette ASGI</a> para fornecer integra√ß√£o ASGI
* <a href="https://graphene-python.org/" class="external-link" target="_blank">Graphene</a>
    * Com <a href="https://github.com/ciscorn/starlette-graphene3" class="external-link" target="_blank">starlette-graphene3</a>

## GraphQL com Strawberry

Se voc√™ precisar ou quiser trabalhar com **GraphQL**, <a href="https://strawberry.rocks/" class="external-link" target="_blank">**Strawberry**</a> √© a biblioteca **recomendada** pois tem o design mais pr√≥ximo ao design do **FastAPI**, ela √© toda baseada em **type annotations**.

Dependendo do seu caso de uso, voc√™ pode preferir usar uma biblioteca diferente, mas se voc√™ me perguntasse, eu provavelmente sugeriria que voc√™ experimentasse o **Strawberry**.

Aqui est√° uma pequena pr√©via de como voc√™ poderia integrar Strawberry com FastAPI:

{* ../../docs_src/graphql/tutorial001.py hl[3,22,25:26] *}

Voc√™ pode aprender mais sobre Strawberry na <a href="https://strawberry.rocks/" class="external-link" target="_blank">documenta√ß√£o do Strawberry</a>.

E tamb√©m na documenta√ß√£o sobre <a href="https://strawberry.rocks/docs/integrations/fastapi" class="external-link" target="_blank">Strawberry com FastAPI</a>.

## Antigo `GraphQLApp` do Starlette

Vers√µes anteriores do Starlette incluiam uma classe `GraphQLApp` para integrar com <a href="https://graphene-python.org/" class="external-link" target="_blank">Graphene</a>.

Ela foi descontinuada do Starlette, mas se voc√™ tem c√≥digo que a utilizava, voc√™ pode facilmente **migrar** para <a href="https://github.com/ciscorn/starlette-graphene3" class="external-link" target="_blank">starlette-graphene3</a>, que cobre o mesmo caso de uso e tem uma **interface quase id√™ntica**.

/// tip | Dica

Se voc√™ precisa de GraphQL, eu ainda recomendaria que voc√™ desse uma olhada no <a href="https://strawberry.rocks/" class="external-link" target="_blank">Strawberry</a>, pois ele √© baseado em type annotations em vez de classes e tipos personalizados.

///

## Saiba Mais

Voc√™ pode aprender mais sobre **GraphQL** na <a href="https://graphql.org/" class="external-link" target="_blank">documenta√ß√£o oficial do GraphQL</a>.

Voc√™ tamb√©m pode ler mais sobre cada uma das bibliotecas descritas acima em seus links.


================================================
File: /docs/pt/docs/how-to/index.md
================================================
# Como Fazer - Exemplos Pr√°ticos

Aqui voc√™ encontrar√° diferentes exemplos pr√°ticos ou tutoriais de "como fazer" para v√°rios t√≥picos.

A maioria dessas ideias ser√° mais ou menos **independente**, e na maioria dos casos voc√™ s√≥ precisar√° estud√°-las se elas se aplicarem diretamente ao **seu projeto**.

Se algo parecer interessante e √∫til para o seu projeto, v√° em frente e d√™ uma olhada. Caso contr√°rio, voc√™ pode simplesmente ignor√°-lo.

/// tip

Se voc√™ deseja **aprender FastAPI** de forma estruturada (recomendado), leia cap√≠tulo por cap√≠tulo [Tutorial - Guia de Usu√°rio](../tutorial/index.md){.internal-link target=_blank} em vez disso.

///


================================================
File: /docs/pt/docs/how-to/separate-openapi-schemas.md
================================================
# Esquemas OpenAPI Separados para Entrada e Sa√≠da ou N√£o

Ao usar **Pydantic v2**, o OpenAPI gerado √© um pouco mais exato e **correto** do que antes. üòé

Inclusive, em alguns casos, ele ter√° at√© **dois JSON Schemas** no OpenAPI para o mesmo modelo Pydantic, para entrada e sa√≠da, dependendo se eles possuem **valores padr√£o**.

Vamos ver como isso funciona e como alterar se for necess√°rio.

## Modelos Pydantic para Entrada e Sa√≠da

Digamos que voc√™ tenha um modelo Pydantic com valores padr√£o, como este:

{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}

### Modelo para Entrada

Se voc√™ usar esse modelo como entrada, como aqui:

{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:15] hl[14] *}

... ent√£o o campo `description` n√£o ser√° obrigat√≥rio. Porque ele tem um valor padr√£o de `None`.

### Modelo de Entrada na Documenta√ß√£o

Voc√™ pode confirmar que na documenta√ß√£o, o campo `description` n√£o tem um **asterisco vermelho**, n√£o √© marcado como obrigat√≥rio:

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image01.png">
</div>

### Modelo para Sa√≠da

Mas se voc√™ usar o mesmo modelo como sa√≠da, como aqui:

{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py hl[19] *}

... ent√£o, como `description` tem um valor padr√£o, se voc√™ **n√£o retornar nada** para esse campo, ele ainda ter√° o **valor padr√£o**.

### Modelo para Dados de Resposta de Sa√≠da

Se voc√™ interagir com a documenta√ß√£o e verificar a resposta, mesmo que o c√≥digo n√£o tenha adicionado nada em um dos campos `description`, a resposta JSON cont√©m o valor padr√£o (`null`):

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image02.png">
</div>

Isso significa que ele **sempre ter√° um valor**, s√≥ que √†s vezes o valor pode ser `None` (ou `null` em termos de JSON).

Isso quer dizer que, os clientes que usam sua API n√£o precisam verificar se o valor existe ou n√£o, eles podem **assumir que o campo sempre estar√° l√°**, mas que em alguns casos ter√° o valor padr√£o de `None`.

A maneira de descrever isso no OpenAPI √© marcar esse campo como **obrigat√≥rio**, porque ele sempre estar√° l√°.

Por causa disso, o JSON Schema para um modelo pode ser diferente dependendo se ele √© usado para **entrada ou sa√≠da**:

* para **entrada**, o `description` **n√£o ser√° obrigat√≥rio**
* para **sa√≠da**, ele ser√° **obrigat√≥rio** (e possivelmente `None`, ou em termos de JSON, `null`)

### Modelo para Sa√≠da na Documenta√ß√£o

Voc√™ pode verificar o modelo de sa√≠da na documenta√ß√£o tamb√©m, ambos `name` e `description` s√£o marcados como **obrigat√≥rios** com um **asterisco vermelho**:

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image03.png">
</div>

### Modelo para Entrada e Sa√≠da na Documenta√ß√£o

E se voc√™ verificar todos os Schemas dispon√≠veis (JSON Schemas) no OpenAPI, ver√° que h√° dois, um `Item-Input` e um `Item-Output`.

Para `Item-Input`, `description` **n√£o √© obrigat√≥rio**, n√£o tem um asterisco vermelho.

Mas para `Item-Output`, `description` **√© obrigat√≥rio**, tem um asterisco vermelho.

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image04.png">
</div>

Com esse recurso do **Pydantic v2**, sua documenta√ß√£o da API fica mais **precisa**, e se voc√™ tiver clientes e SDKs gerados automaticamente, eles ser√£o mais precisos tamb√©m, proporcionando uma melhor **experi√™ncia para desenvolvedores** e consist√™ncia. üéâ

## N√£o Separe Schemas

Agora, h√° alguns casos em que voc√™ pode querer ter o **mesmo esquema para entrada e sa√≠da**.

Provavelmente, o principal caso de uso para isso √© se voc√™ j√° tem algum c√≥digo de cliente/SDK gerado automaticamente e n√£o quer atualizar todo o c√≥digo de cliente/SDK gerado ainda, voc√™ provavelmente vai querer fazer isso em algum momento, mas talvez n√£o agora.

Nesse caso, voc√™ pode desativar esse recurso no **FastAPI**, com o par√¢metro `separate_input_output_schemas=False`.

/// info | Informa√ß√£o

O suporte para `separate_input_output_schemas` foi adicionado no FastAPI `0.102.0`. ü§ì

///

{* ../../docs_src/separate_openapi_schemas/tutorial002_py310.py hl[10] *}

### Mesmo Esquema para Modelos de Entrada e Sa√≠da na Documenta√ß√£o

E agora haver√° um √∫nico esquema para entrada e sa√≠da para o modelo, apenas `Item`, e `description` **n√£o ser√° obrigat√≥rio**:

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image05.png">
</div>

Esse √© o mesmo comportamento do Pydantic v1. ü§ì


================================================
File: /docs/pt/docs/how-to/testing-database.md
================================================
# Testando a Base de Dados

Voc√™ pode estudar sobre bases de dados, SQL e SQLModel na <a href="https://sqlmodel.tiangolo.com/" class="external-link" target="_blank">documenta√ß√£o de SQLModel</a>. ü§ì

Aqui tem um mini <a href="https://sqlmodel.tiangolo.com/tutorial/fastapi/" class="external-link" target="_blank">tutorial de como usar SQLModel com FastAPI</a>. ‚ú®

Esse tutorial inclui uma sess√£o sobre <a href="https://sqlmodel.tiangolo.com/tutorial/fastapi/tests/" class="external-link" target="_blank">testar bases de dados SQL</a>. üòé


================================================
File: /docs/pt/docs/learn/index.md
================================================
# Aprender

Nesta parte da documenta√ß√£o encontramos as se√ß√µes introdut√≥rias e os tutoriais para aprendermos como usar o **FastAPI**.

N√≥s poder√≠amos considerar isto um **livro**, **curso**, a maneira **oficial** e recomendada de aprender o FastAPI. üòé


================================================
File: /docs/pt/docs/resources/index.md
================================================
# Recursos

Material complementar, links externos, artigos e muito mais. ‚úàÔ∏è


================================================
File: /docs/pt/docs/tutorial/background-tasks.md
================================================
# Tarefas em segundo plano

Voc√™ pode definir tarefas em segundo plano a serem executadas _ ap√≥s _ retornar uma resposta.

Isso √© √∫til para opera√ß√µes que precisam acontecer ap√≥s uma solicita√ß√£o, mas que o cliente realmente n√£o precisa esperar a opera√ß√£o ser conclu√≠da para receber a resposta.

Isso inclui, por exemplo:

- Envio de notifica√ß√µes por email ap√≥s a realiza√ß√£o de uma a√ß√£o:
  - Como conectar-se a um servidor de e-mail e enviar um e-mail tende a ser "lento" (v√°rios segundos), voc√™ pode retornar a resposta imediatamente e enviar a notifica√ß√£o por e-mail em segundo plano.
- Processando dados:
  - Por exemplo, digamos que voc√™ receba um arquivo que deve passar por um processo lento, voc√™ pode retornar uma resposta de "Aceito" (HTTP 202) e process√°-lo em segundo plano.

## Usando `BackgroundTasks`

Primeiro, importe `BackgroundTasks` e defina um par√¢metro em sua _fun√ß√£o de opera√ß√£o de caminho_ com uma declara√ß√£o de tipo de `BackgroundTasks`:

{* ../../docs_src/background_tasks/tutorial001.py hl[1,13] *}

O **FastAPI** criar√° o objeto do tipo `BackgroundTasks` para voc√™ e o passar√° como esse par√¢metro.

## Criar uma fun√ß√£o de tarefa

Crie uma fun√ß√£o a ser executada como tarefa em segundo plano.

√â apenas uma fun√ß√£o padr√£o que pode receber par√¢metros.

Pode ser uma fun√ß√£o `async def` ou `def` normal, o **FastAPI** saber√° como lidar com isso corretamente.

Nesse caso, a fun√ß√£o de tarefa gravar√° em um arquivo (simulando o envio de um e-mail).

E como a opera√ß√£o de grava√ß√£o n√£o usa `async` e `await`, definimos a fun√ß√£o com `def` normal:

{* ../../docs_src/background_tasks/tutorial001.py hl[6:9] *}

## Adicionar a tarefa em segundo plano

Dentro de sua _fun√ß√£o de opera√ß√£o de caminho_, passe sua fun√ß√£o de tarefa para o objeto _tarefas em segundo plano_ com o m√©todo `.add_task()`:

{* ../../docs_src/background_tasks/tutorial001.py hl[14] *}

`.add_task()` recebe como argumentos:

- Uma fun√ß√£o de tarefa a ser executada em segundo plano (`write_notification`).
- Qualquer sequ√™ncia de argumentos que deve ser passada para a fun√ß√£o de tarefa na ordem (`email`).
- Quaisquer argumentos nomeados que devem ser passados ‚Äã‚Äãpara a fun√ß√£o de tarefa (`mensagem = "alguma notifica√ß√£o"`).

## Inje√ß√£o de depend√™ncia

Usar `BackgroundTasks` tamb√©m funciona com o sistema de inje√ß√£o de depend√™ncia, voc√™ pode declarar um par√¢metro do tipo `BackgroundTasks` em v√°rios n√≠veis: em uma _fun√ß√£o de opera√ß√£o de caminho_, em uma depend√™ncia (confi√°vel), em uma subdepend√™ncia, etc.

O **FastAPI** sabe o que fazer em cada caso e como reutilizar o mesmo objeto, de forma que todas as tarefas em segundo plano sejam mescladas e executadas em segundo plano posteriormente:

{* ../../docs_src/background_tasks/tutorial002.py hl[13,15,22,25] *}

Neste exemplo, as mensagens ser√£o gravadas no arquivo `log.txt` _ap√≥s_ o envio da resposta.

Se houver uma consulta na solicita√ß√£o, ela ser√° gravada no log em uma tarefa em segundo plano.

E ent√£o outra tarefa em segundo plano gerada na _fun√ß√£o de opera√ß√£o de caminho_ escrever√° uma mensagem usando o par√¢metro de caminho `email`.

## Detalhes t√©cnicos

A classe `BackgroundTasks` vem diretamente de <a href="https://www.starlette.io/background/" class="external-link" target="_blank">`starlette.background`</a>.

Ela √© importada/inclu√≠da diretamente no FastAPI para que voc√™ possa import√°-la do `fastapi` e evitar a importa√ß√£o acidental da alternativa `BackgroundTask` (sem o `s` no final) de `starlette.background`.

Usando apenas `BackgroundTasks` (e n√£o `BackgroundTask`), √© ent√£o poss√≠vel us√°-la como um par√¢metro de _fun√ß√£o de opera√ß√£o de caminho_ e deixar o **FastAPI** cuidar do resto para voc√™, assim como ao usar o objeto `Request` diretamente.

Ainda √© poss√≠vel usar `BackgroundTask` sozinho no FastAPI, mas voc√™ deve criar o objeto em seu c√≥digo e retornar uma Starlette `Response` incluindo-o.

Voc√™ pode ver mais detalhes na <a href="https://www.starlette.io/background/" class="external-link" target="_blank"> documenta√ß√£o oficiais da Starlette para tarefas em segundo plano </a>.

## Ressalva

Se voc√™ precisa realizar c√°lculos pesados ‚Äã‚Äãem segundo plano e n√£o necessariamente precisa que seja executado pelo mesmo processo (por exemplo, voc√™ n√£o precisa compartilhar mem√≥ria, vari√°veis, etc), voc√™ pode se beneficiar do uso de outras ferramentas maiores, como <a href="http://www.celeryproject.org/" class="external-link" target="_blank"> Celery </a>.

Eles tendem a exigir configura√ß√µes mais complexas, um gerenciador de fila de mensagens/tarefas, como RabbitMQ ou Redis, mas permitem que voc√™ execute tarefas em segundo plano em v√°rios processos e, especialmente, em v√°rios servidores.

Mas se voc√™ precisa acessar vari√°veis ‚Äã‚Äãe objetos do mesmo aplicativo **FastAPI**, ou precisa realizar pequenas tarefas em segundo plano (como enviar uma notifica√ß√£o por e-mail), voc√™ pode simplesmente usar `BackgroundTasks`.

## Recapitulando

Importe e use `BackgroundTasks` com par√¢metros em _fun√ß√µes de opera√ß√£o de caminho_ e depend√™ncias para adicionar tarefas em segundo plano.


================================================
File: /docs/pt/docs/tutorial/bigger-applications.md
================================================
# Aplica√ß√µes Maiores - M√∫ltiplos Arquivos

Se voc√™ est√° construindo uma aplica√ß√£o ou uma API web, √© raro que voc√™ possa colocar tudo em um √∫nico arquivo.

**FastAPI** oferece uma ferramenta conveniente para estruturar sua aplica√ß√£o, mantendo toda a flexibilidade.

/// info | Informa√ß√£o

Se voc√™ vem do Flask, isso seria o equivalente aos Blueprints do Flask.

///

## Um exemplo de estrutura de arquivos

Digamos que voc√™ tenha uma estrutura de arquivos como esta:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dependencies.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ routers
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ items.py
‚îÇ¬†¬† ‚îÇ   ‚îî‚îÄ‚îÄ users.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ internal
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ admin.py
```

/// tip | Dica

Existem v√°rios arquivos `__init__.py` presentes em cada diret√≥rio ou subdiret√≥rio.

Isso permite a importa√ß√£o de c√≥digo de um arquivo para outro.

Por exemplo, no arquivo `app/main.py`, voc√™ poderia ter uma linha como:

```
from app.routers import items
```

///

* O diret√≥rio `app` cont√©m todo o c√≥digo da aplica√ß√£o. Ele possui um arquivo `app/__init__.py` vazio, o que o torna um "pacote Python" (uma cole√ß√£o de "m√≥dulos Python"): `app`.
* Dentro dele, o arquivo `app/main.py` est√° localizado em um pacote Python (diret√≥rio com  `__init__.py`). Portanto, ele √© um "m√≥dulo" desse pacote: `app.main`.
* Existem tamb√©m um arquivo `app/dependencies.py`, assim como o `app/main.py`, ele √© um "m√≥dulo": `app.dependencies`.
* H√° um subdiret√≥rio `app/routers/` com outro arquivo `__init__.py`, ent√£o ele √© um "subpacote Python": `app.routers`.
* O arquivo `app/routers/items.py` est√° dentro de um pacote, `app/routers/`, portanto, √© um "subm√≥dulo": `app.routers.items`.
* O mesmo com `app/routers/users.py`,  ele √© outro subm√≥dulo: `app.routers.users`.
* H√° tamb√©m um subdiret√≥rio `app/internal/` com outro arquivo `__init__.py`, ent√£o ele √© outro "subpacote Python":`app.internal`.
* E o arquivo `app/internal/admin.py` √© outro subm√≥dulo: `app.internal.admin`.

<img src="/img/tutorial/bigger-applications/package.svg">

A mesma estrutura de arquivos com coment√°rios:

```
.
‚îú‚îÄ‚îÄ app                  # "app" √© um pacote Python
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py      # este arquivo torna "app" um "pacote Python"
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py          # "main" m√≥dulo, e.g. import app.main
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dependencies.py  # "dependencies" m√≥dulo, e.g. import app.dependencies
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ routers          # "routers" √© um  "subpacote Python"
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py  # torna "routers" um "subpacote Python"
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ items.py     # "items" subm√≥dulo, e.g. import app.routers.items
‚îÇ¬†¬† ‚îÇ   ‚îî‚îÄ‚îÄ users.py     # "users" subm√≥dulo, e.g. import app.routers.users
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ internal         # "internal" √© um  "subpacote Python"
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ __init__.py  # torna "internal" um  "subpacote Python"
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ admin.py     # "admin" subm√≥dulo, e.g. import app.internal.admin
```

## `APIRouter`

Vamos supor que o arquivo dedicado a lidar apenas com usu√°rios seja o subm√≥dulo em `/app/routers/users.py`.

Voc√™ quer manter as *opera√ß√µes de rota* relacionadas aos seus usu√°rios separadas do restante do c√≥digo, para mant√™-lo organizado.

Mas ele ainda faz parte da mesma aplica√ß√£o/web API **FastAPI** (faz parte do mesmo "pacote Python").

Voc√™ pode criar as *opera√ß√µes de rotas* para esse m√≥dulo usando o `APIRouter`.

### Importar `APIRouter`

voc√™ o importa e cria uma "inst√¢ncia" da mesma maneira que faria com a classe `FastAPI`:

```Python hl_lines="1  3" title="app/routers/users.py"
{!../../docs_src/bigger_applications/app/routers/users.py!}
```

### *Opera√ß√µes de Rota* com `APIRouter`

E ent√£o voc√™ o utiliza para declarar suas *opera√ß√µes de rota*.

Utilize-o da mesma maneira que utilizaria a classe  `FastAPI`:

```Python hl_lines="6  11  16" title="app/routers/users.py"
{!../../docs_src/bigger_applications/app/routers/users.py!}
```

Voc√™ pode pensar em `APIRouter` como uma classe "mini `FastAPI`".

Todas as mesmas op√ß√µes s√£o suportadas.

Todos os mesmos `parameters`, `responses`, `dependencies`, `tags`, etc.

/// tip | Dica

Neste exemplo, a vari√°vel √© chamada de `router`, mas voc√™ pode nome√°-la como quiser.

///

Vamos incluir este `APIRouter` na aplica√ß√£o principal `FastAPI`, mas primeiro, vamos verificar as depend√™ncias e outro `APIRouter`.

## Depend√™ncias

Vemos que precisaremos de algumas depend√™ncias usadas em v√°rios lugares da aplica√ß√£o.

Ent√£o, as colocamos em seu pr√≥prio m√≥dulo de `dependencies` (`app/dependencies.py`).

Agora usaremos uma depend√™ncia simples para ler um cabe√ßalho `X-Token` personalizado:

//// tab | Python 3.9+

```Python hl_lines="3  6-8" title="app/dependencies.py"
{!> ../../docs_src/bigger_applications/app_an_py39/dependencies.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  5-7" title="app/dependencies.py"
{!> ../../docs_src/bigger_applications/app_an/dependencies.py!}
```

////

//// tab | Python 3.8+ non-Annotated

/// tip | Dica

Prefira usar a vers√£o `Annotated` se poss√≠vel.

///

```Python hl_lines="1  4-6" title="app/dependencies.py"
{!> ../../docs_src/bigger_applications/app/dependencies.py!}
```

////

/// tip | Dica

Estamos usando um cabe√ßalho inventado para simplificar este exemplo.

Mas em casos reais, voc√™ obter√° melhores resultados usando os [Utilit√°rios de Seguran√ßa](security/index.md){.internal-link target=_blank} integrados.

///

## Outro m√≥dulo com `APIRouter`

Digamos que voc√™ tamb√©m tenha os endpoints dedicados a manipular "itens" do seu aplicativo no m√≥dulo em `app/routers/items.py`.

Voc√™ tem *opera√ß√µes de rota* para:

* `/items/`
* `/items/{item_id}`

√â tudo a mesma estrutura de `app/routers/users.py`.

Mas queremos ser mais inteligentes e simplificar um pouco o c√≥digo.

Sabemos que todas as *opera√ß√µes de rota* neste m√≥dulo t√™m o mesmo:

* Path `prefix`: `/items`.
* `tags`: (apenas uma tag: `items`).
* Extra `responses`.
* `depend√™ncias`: todas elas precisam da depend√™ncia `X-Token` que criamos.

Ent√£o, em vez de adicionar tudo isso a cada *opera√ß√£o de rota*, podemos adicion√°-lo ao `APIRouter`.

```Python hl_lines="5-10  16  21" title="app/routers/items.py"
{!../../docs_src/bigger_applications/app/routers/items.py!}
```

Como o caminho de cada *opera√ß√£o de rota* deve come√ßar com `/`, como em:

```Python hl_lines="1"
@router.get("/{item_id}")
async def read_item(item_id: str):
    ...
```

...o prefixo n√£o deve incluir um `/` final.

Ent√£o, o prefixo neste caso √© `/items`.

Tamb√©m podemos adicionar uma lista de `tags` e `responses` extras que ser√£o aplicadas a todas as *opera√ß√µes de rota* inclu√≠das neste roteador.

E podemos adicionar uma lista de `dependencies` que ser√£o adicionadas a todas as *opera√ß√µes de rota* no roteador e ser√£o executadas/resolvidas para cada solicita√ß√£o feita a elas.

/// tip | Dica

Observe que, assim como [depend√™ncias em *decoradores de opera√ß√£o de rota*](dependencies/dependencies-in-path-operation-decorators.md){.internal-link target=_blank}, nenhum valor ser√° passado para sua *fun√ß√£o de opera√ß√£o de rota*.

///

O resultado final √© que os caminhos dos itens agora s√£o:

* `/items/`
* `/items/{item_id}`

...como pretend√≠amos.

* Elas ser√£o marcadas com uma lista de tags que cont√™m uma √∫nica string `"items"`.
    * Essas "tags" s√£o especialmente √∫teis para os sistemas de documenta√ß√£o interativa autom√°tica (usando OpenAPI).
* Todas elas incluir√£o as `responses` predefinidas.
* Todas essas *opera√ß√µes de rota* ter√£o a lista de `dependencies` avaliada/executada antes delas.
    * Se voc√™ tamb√©m declarar depend√™ncias em uma *opera√ß√£o de rota* espec√≠fica, **elas tamb√©m ser√£o executadas**.
    * As depend√™ncias do roteador s√£o executadas primeiro, depois as [`dependencies` no decorador](dependencies/dependencies-in-path-operation-decorators.md){.internal-link target=_blank} e, em seguida, as depend√™ncias de par√¢metros normais.
    * Voc√™ tamb√©m pode adicionar [depend√™ncias de `Seguran√ßa` com `scopes`](../advanced/security/oauth2-scopes.md){.internal-link target=_blank}.

/// tip | Dica

Ter `depend√™ncias` no `APIRouter` pode ser usado, por exemplo, para exigir autentica√ß√£o para um grupo inteiro de *opera√ß√µes de rota*. Mesmo que as depend√™ncias n√£o sejam adicionadas individualmente a cada uma delas.

///

/// check

Os par√¢metros `prefix`, `tags`, `responses` e `dependencies` s√£o (como em muitos outros casos) apenas um recurso do **FastAPI** para ajudar a evitar duplica√ß√£o de c√≥digo.

///

### Importar as depend√™ncias

Este c√≥digo reside no m√≥dulo `app.routers.items`, o arquivo `app/routers/items.py`.

E precisamos obter a fun√ß√£o de depend√™ncia do m√≥dulo `app.dependencies`, o arquivo `app/dependencies.py`.

Ent√£o usamos uma importa√ß√£o relativa com `..` para as depend√™ncias:

```Python hl_lines="3" title="app/routers/items.py"
{!../../docs_src/bigger_applications/app/routers/items.py!}
```

#### Como funcionam as importa√ß√µes relativas

/// tip | Dica

Se voc√™ sabe perfeitamente como funcionam as importa√ß√µes, continue para a pr√≥xima se√ß√£o abaixo.

///

Um √∫nico ponto `.`, como em:

```Python
from .dependencies import get_token_header
```

significaria:

* Come√ßando no mesmo pacote em que este m√≥dulo (o arquivo `app/routers/items.py`) vive (o diret√≥rio `app/routers/`)...
* encontre o m√≥dulo `dependencies` (um arquivo imagin√°rio em `app/routers/dependencies.py`)...
* e dele, importe a fun√ß√£o `get_token_header`.

Mas esse arquivo n√£o existe, nossas depend√™ncias est√£o em um arquivo em `app/dependencies.py`.

Lembre-se de como nossa estrutura app/file se parece:

<img src="/img/tutorial/bigger-applications/package.svg">

---

Os dois pontos `..`, como em:

```Python
from ..dependencies import get_token_header
```

significa:

* Come√ßando no mesmo pacote em que este m√≥dulo (o arquivo `app/routers/items.py`) reside (o diret√≥rio `app/routers/`)...
* v√° para o pacote pai (o diret√≥rio `app/`)...
* e l√°, encontre o m√≥dulo `dependencies` (o arquivo em `app/dependencies.py`)...
* e dele, importe a fun√ß√£o `get_token_header`.

Isso funciona corretamente! üéâ

---

Da mesma forma, se tiv√©ssemos usado tr√™s pontos `...`, como em:

```Python
from ...dependencies import get_token_header
```

isso significaria:

* Come√ßando no mesmo pacote em que este m√≥dulo (o arquivo `app/routers/items.py`) vive (o diret√≥rio `app/routers/`)...
* v√° para o pacote pai (o diret√≥rio `app/`)...
* ent√£o v√° para o pai daquele pacote (n√£o h√° pacote pai, `app` √© o n√≠vel superior üò±)...
* e l√°, encontre o m√≥dulo `dependencies` (o arquivo em `app/dependencies.py`)...
* e dele, importe a fun√ß√£o `get_token_header`.

Isso se referiria a algum pacote acima de `app/`, com seu pr√≥prio arquivo `__init__.py`, etc. Mas n√£o temos isso. Ent√£o, isso geraria um erro em nosso exemplo. üö®

Mas agora voc√™ sabe como funciona, ent√£o voc√™ pode usar importa√ß√µes relativas em seus pr√≥prios aplicativos, n√£o importa o qu√£o complexos eles sejam. ü§ì

### Adicione algumas `tags`, `respostas` e `depend√™ncias` personalizadas

N√£o estamos adicionando o prefixo `/items` nem `tags=["items"]` a cada *opera√ß√£o de rota* porque os adicionamos ao `APIRouter`.

Mas ainda podemos adicionar _mais_ `tags` que ser√£o aplicadas a uma *opera√ß√£o de rota* espec√≠fica, e tamb√©m algumas `respostas` extras espec√≠ficas para essa *opera√ß√£o de rota*:

```Python hl_lines="30-31" title="app/routers/items.py"
{!../../docs_src/bigger_applications/app/routers/items.py!}
```

/// tip | Dica

Esta √∫ltima opera√ß√£o de caminho ter√° a combina√ß√£o de tags: `["items", "custom"]`.

E tamb√©m ter√° ambas as respostas na documenta√ß√£o, uma para `404` e uma para `403`.

///

## O principal `FastAPI`

Agora, vamos ver o m√≥dulo em `app/main.py`.

Aqui √© onde voc√™ importa e usa a classe `FastAPI`.

Este ser√° o arquivo principal em seu aplicativo que une tudo.

E como a maior parte de sua l√≥gica agora viver√° em seu pr√≥prio m√≥dulo espec√≠fico, o arquivo principal ser√° bem simples.

### Importar `FastAPI`

Voc√™ importa e cria uma classe `FastAPI` normalmente.

E podemos at√© declarar [depend√™ncias globais](dependencies/global-dependencies.md){.internal-link target=_blank} que ser√£o combinadas com as depend√™ncias para cada `APIRouter`:

```Python hl_lines="1  3  7" title="app/main.py"
{!../../docs_src/bigger_applications/app/main.py!}
```

### Importe o `APIRouter`

Agora importamos os outros subm√≥dulos que possuem `APIRouter`s:

```Python hl_lines="4-5" title="app/main.py"
{!../../docs_src/bigger_applications/app/main.py!}
```

Como os arquivos `app/routers/users.py` e `app/routers/items.py` s√£o subm√≥dulos que fazem parte do mesmo pacote Python `app`, podemos usar um √∫nico ponto `.` para import√°-los usando "importa√ß√µes relativas".

### Como funciona a importa√ß√£o

A se√ß√£o:

```Python
from .routers import items, users
```

significa:

* Come√ßando no mesmo pacote em que este m√≥dulo (o arquivo `app/main.py`) reside (o diret√≥rio `app/`)...
* procure o subpacote `routers` (o diret√≥rio em `app/routers/`)...
* e dele, importe o subm√≥dulo `items` (o arquivo em `app/routers/items.py`) e `users` (o arquivo em `app/routers/users.py`)...

O m√≥dulo `items` ter√° uma vari√°vel `router` (`items.router`). Esta √© a mesma que criamos no arquivo `app/routers/items.py`, √© um objeto `APIRouter`.

E ent√£o fazemos o mesmo para o m√≥dulo `users`.

Tamb√©m poder√≠amos import√°-los como:

```Python
from app.routers import items, users
```

/// info | Informa√ß√£o

A primeira vers√£o √© uma "importa√ß√£o relativa":

```Python
from .routers import items, users
```

A segunda vers√£o √© uma "importa√ß√£o absoluta":

```Python
from app.routers import items, users
```

Para saber mais sobre pacotes e m√≥dulos Python, leia <a href="https://docs.python.org/3/tutorial/modules.html" class="external-link" target="_blank">a documenta√ß√£o oficial do Python sobre m√≥dulos</a>.

///

### Evite colis√µes de nomes

Estamos importando o subm√≥dulo `items` diretamente, em vez de importar apenas sua vari√°vel `router`.

Isso ocorre porque tamb√©m temos outra vari√°vel chamada `router` no subm√≥dulo `users`.

Se tiv√©ssemos importado um ap√≥s o outro, como:

```Python
from .routers.items import router
from .routers.users import router
```

o `router` de `users` sobrescreveria o de `items` e n√£o poder√≠amos us√°-los ao mesmo tempo.

Ent√£o, para poder usar ambos no mesmo arquivo, importamos os subm√≥dulos diretamente:

```Python hl_lines="5" title="app/main.py"
{!../../docs_src/bigger_applications/app/main.py!}
```

### Incluir o `APIRouter`s para `usu√°rios` e `itens`

Agora, vamos incluir os `roteadores` dos subm√≥dulos `usu√°rios` e `itens`:

```Python hl_lines="10-11" title="app/main.py"
{!../../docs_src/bigger_applications/app/main.py!}
```

/// info | Informa√ß√£o

`users.router` cont√©m o `APIRouter` dentro do arquivo `app/routers/users.py`.

E `items.router` cont√©m o `APIRouter` dentro do arquivo `app/routers/items.py`.

///

Com `app.include_router()` podemos adicionar cada `APIRouter` ao aplicativo principal `FastAPI`.

Ele incluir√° todas as rotas daquele roteador como parte dele.

/// note | Detalhe T√©cnico

Na verdade, ele criar√° internamente uma *opera√ß√£o de rota* para cada *opera√ß√£o de rota* que foi declarada no `APIRouter`.

Ent√£o, nos bastidores, ele realmente funcionar√° como se tudo fosse o mesmo aplicativo √∫nico.

///

/// check

Voc√™ n√£o precisa se preocupar com desempenho ao incluir roteadores.

Isso levar√° microssegundos e s√≥ acontecer√° na inicializa√ß√£o.

Ent√£o n√£o afetar√° o desempenho. ‚ö°

///

### Incluir um `APIRouter` com um `prefix` personalizado, `tags`, `responses` e `dependencies`

Agora, vamos imaginar que sua organiza√ß√£o lhe deu o arquivo `app/internal/admin.py`.

Ele cont√©m um `APIRouter` com algumas *opera√ß√µes de rota* de administra√ß√£o que sua organiza√ß√£o compartilha entre v√°rios projetos.

Para este exemplo, ser√° super simples. Mas digamos que, como ele √© compartilhado com outros projetos na organiza√ß√£o, n√£o podemos modific√°-lo e adicionar um `prefix`, `dependencies`, `tags`, etc. diretamente ao `APIRouter`:

```Python hl_lines="3" title="app/internal/admin.py"
{!../../docs_src/bigger_applications/app/internal/admin.py!}
```

Mas ainda queremos definir um `prefixo` personalizado ao incluir o `APIRouter` para que todas as suas *opera√ß√µes de rota* comecem com `/admin`, queremos proteg√™-lo com as `depend√™ncias` que j√° temos para este projeto e queremos incluir `tags` e `responses`.

Podemos declarar tudo isso sem precisar modificar o `APIRouter` original passando esses par√¢metros para `app.include_router()`:

```Python hl_lines="14-17" title="app/main.py"
{!../../docs_src/bigger_applications/app/main.py!}
```

Dessa forma, o `APIRouter` original permanecer√° inalterado, para que possamos compartilhar o mesmo arquivo `app/internal/admin.py` com outros projetos na organiza√ß√£o.

O resultado √© que em nosso aplicativo, cada uma das *opera√ß√µes de rota* do m√≥dulo `admin` ter√°:

* O prefixo `/admin`.
* A tag `admin`.
* A depend√™ncia `get_token_header`.
* A resposta `418`. üçµ

Mas isso afetar√° apenas o `APIRouter` em nosso aplicativo, e n√£o em nenhum outro c√≥digo que o utilize.

Assim, por exemplo, outros projetos poderiam usar o mesmo `APIRouter` com um m√©todo de autentica√ß√£o diferente.

### Incluir uma *opera√ß√£o de rota*

Tamb√©m podemos adicionar *opera√ß√µes de rota* diretamente ao aplicativo `FastAPI`.

Aqui fazemos isso... s√≥ para mostrar que podemos ü§∑:

```Python hl_lines="21-23" title="app/main.py"
{!../../docs_src/bigger_applications/app/main.py!}
```

e funcionar√° corretamente, junto com todas as outras *opera√ß√µes de rota* adicionadas com `app.include_router()`.

/// info | Detalhes T√©cnicos

**Observa√ß√£o**: este √© um detalhe muito t√©cnico que voc√™ provavelmente pode **simplesmente pular**.

---

Os `APIRouter`s n√£o s√£o "montados", eles n√£o s√£o isolados do resto do aplicativo.

Isso ocorre porque queremos incluir suas *opera√ß√µes de rota* no esquema OpenAPI e nas interfaces de usu√°rio.

Como n√£o podemos simplesmente isol√°-los e "mont√°-los" independentemente do resto, as *opera√ß√µes de rota* s√£o "clonadas" (recriadas), n√£o inclu√≠das diretamente.

///

## Verifique a documenta√ß√£o autom√°tica da API

Agora, execute `uvicorn`, usando o m√≥dulo `app.main` e a vari√°vel `app`:

<div class="termy">

```console
$ uvicorn app.main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

E abra os documentos em <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Voc√™ ver√° a documenta√ß√£o autom√°tica da API, incluindo os caminhos de todos os subm√≥dulos, usando os caminhos (e prefixos) corretos e as tags corretas:

<img src="/img/tutorial/bigger-applications/image01.png">

## Incluir o mesmo roteador v√°rias vezes com `prefixos` diferentes

Voc√™ tamb√©m pode usar `.include_router()` v√°rias vezes com o *mesmo* roteador usando prefixos diferentes.

Isso pode ser √∫til, por exemplo, para expor a mesma API sob prefixos diferentes, por exemplo, `/api/v1` e `/api/latest`.

Esse √© um uso avan√ßado que voc√™ pode n√£o precisar, mas est√° l√° caso precise.

## Incluir um `APIRouter` em outro

Da mesma forma que voc√™ pode incluir um `APIRouter` em um aplicativo `FastAPI`, voc√™ pode incluir um `APIRouter` em outro `APIRouter` usando:

```Python
router.include_router(other_router)
```

Certifique-se de fazer isso antes de incluir `router` no aplicativo `FastAPI`, para que as *opera√ß√µes de rota* de `other_router` tamb√©m sejam inclu√≠das.


================================================
File: /docs/pt/docs/tutorial/body-fields.md
================================================
# Corpo - Campos

Da mesma forma que voc√™ pode declarar valida√ß√µes adicionais e metadados nos par√¢metros de *fun√ß√µes de opera√ß√µes de rota* com `Query`, `Path` e `Body`, voc√™ pode declarar valida√ß√µes e metadados dentro de modelos do Pydantic usando `Field` do Pydantic.

## Importe `Field`

Primeiro, voc√™ tem que import√°-lo:

{* ../../docs_src/body_fields/tutorial001.py hl[4] *}

/// warning | Aviso

Note que `Field` √© importado diretamente do `pydantic`, n√£o do `fastapi` como todo o resto (`Query`, `Path`, `Body`, etc).

///

## Declare atributos do modelo

Voc√™ pode ent√£o utilizar `Field` com atributos do modelo:

{* ../../docs_src/body_fields/tutorial001.py hl[11:14] *}

`Field` funciona da mesma forma que `Query`, `Path` e `Body`, ele possui todos os mesmos par√¢metros, etc.

/// note | Detalhes t√©cnicos

Na realidade, `Query`, `Path` e outros que voc√™ ver√° em seguida, criam objetos de subclasses de uma classe `Param` comum, que √© ela mesma uma subclasse da classe `FieldInfo` do Pydantic.

E `Field` do Pydantic retorna uma inst√¢ncia de `FieldInfo` tamb√©m.

`Body` tamb√©m retorna objetos de uma subclasse de `FieldInfo` diretamente. E tem outras que voc√™ ver√° mais tarde que s√£o subclasses da classe `Body`.

Lembre-se que quando voc√™ importa `Query`, `Path`, e outros de `fastapi`, esse s√£o na realidade fun√ß√µes que retornam classes especiais.

///

/// tip | Dica

Note como cada atributo do modelo com um tipo, valor padr√£o e `Field` possuem a mesma estrutura que par√¢metros de *fun√ß√µes de opera√ß√µes de rota*, com `Field` ao inv√©s de `Path`, `Query` e `Body`.

///

## Adicione informa√ß√µes extras

Voc√™ pode declarar informa√ß√£o extra em `Field`, `Query`, `Body`, etc. E isso ser√° inclu√≠do no JSON Schema gerado.

Voc√™ ir√° aprender mais sobre adicionar informa√ß√µes extras posteriormente nessa documenta√ß√£o, quando estiver aprendendo a declarar exemplos.

## Recapitulando

Voc√™ pode usar `Field` do Pydantic para declarar valida√ß√µes extras e metadados para atributos do modelo.

Voc√™ tamb√©m pode usar os argumentos de palavras-chave extras para passar metadados do JSON Schema adicionais.


================================================
File: /docs/pt/docs/tutorial/body-multiple-params.md
================================================
# Corpo - M√∫ltiplos par√¢metros

Agora que n√≥s vimos como usar `Path` e `Query`, veremos usos mais avan√ßados de declara√ß√µes no corpo da requisi√ß√£o.

## Misture `Path`, `Query` e par√¢metros de corpo

Primeiro, √© claro, voc√™ pode misturar `Path`, `Query` e declara√ß√µes de par√¢metro no corpo da requisi√ß√£o livremente e o **FastAPI** saber√° o que fazer.

E voc√™ tamb√©m pode declarar par√¢metros de corpo como opcionais, definindo o valor padr√£o com `None`:

{* ../../docs_src/body_multiple_params/tutorial001_py310.py hl[17:19] *}

/// note | Nota

Repare que, neste caso, o `item` que seria capturado a partir do corpo √© opcional. Visto que ele possui `None` como valor padr√£o.

///

## M√∫ltiplos par√¢metros de corpo

No exemplo anterior, as *opera√ß√µes de rota* esperariam um JSON no corpo contendo os atributos de um `Item`, exemplo:

```JSON
{
    "name": "Foo",
    "description": "The pretender",
    "price": 42.0,
    "tax": 3.2
}
```

Mas voc√™ pode tamb√©m declarar m√∫ltiplos par√¢metros de corpo, por exemplo, `item` e `user`:

{* ../../docs_src/body_multiple_params/tutorial002_py310.py hl[20] *}

Neste caso, o **FastAPI** perceber√° que existe mais de um par√¢metro de corpo na fun√ß√£o (dois par√¢metros que s√£o modelos Pydantic).

Ent√£o, ele usar√° o nome dos par√¢metros como chaves (nome dos campos) no corpo, e espera um corpo como:

```JSON
{
    "item": {
        "name": "Foo",
        "description": "The pretender",
        "price": 42.0,
        "tax": 3.2
    },
    "user": {
        "username": "dave",
        "full_name": "Dave Grohl"
    }
}
```

/// note | Nota

Repare que mesmo que o `item` esteja declarado da mesma maneira que antes, agora √© esperado que ele esteja dentro do corpo com uma chave `item`.

///

O **FastAPI** far√° a convers√£o autom√°tica a partir da requisi√ß√£o, assim esse par√¢metro `item` receber√° seu respectivo conte√∫do e o mesmo ocorrer√° com `user`.

Ele executar√° a valida√ß√£o dos dados compostos e ir√° document√°-los de maneira compat√≠vel com o esquema OpenAPI e documenta√ß√£o autom√°tica.

## Valores singulares no corpo

Assim como existem uma `Query` e uma `Path` para definir dados adicionais para par√¢metros de consulta e de rota, o **FastAPI** prov√™ o equivalente para `Body`.

Por exemplo, extendendo o modelo anterior, voc√™ poder decidir por ter uma outra chave `importance` no mesmo corpo, al√©m de `item` e `user`.

Se voc√™ declar√°-lo como √©, porque √© um valor singular, o **FastAPI** assumir√° que se trata de um par√¢metro de consulta.

Mas voc√™ pode instruir o **FastAPI** para trat√°-lo como outra chave do corpo usando `Body`:

{* ../../docs_src/body_multiple_params/tutorial003.py hl[22] *}

Neste caso, o **FastAPI** esperar√° um corpo como:

```JSON
{
    "item": {
        "name": "Foo",
        "description": "The pretender",
        "price": 42.0,
        "tax": 3.2
    },
    "user": {
        "username": "dave",
        "full_name": "Dave Grohl"
    },
    "importance": 5
}
```

Mais uma vez, ele converter√° os tipos de dados, validar, documentar, etc.

## M√∫ltiplos par√¢metros de corpo e consulta

Obviamente, voc√™ tamb√©m pode declarar par√¢metros de consulta assim que voc√™ precisar, de modo adicional a quaisquer par√¢metros de corpo.

Dado que, por padr√£o, valores singulares s√£o interpretados como par√¢metros de consulta, voc√™ n√£o precisa explicitamente adicionar uma `Query`, voc√™ pode somente:

```Python
q: Union[str, None] = None
```

Ou como em Python 3.10 e vers√µes superiores:

```Python
q: str | None = None
```

Por exemplo:

{* ../../docs_src/body_multiple_params/tutorial004_py310.py hl[26] *}

/// info | Informa√ß√£o

`Body` tamb√©m possui todas as valida√ß√µes adicionais e metadados de par√¢metros como em `Query`,`Path` e outras que voc√™ ver√° depois.

///

## Declare um √∫nico par√¢metro de corpo indicando sua chave

Suponha que voc√™ tem um √∫nico par√¢metro de corpo `item`, a partir de um modelo Pydantic `Item`.

Por padr√£o, o **FastAPI** esperar√° que seu conte√∫do venha no corpo diretamente.

Mas se voc√™ quiser que ele espere por um JSON com uma chave `item` e dentro dele os conte√∫dos do modelo, como ocorre ao declarar v√°rios par√¢metros de corpo, voc√™ pode usar o par√¢metro especial de `Body` chamado `embed`:

```Python
item: Item = Body(embed=True)
```

como em:

{* ../../docs_src/body_multiple_params/tutorial005_py310.py hl[15] *}

Neste caso o **FastAPI** esperar√° um corpo como:

```JSON hl_lines="2"
{
    "item": {
        "name": "Foo",
        "description": "The pretender",
        "price": 42.0,
        "tax": 3.2
    }
}
```

ao inv√©s de:

```JSON
{
    "name": "Foo",
    "description": "The pretender",
    "price": 42.0,
    "tax": 3.2
}
```

## Recapitulando

Voc√™ pode adicionar m√∫ltiplos par√¢metros de corpo para sua *fun√ß√£o de opera√ß√£o de rota*, mesmo que a requisi√ß√£o possa ter somente um √∫nico corpo.

E o **FastAPI** vai manipul√°-los, mandar para voc√™ os dados corretos na sua fun√ß√£o, e validar e documentar o schema correto na *opera√ß√£o de rota*.

Voc√™ tamb√©m pode declarar valores singulares para serem recebidos como parte do corpo.

E voc√™ pode instruir o **FastAPI** para requisitar no corpo a indica√ß√£o de chave mesmo quando existe somente um √∫nico par√¢metro declarado.


================================================
File: /docs/pt/docs/tutorial/body-nested-models.md
================================================
# Corpo - Modelos aninhados

Com o **FastAPI**, voc√™ pode definir, validar, documentar e usar modelos profundamente aninhados de forma arbitr√°ria (gra√ßas ao Pydantic).

## Campos do tipo Lista

Voc√™ pode definir um atributo como um subtipo. Por exemplo, uma `list` do Python:

{* ../../docs_src/body_nested_models/tutorial001.py hl[14] *}

Isso far√° com que tags seja uma lista de itens mesmo sem declarar o tipo dos elementos desta lista.

## Campos do tipo Lista com um par√¢metro de tipo

Mas o Python tem uma maneira espec√≠fica de declarar listas com tipos internos ou "par√¢metros de tipo":

### Importe `List` do typing

Primeiramente, importe `List` do m√≥dulo `typing` que j√° vem por padr√£o no Python:

{* ../../docs_src/body_nested_models/tutorial002.py hl[1] *}

### Declare a `List` com um par√¢metro de tipo

Para declarar tipos que t√™m par√¢metros de tipo(tipos internos), como `list`, `dict`, `tuple`:

* Importe os do modulo `typing`
* Passe o(s) tipo(s) interno(s) como "par√¢metros de tipo" usando colchetes: `[` e `]`

```Python
from typing import List

my_list: List[str]
```

Essa √© a sintaxe padr√£o do Python para declara√ß√µes de tipo.

Use a mesma sintaxe padr√£o para atributos de modelo com tipos internos.

Portanto, em nosso exemplo, podemos fazer com que `tags` sejam especificamente uma "lista de strings":


{* ../../docs_src/body_nested_models/tutorial002.py hl[14] *}

## Tipo "set"


Mas ent√£o, quando n√≥s pensamos mais, percebemos que as tags n√£o devem se repetir, elas provavelmente devem ser strings √∫nicas.

E que o Python tem um tipo de dados especial para conjuntos de itens √∫nicos, o `set`.

Ent√£o podemos importar `Set` e declarar `tags` como um `set` de `str`s:


{* ../../docs_src/body_nested_models/tutorial003.py hl[1,14] *}

Com isso, mesmo que voc√™ receba uma requisi√ß√£o contendo dados duplicados, ela ser√° convertida em um conjunto de itens exclusivos.

E sempre que voc√™ enviar esses dados como resposta, mesmo se a fonte tiver duplicatas, eles ser√£o gerados como um conjunto de itens exclusivos.

E tamb√©m teremos anota√ß√µes/documenta√ß√£o em conformidade.

## Modelos aninhados

Cada atributo de um modelo Pydantic tem um tipo.

Mas esse tipo pode ser outro modelo Pydantic.

Portanto, voc√™ pode declarar "objects" JSON profundamente aninhados com nomes, tipos e valida√ß√µes de atributos espec√≠ficos.

Tudo isso, aninhado arbitrariamente.

### Defina um sub-modelo

Por exemplo, n√≥s podemos definir um modelo `Image`:

{* ../../docs_src/body_nested_models/tutorial004.py hl[9:11] *}

### Use o sub-modelo como um tipo

E ent√£o podemos usa-lo como o tipo de um atributo:

{* ../../docs_src/body_nested_models/tutorial004.py hl[20] *}

Isso significa que o **FastAPI** vai esperar um corpo similar √†:

```JSON
{
    "name": "Foo",
    "description": "The pretender",
    "price": 42.0,
    "tax": 3.2,
    "tags": ["rock", "metal", "bar"],
    "image": {
        "url": "http://example.com/baz.jpg",
        "name": "The Foo live"
    }
}
```

Novamente, apenas fazendo essa declara√ß√£o, com o **FastAPI**, voc√™ ganha:

* Suporte do editor de texto (comple√ß√£o, etc), inclusive para modelos aninhados
* Convers√£o de dados
* Valida√ß√£o de dados
* Documenta√ß√£o automatica

## Tipos especiais e valida√ß√£o

Al√©m dos tipos singulares normais como `str`, `int`, `float`, etc. Voc√™ tamb√©m pode usar tipos singulares mais complexos que herdam de `str`.

Para ver todas as op√ß√µes poss√≠veis, cheque a documenta√ß√£o para os<a href="https://docs.pydantic.dev/latest/concepts/types/" class="external-link" target="_blank">tipos exoticos do Pydantic</a>. Voc√™ ver√° alguns exemplos no pr√≥ximo capitulo.

Por exemplo, no modelo `Image` n√≥s temos um campo `url`, n√≥s podemos declara-lo como um `HttpUrl` do Pydantic inv√©s de como uma `str`:

{* ../../docs_src/body_nested_models/tutorial005.py hl[4,10] *}

A string ser√° verificada para se tornar uma URL v√°lida e documentada no esquema JSON/1OpenAPI como tal.

## Atributos como listas de submodelos

Voc√™ tamb√©m pode usar modelos Pydantic como subtipos de `list`, `set`, etc:

{* ../../docs_src/body_nested_models/tutorial006.py hl[20] *}

Isso vai esperar(converter, validar, documentar, etc) um corpo JSON tal qual:

```JSON hl_lines="11"
{
    "name": "Foo",
    "description": "The pretender",
    "price": 42.0,
    "tax": 3.2,
    "tags": [
        "rock",
        "metal",
        "bar"
    ],
    "images": [
        {
            "url": "http://example.com/baz.jpg",
            "name": "The Foo live"
        },
        {
            "url": "http://example.com/dave.jpg",
            "name": "The Baz"
        }
    ]
}
```

/// info | informa√ß√£o

Note como o campo `images` agora tem uma lista de objetos de image.

///

## Modelos profundamente aninhados

Voc√™ pode definir modelos profundamente aninhados de forma arbitr√°ria:

{* ../../docs_src/body_nested_models/tutorial007.py hl[9,14,20,23,27] *}

/// info | informa√ß√£o

Note como `Offer` tem uma lista de `Item`s, que por sua vez possui opcionalmente uma lista `Image`s

///

## Corpos de listas puras

Se o valor de primeiro n√≠vel do corpo JSON que voc√™ espera for um `array` do JSON (uma` lista` do Python), voc√™ pode declarar o tipo no par√¢metro da fun√ß√£o, da mesma forma que nos modelos do Pydantic:


```Python
images: List[Image]
```

como em:

{* ../../docs_src/body_nested_models/tutorial008.py hl[15] *}

## Suporte de editor em todo canto

E voc√™ obt√©m suporte do editor em todos os lugares.

Mesmo para itens dentro de listas:

<img src="/img/tutorial/body-nested-models/image01.png">

Voc√™ n√£o conseguiria este tipo de suporte de editor se estivesse trabalhando diretamente com `dict` em vez de modelos Pydantic.

Mas voc√™ tamb√©m n√£o precisa se preocupar com eles, os dicts de entrada s√£o convertidos automaticamente e sua sa√≠da √© convertida automaticamente para JSON tamb√©m.

## Corpos de `dict`s arbitr√°rios

Voc√™ tamb√©m pode declarar um corpo como um `dict` com chaves de algum tipo e valores de outro tipo.

Sem ter que saber de antem√£o quais s√£o os nomes de campos/atributos v√°lidos (como seria o caso dos modelos Pydantic).

Isso seria √∫til se voc√™ deseja receber chaves que ainda n√£o conhece.

---

Outro caso √∫til √© quando voc√™ deseja ter chaves de outro tipo, por exemplo, `int`.

√â isso que vamos ver aqui.

Neste caso, voc√™ aceitaria qualquer `dict`, desde que tenha chaves` int` com valores `float`:

{* ../../docs_src/body_nested_models/tutorial009.py hl[9] *}

/// tip | Dica

Leve em condidera√ß√£o que o JSON s√≥ suporta `str` como chaves.

Mas o Pydantic tem convers√£o autom√°tica de dados.

Isso significa que, embora os clientes da API s√≥ possam enviar strings como chaves, desde que essas strings contenham inteiros puros, o Pydantic ir√° convert√™-los e valid√°-los.

E o `dict` que voc√™ recebe como `weights` ter√°, na verdade, chaves `int` e valores` float`.

///

## Recapitula√ß√£o

Com **FastAPI** voc√™ tem a flexibilidade m√°xima fornecida pelos modelos Pydantic, enquanto seu c√≥digo √© mantido simples, curto e elegante.

Mas com todos os benef√≠cios:

* Suporte do editor (comple√ß√£o em todo canto!)
* Convers√£o de dados (leia-se parsing/serializa√ß√£o)
* Valida√ß√£o de dados
* Documenta√ß√£o dos esquemas
* Documenta√ß√£o autom√°tica


================================================
File: /docs/pt/docs/tutorial/body-updates.md
================================================
# Corpo - Atualiza√ß√µes

## Atualiza√ß√£o de dados existentes com `PUT`

Para atualizar um item, voc√™ pode usar a opera√ß√£o <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT" class="external-link" target="_blank">HTTP `PUT`</a>.

Voc√™ pode usar `jsonable_encoder` para converter os dados de entrada em dados que podem ser armazenados como JSON (por exemplo, com um banco de dados NoSQL). Por exemplo, convertendo `datetime` em `str`.

{* ../../docs_src/body_updates/tutorial001_py310.py hl[28:33] *}

`PUT` √© usado para receber dados que devem substituir os dados existentes.

### Aviso sobre a substitui√ß√£o

Isso significa que, se voc√™ quiser atualizar o item `bar` usando `PUT` com um corpo contendo:

```Python
{
    "name": "Barz",
    "price": 3,
    "description": None,
}
```

Como ele n√£o inclui o atributo j√° armazenado `"tax": 20.2`, o modelo de entrada assumiria o valor padr√£o de `"tax": 10.5`.

E os dados seriam salvos com esse "novo" `tax` de `10.5`.

## Atualiza√ß√µes parciais com `PATCH`

Voc√™ tamb√©m pode usar a opera√ß√£o <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH" class="external-link" target="_blank">HTTP `PATCH`</a> para *atualizar* parcialmente os dados.

Isso significa que voc√™ pode enviar apenas os dados que deseja atualizar, deixando o restante intacto.

/// note | Nota

`PATCH` √© menos comumente usado e conhecido do que `PUT`.

E muitas equipes usam apenas `PUT`, mesmo para atualiza√ß√µes parciais.

Voc√™ √© **livre** para us√°-los como preferir, **FastAPI** n√£o imp√µe restri√ß√µes.

Mas este guia te d√° uma ideia de como eles s√£o destinados a serem usados.

///

### Usando o par√¢metro `exclude_unset` do Pydantic

Se voc√™ quiser receber atualiza√ß√µes parciais, √© muito √∫til usar o par√¢metro `exclude_unset` no m√©todo `.model_dump()` do modelo do Pydantic.

Como `item.model_dump(exclude_unset=True)`.

/// info | Informa√ß√£o

No Pydantic v1, o m√©todo que era chamado `.dict()` e foi depreciado (mas ainda suportado) no Pydantic v2. Agora, deve-se usar o m√©todo `.model_dump()`.

Os exemplos aqui usam `.dict()` para compatibilidade com o Pydantic v1, mas voc√™ deve usar `.model_dump()` a partir do Pydantic v2.

///

Isso gera um `dict` com apenas os dados definidos ao criar o modelo `item`, excluindo os valores padr√£o.

Ent√£o, voc√™ pode usar isso para gerar um `dict` com apenas os dados definidos (enviados na solicita√ß√£o), omitindo valores padr√£o:

{* ../../docs_src/body_updates/tutorial002_py310.py hl[32] *}

### Usando o par√¢metro `update` do Pydantic

Agora, voc√™ pode criar uma c√≥pia do modelo existente usando `.model_copy()`, e passar o par√¢metro `update` com um `dict` contendo os dados para atualizar.

/// info | Informa√ß√£o

No Pydantic v1, o m√©todo era chamado `.copy()`, ele foi depreciado (mas ainda suportado) no Pydantic v2, e renomeado para `.model_copy()`.

Os exemplos aqui usam `.copy()` para compatibilidade com o Pydantic v1, mas voc√™ deve usar `.model_copy()` com o Pydantic v2.

///

Como `stored_item_model.model_copy(update=update_data)`:

{* ../../docs_src/body_updates/tutorial002_py310.py hl[33] *}

### Recapitulando as atualiza√ß√µes parciais

Resumindo, para aplicar atualiza√ß√µes parciais voc√™ pode:

* (Opcionalmente) usar `PATCH` em vez de `PUT`.
* Recuperar os dados armazenados.
* Colocar esses dados em um modelo do Pydantic.
* Gerar um `dict` sem valores padr√£o a partir do modelo de entrada (usando `exclude_unset`).
    * Dessa forma, voc√™ pode atualizar apenas os valores definidos pelo usu√°rio, em vez de substituir os valores j√° armazenados com valores padr√£o em seu modelo.
* Criar uma c√≥pia do modelo armazenado, atualizando seus atributos com as atualiza√ß√µes parciais recebidas (usando o par√¢metro `update`).
* Converter o modelo copiado em algo que possa ser armazenado no seu banco de dados (por exemplo, usando o `jsonable_encoder`).
    * Isso √© compar√°vel ao uso do m√©todo `.model_dump()`, mas garante (e converte) os valores para tipos de dados que possam ser convertidos em JSON, por exemplo, `datetime` para `str`.
* Salvar os dados no seu banco de dados.
* Retornar o modelo atualizado.

{* ../../docs_src/body_updates/tutorial002_py310.py hl[28:35] *}

/// tip | Dica

Voc√™ pode realmente usar essa mesma t√©cnica com uma opera√ß√£o HTTP `PUT`.

Mas o exemplo aqui usa `PATCH` porque foi criado para esses casos de uso.

///

/// note | Nota

Observe que o modelo de entrada ainda √© validado.

Portanto, se voc√™ quiser receber atualiza√ß√µes parciais que possam omitir todos os atributos, precisar√° ter um modelo com todos os atributos marcados como opcionais (com valores padr√£o ou `None`).

Para distinguir os modelos com todos os valores opcionais para **atualiza√ß√µes** e modelos com valores obrigat√≥rios para **cria√ß√£o**, voc√™ pode usar as ideias descritas em [Modelos Adicionais](extra-models.md){.internal-link target=_blank}.

///


================================================
File: /docs/pt/docs/tutorial/body.md
================================================
# Corpo da Requisi√ß√£o

Quando voc√™ precisa enviar dados de um cliente (como de um navegador web) para sua API, voc√™ o envia como um **corpo da requisi√ß√£o**.

O corpo da **requisi√ß√£o** √© a informa√ß√£o enviada pelo cliente para sua API. O corpo da **resposta** √© a informa√ß√£o que sua API envia para o cliente.

Sua API quase sempre ir√° enviar um corpo na **resposta**. Mas os clientes n√£o necessariamente precisam enviar um corpo em toda **requisi√ß√£o**.

Para declarar um corpo da **requisi√ß√£o**, voc√™ utiliza os modelos do <a href="https://docs.pydantic.dev/" class="external-link" target="_blank">Pydantic</a> com todos os seus poderes e benef√≠cios.

/// info | Informa√ß√£o

Para enviar dados, voc√™ deve usar utilizar um dos m√©todos: `POST` (Mais comum), `PUT`, `DELETE` ou `PATCH`.

Enviar um corpo em uma requisi√ß√£o `GET` n√£o tem um comportamento definido nas especifica√ß√µes, por√©m √© suportado pelo FastAPI, apenas para casos de uso bem complexos/extremos.

Como √© desencorajado, a documenta√ß√£o interativa com Swagger UI n√£o ir√° mostrar a documenta√ß√£o para o corpo da requisi√ß√£o para um `GET`, e proxies que intermediarem podem n√£o suportar o corpo da requisi√ß√£o.

///

## Importe o `BaseModel` do Pydantic

Primeiro, voc√™ precisa importar `BaseModel` do `pydantic`:

{* ../../docs_src/body/tutorial001.py hl[4] *}

## Crie seu modelo de dados

Ent√£o voc√™ declara seu modelo de dados como uma classe que herda `BaseModel`.

Utilize os tipos Python padr√£o para todos os atributos:

{* ../../docs_src/body/tutorial001.py hl[7:11] *}

Assim como quando declaramos par√¢metros de consulta, quando um atributo do modelo possui um valor padr√£o, ele se torna opcional. Caso contr√°rio, se torna obrigat√≥rio. Use `None` para torn√°-lo opcional.

Por exemplo, o modelo acima declara um JSON "`object`" (ou `dict` no Python) como esse:

```JSON
{
    "name": "Foo",
    "description": "Uma descri√ß√£o opcional",
    "price": 45.2,
    "tax": 3.5
}
```

...como `description` e `tax` s√£o opcionais (Com um valor padr√£o de `None`), esse JSON "`object`" tamb√©m √© v√°lido:

```JSON
{
    "name": "Foo",
    "price": 45.2
}
```

## Declare como um par√¢metro

Para adicionar o corpo na *fun√ß√£o de opera√ß√£o de rota*, declare-o da mesma maneira que voc√™ declarou par√¢metros de rota e consulta:

{* ../../docs_src/body/tutorial001.py hl[18] *}

...E declare o tipo como o modelo que voc√™ criou, `Item`.

## Resultados

Apenas com esse declara√ß√£o de tipos do Python, o **FastAPI** ir√°:

* Ler o corpo da requisi√ß√£o como um JSON.
* Converter os tipos correspondentes (se necess√°rio).
* Validar os dados.
    * Se algum dados for inv√°lido, ir√° retornar um erro bem claro, indicando exatamente onde e o que est√° incorreto.
* Entregar a voc√™ a informa√ß√£o recebida no par√¢metro `item`.
    * Como voc√™ o declarou na fun√ß√£o como do tipo `Item`, voc√™ tamb√©m ter√° o suporte do editor (completa√ß√£o, etc) para todos os atributos e seus tipos.
* Gerar um <a href="https://json-schema.org" class="external-link" target="_blank">Esquema JSON</a> com as defini√ß√µes do seu modelo, voc√™ tamb√©m pode utiliz√°-lo em qualquer lugar que quiser, se fizer sentido para seu projeto.
* Esses esquemas far√£o parte do esquema OpenAPI, e utilizados nas <abbr title="User Interfaces">UIs</abbr> de documenta√ß√£o autom√°tica.

## Documenta√ß√£o autom√°tica

Os esquemas JSON dos seus modelos far√£o parte do esquema OpenAPI gerado para sua aplica√ß√£o, e aparecer√£o na documenta√ß√£o interativa da API:

<img src="/img/tutorial/body/image01.png">

E tamb√©m ser√£o utilizados em cada *fun√ß√£o de opera√ß√£o de rota* que utiliz√°-los:

<img src="/img/tutorial/body/image02.png">

## Suporte do editor de texto:

No seu editor de texto, dentro da fun√ß√£o voc√™ receber√° dicas de tipos e completa√ß√£o em todo lugar (isso n√£o aconteceria se voc√™ recebesse um `dict` em vez de um modelo Pydantic):

<img src="/img/tutorial/body/image03.png">

Voc√™ tamb√©m poder√° receber verifica√ß√µes de erros para opera√ß√µes de tipos incorretas:

<img src="/img/tutorial/body/image04.png">

Isso n√£o √© por acaso, todo o framework foi constru√≠do em volta deste design.

E foi imensamente testado na fase de design, antes de qualquer implementa√ß√£o, para garantir que funcionaria para todos os editores de texto.

Houveram mudan√ßas no pr√≥prio Pydantic para que isso fosse poss√≠vel.

As capturas de tela anteriores foram capturas no <a href="https://code.visualstudio.com" class="external-link" target="_blank">Visual Studio Code</a>.

Mas voc√™ ter√° o mesmo suporte do editor no <a href="https://www.jetbrains.com/pycharm/" class="external-link" target="_blank">PyCharm</a> e na maioria dos editores Python:

<img src="/img/tutorial/body/image05.png">

/// tip | Dica

Se voc√™ utiliza o <a href="https://www.jetbrains.com/pycharm/" class="external-link" target="_blank">PyCharm</a> como editor, voc√™ pode utilizar o <a href="https://github.com/koxudaxi/pydantic-pycharm-plugin/" class="external-link" target="_blank">Plugin do Pydantic para o PyCharm </a>.

Melhora o suporte do editor para seus modelos Pydantic com::

* completa√ß√£o autom√°tica
* verifica√ß√£o de tipos
* refatora√ß√£o
* buscas
* inspe√ß√µes

///

## Use o modelo

Dentro da fun√ß√£o, voc√™ pode acessar todos os atributos do objeto do modelo diretamente:

{* ../../docs_src/body/tutorial002.py hl[21] *}

## Corpo da requisi√ß√£o + par√¢metros de rota

Voc√™ pode declarar par√¢metros de rota e corpo da requisi√ß√£o ao mesmo tempo.

O **FastAPI** ir√° reconhecer que os par√¢metros da fun√ß√£o que combinam com par√¢metros de rota devem ser **retirados da rota**, e par√¢metros da fun√ß√£o que s√£o declarados como modelos Pydantic sejam **retirados do corpo da requisi√ß√£o**.

{* ../../docs_src/body/tutorial003.py hl[17:18] *}

## Corpo da requisi√ß√£o + par√¢metros de rota + par√¢metros de consulta

Voc√™ tamb√©m pode declarar par√¢metros de **corpo**, **rota** e **consulta**, ao mesmo tempo.

O **FastAPI** ir√° reconhecer cada um deles e retirar a informa√ß√£o do local correto.

{* ../../docs_src/body/tutorial004.py hl[18] *}

Os par√¢metros da fun√ß√£o ser√£o reconhecidos conforme abaixo:

* Se o par√¢metro tamb√©m √© declarado na **rota**, ser√° utilizado como um par√¢metro de rota.
* Se o par√¢metro √© de um **tipo √∫nico** (como `int`, `float`, `str`, `bool`, etc) ser√° interpretado como um par√¢metro de **consulta**.
* Se o par√¢metro √© declarado como um **modelo Pydantic**, ser√° interpretado como o **corpo** da requisi√ß√£o.

/// note | Observa√ß√£o

O FastAPI saber√° que o valor de `q` n√£o √© obrigat√≥rio por causa do valor padr√£o `= None`.

O `Union` em `Union[str, None]` n√£o √© utilizado pelo FastAPI, mas permite ao seu editor de texto lhe dar um suporte melhor e detectar erros.

///

## Sem o Pydantic

Se voc√™ n√£o quer utilizar os modelos Pydantic, voc√™ tamb√©m pode utilizar o par√¢metro **Body**. Veja a documenta√ß√£o para [Body - Par√¢metros m√∫ltiplos: Valores singulares no body](body-multiple-params.md#valores-singulares-no-corpo){.internal-link target=_blank}.


================================================
File: /docs/pt/docs/tutorial/cookie-param-models.md
================================================
# Modelos de Par√¢metros de Cookie

Se voc√™ possui um grupo de **cookies** que est√£o relacionados, voc√™ pode criar um **modelo Pydantic** para declar√°-los. üç™

Isso lhe permitiria **reutilizar o modelo** em **diversos lugares** e tamb√©m declarar valida√ß√µes e metadata para todos os par√¢metros de uma vez. üòé

/// note | Nota

Isso √© suportado desde a vers√£o `0.115.0` do FastAPI. ü§ì

///

/// tip | Dica

Essa mesma t√©cnica se aplica para `Query`, `Cookie`, e `Header`. üòé

///

## Cookies com Modelos Pydantic

Declare o par√¢metro de **cookie** que voc√™ precisa em um **modelo Pydantic**, e depois declare o par√¢metro como um `Cookie`:

{* ../../docs_src/cookie_param_models/tutorial001_an_py310.py hl[9:12,16] *}

O **FastAPI** ir√° **extrair** os dados para **cada campo** dos **cookies** recebidos na requisi√ß√£o e lhe fornecer o modelo Pydantic que voc√™ definiu.

## Verifique os Documentos

Voc√™ pode ver os cookies definidos na IU dos documentos em `/docs`:

<div class="screenshot">
<img src="/img/tutorial/cookie-param-models/image01.png">
</div>

/// info | Informa√ß√£o

Tenha em mente que, como os **navegadores lidam com cookies** de maneira especial e por baixo dos panos, eles **n√£o** permitem facilmente que o **JavaScript** lidem com eles.

Se voc√™ for na **IU de documentos da API** em `/docs` voc√™ poder√° ver a **documenta√ß√£o** para cookies das suas *opera√ß√µes de rotas*.

Mas mesmo que voc√™ **adicionar os dados** e clicar em "Executar", pelo motivo da IU dos documentos trabalharem com **JavaScript**, os cookies n√£o ser√£o enviados, e voc√™ ver√° uma mensagem de **erro** como se voc√™ n√£o tivesse escrito nenhum dado.

///

## Proibir Cookies Adicionais

Em alguns casos especiais (provavelmente n√£o muito comuns), voc√™ pode querer **restringir** os cookies que voc√™ deseja receber.

Agora a sua API possui o poder de contrar o seu pr√≥prio <abbr title="Isso √© uma brincadeira, s√≥ por precau√ß√£o. Isso n√£o tem nada a ver com consentimentos de cookies, mas √© engra√ßado que at√© a API consegue rejeitar os coitados dos cookies. Coma um biscoito. üç™">consentimento de cookie</abbr>. ü§™üç™


 Voc√™ pode utilizar a configura√ß√£o do modelo Pydantic para `proibir` qualquer campo `extra`.


{* ../../docs_src/cookie_param_models/tutorial002_an_py39.py hl[10] *}

Se o cliente tentar enviar alguns **cookies extras**, eles receber√£o um retorno de **erro**.

Coitados dos banners de cookies com todo o seu esfor√ßo para obter o seu consentimento para a <abbr title="Isso √© uma outra piada. N√£o preste aten√ß√£o em mim. Beba um caf√© com o seu cookie. ‚òï">API rejeit√°-lo</abbr>. üç™

Por exemplo, se o cliente tentar enviar um cookie `santa_tracker` com o valor de `good-list-please`, o cliente receber√° uma resposta de **erro** informando que o <abbr title="O papai noel desaprova a falta de biscoitos. üéÖ Ok, chega de piadas com os cookies.">cookie `santa_tracker` is not allowed</abbr>:

```json
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["cookie", "santa_tracker"],
            "msg": "Extra inputs are not permitted",
            "input": "good-list-please",
        }
    ]
}
```

## Resumo

Voc√™ consegue utilizar **modelos Pydantic** para declarar <abbr title="Coma um √∫ltimo biscoito antes de voc√™ ir embora. üç™">**cookies**</abbr> no **FastAPI**. üòé


================================================
File: /docs/pt/docs/tutorial/cookie-params.md
================================================
# Par√¢metros de Cookie

Voc√™ pode definir par√¢metros de Cookie da mesma maneira que define param√™tros com `Query` e `Path`.

## Importe `Cookie`

Primeiro importe `Cookie`:

{* ../../docs_src/cookie_params/tutorial001_an_py310.py hl[3] *}

## Declare par√¢metros de `Cookie`

Ent√£o declare os param√™tros de cookie usando a mesma estrutura que em `Path` e `Query`.

Voc√™ pode definir o valor padr√£o, assim como todas as valida√ß√µes extras ou par√¢metros de anota√ß√£o:


{* ../../docs_src/cookie_params/tutorial001_an_py310.py hl[9] *}

/// note | Detalhes T√©cnicos

`Cookie` √© uma classe "irm√£" de `Path` e `Query`. Ela tamb√©m herda da mesma classe em comum `Param`.

Mas lembre-se que quando voc√™ importa `Query`, `Path`, `Cookie` e outras de `fastapi`, elas s√£o na verdade fun√ß√µes que retornam classes especiais.

///

/// info | Informa√ß√£o

Para declarar cookies, voc√™ precisa usar `Cookie`, pois caso contr√°rio, os par√¢metros seriam interpretados como par√¢metros de consulta.

///

## Recapitulando

Declare cookies com `Cookie`, usando o mesmo padr√£o comum que utiliza-se em `Query` e `Path`.


================================================
File: /docs/pt/docs/tutorial/cors.md
================================================
# CORS (Cross-Origin Resource Sharing)

<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" class="external-link" target="_blank">CORS ou "Cross-Origin Resource Sharing"</a> refere-se √†s situa√ß√µes em que um frontend rodando em um navegador possui um c√≥digo JavaScript que se comunica com um backend, e o backend est√° em uma "origem" diferente do frontend.

## Origem

Uma origem √© a combina√ß√£o de protocolo (`http`, `https`), dom√≠nio (`myapp.com`, `localhost`, `localhost.tiangolo.com`), e porta (`80`, `443`, `8080`).

Ent√£o, todos estes s√£o origens diferentes:

* `http://localhost`
* `https://localhost`
* `http://localhost:8080`

Mesmo se todos estiverem em `localhost`, eles usam diferentes protocolos e portas, portanto, s√£o "origens" diferentes.

## Passos

Ent√£o, digamos que voc√™ tenha um frontend rodando no seu navegador em `http://localhost:8080`, e seu JavaScript esteja tentando se comunicar com um backend rodando em http://localhost (como n√£o especificamos uma porta, o navegador assumir√° a porta padr√£o `80`).

Portanto, o navegador ir√° enviar uma requisi√ß√£o HTTP `OPTIONS` ao backend, e se o backend enviar os cabe√ßalhos apropriados autorizando a comunica√ß√£o a partir de uma origem diferente (`http://localhost:8080`) ent√£o o navegador deixar√° o JavaScript no frontend enviar sua requisi√ß√£o para o backend.

Para conseguir isso, o backend deve ter uma lista de "origens permitidas".

Neste caso, ele ter√° que incluir `http://localhost:8080` para o frontend funcionar corretamente.

## Curingas

√â poss√≠vel declarar uma lista com `"*"` (um "curinga") para dizer que tudo est√° permitido.

Mas isso s√≥ permitir√° certos tipos de comunica√ß√£o, excluindo tudo que envolva credenciais: cookies, cabe√ßalhos de autoriza√ß√£o como aqueles usados ‚Äã‚Äãcom Bearer Tokens, etc.

Ent√£o, para que tudo funcione corretamente, √© melhor especificar explicitamente as origens permitidas.

## Usar `CORSMiddleware`

Voc√™ pode configur√°-lo em sua aplica√ß√£o **FastAPI** usando o `CORSMiddleware`.

* Importe `CORSMiddleware`.
* Crie uma lista de origens permitidas (como strings).
* Adicione-a como um "middleware" √† sua aplica√ß√£o **FastAPI**.

Voc√™ tamb√©m pode especificar se o seu backend permite:

* Credenciais (Cabe√ßalhos de autoriza√ß√£o, Cookies, etc).
* M√©todos HTTP espec√≠ficos (`POST`, `PUT`) ou todos eles com o curinga `"*"`.
* Cabe√ßalhos HTTP espec√≠ficos ou todos eles com o curinga `"*"`.

{* ../../docs_src/cors/tutorial001.py hl[2,6:11,13:19] *}

Os par√¢metros padr√£o usados ‚Äã‚Äãpela implementa√ß√£o `CORSMiddleware` s√£o restritivos por padr√£o, ent√£o voc√™ precisar√° habilitar explicitamente as origens, m√©todos ou cabe√ßalhos espec√≠ficos para que os navegadores tenham permiss√£o para us√°-los em um contexto de dom√≠nios diferentes.

Os seguintes argumentos s√£o suportados:

* `allow_origins` - Uma lista de origens que devem ter permiss√£o para fazer requisi√ß√µes de origem cruzada. Por exemplo, `['https://example.org', 'https://www.example.org']`. Voc√™ pode usar `['*']` para permitir qualquer origem.
* `allow_origin_regex` - Uma string regex para corresponder √†s origens que devem ter permiss√£o para fazer requisi√ß√µes de origem cruzada. Por exemplo, `'https://.*\.example\.org'`.
* `allow_methods` - Uma lista de m√©todos HTTP que devem ser permitidos para requisi√ß√µes de origem cruzada. O padr√£o √© `['GET']`. Voc√™ pode usar `['*']` para permitir todos os m√©todos padr√£o.
* `allow_headers` - Uma lista de cabe√ßalhos de solicita√ß√£o HTTP que devem ter suporte para requisi√ß√µes de origem cruzada. O padr√£o √© `[]`. Voc√™ pode usar `['*']` para permitir todos os cabe√ßalhos. Os cabe√ßalhos `Accept`, `Accept-Language`, `Content-Language` e `Content-Type` s√£o sempre permitidos para <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests" class="external-link" rel="noopener" target="_blank">requisi√ß√µes CORS simples</a>.
* `allow_credentials` - Indica que os cookies devem ser suportados para requisi√ß√µes de origem cruzada. O padr√£o √© `False`. Al√©m disso, `allow_origins` n√£o pode ser definido como `['*']` para que as credenciais sejam permitidas, as origens devem ser especificadas.
* `expose_headers` - Indica quaisquer cabe√ßalhos de resposta que devem ser disponibilizados ao navegador. O padr√£o √© `[]`.
* `max_age` - Define um tempo m√°ximo em segundos para os navegadores armazenarem em cache as respostas CORS. O padr√£o √© `600`.

O middleware responde a dois tipos espec√≠ficos de solicita√ß√£o HTTP...

### Requisi√ß√µes CORS pr√©-voo (preflight)

Estas s√£o quaisquer solicita√ß√µes `OPTIONS` com cabe√ßalhos `Origin` e `Access-Control-Request-Method`.

Nesse caso, o middleware interceptar√° a solicita√ß√£o recebida e responder√° com cabe√ßalhos CORS apropriados e uma resposta `200` ou `400` para fins informativos.

### Requisi√ß√µes Simples

Qualquer solicita√ß√£o com um cabe√ßalho `Origin`. Neste caso, o middleware passar√° a solicita√ß√£o normalmente, mas incluir√° cabe√ßalhos CORS apropriados na resposta.

## Mais informa√ß√µes

Para mais informa√ß√µes <abbr title="Cross-Origin Resource Sharing">CORS</abbr>, acesse <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" class="external-link" target="_blank">Mozilla CORS documentation</a>.

/// note | Detalhes t√©cnicos

Voc√™ tamb√©m pode usar `from starlette.middleware.cors import CORSMiddleware`.

**FastAPI** fornece v√°rios middlewares em `fastapi.middleware` apenas como uma conveni√™ncia para voc√™, o desenvolvedor. Mas a maioria dos middlewares dispon√≠veis v√™m diretamente da Starlette.

///


================================================
File: /docs/pt/docs/tutorial/debugging.md
================================================
# Depura√ß√£o

Voc√™ pode conectar o depurador no seu editor, por exemplo, com o Visual Studio Code ou PyCharm.

## Chamar `uvicorn`

Em seu aplicativo FastAPI, importe e execute `uvicorn` diretamente:

{* ../../docs_src/debugging/tutorial001.py hl[1,15] *}

### Sobre `__name__ == "__main__"`

O objetivo principal de `__name__ == "__main__"` √© ter algum c√≥digo que seja executado quando seu arquivo for chamado com:

<div class="termy">

```console
$ python myapp.py
```

</div>

mas n√£o √© chamado quando outro arquivo o importa, como em:

```Python
from myapp import app
```

#### Mais detalhes

Digamos que seu arquivo se chama `myapp.py`.

Se voc√™ execut√°-lo com:

<div class="termy">

```console
$ python myapp.py
```

</div>

ent√£o a vari√°vel interna `__name__` no seu arquivo, criada automaticamente pelo Python, ter√° como valor a string `"__main__"`.

Ent√£o, a se√ß√£o:

```Python
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

vai executar.

---

Isso n√£o acontecer√° se voc√™ importar esse m√≥dulo (arquivo).

Ent√£o, se voc√™ tiver outro arquivo `importer.py` com:

```Python
from myapp import app

# Mais um pouco de c√≥digo
```

nesse caso, a vari√°vel criada automaticamente dentro de `myapp.py` n√£o ter√° a vari√°vel `__name__` com o valor `"__main__"`.

Ent√£o, a linha:

```Python
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

n√£o ser√° executada.

/// info | Informa√ß√£o

Para mais informa√ß√µes, consulte <a href="https://docs.python.org/3/library/__main__.html" class="external-link" target="_blank">a documenta√ß√£o oficial do Python</a>.

///

## Execute seu c√≥digo com seu depurador

Como voc√™ est√° executando o servidor Uvicorn diretamente do seu c√≥digo, voc√™ pode chamar seu programa Python (seu aplicativo FastAPI) diretamente do depurador.

---

Por exemplo, no Visual Studio Code, voc√™ pode:

* Ir para o painel "Debug".
* "Add configuration...".
* Selecionar "Python"
* Executar o depurador com a op√ß√£o "`Python: Current File (Integrated Terminal)`".

Em seguida, ele iniciar√° o servidor com seu c√≥digo **FastAPI**, parar√° em seus pontos de interrup√ß√£o, etc.

Veja como pode parecer:

<img src="/img/tutorial/debugging/image01.png">

---

Se voc√™ usar o Pycharm, voc√™ pode:

* Abrir o menu "Executar".
* Selecionar a op√ß√£o "Depurar...".
* Ent√£o um menu de contexto aparece.
* Selecionar o arquivo para depurar (neste caso, `main.py`).

Em seguida, ele iniciar√° o servidor com seu c√≥digo **FastAPI**, parar√° em seus pontos de interrup√ß√£o, etc.

Veja como pode parecer:

<img src="/img/tutorial/debugging/image02.png">


================================================
File: /docs/pt/docs/tutorial/encoder.md
================================================
# Codificador Compat√≠vel com JSON

Existem alguns casos em que voc√™ pode precisar converter um tipo de dados (como um modelo Pydantic) para algo compat√≠vel com JSON (como um `dict`, `list`, etc).

Por exemplo, se voc√™ precisar armazen√°-lo em um banco de dados.

Para isso, **FastAPI** fornece uma fun√ß√£o `jsonable_encoder()`.

## Usando a fun√ß√£o `jsonable_encoder`

Vamos imaginar que voc√™ tenha um banco de dados `fake_db` que recebe apenas dados compat√≠veis com JSON.

Por exemplo, ele n√£o recebe objetos `datetime`, pois estes objetos n√£o s√£o compat√≠veis com JSON.

Ent√£o, um objeto `datetime` teria que ser convertido em um `str` contendo os dados no formato  <a href="https://en.wikipedia.org/wiki/ISO_8601" class="external-link" target="_blank">ISO</a>.

Da mesma forma, este banco de dados n√£o receberia um modelo Pydantic (um objeto com atributos), apenas um `dict`.

Voc√™ pode usar a fun√ß√£o `jsonable_encoder` para resolver isso.

A fun√ß√£o recebe um objeto, como um modelo Pydantic e retorna uma vers√£o compat√≠vel com JSON:

{* ../../docs_src/encoder/tutorial001_py310.py hl[4,21] *}

Neste exemplo, ele converteria o modelo Pydantic em um `dict`, e o `datetime` em um `str`.

O resultado de chamar a fun√ß√£o √© algo que pode ser codificado com o padr√£o do Python <a href="https://docs.python.org/3/library/json.html#json.dumps" class="external-link" target="_blank">`json.dumps()`</a>.

A fun√ß√£o n√£o retorna um grande `str` contendo os dados no formato JSON (como uma string). Mas sim, retorna uma estrutura de dados padr√£o do Python (por exemplo, um `dict`) com valores e subvalores compat√≠veis com JSON.

/// note | Nota

`jsonable_encoder` √© realmente usado pelo **FastAPI** internamente para converter dados. Mas tamb√©m √© √∫til em muitos outros cen√°rios.

///


================================================
File: /docs/pt/docs/tutorial/extra-data-types.md
================================================
# Tipos de dados extras

At√© agora, voc√™ tem usado tipos de dados comuns, tais como:

* `int`
* `float`
* `str`
* `bool`

Mas voc√™ tamb√©m pode usar tipos de dados mais complexos.

E voc√™ ainda ter√° os mesmos recursos que viu at√© agora:

* √ìtimo suporte do editor.
* Convers√£o de dados das requisi√ß√µes recebidas.
* Convers√£o de dados para os dados da resposta.
* Valida√ß√£o de dados.
