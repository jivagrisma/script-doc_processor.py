Directory structure:
└── fastapi-fastapi/
    ├── README.md
    ├── CITATION.cff
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── SECURITY.md
    ├── pdm_build.py
    ├── pyproject.toml
    ├── requirements-docs-insiders.txt
    ├── requirements-docs-tests.txt
    ├── requirements-docs.txt
    ├── requirements-github-actions.txt
    ├── requirements-tests.txt
    ├── requirements-translations.txt
    ├── requirements.txt
    ├── .pre-commit-config.yaml
    ├── docs/
    │   ├── language_names.yml
    │   ├── missing-translation.md
    │   ├── az/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── index.md
    │   │       └── learn/
    │   │           └── index.md
    │   ├── bn/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── index.md
    │   │       ├── python-types.md
    │   │       └── learn/
    │   │           └── index.md
    │   ├── de/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── about/
    │   │       │   └── index.md
    │   │       ├── advanced/
    │   │       │   ├── additional-responses.md
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── advanced-dependencies.md
    │   │       │   ├── async-tests.md
    │   │       │   ├── behind-a-proxy.md
    │   │       │   ├── custom-response.md
    │   │       │   ├── dataclasses.md
    │   │       │   ├── events.md
    │   │       │   ├── generate-clients.md
    │   │       │   ├── index.md
    │   │       │   ├── middleware.md
    │   │       │   ├── openapi-callbacks.md
    │   │       │   ├── openapi-webhooks.md
    │   │       │   ├── path-operation-advanced-configuration.md
    │   │       │   ├── response-change-status-code.md
    │   │       │   ├── response-cookies.md
    │   │       │   ├── response-directly.md
    │   │       │   ├── response-headers.md
    │   │       │   ├── settings.md
    │   │       │   ├── sub-applications.md
    │   │       │   ├── templates.md
    │   │       │   ├── testing-dependencies.md
    │   │       │   ├── testing-events.md
    │   │       │   ├── testing-websockets.md
    │   │       │   ├── using-request-directly.md
    │   │       │   ├── websockets.md
    │   │       │   ├── wsgi.md
    │   │       │   └── security/
    │   │       │       ├── http-basic-auth.md
    │   │       │       ├── index.md
    │   │       │       └── oauth2-scopes.md
    │   │       ├── deployment/
    │   │       │   ├── cloud.md
    │   │       │   ├── concepts.md
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   ├── server-workers.md
    │   │       │   └── versions.md
    │   │       ├── how-to/
    │   │       │   ├── conditional-openapi.md
    │   │       │   ├── configure-swagger-ui.md
    │   │       │   ├── custom-docs-ui-assets.md
    │   │       │   ├── custom-request-and-route.md
    │   │       │   ├── extending-openapi.md
    │   │       │   ├── general.md
    │   │       │   ├── graphql.md
    │   │       │   ├── index.md
    │   │       │   └── separate-openapi-schemas.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       ├── resources/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── bigger-applications.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body-updates.md
    │   │           ├── body.md
    │   │           ├── cookie-params.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── extra-models.md
    │   │           ├── first-steps.md
    │   │           ├── handling-errors.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── middleware.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-files.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── dependencies-with-yield.md
    │   │           │   ├── global-dependencies.md
    │   │           │   ├── index.md
    │   │           │   └── sub-dependencies.md
    │   │           └── security/
    │   │               ├── first-steps.md
    │   │               ├── get-current-user.md
    │   │               ├── index.md
    │   │               ├── oauth2-jwt.md
    │   │               └── simple-oauth2.md
    │   ├── em/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── advanced/
    │   │       │   ├── additional-responses.md
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── advanced-dependencies.md
    │   │       │   ├── async-tests.md
    │   │       │   ├── behind-a-proxy.md
    │   │       │   ├── custom-response.md
    │   │       │   ├── dataclasses.md
    │   │       │   ├── events.md
    │   │       │   ├── generate-clients.md
    │   │       │   ├── index.md
    │   │       │   ├── middleware.md
    │   │       │   ├── openapi-callbacks.md
    │   │       │   ├── path-operation-advanced-configuration.md
    │   │       │   ├── response-change-status-code.md
    │   │       │   ├── response-cookies.md
    │   │       │   ├── response-directly.md
    │   │       │   ├── response-headers.md
    │   │       │   ├── settings.md
    │   │       │   ├── sub-applications.md
    │   │       │   ├── templates.md
    │   │       │   ├── testing-dependencies.md
    │   │       │   ├── testing-events.md
    │   │       │   ├── testing-websockets.md
    │   │       │   ├── using-request-directly.md
    │   │       │   ├── websockets.md
    │   │       │   ├── wsgi.md
    │   │       │   └── security/
    │   │       │       ├── http-basic-auth.md
    │   │       │       ├── index.md
    │   │       │       └── oauth2-scopes.md
    │   │       ├── deployment/
    │   │       │   ├── concepts.md
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   ├── server-workers.md
    │   │       │   └── versions.md
    │   │       ├── how-to/
    │   │       │   ├── conditional-openapi.md
    │   │       │   ├── custom-request-and-route.md
    │   │       │   ├── extending-openapi.md
    │   │       │   └── graphql.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── bigger-applications.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body-updates.md
    │   │           ├── body.md
    │   │           ├── cookie-params.md
    │   │           ├── cors.md
    │   │           ├── debugging.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── extra-models.md
    │   │           ├── first-steps.md
    │   │           ├── handling-errors.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── middleware.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-files.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── dependencies-with-yield.md
    │   │           │   ├── global-dependencies.md
    │   │           │   ├── index.md
    │   │           │   └── sub-dependencies.md
    │   │           └── security/
    │   │               ├── first-steps.md
    │   │               ├── get-current-user.md
    │   │               ├── index.md
    │   │               ├── oauth2-jwt.md
    │   │               └── simple-oauth2.md
    │   ├── en/
    │   │   ├── mkdocs.insiders.yml
    │   │   ├── mkdocs.maybe-insiders.yml
    │   │   ├── mkdocs.no-insiders.yml
    │   │   ├── mkdocs.yml
    │   │   ├── data/
    │   │   │   ├── contributors.yml
    │   │   │   ├── external_links.yml
    │   │   │   ├── github_sponsors.yml
    │   │   │   ├── members.yml
    │   │   │   ├── people.yml
    │   │   │   ├── skip_users.yml
    │   │   │   ├── sponsors.yml
    │   │   │   ├── sponsors_badge.yml
    │   │   │   ├── topic_repos.yml
    │   │   │   ├── translation_reviewers.yml
    │   │   │   └── translators.yml
    │   │   ├── docs/
    │   │   │   ├── alternatives.md
    │   │   │   ├── async.md
    │   │   │   ├── benchmarks.md
    │   │   │   ├── contributing.md
    │   │   │   ├── environment-variables.md
    │   │   │   ├── external-links.md
    │   │   │   ├── fastapi-cli.md
    │   │   │   ├── fastapi-people.md
    │   │   │   ├── features.md
    │   │   │   ├── help-fastapi.md
    │   │   │   ├── history-design-future.md
    │   │   │   ├── index.md
    │   │   │   ├── management-tasks.md
    │   │   │   ├── management.md
    │   │   │   ├── newsletter.md
    │   │   │   ├── project-generation.md
    │   │   │   ├── python-types.md
    │   │   │   ├── release-notes.md
    │   │   │   ├── virtual-environments.md
    │   │   │   ├── about/
    │   │   │   │   └── index.md
    │   │   │   ├── advanced/
    │   │   │   │   ├── additional-responses.md
    │   │   │   │   ├── additional-status-codes.md
    │   │   │   │   ├── advanced-dependencies.md
    │   │   │   │   ├── async-tests.md
    │   │   │   │   ├── behind-a-proxy.md
    │   │   │   │   ├── custom-response.md
    │   │   │   │   ├── dataclasses.md
    │   │   │   │   ├── events.md
    │   │   │   │   ├── generate-clients.md
    │   │   │   │   ├── index.md
    │   │   │   │   ├── middleware.md
    │   │   │   │   ├── openapi-callbacks.md
    │   │   │   │   ├── openapi-webhooks.md
    │   │   │   │   ├── path-operation-advanced-configuration.md
    │   │   │   │   ├── response-change-status-code.md
    │   │   │   │   ├── response-cookies.md
    │   │   │   │   ├── response-directly.md
    │   │   │   │   ├── response-headers.md
    │   │   │   │   ├── settings.md
    │   │   │   │   ├── sub-applications.md
    │   │   │   │   ├── templates.md
    │   │   │   │   ├── testing-dependencies.md
    │   │   │   │   ├── testing-events.md
    │   │   │   │   ├── testing-websockets.md
    │   │   │   │   ├── using-request-directly.md
    │   │   │   │   ├── websockets.md
    │   │   │   │   ├── wsgi.md
    │   │   │   │   └── security/
    │   │   │   │       ├── http-basic-auth.md
    │   │   │   │       ├── index.md
    │   │   │   │       └── oauth2-scopes.md
    │   │   │   ├── css/
    │   │   │   │   ├── custom.css
    │   │   │   │   └── termynal.css
    │   │   │   ├── deployment/
    │   │   │   │   ├── cloud.md
    │   │   │   │   ├── concepts.md
    │   │   │   │   ├── docker.md
    │   │   │   │   ├── https.md
    │   │   │   │   ├── index.md
    │   │   │   │   ├── manually.md
    │   │   │   │   ├── server-workers.md
    │   │   │   │   └── versions.md
    │   │   │   ├── how-to/
    │   │   │   │   ├── conditional-openapi.md
    │   │   │   │   ├── configure-swagger-ui.md
    │   │   │   │   ├── custom-docs-ui-assets.md
    │   │   │   │   ├── custom-request-and-route.md
    │   │   │   │   ├── extending-openapi.md
    │   │   │   │   ├── general.md
    │   │   │   │   ├── graphql.md
    │   │   │   │   ├── index.md
    │   │   │   │   ├── separate-openapi-schemas.md
    │   │   │   │   └── testing-database.md
    │   │   │   ├── img/
    │   │   │   │   ├── async/
    │   │   │   │   │   ├── concurrent-burgers/
    │   │   │   │   │   └── parallel-burgers/
    │   │   │   │   ├── deployment/
    │   │   │   │   │   ├── concepts/
    │   │   │   │   │   │   └── process-ram.drawio
    │   │   │   │   │   ├── deta/
    │   │   │   │   │   └── https/
    │   │   │   │   │       ├── https.drawio
    │   │   │   │   │       ├── https01.drawio
    │   │   │   │   │       ├── https02.drawio
    │   │   │   │   │       ├── https03.drawio
    │   │   │   │   │       ├── https04.drawio
    │   │   │   │   │       ├── https05.drawio
    │   │   │   │   │       ├── https06.drawio
    │   │   │   │   │       ├── https07.drawio
    │   │   │   │   │       └── https08.drawio
    │   │   │   │   ├── index/
    │   │   │   │   ├── logo-margin/
    │   │   │   │   ├── python-types/
    │   │   │   │   ├── sponsors/
    │   │   │   │   └── tutorial/
    │   │   │   │       ├── additional-responses/
    │   │   │   │       ├── async-sql-databases/
    │   │   │   │       ├── behind-a-proxy/
    │   │   │   │       ├── bigger-applications/
    │   │   │   │       │   └── package.drawio
    │   │   │   │       ├── body/
    │   │   │   │       ├── body-fields/
    │   │   │   │       ├── body-nested-models/
    │   │   │   │       ├── cookie-param-models/
    │   │   │   │       ├── custom-response/
    │   │   │   │       ├── dataclasses/
    │   │   │   │       ├── debugging/
    │   │   │   │       ├── dependencies/
    │   │   │   │       ├── extending-openapi/
    │   │   │   │       ├── generate-clients/
    │   │   │   │       ├── graphql/
    │   │   │   │       ├── header-param-models/
    │   │   │   │       ├── metadata/
    │   │   │   │       ├── openapi-callbacks/
    │   │   │   │       ├── openapi-webhooks/
    │   │   │   │       ├── path-operation-advanced-configuration/
    │   │   │   │       ├── path-operation-configuration/
    │   │   │   │       ├── path-params/
    │   │   │   │       ├── query-param-models/
    │   │   │   │       ├── query-params-str-validations/
    │   │   │   │       ├── request-form-models/
    │   │   │   │       ├── response-model/
    │   │   │   │       ├── response-status-code/
    │   │   │   │       ├── security/
    │   │   │   │       ├── separate-openapi-schemas/
    │   │   │   │       ├── sql-databases/
    │   │   │   │       ├── sub-applications/
    │   │   │   │       └── websockets/
    │   │   │   ├── js/
    │   │   │   │   ├── custom.js
    │   │   │   │   └── termynal.js
    │   │   │   ├── learn/
    │   │   │   │   └── index.md
    │   │   │   ├── reference/
    │   │   │   │   ├── apirouter.md
    │   │   │   │   ├── background.md
    │   │   │   │   ├── dependencies.md
    │   │   │   │   ├── encoders.md
    │   │   │   │   ├── exceptions.md
    │   │   │   │   ├── fastapi.md
    │   │   │   │   ├── httpconnection.md
    │   │   │   │   ├── index.md
    │   │   │   │   ├── middleware.md
    │   │   │   │   ├── parameters.md
    │   │   │   │   ├── request.md
    │   │   │   │   ├── response.md
    │   │   │   │   ├── responses.md
    │   │   │   │   ├── staticfiles.md
    │   │   │   │   ├── status.md
    │   │   │   │   ├── templating.md
    │   │   │   │   ├── testclient.md
    │   │   │   │   ├── uploadfile.md
    │   │   │   │   ├── websockets.md
    │   │   │   │   ├── openapi/
    │   │   │   │   │   ├── docs.md
    │   │   │   │   │   ├── index.md
    │   │   │   │   │   └── models.md
    │   │   │   │   └── security/
    │   │   │   │       └── index.md
    │   │   │   ├── resources/
    │   │   │   │   └── index.md
    │   │   │   └── tutorial/
    │   │   │       ├── background-tasks.md
    │   │   │       ├── bigger-applications.md
    │   │   │       ├── body-fields.md
    │   │   │       ├── body-multiple-params.md
    │   │   │       ├── body-nested-models.md
    │   │   │       ├── body-updates.md
    │   │   │       ├── body.md
    │   │   │       ├── cookie-param-models.md
    │   │   │       ├── cookie-params.md
    │   │   │       ├── cors.md
    │   │   │       ├── debugging.md
    │   │   │       ├── encoder.md
    │   │   │       ├── extra-data-types.md
    │   │   │       ├── extra-models.md
    │   │   │       ├── first-steps.md
    │   │   │       ├── handling-errors.md
    │   │   │       ├── header-param-models.md
    │   │   │       ├── header-params.md
    │   │   │       ├── index.md
    │   │   │       ├── metadata.md
    │   │   │       ├── middleware.md
    │   │   │       ├── path-operation-configuration.md
    │   │   │       ├── path-params-numeric-validations.md
    │   │   │       ├── path-params.md
    │   │   │       ├── query-param-models.md
    │   │   │       ├── query-params-str-validations.md
    │   │   │       ├── query-params.md
    │   │   │       ├── request-files.md
    │   │   │       ├── request-form-models.md
    │   │   │       ├── request-forms-and-files.md
    │   │   │       ├── request-forms.md
    │   │   │       ├── response-model.md
    │   │   │       ├── response-status-code.md
    │   │   │       ├── schema-extra-example.md
    │   │   │       ├── sql-databases.md
    │   │   │       ├── static-files.md
    │   │   │       ├── testing.md
    │   │   │       ├── dependencies/
    │   │   │       │   ├── classes-as-dependencies.md
    │   │   │       │   ├── dependencies-in-path-operation-decorators.md
    │   │   │       │   ├── dependencies-with-yield.md
    │   │   │       │   ├── global-dependencies.md
    │   │   │       │   ├── index.md
    │   │   │       │   └── sub-dependencies.md
    │   │   │       └── security/
    │   │   │           ├── first-steps.md
    │   │   │           ├── get-current-user.md
    │   │   │           ├── index.md
    │   │   │           ├── oauth2-jwt.md
    │   │   │           └── simple-oauth2.md
    │   │   └── overrides/
    │   │       ├── main.html
    │   │       └── partials/
    │   │           └── copyright.html
    │   ├── es/
    │   │   ├── llm-prompt.md
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── environment-variables.md
    │   │       ├── fastapi-cli.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── virtual-environments.md
    │   │       ├── about/
    │   │       │   └── index.md
    │   │       ├── advanced/
    │   │       │   ├── additional-responses.md
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── advanced-dependencies.md
    │   │       │   ├── async-tests.md
    │   │       │   ├── behind-a-proxy.md
    │   │       │   ├── custom-response.md
    │   │       │   ├── dataclasses.md
    │   │       │   ├── events.md
    │   │       │   ├── generate-clients.md
    │   │       │   ├── index.md
    │   │       │   ├── middleware.md
    │   │       │   ├── openapi-callbacks.md
    │   │       │   ├── openapi-webhooks.md
    │   │       │   ├── path-operation-advanced-configuration.md
    │   │       │   ├── response-change-status-code.md
    │   │       │   ├── response-cookies.md
    │   │       │   ├── response-directly.md
    │   │       │   ├── response-headers.md
    │   │       │   ├── settings.md
    │   │       │   ├── sub-applications.md
    │   │       │   ├── templates.md
    │   │       │   ├── testing-dependencies.md
    │   │       │   ├── testing-events.md
    │   │       │   ├── testing-websockets.md
    │   │       │   ├── using-request-directly.md
    │   │       │   ├── websockets.md
    │   │       │   ├── wsgi.md
    │   │       │   └── security/
    │   │       │       ├── http-basic-auth.md
    │   │       │       ├── index.md
    │   │       │       └── oauth2-scopes.md
    │   │       ├── deployment/
    │   │       │   ├── cloud.md
    │   │       │   ├── concepts.md
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   ├── server-workers.md
    │   │       │   └── versions.md
    │   │       ├── how-to/
    │   │       │   ├── conditional-openapi.md
    │   │       │   ├── configure-swagger-ui.md
    │   │       │   ├── custom-docs-ui-assets.md
    │   │       │   ├── custom-request-and-route.md
    │   │       │   ├── extending-openapi.md
    │   │       │   ├── general.md
    │   │       │   ├── graphql.md
    │   │       │   ├── index.md
    │   │       │   ├── separate-openapi-schemas.md
    │   │       │   └── testing-database.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       ├── resources/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── bigger-applications.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body-updates.md
    │   │           ├── body.md
    │   │           ├── cookie-param-models.md
    │   │           ├── cookie-params.md
    │   │           ├── cors.md
    │   │           ├── debugging.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── extra-models.md
    │   │           ├── first-steps.md
    │   │           ├── handling-errors.md
    │   │           ├── header-param-models.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── middleware.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-param-models.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-files.md
    │   │           ├── request-form-models.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── sql-databases.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── dependencies-with-yield.md
    │   │           │   ├── global-dependencies.md
    │   │           │   ├── index.md
    │   │           │   └── sub-dependencies.md
    │   │           └── security/
    │   │               ├── first-steps.md
    │   │               ├── get-current-user.md
    │   │               ├── index.md
    │   │               ├── oauth2-jwt.md
    │   │               └── simple-oauth2.md
    │   ├── fa/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── features.md
    │   │       ├── index.md
    │   │       ├── advanced/
    │   │       │   └── sub-applications.md
    │   │       └── tutorial/
    │   │           ├── middleware.md
    │   │           └── security/
    │   │               └── index.md
    │   ├── fr/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── advanced/
    │   │       │   ├── additional-responses.md
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── index.md
    │   │       │   ├── path-operation-advanced-configuration.md
    │   │       │   └── response-directly.md
    │   │       ├── deployment/
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   └── versions.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body.md
    │   │           ├── debugging.md
    │   │           ├── first-steps.md
    │   │           ├── index.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-params-str-validations.md
    │   │           └── query-params.md
    │   ├── he/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       └── index.md
    │   ├── hu/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       └── index.md
    │   ├── id/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       └── tutorial/
    │   │           ├── first-steps.md
    │   │           ├── index.md
    │   │           └── path-params.md
    │   ├── it/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       └── index.md
    │   ├── ja/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── advanced/
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── custom-response.md
    │   │       │   ├── index.md
    │   │       │   ├── path-operation-advanced-configuration.md
    │   │       │   ├── response-directly.md
    │   │       │   └── websockets.md
    │   │       ├── deployment/
    │   │       │   ├── concepts.md
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   ├── server-workers.md
    │   │       │   └── versions.md
    │   │       ├── how-to/
    │   │       │   └── conditional-openapi.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body-updates.md
    │   │           ├── body.md
    │   │           ├── cookie-params.md
    │   │           ├── cors.md
    │   │           ├── debugging.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── extra-models.md
    │   │           ├── first-steps.md
    │   │           ├── handling-errors.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── middleware.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── dependencies-with-yield.md
    │   │           │   ├── index.md
    │   │           │   └── sub-dependencies.md
    │   │           └── security/
    │   │               ├── first-steps.md
    │   │               ├── get-current-user.md
    │   │               ├── index.md
    │   │               └── oauth2-jwt.md
    │   ├── ko/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── environment-variables.md
    │   │       ├── fastapi-cli.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── openapi-webhooks.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── about/
    │   │       │   └── index.md
    │   │       ├── advanced/
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── advanced-dependencies.md
    │   │       │   ├── async-tests.md
    │   │       │   ├── events.md
    │   │       │   ├── index.md
    │   │       │   ├── middlewares.md
    │   │       │   ├── response-change-status-code.md
    │   │       │   ├── response-cookies.md
    │   │       │   ├── response-directly.md
    │   │       │   ├── response-headers.md
    │   │       │   ├── templates.md
    │   │       │   ├── testing-dependencies.md
    │   │       │   ├── testing-events.md
    │   │       │   ├── testing-websockets.md
    │   │       │   ├── using-request-directly.md
    │   │       │   ├── websockets.md
    │   │       │   └── wsgi.md
    │   │       ├── deployment/
    │   │       │   ├── cloud.md
    │   │       │   ├── docker.md
    │   │       │   ├── index.md
    │   │       │   ├── server-workers.md
    │   │       │   └── versions.md
    │   │       ├── how-to/
    │   │       │   ├── conditional-openapi.md
    │   │       │   └── configure-swagger-ui.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       ├── resources/
    │   │       │   └── index.md
    │   │       ├── security/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body.md
    │   │           ├── cookie-param-models.md
    │   │           ├── cookie-params.md
    │   │           ├── cors.md
    │   │           ├── debugging.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── first-steps.md
    │   │           ├── header-param-models.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── middleware.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-param-models.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-files.md
    │   │           ├── request-form-models.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── sql-databases.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── global-dependencies.md
    │   │           │   └── index.md
    │   │           └── security/
    │   │               ├── get-current-user.md
    │   │               └── simple-oauth2.md
    │   ├── nl/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── environment-variables.md
    │   │       ├── features.md
    │   │       ├── index.md
    │   │       └── python-types.md
    │   ├── pl/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── index.md
    │   │       └── tutorial/
    │   │           ├── first-steps.md
    │   │           └── index.md
    │   ├── pt/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── environment-variables.md
    │   │       ├── fastapi-cli.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── virtual-environments.md
    │   │       ├── about/
    │   │       │   └── index.md
    │   │       ├── advanced/
    │   │       │   ├── additional-responses.md
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── advanced-dependencies.md
    │   │       │   ├── async-tests.md
    │   │       │   ├── behind-a-proxy.md
    │   │       │   ├── custom-response.md
    │   │       │   ├── dataclasses.md
    │   │       │   ├── events.md
    │   │       │   ├── generate-clients.md
    │   │       │   ├── index.md
    │   │       │   ├── middleware.md
    │   │       │   ├── openapi-callbacks.md
    │   │       │   ├── openapi-webhooks.md
    │   │       │   ├── path-operation-advanced-configuration.md
    │   │       │   ├── response-change-status-code.md
    │   │       │   ├── response-cookies.md
    │   │       │   ├── response-directly.md
    │   │       │   ├── response-headers.md
    │   │       │   ├── settings.md
    │   │       │   ├── sub-applications.md
    │   │       │   ├── templates.md
    │   │       │   ├── testing-dependencies.md
    │   │       │   ├── testing-events.md
    │   │       │   ├── testing-websockets.md
    │   │       │   ├── using-request-directly.md
    │   │       │   ├── websockets.md
    │   │       │   ├── wsgi.md
    │   │       │   └── security/
    │   │       │       ├── http-basic-auth.md
    │   │       │       ├── index.md
    │   │       │       └── oauth2-scopes.md
    │   │       ├── deployment/
    │   │       │   ├── cloud.md
    │   │       │   ├── concepts.md
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   ├── server-workers.md
    │   │       │   └── versions.md
    │   │       ├── how-to/
    │   │       │   ├── conditional-openapi.md
    │   │       │   ├── configure-swagger-ui.md
    │   │       │   ├── custom-docs-ui-assets.md
    │   │       │   ├── custom-request-and-route.md
    │   │       │   ├── extending-openapi.md
    │   │       │   ├── general.md
    │   │       │   ├── graphql.md
    │   │       │   ├── index.md
    │   │       │   ├── separate-openapi-schemas.md
    │   │       │   └── testing-database.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       ├── resources/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── bigger-applications.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body-updates.md
    │   │           ├── body.md
    │   │           ├── cookie-param-models.md
    │   │           ├── cookie-params.md
    │   │           ├── cors.md
    │   │           ├── debugging.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── extra-models.md
    │   │           ├── first-steps.md
    │   │           ├── handling-errors.md
    │   │           ├── header-param-models.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── middleware.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-param-models.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-files.md
    │   │           ├── request-form-models.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── request_files.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── sql-databases.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── dependencies-with-yield.md
    │   │           │   ├── global-dependencies.md
    │   │           │   ├── index.md
    │   │           │   └── sub-dependencies.md
    │   │           └── security/
    │   │               ├── first-steps.md
    │   │               ├── get-current-user.md
    │   │               ├── index.md
    │   │               └── simple-oauth2.md
    │   ├── ru/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── environment-variables.md
    │   │       ├── fastapi-cli.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── virtual-environments.md
    │   │       ├── about/
    │   │       │   └── index.md
    │   │       ├── deployment/
    │   │       │   ├── concepts.md
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   └── versions.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body-updates.md
    │   │           ├── body.md
    │   │           ├── cookie-params.md
    │   │           ├── cors.md
    │   │           ├── debugging.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── extra-models.md
    │   │           ├── first-steps.md
    │   │           ├── handling-errors.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-param-models.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-files.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── sql-databases.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── dependencies-with-yield.md
    │   │           │   ├── global-dependencies.md
    │   │           │   ├── index.md
    │   │           │   └── sub-dependencies.md
    │   │           └── security/
    │   │               ├── first-steps.md
    │   │               ├── get-current-user.md
    │   │               ├── index.md
    │   │               ├── oauth2-jwt.md
    │   │               └── simple-oauth2.md
    │   ├── tr/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── features.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── about/
    │   │       │   └── index.md
    │   │       ├── advanced/
    │   │       │   ├── index.md
    │   │       │   ├── testing-websockets.md
    │   │       │   ├── wsgi.md
    │   │       │   └── security/
    │   │       │       └── index.md
    │   │       ├── deployment/
    │   │       │   ├── cloud.md
    │   │       │   └── index.md
    │   │       ├── how-to/
    │   │       │   ├── general.md
    │   │       │   └── index.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       ├── resources/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── cookie-params.md
    │   │           ├── first-steps.md
    │   │           ├── path-params.md
    │   │           ├── query-params.md
    │   │           ├── request-forms.md
    │   │           └── static-files.md
    │   ├── uk/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── alternatives.md
    │   │       ├── fastapi-cli.md
    │   │       ├── index.md
    │   │       ├── python-types.md
    │   │       └── tutorial/
    │   │           ├── body-fields.md
    │   │           ├── body.md
    │   │           ├── cookie-params.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── first-steps.md
    │   │           └── index.md
    │   ├── ur/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       └── benchmarks.md
    │   ├── vi/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── features.md
    │   │       ├── index.md
    │   │       ├── python-types.md
    │   │       └── tutorial/
    │   │           ├── first-steps.md
    │   │           └── index.md
    │   ├── yo/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       └── index.md
    │   ├── zh/
    │   │   ├── mkdocs.yml
    │   │   └── docs/
    │   │       ├── async.md
    │   │       ├── benchmarks.md
    │   │       ├── environment-variables.md
    │   │       ├── fastapi-cli.md
    │   │       ├── features.md
    │   │       ├── help-fastapi.md
    │   │       ├── history-design-future.md
    │   │       ├── index.md
    │   │       ├── project-generation.md
    │   │       ├── python-types.md
    │   │       ├── virtual-environments.md
    │   │       ├── advanced/
    │   │       │   ├── additional-responses.md
    │   │       │   ├── additional-status-codes.md
    │   │       │   ├── advanced-dependencies.md
    │   │       │   ├── async-tests.md
    │   │       │   ├── behind-a-proxy.md
    │   │       │   ├── custom-response.md
    │   │       │   ├── dataclasses.md
    │   │       │   ├── events.md
    │   │       │   ├── generate-clients.md
    │   │       │   ├── index.md
    │   │       │   ├── middleware.md
    │   │       │   ├── openapi-callbacks.md
    │   │       │   ├── openapi-webhooks.md
    │   │       │   ├── path-operation-advanced-configuration.md
    │   │       │   ├── response-change-status-code.md
    │   │       │   ├── response-cookies.md
    │   │       │   ├── response-directly.md
    │   │       │   ├── response-headers.md
    │   │       │   ├── settings.md
    │   │       │   ├── sub-applications.md
    │   │       │   ├── templates.md
    │   │       │   ├── testing-dependencies.md
    │   │       │   ├── testing-events.md
    │   │       │   ├── testing-websockets.md
    │   │       │   ├── using-request-directly.md
    │   │       │   ├── websockets.md
    │   │       │   ├── wsgi.md
    │   │       │   └── security/
    │   │       │       ├── http-basic-auth.md
    │   │       │       ├── index.md
    │   │       │       └── oauth2-scopes.md
    │   │       ├── deployment/
    │   │       │   ├── cloud.md
    │   │       │   ├── concepts.md
    │   │       │   ├── docker.md
    │   │       │   ├── https.md
    │   │       │   ├── index.md
    │   │       │   ├── manually.md
    │   │       │   ├── server-workers.md
    │   │       │   └── versions.md
    │   │       ├── how-to/
    │   │       │   ├── configure-swagger-ui.md
    │   │       │   ├── general.md
    │   │       │   └── index.md
    │   │       ├── learn/
    │   │       │   └── index.md
    │   │       └── tutorial/
    │   │           ├── background-tasks.md
    │   │           ├── bigger-applications.md
    │   │           ├── body-fields.md
    │   │           ├── body-multiple-params.md
    │   │           ├── body-nested-models.md
    │   │           ├── body-updates.md
    │   │           ├── body.md
    │   │           ├── cookie-param-models.md
    │   │           ├── cookie-params.md
    │   │           ├── cors.md
    │   │           ├── debugging.md
    │   │           ├── encoder.md
    │   │           ├── extra-data-types.md
    │   │           ├── extra-models.md
    │   │           ├── first-steps.md
    │   │           ├── handling-errors.md
    │   │           ├── header-param-models.md
    │   │           ├── header-params.md
    │   │           ├── index.md
    │   │           ├── metadata.md
    │   │           ├── middleware.md
    │   │           ├── path-operation-configuration.md
    │   │           ├── path-params-numeric-validations.md
    │   │           ├── path-params.md
    │   │           ├── query-param-models.md
    │   │           ├── query-params-str-validations.md
    │   │           ├── query-params.md
    │   │           ├── request-files.md
    │   │           ├── request-form-models.md
    │   │           ├── request-forms-and-files.md
    │   │           ├── request-forms.md
    │   │           ├── response-model.md
    │   │           ├── response-status-code.md
    │   │           ├── schema-extra-example.md
    │   │           ├── sql-databases.md
    │   │           ├── static-files.md
    │   │           ├── testing.md
    │   │           ├── dependencies/
    │   │           │   ├── classes-as-dependencies.md
    │   │           │   ├── dependencies-in-path-operation-decorators.md
    │   │           │   ├── dependencies-with-yield.md
    │   │           │   ├── global-dependencies.md
    │   │           │   ├── index.md
    │   │           │   └── sub-dependencies.md
    │   │           └── security/
    │   │               ├── first-steps.md
    │   │               ├── get-current-user.md
    │   │               ├── index.md
    │   │               ├── oauth2-jwt.md
    │   │               └── simple-oauth2.md
    │   └── zh-hant/
    │       ├── mkdocs.yml
    │       └── docs/
    │           ├── async.md
    │           ├── benchmarks.md
    │           ├── environment-variables.md
    │           ├── fastapi-cli.md
    │           ├── features.md
    │           ├── index.md
    │           ├── virtual-environments.md
    │           ├── about/
    │           │   └── index.md
    │           ├── deployment/
    │           │   ├── cloud.md
    │           │   └── index.md
    │           ├── how-to/
    │           │   └── index.md
    │           ├── learn/
    │           │   └── index.md
    │           ├── resources/
    │           │   └── index.md
    │           └── tutorial/
    │               ├── first-steps.md
    │               ├── index.md
    │               └── query-param-models.md
    ├── docs_src/
    │   ├── additional_responses/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   └── tutorial004.py
    │   ├── additional_status_codes/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   └── tutorial001_py310.py
    │   ├── advanced_middleware/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   └── tutorial003.py
    │   ├── app_testing/
    │   │   ├── __init__.py
    │   │   ├── main.py
    │   │   ├── test_main.py
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   ├── app_b/
    │   │   │   ├── __init__.py
    │   │   │   ├── main.py
    │   │   │   └── test_main.py
    │   │   ├── app_b_an/
    │   │   │   ├── __init__.py
    │   │   │   ├── main.py
    │   │   │   └── test_main.py
    │   │   ├── app_b_an_py310/
    │   │   │   ├── __init__.py
    │   │   │   ├── main.py
    │   │   │   └── test_main.py
    │   │   ├── app_b_an_py39/
    │   │   │   ├── __init__.py
    │   │   │   ├── main.py
    │   │   │   └── test_main.py
    │   │   └── app_b_py310/
    │   │       ├── __init__.py
    │   │       ├── main.py
    │   │       └── test_main.py
    │   ├── async_tests/
    │   │   ├── __init__.py
    │   │   ├── main.py
    │   │   └── test_main.py
    │   ├── background_tasks/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   └── tutorial002_py310.py
    │   ├── behind_a_proxy/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   └── tutorial004.py
    │   ├── bigger_applications/
    │   │   ├── __init__.py
    │   │   ├── app/
    │   │   │   ├── __init__.py
    │   │   │   ├── dependencies.py
    │   │   │   ├── main.py
    │   │   │   ├── internal/
    │   │   │   │   ├── __init__.py
    │   │   │   │   └── admin.py
    │   │   │   └── routers/
    │   │   │       ├── __init__.py
    │   │   │       ├── items.py
    │   │   │       └── users.py
    │   │   ├── app_an/
    │   │   │   ├── __init__.py
    │   │   │   ├── dependencies.py
    │   │   │   ├── main.py
    │   │   │   ├── internal/
    │   │   │   │   ├── __init__.py
    │   │   │   │   └── admin.py
    │   │   │   └── routers/
    │   │   │       ├── __init__.py
    │   │   │       ├── items.py
    │   │   │       └── users.py
    │   │   └── app_an_py39/
    │   │       ├── __init__.py
    │   │       ├── dependencies.py
    │   │       ├── main.py
    │   │       ├── internal/
    │   │       │   ├── __init__.py
    │   │       │   └── admin.py
    │   │       └── routers/
    │   │           ├── __init__.py
    │   │           ├── items.py
    │   │           └── users.py
    │   ├── body/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   └── tutorial004_py310.py
    │   ├── body_fields/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   └── tutorial001_py310.py
    │   ├── body_multiple_params/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py310.py
    │   │   ├── tutorial003_an_py39.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_an.py
    │   │   ├── tutorial004_an_py310.py
    │   │   ├── tutorial004_an_py39.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_an.py
    │   │   ├── tutorial005_an_py310.py
    │   │   ├── tutorial005_an_py39.py
    │   │   └── tutorial005_py310.py
    │   ├── body_nested_models/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial002_py39.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial003_py39.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial004_py39.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_py310.py
    │   │   ├── tutorial005_py39.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006_py310.py
    │   │   ├── tutorial006_py39.py
    │   │   ├── tutorial007.py
    │   │   ├── tutorial007_py310.py
    │   │   ├── tutorial007_py39.py
    │   │   ├── tutorial008.py
    │   │   ├── tutorial008_py39.py
    │   │   ├── tutorial009.py
    │   │   └── tutorial009_py39.py
    │   ├── body_updates/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   └── tutorial002_py39.py
    │   ├── conditional_openapi/
    │   │   └── tutorial001.py
    │   ├── configure_swagger_ui/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   └── tutorial003.py
    │   ├── cookie_param_models/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_pv1.py
    │   │   ├── tutorial002_pv1_an.py
    │   │   ├── tutorial002_pv1_an_py310.py
    │   │   ├── tutorial002_pv1_an_py39.py
    │   │   ├── tutorial002_pv1_py310.py
    │   │   └── tutorial002_py310.py
    │   ├── cookie_params/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   └── tutorial001_py310.py
    │   ├── cors/
    │   │   └── tutorial001.py
    │   ├── custom_docs_ui/
    │   │   ├── tutorial001.py
    │   │   └── tutorial002.py
    │   ├── custom_request_and_route/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   └── tutorial003.py
    │   ├── custom_response/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001b.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006b.py
    │   │   ├── tutorial006c.py
    │   │   ├── tutorial007.py
    │   │   ├── tutorial008.py
    │   │   ├── tutorial009.py
    │   │   ├── tutorial009b.py
    │   │   ├── tutorial009c.py
    │   │   └── tutorial010.py
    │   ├── dataclasses/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   └── tutorial003.py
    │   ├── debugging/
    │   │   └── tutorial001.py
    │   ├── dependencies/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_02_an.py
    │   │   ├── tutorial001_02_an_py310.py
    │   │   ├── tutorial001_02_an_py39.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py310.py
    │   │   ├── tutorial003_an_py39.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_an.py
    │   │   ├── tutorial004_an_py310.py
    │   │   ├── tutorial004_an_py39.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_an.py
    │   │   ├── tutorial005_an_py310.py
    │   │   ├── tutorial005_an_py39.py
    │   │   ├── tutorial005_py310.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006_an.py
    │   │   ├── tutorial006_an_py39.py
    │   │   ├── tutorial007.py
    │   │   ├── tutorial008.py
    │   │   ├── tutorial008_an.py
    │   │   ├── tutorial008_an_py39.py
    │   │   ├── tutorial008b.py
    │   │   ├── tutorial008b_an.py
    │   │   ├── tutorial008b_an_py39.py
    │   │   ├── tutorial008c.py
    │   │   ├── tutorial008c_an.py
    │   │   ├── tutorial008c_an_py39.py
    │   │   ├── tutorial008d.py
    │   │   ├── tutorial008d_an.py
    │   │   ├── tutorial008d_an_py39.py
    │   │   ├── tutorial009.py
    │   │   ├── tutorial010.py
    │   │   ├── tutorial011.py
    │   │   ├── tutorial011_an.py
    │   │   ├── tutorial011_an_py39.py
    │   │   ├── tutorial012.py
    │   │   ├── tutorial012_an.py
    │   │   └── tutorial012_an_py39.py
    │   ├── dependency_testing/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   └── tutorial001_py310.py
    │   ├── encoder/
    │   │   ├── tutorial001.py
    │   │   └── tutorial001_py310.py
    │   ├── events/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   └── tutorial003.py
    │   ├── extending_openapi/
    │   │   └── tutorial001.py
    │   ├── extra_data_types/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   └── tutorial001_py310.py
    │   ├── extra_models/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_py39.py
    │   │   ├── tutorial005.py
    │   │   └── tutorial005_py39.py
    │   ├── first_steps/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   └── tutorial003.py
    │   ├── generate_clients/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py39.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_py39.py
    │   │   ├── tutorial004.js
    │   │   └── tutorial004.py
    │   ├── graphql/
    │   │   └── tutorial001.py
    │   ├── handling_errors/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial005.py
    │   │   └── tutorial006.py
    │   ├── header_param_models/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_pv1.py
    │   │   ├── tutorial002_pv1_an.py
    │   │   ├── tutorial002_pv1_an_py310.py
    │   │   ├── tutorial002_pv1_an_py39.py
    │   │   ├── tutorial002_pv1_py310.py
    │   │   ├── tutorial002_pv1_py39.py
    │   │   ├── tutorial002_py310.py
    │   │   └── tutorial002_py39.py
    │   ├── header_params/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py310.py
    │   │   ├── tutorial003_an_py39.py
    │   │   ├── tutorial003_py310.py
    │   │   └── tutorial003_py39.py
    │   ├── metadata/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_1.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   └── tutorial004.py
    │   ├── middleware/
    │   │   └── tutorial001.py
    │   ├── openapi_callbacks/
    │   │   └── tutorial001.py
    │   ├── openapi_webhooks/
    │   │   └── tutorial001.py
    │   ├── path_operation_advanced_configuration/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial007.py
    │   │   └── tutorial007_pv1.py
    │   ├── path_operation_configuration/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial002_py39.py
    │   │   ├── tutorial002b.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial003_py39.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial004_py39.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_py310.py
    │   │   ├── tutorial005_py39.py
    │   │   └── tutorial006.py
    │   ├── path_params/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003b.py
    │   │   ├── tutorial004.py
    │   │   └── tutorial005.py
    │   ├── path_params_numeric_validations/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py39.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_an.py
    │   │   ├── tutorial004_an_py39.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_an.py
    │   │   ├── tutorial005_an_py39.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006_an.py
    │   │   └── tutorial006_an_py39.py
    │   ├── python_types/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006_py39.py
    │   │   ├── tutorial007.py
    │   │   ├── tutorial007_py39.py
    │   │   ├── tutorial008.py
    │   │   ├── tutorial008_py39.py
    │   │   ├── tutorial008b.py
    │   │   ├── tutorial008b_py310.py
    │   │   ├── tutorial009.py
    │   │   ├── tutorial009_py310.py
    │   │   ├── tutorial009b.py
    │   │   ├── tutorial009c.py
    │   │   ├── tutorial009c_py310.py
    │   │   ├── tutorial010.py
    │   │   ├── tutorial011.py
    │   │   ├── tutorial011_py310.py
    │   │   ├── tutorial011_py39.py
    │   │   ├── tutorial012.py
    │   │   ├── tutorial013.py
    │   │   └── tutorial013_py39.py
    │   ├── query_param_models/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_pv1.py
    │   │   ├── tutorial002_pv1_an.py
    │   │   ├── tutorial002_pv1_an_py310.py
    │   │   ├── tutorial002_pv1_an_py39.py
    │   │   ├── tutorial002_pv1_py310.py
    │   │   ├── tutorial002_pv1_py39.py
    │   │   ├── tutorial002_py310.py
    │   │   └── tutorial002_py39.py
    │   ├── query_params/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006_py310.py
    │   │   └── tutorial006b.py
    │   ├── query_params_str_validations/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py310.py
    │   │   ├── tutorial003_an_py39.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_an.py
    │   │   ├── tutorial004_an_py310.py
    │   │   ├── tutorial004_an_py39.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial004_regex_an_py310.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_an.py
    │   │   ├── tutorial005_an_py39.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006_an.py
    │   │   ├── tutorial006_an_py39.py
    │   │   ├── tutorial006b.py
    │   │   ├── tutorial006b_an.py
    │   │   ├── tutorial006b_an_py39.py
    │   │   ├── tutorial006c.py
    │   │   ├── tutorial006c_an.py
    │   │   ├── tutorial006c_an_py310.py
    │   │   ├── tutorial006c_an_py39.py
    │   │   ├── tutorial006c_py310.py
    │   │   ├── tutorial006d.py
    │   │   ├── tutorial006d_an.py
    │   │   ├── tutorial006d_an_py39.py
    │   │   ├── tutorial007.py
    │   │   ├── tutorial007_an.py
    │   │   ├── tutorial007_an_py310.py
    │   │   ├── tutorial007_an_py39.py
    │   │   ├── tutorial007_py310.py
    │   │   ├── tutorial008.py
    │   │   ├── tutorial008_an.py
    │   │   ├── tutorial008_an_py310.py
    │   │   ├── tutorial008_an_py39.py
    │   │   ├── tutorial008_py310.py
    │   │   ├── tutorial009.py
    │   │   ├── tutorial009_an.py
    │   │   ├── tutorial009_an_py310.py
    │   │   ├── tutorial009_an_py39.py
    │   │   ├── tutorial009_py310.py
    │   │   ├── tutorial010.py
    │   │   ├── tutorial010_an.py
    │   │   ├── tutorial010_an_py310.py
    │   │   ├── tutorial010_an_py39.py
    │   │   ├── tutorial010_py310.py
    │   │   ├── tutorial011.py
    │   │   ├── tutorial011_an.py
    │   │   ├── tutorial011_an_py310.py
    │   │   ├── tutorial011_an_py39.py
    │   │   ├── tutorial011_py310.py
    │   │   ├── tutorial011_py39.py
    │   │   ├── tutorial012.py
    │   │   ├── tutorial012_an.py
    │   │   ├── tutorial012_an_py39.py
    │   │   ├── tutorial012_py39.py
    │   │   ├── tutorial013.py
    │   │   ├── tutorial013_an.py
    │   │   ├── tutorial013_an_py39.py
    │   │   ├── tutorial014.py
    │   │   ├── tutorial014_an.py
    │   │   ├── tutorial014_an_py310.py
    │   │   ├── tutorial014_an_py39.py
    │   │   └── tutorial014_py310.py
    │   ├── request_files/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_02.py
    │   │   ├── tutorial001_02_an.py
    │   │   ├── tutorial001_02_an_py310.py
    │   │   ├── tutorial001_02_an_py39.py
    │   │   ├── tutorial001_02_py310.py
    │   │   ├── tutorial001_03.py
    │   │   ├── tutorial001_03_an.py
    │   │   ├── tutorial001_03_an_py39.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_py39.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py39.py
    │   │   └── tutorial003_py39.py
    │   ├── request_form_models/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_pv1.py
    │   │   ├── tutorial002_pv1_an.py
    │   │   └── tutorial002_pv1_an_py39.py
    │   ├── request_forms/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   └── tutorial001_an_py39.py
    │   ├── request_forms_and_files/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   └── tutorial001_an_py39.py
    │   ├── response_change_status_code/
    │   │   └── tutorial001.py
    │   ├── response_cookies/
    │   │   ├── tutorial001.py
    │   │   └── tutorial002.py
    │   ├── response_directly/
    │   │   ├── tutorial001.py
    │   │   └── tutorial002.py
    │   ├── response_headers/
    │   │   ├── tutorial001.py
    │   │   └── tutorial002.py
    │   ├── response_model/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_01.py
    │   │   ├── tutorial001_01_py310.py
    │   │   ├── tutorial001_01_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_01.py
    │   │   ├── tutorial003_01_py310.py
    │   │   ├── tutorial003_02.py
    │   │   ├── tutorial003_03.py
    │   │   ├── tutorial003_04.py
    │   │   ├── tutorial003_04_py310.py
    │   │   ├── tutorial003_05.py
    │   │   ├── tutorial003_05_py310.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial004_py39.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_py310.py
    │   │   ├── tutorial006.py
    │   │   └── tutorial006_py310.py
    │   ├── response_status_code/
    │   │   ├── tutorial001.py
    │   │   └── tutorial002.py
    │   ├── schema_extra_example/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_pv1.py
    │   │   ├── tutorial001_pv1_py310.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py310.py
    │   │   ├── tutorial003_an_py39.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_an.py
    │   │   ├── tutorial004_an_py310.py
    │   │   ├── tutorial004_an_py39.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_an.py
    │   │   ├── tutorial005_an_py310.py
    │   │   ├── tutorial005_an_py39.py
    │   │   └── tutorial005_py310.py
    │   ├── security/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   ├── tutorial003_an.py
    │   │   ├── tutorial003_an_py310.py
    │   │   ├── tutorial003_an_py39.py
    │   │   ├── tutorial003_py310.py
    │   │   ├── tutorial004.py
    │   │   ├── tutorial004_an.py
    │   │   ├── tutorial004_an_py310.py
    │   │   ├── tutorial004_an_py39.py
    │   │   ├── tutorial004_py310.py
    │   │   ├── tutorial005.py
    │   │   ├── tutorial005_an.py
    │   │   ├── tutorial005_an_py310.py
    │   │   ├── tutorial005_an_py39.py
    │   │   ├── tutorial005_py310.py
    │   │   ├── tutorial005_py39.py
    │   │   ├── tutorial006.py
    │   │   ├── tutorial006_an.py
    │   │   ├── tutorial006_an_py39.py
    │   │   ├── tutorial007.py
    │   │   ├── tutorial007_an.py
    │   │   └── tutorial007_an_py39.py
    │   ├── separate_openapi_schemas/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_py310.py
    │   │   └── tutorial002_py39.py
    │   ├── settings/
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_pv1.py
    │   │   ├── app01/
    │   │   │   ├── __init__.py
    │   │   │   ├── config.py
    │   │   │   └── main.py
    │   │   ├── app02/
    │   │   │   ├── __init__.py
    │   │   │   ├── config.py
    │   │   │   ├── main.py
    │   │   │   └── test_main.py
    │   │   ├── app02_an/
    │   │   │   ├── __init__.py
    │   │   │   ├── config.py
    │   │   │   ├── main.py
    │   │   │   └── test_main.py
    │   │   ├── app02_an_py39/
    │   │   │   ├── __init__.py
    │   │   │   ├── config.py
    │   │   │   ├── main.py
    │   │   │   └── test_main.py
    │   │   ├── app03/
    │   │   │   ├── __init__.py
    │   │   │   ├── config.py
    │   │   │   └── main.py
    │   │   ├── app03_an/
    │   │   │   ├── __init__.py
    │   │   │   ├── config.py
    │   │   │   ├── config_pv1.py
    │   │   │   └── main.py
    │   │   └── app03_an_py39/
    │   │       ├── __init__.py
    │   │       ├── config.py
    │   │       └── main.py
    │   ├── sql_databases/
    │   │   ├── __init__.py
    │   │   ├── tutorial001.py
    │   │   ├── tutorial001_an.py
    │   │   ├── tutorial001_an_py310.py
    │   │   ├── tutorial001_an_py39.py
    │   │   ├── tutorial001_py310.py
    │   │   ├── tutorial001_py39.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_py310.py
    │   │   └── tutorial002_py39.py
    │   ├── static_files/
    │   │   └── tutorial001.py
    │   ├── sub_applications/
    │   │   └── tutorial001.py
    │   ├── templates/
    │   │   ├── tutorial001.py
    │   │   ├── static/
    │   │   │   └── styles.css
    │   │   └── templates/
    │   │       └── item.html
    │   ├── using_request_directly/
    │   │   └── tutorial001.py
    │   ├── websockets/
    │   │   ├── __init__.py
    │   │   ├── tutorial001.py
    │   │   ├── tutorial002.py
    │   │   ├── tutorial002_an.py
    │   │   ├── tutorial002_an_py310.py
    │   │   ├── tutorial002_an_py39.py
    │   │   ├── tutorial002_py310.py
    │   │   ├── tutorial003.py
    │   │   └── tutorial003_py39.py
    │   └── wsgi/
    │       └── tutorial001.py
    ├── fastapi/
    │   ├── __init__.py
    │   ├── __main__.py
    │   ├── _compat.py
    │   ├── applications.py
    │   ├── background.py
    │   ├── cli.py
    │   ├── concurrency.py
    │   ├── datastructures.py
    │   ├── encoders.py
    │   ├── exception_handlers.py
    │   ├── exceptions.py
    │   ├── logger.py
    │   ├── param_functions.py
    │   ├── params.py
    │   ├── py.typed
    │   ├── requests.py
    │   ├── responses.py
    │   ├── routing.py
    │   ├── staticfiles.py
    │   ├── templating.py
    │   ├── testclient.py
    │   ├── types.py
    │   ├── utils.py
    │   ├── websockets.py
    │   ├── dependencies/
    │   │   ├── __init__.py
    │   │   ├── models.py
    │   │   └── utils.py
    │   ├── middleware/
    │   │   ├── __init__.py
    │   │   ├── cors.py
    │   │   ├── gzip.py
    │   │   ├── httpsredirect.py
    │   │   ├── trustedhost.py
    │   │   └── wsgi.py
    │   ├── openapi/
    │   │   ├── __init__.py
    │   │   ├── constants.py
    │   │   ├── docs.py
    │   │   ├── models.py
    │   │   └── utils.py
    │   └── security/
    │       ├── __init__.py
    │       ├── api_key.py
    │       ├── base.py
    │       ├── http.py
    │       ├── oauth2.py
    │       ├── open_id_connect_url.py
    │       └── utils.py
    ├── scripts/
    │   ├── contributors.py
    │   ├── deploy_docs_status.py
    │   ├── docs.py
    │   ├── format.sh
    │   ├── label_approved.py
    │   ├── lint.sh
    │   ├── mkdocs_hooks.py
    │   ├── test-cov-html.sh
    │   ├── test.sh
    │   ├── topic_repos.py
    │   ├── translate.py
    │   └── playwright/
    │       ├── cookie_param_models/
    │       │   └── image01.py
    │       ├── header_param_models/
    │       │   └── image01.py
    │       ├── query_param_models/
    │       │   └── image01.py
    │       ├── request_form_models/
    │       │   └── image01.py
    │       ├── separate_openapi_schemas/
    │       │   ├── image01.py
    │       │   ├── image02.py
    │       │   ├── image03.py
    │       │   ├── image04.py
    │       │   └── image05.py
    │       └── sql_databases/
    │           ├── image01.py
    │           └── image02.py
    ├── tests/
    │   ├── __init__.py
    │   ├── main.py
    │   ├── test_additional_properties.py
    │   ├── test_additional_properties_bool.py
    │   ├── test_additional_response_extra.py
    │   ├── test_additional_responses_bad.py
    │   ├── test_additional_responses_custom_model_in_callback.py
    │   ├── test_additional_responses_custom_validationerror.py
    │   ├── test_additional_responses_default_validationerror.py
    │   ├── test_additional_responses_response_class.py
    │   ├── test_additional_responses_router.py
    │   ├── test_allow_inf_nan_in_enforcing.py
    │   ├── test_ambiguous_params.py
    │   ├── test_annotated.py
    │   ├── test_application.py
    │   ├── test_callable_endpoint.py
    │   ├── test_compat.py
    │   ├── test_computed_fields.py
    │   ├── test_custom_middleware_exception.py
    │   ├── test_custom_route_class.py
    │   ├── test_custom_schema_fields.py
    │   ├── test_custom_swagger_ui_redirect.py
    │   ├── test_datastructures.py
    │   ├── test_datetime_custom_encoder.py
    │   ├── test_default_response_class.py
    │   ├── test_default_response_class_router.py
    │   ├── test_dependency_cache.py
    │   ├── test_dependency_class.py
    │   ├── test_dependency_contextmanager.py
    │   ├── test_dependency_contextvars.py
    │   ├── test_dependency_duplicates.py
    │   ├── test_dependency_normal_exceptions.py
    │   ├── test_dependency_overrides.py
    │   ├── test_dependency_security_overrides.py
    │   ├── test_deprecated_openapi_prefix.py
    │   ├── test_duplicate_models_openapi.py
    │   ├── test_empty_router.py
    │   ├── test_enforce_once_required_parameter.py
    │   ├── test_exception_handlers.py
    │   ├── test_extra_routes.py
    │   ├── test_fastapi_cli.py
    │   ├── test_filter_pydantic_sub_model_pv2.py
    │   ├── test_forms_from_non_typing_sequences.py
    │   ├── test_forms_single_model.py
    │   ├── test_forms_single_param.py
    │   ├── test_generate_unique_id_function.py
    │   ├── test_generic_parameterless_depends.py
    │   ├── test_get_request_body.py
    │   ├── test_http_connection_injection.py
    │   ├── test_include_route.py
    │   ├── test_include_router_defaults_overrides.py
    │   ├── test_infer_param_optionality.py
    │   ├── test_inherited_custom_class.py
    │   ├── test_invalid_path_param.py
    │   ├── test_invalid_sequence_param.py
    │   ├── test_jsonable_encoder.py
    │   ├── test_local_docs.py
    │   ├── test_multi_body_errors.py
    │   ├── test_multi_query_errors.py
    │   ├── test_multipart_installation.py
    │   ├── test_no_swagger_ui_redirect.py
    │   ├── test_openapi_examples.py
    │   ├── test_openapi_query_parameter_extension.py
    │   ├── test_openapi_route_extensions.py
    │   ├── test_openapi_separate_input_output_schemas.py
    │   ├── test_openapi_servers.py
    │   ├── test_operations_signatures.py
    │   ├── test_orjson_response_class.py
    │   ├── test_param_class.py
    │   ├── test_param_in_path_and_dependency.py
    │   ├── test_param_include_in_schema.py
    │   ├── test_params_repr.py
    │   ├── test_path.py
    │   ├── test_put_no_body.py
    │   ├── test_query.py
    │   ├── test_read_with_orm_mode.py
    │   ├── test_regex_deprecated_body.py
    │   ├── test_regex_deprecated_params.py
    │   ├── test_repeated_cookie_headers.py
    │   ├── test_repeated_dependency_schema.py
    │   ├── test_repeated_parameter_alias.py
    │   ├── test_reponse_set_reponse_code_empty.py
    │   ├── test_request_body_parameters_media_type.py
    │   ├── test_required_noneable.py
    │   ├── test_response_by_alias.py
    │   ├── test_response_change_status_code.py
    │   ├── test_response_class_no_mediatype.py
    │   ├── test_response_code_no_body.py
    │   ├── test_response_model_as_return_annotation.py
    │   ├── test_response_model_data_filter.py
    │   ├── test_response_model_data_filter_no_inheritance.py
    │   ├── test_response_model_include_exclude.py
    │   ├── test_response_model_invalid.py
    │   ├── test_response_model_sub_types.py
    │   ├── test_route_scope.py
    │   ├── test_router_events.py
    │   ├── test_router_prefix_with_template.py
    │   ├── test_router_redirect_slashes.py
    │   ├── test_schema_extra_examples.py
    │   ├── test_security_api_key_cookie.py
    │   ├── test_security_api_key_cookie_description.py
    │   ├── test_security_api_key_cookie_optional.py
    │   ├── test_security_api_key_header.py
    │   ├── test_security_api_key_header_description.py
    │   ├── test_security_api_key_header_optional.py
    │   ├── test_security_api_key_query.py
    │   ├── test_security_api_key_query_description.py
    │   ├── test_security_api_key_query_optional.py
    │   ├── test_security_http_base.py
    │   ├── test_security_http_base_description.py
    │   ├── test_security_http_base_optional.py
    │   ├── test_security_http_basic_optional.py
    │   ├── test_security_http_basic_realm.py
    │   ├── test_security_http_basic_realm_description.py
    │   ├── test_security_http_bearer.py
    │   ├── test_security_http_bearer_description.py
    │   ├── test_security_http_bearer_optional.py
    │   ├── test_security_http_digest.py
    │   ├── test_security_http_digest_description.py
    │   ├── test_security_http_digest_optional.py
    │   ├── test_security_oauth2.py
    │   ├── test_security_oauth2_authorization_code_bearer.py
    │   ├── test_security_oauth2_authorization_code_bearer_description.py
    │   ├── test_security_oauth2_optional.py
    │   ├── test_security_oauth2_optional_description.py
    │   ├── test_security_oauth2_password_bearer_optional.py
    │   ├── test_security_oauth2_password_bearer_optional_description.py
    │   ├── test_security_openid_connect.py
    │   ├── test_security_openid_connect_description.py
    │   ├── test_security_openid_connect_optional.py
    │   ├── test_serialize_response.py
    │   ├── test_serialize_response_dataclass.py
    │   ├── test_serialize_response_model.py
    │   ├── test_skip_defaults.py
    │   ├── test_starlette_exception.py
    │   ├── test_starlette_urlconvertors.py
    │   ├── test_sub_callbacks.py
    │   ├── test_swagger_ui_init_oauth.py
    │   ├── test_tuples.py
    │   ├── test_typing_python39.py
    │   ├── test_union_body.py
    │   ├── test_union_inherited_body.py
    │   ├── test_validate_response.py
    │   ├── test_validate_response_dataclass.py
    │   ├── test_webhooks_security.py
    │   ├── test_ws_dependencies.py
    │   ├── test_ws_router.py
    │   ├── utils.py
    │   ├── test_filter_pydantic_sub_model/
    │   │   ├── __init__.py
    │   │   ├── app_pv1.py
    │   │   └── test_filter_pydantic_sub_model_pv1.py
    │   ├── test_modules_same_name_body/
    │   │   ├── __init__.py
    │   │   ├── test_main.py
    │   │   └── app/
    │   │       ├── __init__.py
    │   │       ├── a.py
    │   │       ├── b.py
    │   │       └── main.py
    │   ├── test_tutorial/
    │   │   ├── __init__.py
    │   │   ├── test_additional_responses/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   └── test_tutorial004.py
    │   │   ├── test_additional_status_codes/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_advanced_middleware/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   └── test_tutorial003.py
    │   │   ├── test_async_tests/
    │   │   │   ├── __init__.py
    │   │   │   └── test_main.py
    │   │   ├── test_background_tasks/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_behind_a_proxy/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   └── test_tutorial004.py
    │   │   ├── test_bigger_applications/
    │   │   │   ├── __init__.py
    │   │   │   └── test_main.py
    │   │   ├── test_body/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_body_fields/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_body_multiple_params/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py310.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   ├── test_tutorial001_py310.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial003_an.py
    │   │   │   ├── test_tutorial003_an_py310.py
    │   │   │   ├── test_tutorial003_an_py39.py
    │   │   │   └── test_tutorial003_py310.py
    │   │   ├── test_body_nested_models/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial009.py
    │   │   │   └── test_tutorial009_py39.py
    │   │   ├── test_body_updates/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_py310.py
    │   │   │   └── test_tutorial001_py39.py
    │   │   ├── test_conditional_openapi/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_configure_swagger_ui/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   └── test_tutorial003.py
    │   │   ├── test_cookie_param_models/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_cookie_params/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py310.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   └── test_tutorial001_py310.py
    │   │   ├── test_cors/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_custom_docs_ui/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_custom_request_and_route/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   └── test_tutorial003.py
    │   │   ├── test_custom_response/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001b.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   ├── test_tutorial006.py
    │   │   │   ├── test_tutorial006b.py
    │   │   │   ├── test_tutorial006c.py
    │   │   │   ├── test_tutorial007.py
    │   │   │   ├── test_tutorial008.py
    │   │   │   ├── test_tutorial009.py
    │   │   │   ├── test_tutorial009b.py
    │   │   │   └── test_tutorial009c.py
    │   │   ├── test_dataclasses/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   └── test_tutorial003.py
    │   │   ├── test_dependencies/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py310.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   ├── test_tutorial001_py310.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   ├── test_tutorial004_an.py
    │   │   │   ├── test_tutorial004_an_py310.py
    │   │   │   ├── test_tutorial004_an_py39.py
    │   │   │   ├── test_tutorial004_py310.py
    │   │   │   ├── test_tutorial006.py
    │   │   │   ├── test_tutorial006_an.py
    │   │   │   ├── test_tutorial006_an_py39.py
    │   │   │   ├── test_tutorial008b.py
    │   │   │   ├── test_tutorial008b_an.py
    │   │   │   ├── test_tutorial008b_an_py39.py
    │   │   │   ├── test_tutorial008c.py
    │   │   │   ├── test_tutorial008c_an.py
    │   │   │   ├── test_tutorial008c_an_py39.py
    │   │   │   ├── test_tutorial008d.py
    │   │   │   ├── test_tutorial008d_an.py
    │   │   │   ├── test_tutorial008d_an_py39.py
    │   │   │   ├── test_tutorial012.py
    │   │   │   ├── test_tutorial012_an.py
    │   │   │   └── test_tutorial012_an_py39.py
    │   │   ├── test_events/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   └── test_tutorial003.py
    │   │   ├── test_extending_openapi/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_extra_data_types/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py310.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   └── test_tutorial001_py310.py
    │   │   ├── test_extra_models/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial003_py310.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   ├── test_tutorial004_py39.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   └── test_tutorial005_py39.py
    │   │   ├── test_first_steps/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_generate_clients/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial003.py
    │   │   ├── test_handling_errors/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   └── test_tutorial006.py
    │   │   ├── test_header_param_models/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_header_params/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py310.py
    │   │   │   ├── test_tutorial001_py310.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial002_an.py
    │   │   │   ├── test_tutorial002_an_py310.py
    │   │   │   ├── test_tutorial002_an_py39.py
    │   │   │   ├── test_tutorial002_py310.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial003_an.py
    │   │   │   ├── test_tutorial003_an_py310.py
    │   │   │   ├── test_tutorial003_an_py39.py
    │   │   │   └── test_tutorial003_py310.py
    │   │   ├── test_metadata/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_1.py
    │   │   │   └── test_tutorial004.py
    │   │   ├── test_openapi_callbacks/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_openapi_webhooks/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_path_operation_advanced_configurations/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   ├── test_tutorial006.py
    │   │   │   ├── test_tutorial007.py
    │   │   │   └── test_tutorial007_pv1.py
    │   │   ├── test_path_operation_configurations/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial002b.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   ├── test_tutorial005_py310.py
    │   │   │   ├── test_tutorial005_py39.py
    │   │   │   └── test_tutorial006.py
    │   │   ├── test_path_params/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   └── test_tutorial005.py
    │   │   ├── test_query_param_models/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_query_params/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   ├── test_tutorial006.py
    │   │   │   └── test_tutorial006_py310.py
    │   │   ├── test_query_params_str_validations/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial010.py
    │   │   │   ├── test_tutorial010_an.py
    │   │   │   ├── test_tutorial010_an_py310.py
    │   │   │   ├── test_tutorial010_an_py39.py
    │   │   │   ├── test_tutorial010_py310.py
    │   │   │   ├── test_tutorial011.py
    │   │   │   ├── test_tutorial011_an.py
    │   │   │   ├── test_tutorial011_an_py310.py
    │   │   │   ├── test_tutorial011_an_py39.py
    │   │   │   ├── test_tutorial011_py310.py
    │   │   │   ├── test_tutorial011_py39.py
    │   │   │   ├── test_tutorial012.py
    │   │   │   ├── test_tutorial012_an.py
    │   │   │   ├── test_tutorial012_an_py39.py
    │   │   │   ├── test_tutorial012_py39.py
    │   │   │   ├── test_tutorial013.py
    │   │   │   ├── test_tutorial013_an.py
    │   │   │   ├── test_tutorial013_an_py39.py
    │   │   │   ├── test_tutorial014.py
    │   │   │   ├── test_tutorial014_an.py
    │   │   │   ├── test_tutorial014_an_py310.py
    │   │   │   ├── test_tutorial014_an_py39.py
    │   │   │   └── test_tutorial014_py310.py
    │   │   ├── test_request_files/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_02.py
    │   │   │   ├── test_tutorial001_02_an.py
    │   │   │   ├── test_tutorial001_02_an_py310.py
    │   │   │   ├── test_tutorial001_02_an_py39.py
    │   │   │   ├── test_tutorial001_02_py310.py
    │   │   │   ├── test_tutorial001_03.py
    │   │   │   ├── test_tutorial001_03_an.py
    │   │   │   ├── test_tutorial001_03_an_py39.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial002_an.py
    │   │   │   ├── test_tutorial002_an_py39.py
    │   │   │   ├── test_tutorial002_py39.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial003_an.py
    │   │   │   ├── test_tutorial003_an_py39.py
    │   │   │   └── test_tutorial003_py39.py
    │   │   ├── test_request_form_models/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial002_an.py
    │   │   │   ├── test_tutorial002_an_py39.py
    │   │   │   ├── test_tutorial002_pv1.py
    │   │   │   ├── test_tutorial002_pv1_an.py
    │   │   │   └── test_tutorial002_pv1_an_p39.py
    │   │   ├── test_request_forms/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   └── test_tutorial001_an_py39.py
    │   │   ├── test_request_forms_and_files/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   └── test_tutorial001_an_py39.py
    │   │   ├── test_response_change_status_code/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_response_cookies/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_response_headers/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_response_model/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial003_01.py
    │   │   │   ├── test_tutorial003_01_py310.py
    │   │   │   ├── test_tutorial003_02.py
    │   │   │   ├── test_tutorial003_03.py
    │   │   │   ├── test_tutorial003_04.py
    │   │   │   ├── test_tutorial003_04_py310.py
    │   │   │   ├── test_tutorial003_05.py
    │   │   │   ├── test_tutorial003_05_py310.py
    │   │   │   ├── test_tutorial003_py310.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   ├── test_tutorial004_py310.py
    │   │   │   ├── test_tutorial004_py39.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   ├── test_tutorial005_py310.py
    │   │   │   ├── test_tutorial006.py
    │   │   │   └── test_tutorial006_py310.py
    │   │   ├── test_schema_extra_example/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_pv1.py
    │   │   │   ├── test_tutorial001_pv1_py310.py
    │   │   │   ├── test_tutorial001_py310.py
    │   │   │   ├── test_tutorial004.py
    │   │   │   ├── test_tutorial004_an.py
    │   │   │   ├── test_tutorial004_an_py310.py
    │   │   │   ├── test_tutorial004_an_py39.py
    │   │   │   ├── test_tutorial004_py310.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   ├── test_tutorial005_an.py
    │   │   │   ├── test_tutorial005_an_py310.py
    │   │   │   ├── test_tutorial005_an_py39.py
    │   │   │   └── test_tutorial005_py310.py
    │   │   ├── test_security/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   ├── test_tutorial003_an.py
    │   │   │   ├── test_tutorial003_an_py310.py
    │   │   │   ├── test_tutorial003_an_py39.py
    │   │   │   ├── test_tutorial003_py310.py
    │   │   │   ├── test_tutorial005.py
    │   │   │   ├── test_tutorial005_an.py
    │   │   │   ├── test_tutorial005_an_py310.py
    │   │   │   ├── test_tutorial005_an_py39.py
    │   │   │   ├── test_tutorial005_py310.py
    │   │   │   ├── test_tutorial005_py39.py
    │   │   │   ├── test_tutorial006.py
    │   │   │   ├── test_tutorial006_an.py
    │   │   │   └── test_tutorial006_an_py39.py
    │   │   ├── test_separate_openapi_schemas/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_py310.py
    │   │   │   ├── test_tutorial001_py39.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial002_py310.py
    │   │   │   └── test_tutorial002_py39.py
    │   │   ├── test_settings/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_app02.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial001_pv1.py
    │   │   ├── test_sql_databases/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   └── test_tutorial002.py
    │   │   ├── test_sub_applications/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_templates/
    │   │   │   ├── __init__.py
    │   │   │   └── test_tutorial001.py
    │   │   ├── test_testing/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_main.py
    │   │   │   ├── test_main_b.py
    │   │   │   ├── test_main_b_an.py
    │   │   │   ├── test_main_b_an_py310.py
    │   │   │   ├── test_main_b_an_py39.py
    │   │   │   ├── test_main_b_py310.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   └── test_tutorial003.py
    │   │   ├── test_testing_dependencies/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial001_an.py
    │   │   │   ├── test_tutorial001_an_py310.py
    │   │   │   ├── test_tutorial001_an_py39.py
    │   │   │   └── test_tutorial001_py310.py
    │   │   ├── test_websockets/
    │   │   │   ├── __init__.py
    │   │   │   ├── test_tutorial001.py
    │   │   │   ├── test_tutorial002.py
    │   │   │   ├── test_tutorial002_an.py
    │   │   │   ├── test_tutorial002_an_py310.py
    │   │   │   ├── test_tutorial002_an_py39.py
    │   │   │   ├── test_tutorial002_py310.py
    │   │   │   ├── test_tutorial003.py
    │   │   │   └── test_tutorial003_py39.py
    │   │   └── test_wsgi/
    │   │       ├── __init__.py
    │   │       └── test_tutorial001.py
    │   └── test_validate_response_recursive/
    │       ├── __init__.py
    │       ├── app_pv1.py
    │       ├── app_pv2.py
    │       ├── test_validate_response_recursive_pv1.py
    │       └── test_validate_response_recursive_pv2.py
    └── .github/
        ├── FUNDING.yml
        ├── dependabot.yml
        ├── labeler.yml
        ├── DISCUSSION_TEMPLATE/
        │   └── questions.yml
        ├── ISSUE_TEMPLATE/
        │   ├── config.yml
        │   └── privileged.yml
        ├── actions/
        │   ├── notify-translations/
        │   │   ├── Dockerfile
        │   │   ├── action.yml
        │   │   └── app/
        │   │       └── main.py
        │   └── people/
        │       ├── Dockerfile
        │       ├── action.yml
        │       └── app/
        │           └── main.py
        └── workflows/
            ├── add-to-project.yml
            ├── build-docs.yml
            ├── contributors.yml
            ├── deploy-docs.yml
            ├── issue-manager.yml
            ├── label-approved.yml
            ├── labeler.yml
            ├── latest-changes.yml
            ├── notify-translations.yml
            ├── people.yml
            ├── publish.yml
            ├── smokeshow.yml
            ├── test-redistribute.yml
            ├── test.yml
            └── topic-repos.yml

================================================
File: /README.md
================================================
<p align="center">
  <a href="https://fastapi.tiangolo.com"><img src="https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png" alt="FastAPI"></a>
</p>
<p align="center">
    <em>FastAPI framework, high performance, easy to learn, fast to code, ready for production</em>
</p>
<p align="center">
<a href="https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster" target="_blank">
    <img src="https://github.com/fastapi/fastapi/workflows/Test/badge.svg?event=push&branch=master" alt="Test">
</a>
<a href="https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi" target="_blank">
    <img src="https://coverage-badge.samuelcolvin.workers.dev/fastapi/fastapi.svg" alt="Coverage">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package" alt="Package version">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058" alt="Supported Python versions">
</a>
</p>

---

**Documentation**: <a href="https://fastapi.tiangolo.com" target="_blank">https://fastapi.tiangolo.com</a>

**Source Code**: <a href="https://github.com/fastapi/fastapi" target="_blank">https://github.com/fastapi/fastapi</a>

---

FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints.

The key features are:

* **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). [One of the fastest Python frameworks available](#performance).
* **Fast to code**: Increase the speed to develop features by about 200% to 300%. *
* **Fewer bugs**: Reduce about 40% of human (developer) induced errors. *
* **Intuitive**: Great editor support. <abbr title="also known as auto-complete, autocompletion, IntelliSense">Completion</abbr> everywhere. Less time debugging.
* **Easy**: Designed to be easy to use and learn. Less time reading docs.
* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.
* **Robust**: Get production-ready code. With automatic interactive documentation.
* **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href="https://github.com/OAI/OpenAPI-Specification" class="external-link" target="_blank">OpenAPI</a> (previously known as Swagger) and <a href="https://json-schema.org/" class="external-link" target="_blank">JSON Schema</a>.

<small>* estimation based on tests on an internal development team, building production applications.</small>

## Sponsors

<!-- sponsors -->

<a href="https://blockbee.io?ref=fastapi" target="_blank" title="BlockBee Cryptocurrency Payment Gateway"><img src="https://fastapi.tiangolo.com/img/sponsors/blockbee.png"></a>
<a href="https://platform.sh/try-it-now/?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023" target="_blank" title="Build, run and scale your apps on a modern, reliable, and secure PaaS."><img src="https://fastapi.tiangolo.com/img/sponsors/platform-sh.png"></a>
<a href="https://www.porter.run" target="_blank" title="Deploy FastAPI on AWS with a few clicks"><img src="https://fastapi.tiangolo.com/img/sponsors/porter.png"></a>
<a href="https://bump.sh/fastapi?utm_source=fastapi&utm_medium=referral&utm_campaign=sponsor" target="_blank" title="Automate FastAPI documentation generation with Bump.sh"><img src="https://fastapi.tiangolo.com/img/sponsors/bump-sh.svg"></a>
<a href="https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge" target="_blank" title="Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files"><img src="https://fastapi.tiangolo.com/img/sponsors/scalar.svg"></a>
<a href="https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge" target="_blank" title="Auth, user management and more for your B2B product"><img src="https://fastapi.tiangolo.com/img/sponsors/propelauth.png"></a>
<a href="https://www.withcoherence.com/?utm_medium=advertising&utm_source=fastapi&utm_campaign=website" target="_blank" title="Coherence"><img src="https://fastapi.tiangolo.com/img/sponsors/coherence.png"></a>
<a href="https://www.mongodb.com/developer/languages/python/python-quickstart-fastapi/?utm_campaign=fastapi_framework&utm_source=fastapi_sponsorship&utm_medium=web_referral" target="_blank" title="Simplify Full Stack Development with FastAPI & MongoDB"><img src="https://fastapi.tiangolo.com/img/sponsors/mongodb.png"></a>
<a href="https://zuplo.link/fastapi-gh" target="_blank" title="Zuplo: Scale, Protect, Document, and Monetize your FastAPI"><img src="https://fastapi.tiangolo.com/img/sponsors/zuplo.png"></a>
<a href="https://liblab.com?utm_source=fastapi" target="_blank" title="liblab - Generate SDKs from FastAPI"><img src="https://fastapi.tiangolo.com/img/sponsors/liblab.png"></a>
<a href="https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi" target="_blank" title="Deploy & scale any full-stack web app on Render. Focus on building apps, not infra."><img src="https://fastapi.tiangolo.com/img/sponsors/render.svg"></a>
<a href="https://github.com/deepset-ai/haystack/" target="_blank" title="Build powerful search from composable, open source building blocks"><img src="https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg"></a>
<a href="https://databento.com/" target="_blank" title="Pay as you go for market data"><img src="https://fastapi.tiangolo.com/img/sponsors/databento.svg"></a>
<a href="https://speakeasy.com?utm_source=fastapi+repo&utm_medium=github+sponsorship" target="_blank" title="SDKs for your API | Speakeasy"><img src="https://fastapi.tiangolo.com/img/sponsors/speakeasy.png"></a>
<a href="https://www.svix.com/" target="_blank" title="Svix - Webhooks as a service"><img src="https://fastapi.tiangolo.com/img/sponsors/svix.svg"></a>
<a href="https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral" target="_blank" title="Stainless | Generate best-in-class SDKs"><img src="https://fastapi.tiangolo.com/img/sponsors/stainless.png"></a>

<!-- /sponsors -->

<a href="https://fastapi.tiangolo.com/fastapi-people/#sponsors" class="external-link" target="_blank">Other sponsors</a>

## Opinions

"_[...] I'm using **FastAPI** a ton these days. [...] I'm actually planning to use it for all of my team's **ML services at Microsoft**. Some of them are getting integrated into the core **Windows** product and some **Office** products._"

<div style="text-align: right; margin-right: 10%;">Kabir Khan - <strong>Microsoft</strong> <a href="https://github.com/fastapi/fastapi/pull/26" target="_blank"><small>(ref)</small></a></div>

---

"_We adopted the **FastAPI** library to spawn a **REST** server that can be queried to obtain **predictions**. [for Ludwig]_"

<div style="text-align: right; margin-right: 10%;">Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - <strong>Uber</strong> <a href="https://eng.uber.com/ludwig-v0-2/" target="_blank"><small>(ref)</small></a></div>

---

"_**Netflix** is pleased to announce the open-source release of our **crisis management** orchestration framework: **Dispatch**! [built with **FastAPI**]_"

<div style="text-align: right; margin-right: 10%;">Kevin Glisson, Marc Vilanova, Forest Monsen - <strong>Netflix</strong> <a href="https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072" target="_blank"><small>(ref)</small></a></div>

---

"_I’m over the moon excited about **FastAPI**. It’s so fun!_"

<div style="text-align: right; margin-right: 10%;">Brian Okken - <strong><a href="https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855" target="_blank">Python Bytes</a> podcast host</strong> <a href="https://twitter.com/brianokken/status/1112220079972728832" target="_blank"><small>(ref)</small></a></div>

---

"_Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted **Hug** to be - it's really inspiring to see someone build that._"

<div style="text-align: right; margin-right: 10%;">Timothy Crosley - <strong><a href="https://github.com/hugapi/hug" target="_blank">Hug</a> creator</strong> <a href="https://news.ycombinator.com/item?id=19455465" target="_blank"><small>(ref)</small></a></div>

---

"_If you're looking to learn one **modern framework** for building REST APIs, check out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_"

"_We've switched over to **FastAPI** for our **APIs** [...] I think you'll like it [...]_"

<div style="text-align: right; margin-right: 10%;">Ines Montani - Matthew Honnibal - <strong><a href="https://explosion.ai" target="_blank">Explosion AI</a> founders - <a href="https://spacy.io" target="_blank">spaCy</a> creators</strong> <a href="https://twitter.com/_inesmontani/status/1144173225322143744" target="_blank"><small>(ref)</small></a> - <a href="https://twitter.com/honnibal/status/1144031421859655680" target="_blank"><small>(ref)</small></a></div>

---

"_If anyone is looking to build a production Python API, I would highly recommend **FastAPI**. It is **beautifully designed**, **simple to use** and **highly scalable**, it has become a **key component** in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer._"

<div style="text-align: right; margin-right: 10%;">Deon Pillsbury - <strong>Cisco</strong> <a href="https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/" target="_blank"><small>(ref)</small></a></div>

---

## **Typer**, the FastAPI of CLIs

<a href="https://typer.tiangolo.com" target="_blank"><img src="https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg" style="width: 20%;"></a>

If you are building a <abbr title="Command Line Interface">CLI</abbr> app to be used in the terminal instead of a web API, check out <a href="https://typer.tiangolo.com/" class="external-link" target="_blank">**Typer**</a>.

**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI of CLIs**. ⌨️ 🚀

## Requirements

FastAPI stands on the shoulders of giants:

* <a href="https://www.starlette.io/" class="external-link" target="_blank">Starlette</a> for the web parts.
* <a href="https://docs.pydantic.dev/" class="external-link" target="_blank">Pydantic</a> for the data parts.

## Installation

Create and activate a <a href="https://fastapi.tiangolo.com/virtual-environments/" class="external-link" target="_blank">virtual environment</a> and then install FastAPI:

<div class="termy">

```console
$ pip install "fastapi[standard]"

---> 100%
```

</div>

**Note**: Make sure you put `"fastapi[standard]"` in quotes to ensure it works in all terminals.

## Example

### Create it

* Create a file `main.py` with:

```Python
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

<details markdown="1">
<summary>Or use <code>async def</code>...</summary>

If your code uses `async` / `await`, use `async def`:

```Python hl_lines="9  14"
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

**Note**:

If you don't know, check the _"In a hurry?"_ section about <a href="https://fastapi.tiangolo.com/async/#in-a-hurry" target="_blank">`async` and `await` in the docs</a>.

</details>

### Run it

Run the server with:

<div class="termy">

```console
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

</div>

<details markdown="1">
<summary>About the command <code>fastapi dev main.py</code>...</summary>

The command `fastapi dev` reads your `main.py` file, detects the **FastAPI** app in it, and starts a server using <a href="https://www.uvicorn.org" class="external-link" target="_blank">Uvicorn</a>.

By default, `fastapi dev` will start with auto-reload enabled for local development.

You can read more about it in the <a href="https://fastapi.tiangolo.com/fastapi-cli/" target="_blank">FastAPI CLI docs</a>.

</details>

### Check it

Open your browser at <a href="http://127.0.0.1:8000/items/5?q=somequery" class="external-link" target="_blank">http://127.0.0.1:8000/items/5?q=somequery</a>.

You will see the JSON response as:

```JSON
{"item_id": 5, "q": "somequery"}
```

You already created an API that:

* Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.
* Both _paths_ take `GET` <em>operations</em> (also known as HTTP _methods_).
* The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.
* The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.

### Interactive API docs

Now go to <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

You will see the automatic interactive API documentation (provided by <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a>):

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)

### Alternative API docs

And now, go to <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a>.

You will see the alternative automatic documentation (provided by <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a>):

![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)

## Example upgrade

Now modify the file `main.py` to receive a body from a `PUT` request.

Declare the body using standard Python types, thanks to Pydantic.

```Python hl_lines="4  9-12  25-27"
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

The `fastapi dev` server should reload automatically.

### Interactive API docs upgrade

Now go to <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

* The interactive API documentation will be automatically updated, including the new body:

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)

* Click on the button "Try it out", it allows you to fill the parameters and directly interact with the API:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)

* Then click on the "Execute" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)

### Alternative API docs upgrade

And now, go to <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a>.

* The alternative documentation will also reflect the new query parameter and body:

![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)

### Recap

In summary, you declare **once** the types of parameters, body, etc. as function parameters.

You do that with standard modern Python types.

You don't have to learn a new syntax, the methods or classes of a specific library, etc.

Just standard **Python**.

For example, for an `int`:

```Python
item_id: int
```

or for a more complex `Item` model:

```Python
item: Item
```

...and with that single declaration you get:

* Editor support, including:
    * Completion.
    * Type checks.
* Validation of data:
    * Automatic and clear errors when the data is invalid.
    * Validation even for deeply nested JSON objects.
* <abbr title="also known as: serialization, parsing, marshalling">Conversion</abbr> of input data: coming from the network to Python data and types. Reading from:
    * JSON.
    * Path parameters.
    * Query parameters.
    * Cookies.
    * Headers.
    * Forms.
    * Files.
* <abbr title="also known as: serialization, parsing, marshalling">Conversion</abbr> of output data: converting from Python data and types to network data (as JSON):
    * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).
    * `datetime` objects.
    * `UUID` objects.
    * Database models.
    * ...and many more.
* Automatic interactive API documentation, including 2 alternative user interfaces:
    * Swagger UI.
    * ReDoc.

---

Coming back to the previous code example, **FastAPI** will:

* Validate that there is an `item_id` in the path for `GET` and `PUT` requests.
* Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.
    * If it is not, the client will see a useful, clear error.
* Check if there is an optional query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.
    * As the `q` parameter is declared with `= None`, it is optional.
    * Without the `None` it would be required (as is the body in the case with `PUT`).
* For `PUT` requests to `/items/{item_id}`, read the body as JSON:
    * Check that it has a required attribute `name` that should be a `str`.
    * Check that it has a required attribute `price` that has to be a `float`.
    * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.
    * All this would also work for deeply nested JSON objects.
* Convert from and to JSON automatically.
* Document everything with OpenAPI, that can be used by:
    * Interactive documentation systems.
    * Automatic client code generation systems, for many languages.
* Provide 2 interactive documentation web interfaces directly.

---

We just scratched the surface, but you already get the idea of how it all works.

Try changing the line with:

```Python
    return {"item_name": item.name, "item_id": item_id}
```

...from:

```Python
        ... "item_name": item.name ...
```

...to:

```Python
        ... "item_price": item.price ...
```

...and see how your editor will auto-complete the attributes and know their types:

![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)

For a more complete example including more features, see the <a href="https://fastapi.tiangolo.com/tutorial/">Tutorial - User Guide</a>.

**Spoiler alert**: the tutorial - user guide includes:

* Declaration of **parameters** from other different places as: **headers**, **cookies**, **form fields** and **files**.
* How to set **validation constraints** as `maximum_length` or `regex`.
* A very powerful and easy to use **<abbr title="also known as components, resources, providers, services, injectables">Dependency Injection</abbr>** system.
* Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.
* More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).
* **GraphQL** integration with <a href="https://strawberry.rocks" class="external-link" target="_blank">Strawberry</a> and other libraries.
* Many extra features (thanks to Starlette) as:
    * **WebSockets**
    * extremely easy tests based on HTTPX and `pytest`
    * **CORS**
    * **Cookie Sessions**
    * ...and more.

## Performance

Independent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as <a href="https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7" class="external-link" target="_blank">one of the fastest Python frameworks available</a>, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)

To understand more about it, see the section <a href="https://fastapi.tiangolo.com/benchmarks/" class="internal-link" target="_blank">Benchmarks</a>.

## Dependencies

FastAPI depends on Pydantic and Starlette.

### `standard` Dependencies

When you install FastAPI with `pip install "fastapi[standard]"` it comes with the `standard` group of optional dependencies:

Used by Pydantic:

* <a href="https://github.com/JoshData/python-email-validator" target="_blank"><code>email-validator</code></a> - for email validation.

Used by Starlette:

* <a href="https://www.python-httpx.org" target="_blank"><code>httpx</code></a> - Required if you want to use the `TestClient`.
* <a href="https://jinja.palletsprojects.com" target="_blank"><code>jinja2</code></a> - Required if you want to use the default template configuration.
* <a href="https://github.com/Kludex/python-multipart" target="_blank"><code>python-multipart</code></a> - Required if you want to support form <abbr title="converting the string that comes from an HTTP request into Python data">"parsing"</abbr>, with `request.form()`.

Used by FastAPI / Starlette:

* <a href="https://www.uvicorn.org" target="_blank"><code>uvicorn</code></a> - for the server that loads and serves your application. This includes `uvicorn[standard]`, which includes some dependencies (e.g. `uvloop`) needed for high performance serving.
* `fastapi-cli` - to provide the `fastapi` command.

### Without `standard` Dependencies

If you don't want to include the `standard` optional dependencies, you can install with `pip install fastapi` instead of `pip install "fastapi[standard]"`.

### Additional Optional Dependencies

There are some additional dependencies you might want to install.

Additional optional Pydantic dependencies:

* <a href="https://docs.pydantic.dev/latest/usage/pydantic_settings/" target="_blank"><code>pydantic-settings</code></a> - for settings management.
* <a href="https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/" target="_blank"><code>pydantic-extra-types</code></a> - for extra types to be used with Pydantic.

Additional optional FastAPI dependencies:

* <a href="https://github.com/ijl/orjson" target="_blank"><code>orjson</code></a> - Required if you want to use `ORJSONResponse`.
* <a href="https://github.com/esnme/ultrajson" target="_blank"><code>ujson</code></a> - Required if you want to use `UJSONResponse`.

## License

This project is licensed under the terms of the MIT license.


================================================
File: /CITATION.cff
================================================
# This CITATION.cff file was generated with cffinit.
# Visit https://bit.ly/cffinit to generate yours today!

cff-version: 1.2.0
title: FastAPI
message: >-
  If you use this software, please cite it using the
  metadata from this file.
type: software
authors:
  - given-names: Sebastián
    family-names: Ramírez
    email: tiangolo@gmail.com
identifiers:
repository-code: 'https://github.com/fastapi/fastapi'
url: 'https://fastapi.tiangolo.com'
abstract: >-
  FastAPI framework, high performance, easy to learn, fast to code,
  ready for production
keywords:
  - fastapi
  - pydantic
  - starlette
license: MIT


================================================
File: /CONTRIBUTING.md
================================================
Please read the [Development - Contributing](https://fastapi.tiangolo.com/contributing/) guidelines in the documentation site.


================================================
File: /LICENSE
================================================
The MIT License (MIT)

Copyright (c) 2018 Sebastián Ramírez

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: /SECURITY.md
================================================
# Security Policy

Security is very important for FastAPI and its community. 🔒

Learn more about it below. 👇

## Versions

The latest version of FastAPI is supported.

You are encouraged to [write tests](https://fastapi.tiangolo.com/tutorial/testing/) for your application and update your FastAPI version frequently after ensuring that your tests are passing. This way you will benefit from the latest features, bug fixes, and **security fixes**.

You can learn more about [FastAPI versions and how to pin and upgrade them](https://fastapi.tiangolo.com/deployment/versions/) for your project in the docs.

## Reporting a Vulnerability

If you think you found a vulnerability, and even if you are not sure about it, please report it right away by sending an email to: security@tiangolo.com. Please try to be as explicit as possible, describing all the steps and example code to reproduce the security issue.

I (the author, [@tiangolo](https://twitter.com/tiangolo)) will review it thoroughly and get back to you.

## Public Discussions

Please restrain from publicly discussing a potential security vulnerability. 🙊

It's better to discuss privately and try to find a solution first, to limit the potential impact as much as possible.

---

Thanks for your help!

The FastAPI community and I thank you for that. 🙇


================================================
File: /pdm_build.py
================================================
import os
from typing import Any, Dict

from pdm.backend.hooks import Context

TIANGOLO_BUILD_PACKAGE = os.getenv("TIANGOLO_BUILD_PACKAGE", "fastapi")


def pdm_build_initialize(context: Context) -> None:
    metadata = context.config.metadata
    # Get custom config for the current package, from the env var
    config: Dict[str, Any] = context.config.data["tool"]["tiangolo"][
        "_internal-slim-build"
    ]["packages"].get(TIANGOLO_BUILD_PACKAGE)
    if not config:
        return
    project_config: Dict[str, Any] = config["project"]
    # Override main [project] configs with custom configs for this package
    for key, value in project_config.items():
        metadata[key] = value


================================================
File: /pyproject.toml
================================================
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "fastapi"
dynamic = ["version"]
description = "FastAPI framework, high performance, easy to learn, fast to code, ready for production"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    { name = "Sebastián Ramírez", email = "tiangolo@gmail.com" },
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
]
dependencies = [
    "starlette>=0.40.0,<0.42.0",
    "pydantic>=1.7.4,!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0",
    "typing-extensions>=4.8.0",
]

[project.urls]
Homepage = "https://github.com/fastapi/fastapi"
Documentation = "https://fastapi.tiangolo.com/"
Repository = "https://github.com/fastapi/fastapi"
Issues = "https://github.com/fastapi/fastapi/issues"
Changelog = "https://fastapi.tiangolo.com/release-notes/"

[project.optional-dependencies]

standard = [
    "fastapi-cli[standard] >=0.0.5",
    # For the test client
    "httpx >=0.23.0",
    # For templates
    "jinja2 >=2.11.2",
    # For forms and file uploads
    "python-multipart >=0.0.7",
    # To validate email fields
    "email-validator >=2.0.0",
    # Uvicorn with uvloop
    "uvicorn[standard] >=0.12.0",
    # TODO: this should be part of some pydantic optional extra dependencies
    # # Settings management
    # "pydantic-settings >=2.0.0",
    # # Extra Pydantic data types
    # "pydantic-extra-types >=2.0.0",
]

all = [
    "fastapi-cli[standard] >=0.0.5",
    # # For the test client
    "httpx >=0.23.0",
    # For templates
    "jinja2 >=2.11.2",
    # For forms and file uploads
    "python-multipart >=0.0.7",
    # For Starlette's SessionMiddleware, not commonly used with FastAPI
    "itsdangerous >=1.1.0",
    # For Starlette's schema generation, would not be used with FastAPI
    "pyyaml >=5.3.1",
    # For UJSONResponse
    "ujson >=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0",
    # For ORJSONResponse
    "orjson >=3.2.1",
    # To validate email fields
    "email-validator >=2.0.0",
    # Uvicorn with uvloop
    "uvicorn[standard] >=0.12.0",
    # Settings management
    "pydantic-settings >=2.0.0",
    # Extra Pydantic data types
    "pydantic-extra-types >=2.0.0",
]

[project.scripts]
fastapi = "fastapi.cli:main"

[tool.pdm]
version = { source = "file", path = "fastapi/__init__.py" }
distribution = true

[tool.pdm.build]
source-includes = [
    "tests/",
    "docs_src/",
    "requirements*.txt",
    "scripts/",
    # For a test
    "docs/en/docs/img/favicon.png",
    ]

[tool.tiangolo._internal-slim-build.packages.fastapi-slim.project]
name = "fastapi-slim"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = "fastapi.concurrency"
warn_unused_ignores = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fastapi.tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs_src.*"
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false

[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
  "--ignore=docs_src",
]
xfail_strict = true
junit_family = "xunit2"
filterwarnings = [
    "error",
    'ignore:starlette.middleware.wsgi is deprecated and will be removed in a future release\..*:DeprecationWarning:starlette',
    # For passlib
    "ignore:'crypt' is deprecated and slated for removal in Python 3.13:DeprecationWarning",
    # see https://trio.readthedocs.io/en/stable/history.html#trio-0-22-0-2022-09-28
    "ignore:You seem to already have a custom.*:RuntimeWarning:trio",
    # TODO: remove after upgrading SQLAlchemy to a version that includes the following changes
    # https://github.com/sqlalchemy/sqlalchemy/commit/59521abcc0676e936b31a523bd968fc157fef0c2
    'ignore:datetime\.datetime\.utcfromtimestamp\(\) is deprecated and scheduled for removal in a future version\..*:DeprecationWarning:sqlalchemy',
    # Trio 24.1.0 raises a warning from attrs
    # Ref: https://github.com/python-trio/trio/pull/3054
    # Remove once there's a new version of Trio
    'ignore:The `hash` argument is deprecated*:DeprecationWarning:trio',
]

[tool.coverage.run]
parallel = true
data_file = "coverage/.coverage"
source = [
    "docs_src",
    "tests",
    "fastapi"
]
context = '${CONTEXT}'
dynamic_context = "test_function"
omit = [
    "docs_src/response_model/tutorial003_04.py",
    "docs_src/response_model/tutorial003_04_py310.py",
]

[tool.coverage.report]
show_missing = true
sort = "-Cover"

[tool.coverage.html]
show_contexts = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"docs_src/dependencies/tutorial007.py" = ["F821"]
"docs_src/dependencies/tutorial008.py" = ["F821"]
"docs_src/dependencies/tutorial009.py" = ["F821"]
"docs_src/dependencies/tutorial010.py" = ["F821"]
"docs_src/custom_response/tutorial007.py" = ["B007"]
"docs_src/dataclasses/tutorial003.py" = ["I001"]
"docs_src/path_operation_advanced_configuration/tutorial007.py" = ["B904"]
"docs_src/path_operation_advanced_configuration/tutorial007_pv1.py" = ["B904"]
"docs_src/custom_request_and_route/tutorial002.py" = ["B904"]
"docs_src/dependencies/tutorial008_an.py" = ["F821"]
"docs_src/dependencies/tutorial008_an_py39.py" = ["F821"]
"docs_src/query_params_str_validations/tutorial012_an.py" = ["B006"]
"docs_src/query_params_str_validations/tutorial012_an_py39.py" = ["B006"]
"docs_src/query_params_str_validations/tutorial013_an.py" = ["B006"]
"docs_src/query_params_str_validations/tutorial013_an_py39.py" = ["B006"]
"docs_src/security/tutorial004.py" = ["B904"]
"docs_src/security/tutorial004_an.py" = ["B904"]
"docs_src/security/tutorial004_an_py310.py" = ["B904"]
"docs_src/security/tutorial004_an_py39.py" = ["B904"]
"docs_src/security/tutorial004_py310.py" = ["B904"]
"docs_src/security/tutorial005.py" = ["B904"]
"docs_src/security/tutorial005_an.py" = ["B904"]
"docs_src/security/tutorial005_an_py310.py" = ["B904"]
"docs_src/security/tutorial005_an_py39.py" = ["B904"]
"docs_src/security/tutorial005_py310.py" = ["B904"]
"docs_src/security/tutorial005_py39.py" = ["B904"]
"docs_src/dependencies/tutorial008b.py" = ["B904"]
"docs_src/dependencies/tutorial008b_an.py" = ["B904"]
"docs_src/dependencies/tutorial008b_an_py39.py" = ["B904"]


[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.inline-snapshot]
# default-flags=["fix"]
# default-flags=["create"]


================================================
File: /requirements-docs-insiders.txt
================================================
git+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11
git+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git
git+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git


================================================
File: /requirements-docs-tests.txt
================================================
# For mkdocstrings and tests
httpx >=0.23.0,<0.28.0
# For linting and generating docs versions
ruff ==0.6.4


================================================
File: /requirements-docs.txt
================================================
-e .
-r requirements-docs-tests.txt
mkdocs-material==9.5.18
mdx-include >=1.4.1,<2.0.0
mkdocs-redirects>=1.2.1,<1.3.0
typer == 0.12.5
pyyaml >=5.3.1,<7.0.0
# For Material for MkDocs, Chinese search
jieba==0.42.1
# For image processing by Material for MkDocs
pillow==11.0.0
# For image processing by Material for MkDocs
cairosvg==2.7.1
mkdocstrings[python]==0.26.1
griffe-typingdoc==0.2.7
# For griffe, it formats with black
black==24.10.0
mkdocs-macros-plugin==1.3.7
markdown-include-variants==0.0.4


================================================
File: /requirements-github-actions.txt
================================================
PyGithub>=2.3.0,<3.0.0
pydantic>=2.5.3,<3.0.0
pydantic-settings>=2.1.0,<3.0.0
httpx>=0.27.0,<0.28.0
pyyaml >=5.3.1,<7.0.0
smokeshow


================================================
File: /requirements-tests.txt
================================================
-e .[all]
-r requirements-docs-tests.txt
pytest >=7.1.3,<9.0.0
coverage[toml] >= 6.5.0,< 8.0
mypy ==1.8.0
dirty-equals ==0.8.0
sqlmodel==0.0.22
flask >=1.1.2,<4.0.0
anyio[trio] >=3.2.1,<4.0.0
PyJWT==2.8.0
pyyaml >=5.3.1,<7.0.0
passlib[bcrypt] >=1.7.2,<2.0.0
inline-snapshot==0.18.1
# types
types-ujson ==5.10.0.20240515
types-orjson ==3.6.2


================================================
File: /requirements-translations.txt
================================================
pydantic-ai==0.0.15


================================================
File: /requirements.txt
================================================
-e .[all]
-r requirements-tests.txt
-r requirements-docs.txt
pre-commit >=2.17.0,<5.0.0
# For generating screenshots
playwright


================================================
File: /.pre-commit-config.yaml
================================================
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
default_language_version:
    python: python3.10
repos:
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
    -   id: check-added-large-files
    -   id: check-toml
    -   id: check-yaml
        args:
        -   --unsafe
    -   id: end-of-file-fixer
    -   id: trailing-whitespace
-   repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.7.4
    hooks:
    -   id: ruff
        args:
        - --fix
    -   id: ruff-format
ci:
    autofix_commit_msg: 🎨 [pre-commit.ci] Auto format from pre-commit.com hooks
    autoupdate_commit_msg: ⬆ [pre-commit.ci] pre-commit autoupdate


================================================
File: /docs/language_names.yml
================================================
aa: Afaraf
ab: аҧсуа бызшәа
ae: avesta
af: Afrikaans
ak: Akan
am: አማርኛ
an: aragonés
ar: اللغة العربية
as: অসমীয়া
av: авар мацӀ
ay: aymar aru
az: azərbaycan dili
ba: башҡорт теле
be: беларуская мова
bg: български език
bh: भोजपुरी
bi: Bislama
bm: bamanankan
bn: বাংলা
bo: བོད་ཡིག
br: brezhoneg
bs: bosanski jezik
ca: Català
ce: нохчийн мотт
ch: Chamoru
co: corsu
cr: ᓀᐦᐃᔭᐍᐏᐣ
cs: čeština
cu: ѩзыкъ словѣньскъ
cv: чӑваш чӗлхи
cy: Cymraeg
da: dansk
de: Deutsch
dv: Dhivehi
dz: རྫོང་ཁ
ee: Eʋegbe
el: Ελληνικά
en: English
eo: Esperanto
es: español
et: eesti
eu: euskara
fa: فارسی
ff: Fulfulde
fi: suomi
fj: Vakaviti
fo: føroyskt
fr: français
fy: Frysk
ga: Gaeilge
gd: Gàidhlig
gl: galego
gu: ગુજરાતી
gv: Gaelg
ha: هَوُسَ
he: עברית
hi: हिन्दी
ho: Hiri Motu
hr: Hrvatski
ht: Kreyòl ayisyen
hu: magyar
hy: Հայերեն
hz: Otjiherero
ia: Interlingua
id: Bahasa Indonesia
ie: Interlingue
ig: Asụsụ Igbo
ii: ꆈꌠ꒿ Nuosuhxop
ik: Iñupiaq
io: Ido
is: Íslenska
it: italiano
iu: ᐃᓄᒃᑎᑐᑦ
ja: 日本語
jv: basa Jawa
ka: ქართული
kg: Kikongo
ki: Gĩkũyũ
kj: Kuanyama
kk: қазақ тілі
kl: kalaallisut
km: ខេមរភាសា
kn: ಕನ್ನಡ
ko: 한국어
kr: Kanuri
ks: कश्मीरी
ku: Kurdî
kv: коми кыв
kw: Kernewek
ky: Кыргызча
la: latine
lb: Lëtzebuergesch
lg: Luganda
li: Limburgs
ln: Lingála
lo: ພາສາ
lt: lietuvių kalba
lu: Tshiluba
lv: latviešu valoda
mg: fiteny malagasy
mh: Kajin M̧ajeļ
mi: te reo Māori
mk: македонски јазик
ml: മലയാളം
mn: Монгол хэл
mr: मराठी
ms: Bahasa Malaysia
mt: Malti
my: ဗမာစာ
na: Ekakairũ Naoero
nb: Norsk bokmål
nd: isiNdebele
ne: नेपाली
ng: Owambo
nl: Nederlands
nn: Norsk nynorsk
'no': Norsk
nr: isiNdebele
nv: Diné bizaad
ny: chiCheŵa
oc: occitan
oj: ᐊᓂᔑᓈᐯᒧᐎᓐ
om: Afaan Oromoo
or: ଓଡ଼ିଆ
os: ирон æвзаг
pa: ਪੰਜਾਬੀ
pi: पाऴि
pl: Polski
ps: پښتو
pt: português
qu: Runa Simi
rm: rumantsch grischun
rn: Ikirundi
ro: Română
ru: русский язык
rw: Ikinyarwanda
sa: संस्कृतम्
sc: sardu
sd: सिन्धी
se: Davvisámegiella
sg: yângâ tî sängö
si: සිංහල
sk: slovenčina
sl: slovenščina
sn: chiShona
so: Soomaaliga
sq: shqip
sr: српски језик
ss: SiSwati
st: Sesotho
su: Basa Sunda
sv: svenska
sw: Kiswahili
ta: தமிழ்
te: తెలుగు
tg: тоҷикӣ
th: ไทย
ti: ትግርኛ
tk: Türkmen
tl: Wikang Tagalog
tn: Setswana
to: faka Tonga
tr: Türkçe
ts: Xitsonga
tt: татар теле
tw: Twi
ty: Reo Tahiti
ug: ئۇيغۇرچە‎
uk: українська мова
ur: اردو
uz: Ўзбек
ve: Tshivenḓa
vi: Tiếng Việt
vo: Volapük
wa: walon
wo: Wollof
xh: isiXhosa
yi: ייִדיש
yo: Yorùbá
za: Saɯ cueŋƅ
zh: 简体中文
zh-hant: 繁體中文
zu: isiZulu


================================================
File: /docs/missing-translation.md
================================================
/// warning

The current page still doesn't have a translation for this language.

But you can help translating it: [Contributing](https://fastapi.tiangolo.com/contributing/){.internal-link target=_blank}.

///


================================================
File: /docs/az/mkdocs.yml
================================================
INHERIT: ../en/mkdocs.yml


================================================
File: /docs/az/docs/index.md
================================================
<p align="center">
  <a href="https://fastapi.tiangolo.com"><img src="https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png" alt="FastAPI"></a>
</p>
<p align="center">
    <em>FastAPI framework, yüksək məshuldarlı, öyrənməsi asan, çevik kodlama, istifadəyə hazırdır</em>
</p>
<p align="center">
<a href="https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster" target="_blank">
    <img src="https://github.com/fastapi/fastapi/workflows/Test/badge.svg?event=push&branch=master" alt="Test">
</a>
<a href="https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi" target="_blank">
    <img src="https://coverage-badge.samuelcolvin.workers.dev/fastapi/fastapi.svg" alt="Əhatə">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package" alt="Paket versiyası">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058" alt="Dəstəklənən Python versiyaları">
</a>
</p>

---

**Sənədlər**: <a href="https://fastapi.tiangolo.com" target="_blank">https://fastapi.tiangolo.com</a>

**Qaynaq Kodu**: <a href="https://github.com/fastapi/fastapi" target="_blank">https://github.com/fastapi/fastapi</a>

---

FastAPI Python ilə API yaratmaq üçün standart Python <abbr title="Tip Məsləhətləri: Type Hints">tip məsləhətlərinə</abbr> əsaslanan, müasir, sürətli (yüksək performanslı) framework-dür.

Əsas xüsusiyyətləri bunlardır:

* **Sürətli**: Çox yüksək performans, **NodeJS** və **Go** səviyyəsində (Starlette və Pydantic-ə təşəkkürlər). [Ən sürətli Python frameworklərindən biridir](#performans).
* **Çevik kodlama**: Funksiyanallıqları inkişaf etdirmək sürətini təxminən 200%-dən 300%-ə qədər artırın. *
* **Daha az xəta**: İnsan (developer) tərəfindən törədilən səhvlərin təxminən 40% -ni azaldın. *
* **İntuitiv**: Əla redaktor dəstəyi. Hər yerdə <abbr title="auto-complete, autocompletion, IntelliSense olaraq da bilinir">otomatik tamamlama</abbr>. Xətaları müəyyənləşdirməyə daha az vaxt sərf edəcəksiniz.
* **Asan**: İstifadəsi və öyrənilməsi asan olması üçün nəzərdə tutulmuşdur. Sənədləri oxumaq üçün daha az vaxt ayıracaqsınız.
* **Qısa**: Kod təkrarlanmasını minimuma endirin. Hər bir parametr tərifində birdən çox xüsusiyyət ilə və daha az səhvlə qarşılaşacaqsınız.
* **Güclü**: Avtomatik və interaktiv sənədlərlə birlikdə istifadəyə hazır kod əldə edə bilərsiniz.
* **Standartlara əsaslanan**: API-lar üçün açıq standartlara əsaslanır (və tam uyğun gəlir): <a href="https://github.com/OAI/OpenAPI-Specification" class="external-link" target="_blank">OpenAPI</a> (əvvəlki adı ilə Swagger) və <a href="https://json-schema.org/" class="external-link" target="_blank">JSON Schema</a>.

<small>* Bu fikirlər daxili development komandasının hazırladıqları məhsulların sınaqlarına əsaslanır.</small>

## Sponsorlar

<!-- sponsors -->

{% if sponsors %}
{% for sponsor in sponsors.gold -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor -%}`
{%- for sponsor in sponsors.silver -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

<!-- /sponsors -->

<a href="https://fastapi.tiangolo.com/az/fastapi-people/#sponsors" class="external-link" target="_blank">Digər sponsorlar</a>

## Rəylər

"_[...] Son günlərdə **FastAPI**-ı çox istifadə edirəm. [...]  Əslində onu komandamın bütün **Microsoftda ML sevislərində** istifadə etməyi planlayıram. Onların bəziləri **windows**-un əsas məhsuluna və bəzi **Office** məhsullarına inteqrasiya olunurlar._"

<div style="text-align: right; margin-right: 10%;">Kabir Khan - <strong>Microsoft</strong> <a href="https://github.com/fastapi/fastapi/pull/26" target="_blank"><small>(ref)</small></a></div>

---

"_**FastAPI** kitabxanasını **Proqnozlar** əldə etmək üçün sorğulana bilən **REST** serverini yaratmaqda istifadə etdik._"

<div style="text-align: right; margin-right: 10%;">Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - <strong>Uber</strong> <a href="https://eng.uber.com/ludwig-v0-2/" target="_blank"><small>(ref)</small></a></div>

---

"_**Netflix** **böhran idarəçiliyi** orkestrləşmə framework-nün açıq qaynaqlı buraxılışını elan etməkdən məmnundur: **Dispatch**! [**FastAPI** ilə quruldu]_"

<div style="text-align: right; margin-right: 10%;">Kevin Glisson, Marc Vilanova, Forest Monsen - <strong>Netflix</strong> <a href="https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072" target="_blank"><small>(ref)</small></a></div>

---

"_**FastAPI** üçün həyəcanlıyam. Çox əyləncəlidir!_"

<div style="text-align: right; margin-right: 10%;">Brian Okken - <strong><a href="https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855" target="_blank">Python Bytes</a> podcast host</strong> <a href="https://twitter.com/brianokken/status/1112220079972728832" target="_blank"><small>(ref)</small></a></div>

---

"_Düzünü desəm, sizin qurduğunuz şey həqiqətən möhkəm və peşəkar görünür. Bir çox cəhətdən **Hug**-un olmasını istədiyim kimdir - kiminsə belə bir şey qurduğunu görmək həqiqətən ruhlandırıcıdır._"

<div style="text-align: right; margin-right: 10%;">Timothy Crosley - <strong><a href="https://github.com/hugapi/hug" target="_blank">Hug</a> creator</strong> <a href="https://news.ycombinator.com/item?id=19455465" target="_blank"><small>(ref)</small></a></div>

---

"_Əgər REST API-lər yaratmaq üçün **müasir framework** öyrənmək istəyirsinizsə, **FastAPI**-a baxın [...] Sürətli, istifadəsi və öyrənməsi asandır. [...]_"

"_**API** xidmətlərimizi **FastAPI**-a köçürdük [...] Sizin də bəyənəcəyinizi düşünürük._"

<div style="text-align: right; margin-right: 10%;">Ines Montani - Matthew Honnibal - <strong><a href="https://explosion.ai" target="_blank">Explosion AI</a> founders - <a href="https://spacy.io" target="_blank">spaCy</a> creators</strong> <a href="https://twitter.com/_inesmontani/status/1144173225322143744" target="_blank"><small>(ref)</small></a> - <a href="https://twitter.com/honnibal/status/1144031421859655680" target="_blank"><small>(ref)</small></a></div>

---

"_Python ilə istifadəyə hazır API qurmaq istəyən hər kəsə **FastAPI**-ı tövsiyə edirəm. **Möhtəşəm şəkildə dizayn edilmiş**, **istifadəsi asan** və **yüksək dərəcədə genişlənə bilən**-dir, API əsaslı inkişaf strategiyamızın **əsas komponentinə** çevrilib və Virtual TAC Engineer kimi bir çox avtomatlaşdırma və servisləri idarə edir._"

<div style="text-align: right; margin-right: 10%;">Deon Pillsbury - <strong>Cisco</strong> <a href="https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/" target="_blank"><small>(ref)</small></a></div>

---

## **Typer**, CLI-ların FastAPI-ı

<a href="https://typer.tiangolo.com" target="_blank"><img src="https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg" style="width: 20%;"></a>

Əgər siz veb API əvəzinə terminalda istifadə ediləcək <abbr title="Command Line Interface">CLI</abbr> proqramı qurursunuzsa, <a href="https://typer.tiangolo.com/" class="external-link" target="_blank">**Typer**</a>-a baxa bilərsiniz.

**Typer** FastAPI-ın kiçik qardaşıdır. Və o, CLI-lərin **FastAPI**-ı olmaq üçün nəzərdə tutulub. ⌨️ 🚀

## Tələblər

FastAPI nəhənglərin çiyinlərində dayanır:

* Web tərəfi üçün <a href="https://www.starlette.io/" class="external-link" target="_blank">Starlette</a>.
* Data tərəfi üçün <a href="https://docs.pydantic.dev/" class="external-link" target="_blank">Pydantic</a>.

## Quraşdırma

<div class="termy">

```console
$ pip install fastapi

---> 100%
```

</div>

Tətbiqimizi əlçatan etmək üçün bizə <a href="https://www.uvicorn.org" class="external-link" target="_blank">Uvicorn</a> və ya <a href="https://github.com/pgjones/hypercorn" class="external-link" target="_blank">Hypercorn</a> kimi ASGI server lazımdır.

<div class="termy">

```console
$ pip install "uvicorn[standard]"

---> 100%
```

</div>

## Nümunə

### Kodu yaradaq

* `main.py` adlı fayl yaradaq və ona aşağıdakı kodu yerləşdirək:

```Python
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

<details markdown="1">
<summary>Və ya <code>async def</code>...</summary>

Əgər kodunuzda `async` və ya `await` vardırsa `async def` istifadə edə bilərik:

```Python hl_lines="9  14"
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

**Qeyd**:

Əgər bu mövzu haqqında məlumatınız yoxdursa <a href="https://fastapi.tiangolo.com/az/async/#in-a-hurry" target="_blank">`async` və `await` sənədindəki</a> _"Tələsirsən?"_ bölməsinə baxa bilərsiniz.

</details>

### Kodu işə salaq

Serveri aşağıdakı əmr ilə işə salaq:

<div class="termy">

```console
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

</div>

<details markdown="1">
<summary><code>uvicorn main:app --reload</code> əmri haqqında...</summary>

`uvicorn main:app` əmri aşağıdakılara instinad edir:

* `main`: `main.py` faylı (yəni Python "modulu").
* `app`: `main.py` faylında `app = FastAPI()` sətrində yaratdığımız `FastAPI` obyektidir.
* `--reload`: kod dəyişikliyindən sonra avtomatik olaraq serveri yenidən işə salır. Bu parametrdən yalnız development mərhələsində istifadə etməliyik.

</details>

### İndi yoxlayaq

Bu linki brauzerimizdə açaq <a href="http://127.0.0.1:8000/items/5?q=somequery" class="external-link" target="_blank">http://127.0.0.1:8000/items/5?q=somequery</a>.

Aşağıdakı kimi bir JSON cavabı görəcəksiniz:

```JSON
{"item_id": 5, "q": "somequery"}
```

Siz artıq bir API yaratmısınız, hansı ki:

* `/` və `/items/{item_id}` <abbr title="Yol: Path ">_yollarında_</abbr> HTTP sorğularını qəbul edir.
* Hər iki _yolda_ `GET` <em>əməliyyatlarını</em> (həmçinin HTTP _metodları_ kimi bilinir) aparır.
* `/items/{item_id}` _yolu_ `item_id` adlı `int` qiyməti almalı olan _yol parametrinə_ sahibdir.
* `/items/{item_id}` _yolunun_ `q` adlı yol parametri var və bu parametr istəyə bağlı olsa da, `str` qiymətini almalıdır.

### İnteraktiv API Sənədləri

İndi <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a> ünvanına daxil olun.

Avtomatik interaktiv API sənədlərini görəcəksiniz (<a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a> tərəfindən təmin edilir):

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)

### Alternativ API sənədləri

İndi isə <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a> ünvanına daxil olun.

<a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a> tərəfindən təqdim edilən avtomatik sənədləri görəcəksiniz:

![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)

## Nümunəni Yeniləyək

İndi gəlin `main.py` faylını `PUT` sorğusu ilə birlikdə <abbr title="Gövdə: Body ">gövdə</abbr> qəbul edəcək şəkildə dəyişdirək.

Pydantic sayəsində standart Python tiplərindən istifadə edərək <abbr title="Gövdə: Body ">gövdə</abbr>ni müəyyən edək.

```Python hl_lines="4  9-12  25-27"
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```
Server avtomatik olaraq yenidən işə salınmalı idi (çünki biz yuxarıda `uvicorn` əmri ilə `--reload` parametrindən istifadə etmişik).

### İnteraktiv API sənədlərindəki dəyişikliyə baxaq

Yenidən <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a> ünvanına daxil olun.

* İnteraktiv API sənədləri yeni gövdə də daxil olmaq ilə avtomatik olaraq yenilənəcək:

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)

* "Try it out" düyməsini klikləyin, bu, parametrləri doldurmağa və API ilə birbaşa əlaqə saxlamağa imkan verir:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)

* Sonra "Execute" düyməsini klikləyin, istifadəçi interfeysi API ilə əlaqə quracaq, parametrləri göndərəcək, nəticələri əldə edəcək və onları ekranda göstərəcək:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)

### Alternativ API Sənədlərindəki Dəyişikliyə Baxaq

İndi isə yenidən <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a> ünvanına daxil olun.

* Alternativ sənədlər həm də yeni sorğu parametri və gövdəsini əks etdirəcək:

![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)

### Xülasə

Ümumiləşdirsək, parametrlər, gövdə və s. Biz məlumat növlərini **bir dəfə** funksiya parametrləri kimi təyin edirik.

Bunu standart müasir Python tipləri ilə edirsiniz.

Yeni sintaksis, müəyyən bir kitabxananın metodlarını və ya siniflərini və s. öyrənmək məcburiyyətində deyilsiniz.

Sadəcə standart **Python**.

Məsələn, `int` üçün:

```Python
item_id: int
```

və ya daha mürəkkəb `Item` modeli üçün:

```Python
item: Item
```

...və yalnız parametr tipini təyin etməklə bunları əldə edirsiniz:

* Redaktor dəstəyi ilə:
    * Avtomatik tamamlama.
    * Tip yoxlanması.
* Məlumatların Təsdiqlənməsi:
    * Məlumat etibarsız olduqda avtomatik olaraq aydın xətalar göstərir.
    * Hətta çox dərin JSON obyektlərində belə doğrulama aparır.
* Daxil olan məlumatları <abbr title="Çevrilmə: serialization, parsing, marshalling olaraq da bilinir">çevirmək</abbr> üçün aşağıdakı məlumat növlərindən istifadə edilir:
    * JSON.
    * <abbr title="Yol: Path">Yol</abbr> parametrləri.
    * <abbr title="Sorğu: Query">Sorğu</abbr> parametrləri.
    * <abbr title="Çərəz: Cookie">Çərəzlər</abbr>.
    * <abbr title="Başlıq: Header">Başlıqlaq</abbr>.
    * <abbr title="Forma: Form">Formalar</abbr>.
    * Fayllar.
* Daxil olan məlumatları <abbr title="Çevrilmə: serialization, parsing, marshalling olaraq da bilinir">çevirmək</abbr> üçün aşağıdakı məlumat növlərindən istifadə edilir (JSON olaraq):
    * Python tiplərinin (`str`, `int`, `float`, `bool`, `list`, və s) çevrilməsi.
    * `datetime` obyektləri.
    * `UUID` obyektləri.
    * Verilənlər bazası modelləri.
    * və daha çoxu...
* 2 alternativ istifadəçi interfeysi daxil olmaqla avtomatik interaktiv API sənədlərini təmin edir:
    * Swagger UI.
    * ReDoc.

---

Gəlin əvvəlki nümunəyə qayıdaq və **FastAPI**-nin nələr edəcəyinə nəzər salaq:

* `GET` və `PUT` sorğuları üçün `item_id`-nin <abbr title="Yol: Path">yolda</abbr> olub-olmadığını yoxlayacaq.
* `item_id`-nin `GET` və `PUT` sorğuları üçün növünün `int` olduğunu yoxlayacaq.
    * Əgər `int` deyilsə, səbəbini göstərən bir xəta mesajı göstərəcəkdir.
* <abbr title="Məcburi olmayan: Optional">məcburi olmayan</abbr> `q` parametrinin `GET` (`http://127.0.0.1:8000/items/foo?q=somequery` burdakı kimi) sorğusu içərisində olub olmadığını yoxlayacaq.
    * `q` parametrini `= None` ilə yaratdığımız üçün, <abbr title="Məcburi olmayan: Optional">məcburi olmayan</abbr> parametr olacaq.
    * Əgər `None` olmasaydı, bu məcburi parametr olardı (`PUT` metodunun gövdəsində olduğu kimi).
* `PUT` sorğusu üçün, `/items/{item_id}` gövdəsini JSON olaraq oxuyacaq:
    * `name` adında məcburi bir parametr olub olmadığını və əgər varsa, tipinin `str` olub olmadığını yoxlayacaq.
    * `price` adında məcburi bir parametr olub olmadığını və əgər varsa, tipinin `float` olub olmadığını yoxlayacaq.
    * `is_offer` adında <abbr title="Məcburi olmayan: Optional">məcburi olmayan</abbr> bir parametr olub olmadığını və əgər varsa, tipinin `float` olub olmadığını yoxlayacaq.
    * Bütün bunlar ən dərin JSON obyektlərində belə işləyəcək.
* Məlumatların JSON-a və JSON-un Python obyektinə çevrilməsi avtomatik həyata keçiriləcək.
* Hər şeyi OpenAPI ilə uyğun olacaq şəkildə avtomatik olaraq sənədləşdirəcək və onları aşağıdakı kimi istifadə edə biləcək:
    * İnteraktiv sənədləşmə sistemləri.
    * Bir çox proqramlaşdırma dilləri üçün avtomatlaşdırılmış <abbr title="Müştəri: Client">müştəri</abbr> kodu yaratma sistemləri.
* 2 interaktiv sənədləşmə veb interfeysini birbaşa təmin edəcək.

---

Yeni başlamışıq, amma siz artıq işin məntiqini başa düşmüsünüz.

İndi aşağıdakı sətri dəyişdirməyə çalışın:

```Python
    return {"item_name": item.name, "item_id": item_id}
```

...bundan:

```Python
        ... "item_name": item.name ...
```

...buna:

```Python
        ... "item_price": item.price ...
```

...və redaktorun məlumat tiplərini bildiyini və avtomatik tamaladığını görəcəksiniz:

![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)

Daha çox funksiyaya malik daha dolğun nümunə üçün <a href="https://fastapi.tiangolo.com/az/tutorial/">Öyrədici - İstifadəçi Təlimatı</a> səhifəsinə baxa bilərsiniz.

**Spoiler xəbərdarlığı**: Öyrədici - istifadəçi təlimatına bunlar daxildir:

* **Parametrlərin**, <abbr title="Başlıq: Header">**başlıqlar**</abbr>, <abbr title="Çərəz: Cookie">çərəzlər</abbr>, **forma sahələri** və **fayllar** olaraq müəyyən edilməsi.
* `maximum_length` və ya `regex` kimi **doğrulama məhdudiyyətlərinin** necə təyin ediləcəyi.
* Çox güclü və istifadəsi asan **<abbr title="components, resources, providers, services, injectables olaraq da bilinir">Dependency Injection</abbr>** sistemi.
* Təhlükəsizlik və autentifikasiya, **JWT tokenləri** ilə **OAuth2** dəstəyi və **HTTP Basic** autentifikasiyası.
* **çox dərin JSON modellərini** müəyyən etmək üçün daha irəli səviyyə (lakin eyni dərəcədə asan) üsullar (Pydantic sayəsində).
* <a href="https://strawberry.rocks" class="external-link" target="_blank">Strawberry</a> və digər kitabxanalar ilə **GraphQL** inteqrasiyası.
* Digər əlavə xüsusiyyətlər (Starlette sayəsində):
    * **WebSockets**
    * HTTPX və `pytest` sayəsində çox asan testlər
    * **CORS**
    * **Cookie Sessions**
    * ...və daha çoxu.

## Performans

Müstəqil TechEmpower meyarları göstərir ki, Uvicorn üzərində işləyən **FastAPI** proqramları <a href="https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7" class="external-link" target="_blank">ən sürətli Python kitabxanalarından biridir</a>, yalnız Starlette və Uvicorn-un özündən yavaşdır, ki FastAPI bunların üzərinə qurulmuş bir framework-dür. (*)

Ətraflı məlumat üçün bu bölməyə nəzər salın <a href="https://fastapi.tiangolo.com/az/benchmarks/" class="internal-link" target="_blank"><abbr title="Müqayisələr: Benchmarks">Müqayisələr</abbr></a>.

## Məcburi Olmayan Tələblər

Pydantic tərəfindən istifadə olunanlar:

* <a href="https://github.com/JoshData/python-email-validator" target="_blank"><code>email-validator</code></a> - e-poçtun yoxlanılması üçün.
* <a href="https://docs.pydantic.dev/latest/usage/pydantic_settings/" target="_blank"><code>pydantic-settings</code></a> - parametrlərin idarə edilməsi üçün.
* <a href="https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/" target="_blank"><code>pydantic-extra-types</code></a> - Pydantic ilə istifadə edilə bilən əlavə tiplər üçün.

Starlette tərəfindən istifadə olunanlar:

* <a href="https://www.python-httpx.org" target="_blank"><code>httpx</code></a> - Əgər `TestClient` strukturundan istifadə edəcəksinizsə, tələb olunur.
* <a href="https://jinja.palletsprojects.com" target="_blank"><code>jinja2</code></a> - Standart <abbr title="Şablon: Template">şablon</abbr> konfiqurasiyasından istifadə etmək istəyirsinizsə, tələb olunur.
* <a href="https://github.com/Kludex/python-multipart" target="_blank"><code>python-multipart</code></a> - `request.form()` ilə forma <abbr title="HTTP sorğusu ilə alınan string məlumatın Python obyektinə çevrilməsi">"çevirmə"</abbr> dəstəyindən istifadə etmək istəyirsinizsə, tələb olunur.
* <a href="https://pythonhosted.org/itsdangerous/" target="_blank"><code>itsdangerous</code></a> - `SessionMiddleware` dəstəyi üçün tələb olunur.
* <a href="https://pyyaml.org/wiki/PyYAMLDocumentation" target="_blank"><code>pyyaml</code></a> - `SchemaGenerator` dəstəyi üçün tələb olunur (Çox güman ki, FastAPI istifadə edərkən buna ehtiyacınız olmayacaq).
* <a href="https://github.com/esnme/ultrajson" target="_blank"><code>ujson</code></a> - `UJSONResponse` istifadə etmək istəyirsinizsə, tələb olunur.

Həm FastAPI, həm də Starlette tərəfindən istifadə olunur:

* <a href="https://www.uvicorn.org" target="_blank"><code>uvicorn</code></a> - Yaratdığımız proqramı servis edəcək veb server kimi fəaliyyət göstərir.
* <a href="https://github.com/ijl/orjson" target="_blank"><code>orjson</code></a> - `ORJSONResponse` istifadə edəcəksinizsə tələb olunur.

Bütün bunları `pip install fastapi[all]` ilə quraşdıra bilərsiniz.

## Lisenziya

Bu layihə MIT lisenziyasının şərtlərinə əsasən lisenziyalaşdırılıb.


================================================
File: /docs/az/docs/learn/index.md
================================================
# Öyrən

Burada **FastAPI** öyrənmək üçün giriş bölmələri və dərsliklər yer alır.

Siz bunu kitab, kurs, FastAPI öyrənmək üçün rəsmi və tövsiyə olunan üsul hesab edə bilərsiniz. 😎


================================================
File: /docs/bn/mkdocs.yml
================================================
INHERIT: ../en/mkdocs.yml


================================================
File: /docs/bn/docs/index.md
================================================
<p align="center">
  <a href="https://fastapi.tiangolo.com"><img src="https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png" alt="FastAPI"></a>
</p>
<p align="center">
    <em>FastAPI উচ্চক্ষমতা সম্পন্ন, সহজে শেখার এবং দ্রুত কোড করে প্রোডাকশনের জন্য ফ্রামওয়ার্ক।</em>
</p>
<p align="center">
<a href="https://github.com/fastapi/fastapi/actions?query=workflow%3ATest" target="_blank">
    <img src="https://github.com/fastapi/fastapi/workflows/Test/badge.svg" alt="Test">
</a>
<a href="https://codecov.io/gh/fastapi/fastapi" target="_blank">
    <img src="https://img.shields.io/codecov/c/github/fastapi/fastapi?color=%2334D058" alt="Coverage">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package" alt="Package version">
</a>
</p>

---

**নির্দেশিকা নথি**: <a href="https://fastapi.tiangolo.com" target="_blank">https://fastapi.tiangolo.com</a>

**সোর্স কোড**: <a href="https://github.com/fastapi/fastapi" target="_blank">https://github.com/fastapi/fastapi</a>

---

FastAPI একটি আধুনিক, দ্রুত ( বেশি ক্ষমতা ) সম্পন্ন, Python 3.6+ দিয়ে API তৈরির জন্য স্ট্যান্ডার্ড পাইথন টাইপ ইঙ্গিত ভিত্তিক ওয়েব ফ্রেমওয়ার্ক।

এর মূল বৈশিষ্ট্য গুলো হলঃ

- **গতি**: এটি **NodeJS** এবং **Go** এর মত কার্যক্ষমতা সম্পন্ন (Starlette এবং Pydantic এর সাহায্যে)। [পাইথন এর দ্রুততম ফ্রেমওয়ার্ক গুলোর মধ্যে এটি একটি](#_11)।
- **দ্রুত কোড করা**:বৈশিষ্ট্য তৈরির গতি ২০০% থেকে ৩০০% বৃদ্ধি করে৷ \*
- **স্বল্প bugs**: মানুব (ডেভেলপার) সৃষ্ট ত্রুটির প্রায় ৪০% হ্রাস করে। \*
- **স্বজ্ঞাত**: দুর্দান্ত এডিটর সাহায্য <abbr title="also known as auto-complete, autocompletion, IntelliSense">Completion</abbr> নামেও পরিচিত। দ্রুত ডিবাগ করা যায়।

- **সহজ**: এটি এমন ভাবে সজানো হয়েছে যেন নির্দেশিকা নথি পড়ে সহজে শেখা এবং ব্যবহার করা যায়।
- **সংক্ষিপ্ত**: কোড পুনরাবৃত্তি কমানোর পাশাপাশি, bug কমায় এবং প্রতিটি প্যারামিটার ঘোষণা থেকে একাধিক ফিচার পাওয়া যায় ।
- **জোরালো**: স্বয়ংক্রিয় ভাবে তৈরি ক্রিয়াশীল নির্দেশনা নথি (documentation) সহ উৎপাদন উপযোগি (Production-ready) কোড পাওয়া যায়।
- **মান-ভিত্তিক**: এর ভিত্তি <a href="https://github.com/OAI/OpenAPI-Specification" class="external-link" target="_blank">OpenAPI</a> (যা পুর্বে Swagger নামে পরিচিত ছিল) এবং <a href="https://json-schema.org/" class="external-link" target="_blank">JSON Schema</a> এর আদর্শের মানের ওপর

<small>\* উৎপাদনমুখি এপ্লিকেশন বানানোর এক দল ডেভেলপার এর মতামত ভিত্তিক ফলাফল।</small>

## স্পনসর গণ

<!-- sponsors -->

{% if sponsors %}
{% for sponsor in sponsors.gold -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor -%}
{%- for sponsor in sponsors.silver -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

<!-- /sponsors -->

<a href="https://fastapi.tiangolo.com/fastapi-people/#sponsors" class="external-link" target="_blank">অন্যান্য স্পনসর গণ</a>

## মতামত সমূহ

"_আমি আজকাল **FastAPI** ব্যবহার করছি। [...] আমরা ভাবছি মাইক্রোসফ্টে **ML সার্ভিস** এ সকল দলের জন্য এটি ব্যবহার করব। যার মধ্যে কিছু পণ্য **Windows** এ সংযোযন হয় এবং কিছু **Office** এর সাথে সংযোযন হচ্ছে।_"

<div style="text-align: right; margin-right: 10%;">কবির খান - <strong>মাইক্রোসফ্টে</strong> <a href="https://github.com/fastapi/fastapi/pull/26" target="_blank"><small>(ref)</small></a></div>

---

"_আমরা **FastAPI** লাইব্রেরি গ্রহণ করেছি একটি **REST** সার্ভার তৈরি করতে, যা **ভবিষ্যদ্বাণী** পাওয়ার জন্য কুয়েরি করা যেতে পারে। [লুডউইগের জন্য]_"

<div style="text-align: right; margin-right: 10%;">পিয়েরো মোলিনো, ইয়ারোস্লাভ দুদিন, এবং সাই সুমন্থ মিরিয়ালা - <strong>উবার</strong> <a href="https://eng.uber.com/ludwig-v0-2/" target="_blank"><small>(ref)</small></a></div>

---

"_**Netflix** আমাদের **ক্রাইসিস ম্যানেজমেন্ট** অর্কেস্ট্রেশন ফ্রেমওয়ার্ক: **ডিসপ্যাচ** এর ওপেন সোর্স রিলিজ ঘোষণা করতে পেরে আনন্দিত! [যাকিনা **FastAPI** দিয়ে নির্মিত]_"

<div style="text-align: right; margin-right: 10%;">কেভিন গ্লিসন, মার্ক ভিলানোভা, ফরেস্ট মনসেন - <strong>নেটফ্লিক্স</strong> <a href="https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072" target="_blank"><small>(ref)</small></a></div>

---

"_আমি **FastAPI** নিয়ে চাঁদের সমান উৎসাহিত। এটি খুবই মজার!_"

<div style="text-align: right; margin-right: 10%;">ব্রায়ান ওকেন - <strong><a href="https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855" target="_blank">পাইথন বাইটস</a> পডকাস্ট হোস্ট</strong> <a href="https://twitter.com/brianokken/status/1112220079972728832" target="_blank"><small>(ref)</small></a></div>

---

"\_সত্যিই, আপনি যা তৈরি করেছেন তা খুব মজবুত এবং পরিপূর্ন৷ অনেক উপায়ে, আমি যা **Hug** এ করতে চেয়েছিলাম - তা কাউকে তৈরি করতে দেখে আমি সত্যিই অনুপ্রানিত৷\_"

<div style="text-align: right; margin-right: 10%;">টিমোথি ক্রসলে - <strong><a href="https://github.com/hugapi/hug" target="_blank">Hug</a> স্রষ্টা</strong> <a href="https://news.ycombinator.com/item?id=19455465" target="_blank"><small>(ref)</small></a></div>

---

"আপনি যদি REST API তৈরির জন্য একটি **আধুনিক ফ্রেমওয়ার্ক** শিখতে চান, তাহলে **FastAPI** দেখুন [...] এটি দ্রুত, ব্যবহার করা সহজ এবং শিখতেও সহজ [...]\_"

"_আমরা আমাদের **APIs** [...] এর জন্য **FastAPI**- তে এসেছি [...] আমি মনে করি আপনিও এটি পছন্দ করবেন [...]_"

<div style="text-align: right; margin-right: 10%;">ইনেস মন্টানি - ম্যাথিউ হোনিবাল - <strong><a href="https://explosion.ai" target="_blank">Explosion AI</a> প্রতিষ্ঠাতা - <a href="https://spacy.io" target="_blank">spaCy</a> স্রষ্টা</strong> <a href="https://twitter.com/_inesmontani/status/1144173225322143744" target="_blank"><small>(ref)</small></a> - <a href="https://twitter.com/honnibal/status/1144031421859655680" target="_blank"><small>(ref)</small></a></div>

---

## **Typer**, CLI এর জন্য FastAPI

<a href="https://typer.tiangolo.com" target="_blank"><img src="https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg" style="width: 20%;"></a>

আপনি যদি <abbr title="Command Line Interface">CLI</abbr> অ্যাপ বানাতে চান, যা কিনা ওয়েব API এর পরিবর্তে টার্মিনালে ব্যবহার হবে, তাহলে দেখুন<a href="https://typer.tiangolo.com/" class="external-link" target="_blank">**Typer**</a>.

**টাইপার** হল FastAPI এর ছোট ভাইয়ের মত। এবং এটির উদ্দেশ্য ছিল **CLIs এর FastAPI** হওয়া। ⌨️ 🚀

## প্রয়োজনীয়তা গুলো

Python 3.7+

FastAPI কিছু দানবেদের কাঁধে দাঁড়িয়ে আছে:

- <a href="https://www.starlette.io/" class="external-link" target="_blank">Starlette</a> ওয়েব অংশের জন্য.
- <a href="https://docs.pydantic.dev/" class="external-link" target="_blank">Pydantic</a> ডেটা অংশগুলির জন্য.

## ইনস্টলেশন প্রক্রিয়া

<div class="termy">

```console
$ pip install fastapi

---> 100%
```

</div>

আপনার একটি ASGI সার্ভারেরও প্রয়োজন হবে, প্রোডাকশনের জন্য <a href="https://www.uvicorn.org" class="external-link" target="_blank">Uvicorn</a> অথবা <a href="https://github.com/pgjones/hypercorn" class="external-link" target="_blank">Hypercorn</a>.

<div class="termy">

```console
$ pip install "uvicorn[standard]"

---> 100%
```

</div>

## উদাহরণ

### তৈরি

- `main.py` নামে একটি ফাইল তৈরি করুন:

```Python
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

<details markdown="1">
<summary>অথবা ব্যবহার করুন <code>async def</code>...</summary>

যদি আপনার কোড `async` / `await`, ব্যবহার করে তাহলে `async def` ব্যবহার করুন:

```Python hl_lines="9  14"
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

**টীকা**:

আপনি যদি না জানেন, _"তাড়াহুড়ো?"_ বিভাগটি দেখুন <a href="https://fastapi.tiangolo.com/async/#in-a-hurry" target="_blank">`async` এবং `await` নথির মধ্যে দেখুন </a>.

</details>

### এটি চালান

সার্ভার চালু করুন:

<div class="termy">

```console
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

</div>

<details markdown="1">
<summary>নির্দেশনা সম্পর্কে <code>uvicorn main:app --reload</code>...</summary>

`uvicorn main:app` নির্দেশনাটি দ্বারা বোঝায়:

- `main`: ফাইল `main.py` (পাইথন "মডিউল")।
- `app`: `app = FastAPI()` লাইন দিয়ে `main.py` এর ভিতরে তৈরি করা অবজেক্ট।
- `--reload`: কোড পরিবর্তনের পরে সার্ভার পুনরায় চালু করুন। এটি শুধুমাত্র ডেভেলপমেন্ট এর সময় ব্যবহার করুন।

</details>

### এটা চেক করুন

আপনার ব্রাউজার খুলুন <a href="http://127.0.0.1:8000/items/5?q=somequery" class="external-link" target="_blank">http://127.0.0.1:8000/items/5?q=somequery</a> এ।

আপনি JSON রেসপন্স দেখতে পাবেন:

```JSON
{"item_id": 5, "q": "somequery"}
```

আপনি ইতিমধ্যে একটি API তৈরি করেছেন যা:

- `/` এবং `/items/{item_id}` _paths_ এ HTTP অনুরোধ গ্রহণ করে।
- উভয় *path*ই `GET` <em>অপারেশন</em> নেয় ( যা HTTP _methods_ নামেও পরিচিত)।
- _path_ `/items/{item_id}`-এ একটি _path প্যারামিটার_ `item_id` আছে যা কিনা `int` হতে হবে।
- _path_ `/items/{item_id}`-এর একটি ঐচ্ছিক `str` _query প্যারামিটার_ `q` আছে।

### ক্রিয়াশীল API নির্দেশিকা নথি

এখন যান <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

আপনি স্বয়ংক্রিয় ভাবে প্রস্তুত ক্রিয়াশীল API নির্দেশিকা নথি দেখতে পাবেন (<a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a> প্রদত্ত):

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)

### বিকল্প API নির্দেশিকা নথি

এবং এখন <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a> এ যান.

আপনি স্বয়ংক্রিয় ভাবে প্রস্তুত বিকল্প নির্দেশিকা নথি দেখতে পাবেন (<a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a> প্রদত্ত):

![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)

## উদাহরণস্বরূপ আপগ্রেড

এখন `main.py` ফাইলটি পরিবর্তন করুন যেন এটি `PUT` রিকুয়েস্ট থেকে বডি পেতে পারে।

Python স্ট্যান্ডার্ড লাইব্রেরি, Pydantic এর সাহায্যে বডি ঘোষণা করুন।

```Python hl_lines="4  9-12  25-27"
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

সার্ভারটি স্বয়ংক্রিয়ভাবে পুনরায় লোড হওয়া উচিত (কারণ আপনি উপরের `uvicorn` কমান্ডে `--reload` যোগ করেছেন)।

### ক্রিয়াশীল API নির্দেশিকা নথি উন্নীতকরণ

এখন <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a> এডড্রেসে যান.

- ক্রিয়াশীল API নির্দেশিকা নথিটি স্বয়ংক্রিয়ভাবে উন্নীত হযে যাবে, নতুন বডি সহ:

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)

- "Try it out" বাটনে চাপুন, এটি আপনাকে পেরামিটারগুলো পূরণ করতে এবং API এর সাথে সরাসরি ক্রিয়া-কলাপ করতে দিবে:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)

- তারপরে "Execute" বাটনে চাপুন, ব্যবহারকারীর ইন্টারফেস আপনার API এর সাথে যোগাযোগ করবে, পেরামিটার পাঠাবে, ফলাফলগুলি পাবে এবং সেগুলি পর্রদায় দেখাবে:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)

### বিকল্প API নির্দেশিকা নথি আপগ্রেড

এবং এখন <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a> এ যান।

- বিকল্প নির্দেশিকা নথিতেও নতুন কুয়েরি প্যারামিটার এবং বডি প্রতিফলিত হবে:

![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)

### সংক্ষিপ্তকরণ

সংক্ষেপে, আপনি **শুধু একবার** প্যারামিটারের ধরন, বডি ইত্যাদি ফাংশন প্যারামিটার হিসেবে ঘোষণা করেন।

আপনি সেটি আধুনিক পাইথনের সাথে করেন।

আপনাকে নতুন করে নির্দিষ্ট কোন লাইব্রেরির বাক্য গঠন, ফাংশন বা ক্লাস কিছুই শিখতে হচ্ছে না।

শুধুই আধুনিক **Python 3.6+**

উদাহরণস্বরূপ, `int` এর জন্য:

```Python
item_id: int
```

অথবা আরও জটিল `Item` মডেলের জন্য:

```Python
item: Item
```

...এবং সেই একই ঘোষণার সাথে আপনি পাবেন:

- এডিটর সাহায্য, যেমন
  - সমাপ্তি।
  - ধরণ যাচাই
- তথ্য যাচাইকরণ:
  - ডেটা অবৈধ হলে স্বয়ংক্রিয় এবং পরিষ্কার ত্রুটির নির্দেশনা।
  - এমনকি গভীরভাবে নেস্ট করা JSON অবজেক্টের জন্য বৈধতা।
- প্রেরিত তথ্য <abbr title="যা পরিচিত: serialization, parsing, marshalling">রূপান্তর</abbr>: যা নেটওয়ার্ক থেকে পাইথনের তথ্য এবং ধরনে আসে, এবং সেখান থেকে পড়া:

  - JSON।
  - পাথ প্যারামিটার।
  - কুয়েরি প্যারামিটার।
  - কুকিজ
  - হেডার
  - ফর্ম
  - ফাইল

- আউটপুট ডেটার <abbr title="যা পরিচিত: serialization, parsing, marshalling">রূপান্তর</abbr>: পাইথন ডেটা এবং টাইপ থেকে নেটওয়ার্ক ডেটাতে রূপান্তর করা (JSON হিসাবে):
  -পাইথন টাইপে রূপান্তর করুন (`str`, `int`, `float`, `bool`, `list`, ইত্যাদি)।
  - `datetime` অবজেক্ট।
  - `UUID` objeঅবজেক্টcts।
  - ডাটাবেস মডেল।
  - ...এবং আরো অনেক।
- স্বয়ংক্রিয় ক্রিয়াশীল API নির্দেশিকা নথি, 2টি বিকল্প ব্যবহারকারীর ইন্টারফেস সহ:
  - সোয়াগার ইউ আই (Swagger UI)।
  - রিডক (ReDoc)।

---

পূর্ববর্তী কোড উদাহরণে ফিরে আসা যাক, **FastAPI** যা করবে:

- `GET` এবং `PUT` অনুরোধের জন্য পথে `item_id` আছে কিনা তা যাচাই করবে।
- `GET` এবং `PUT` অনুরোধের জন্য `item_id` টাইপ `int` এর হতে হবে তা যাচাই করবে।
  - যদি না হয় তবে ক্লায়েন্ট একটি উপযুক্ত, পরিষ্কার ত্রুটি দেখতে পাবেন।
- `GET` অনুরোধের জন্য একটি ঐচ্ছিক ক্যুয়েরি প্যারামিটার নামক `q` (যেমন `http://127.0.0.1:8000/items/foo?q=somequery`) আছে কি তা চেক করবে।
  - যেহেতু `q` প্যারামিটারটি `= None` দিয়ে ঘোষণা করা হয়েছে, তাই এটি ঐচ্ছিক।
  - `None` ছাড়া এটি প্রয়োজনীয় হতো (যেমন `PUT` এর ক্ষেত্রে হয়েছে)।
- `/items/{item_id}` এর জন্য `PUT` অনুরোধের বডি JSON হিসাবে পড়ুন:
  - লক্ষ করুন, `name` একটি প্রয়োজনীয় অ্যাট্রিবিউট হিসাবে বিবেচনা করেছে এবং এটি `str` হতে হবে।
  - লক্ষ করুন এখানে, `price` অ্যাট্রিবিউটটি আবশ্যক এবং এটি `float` হতে হবে।
  - লক্ষ করুন `is_offer` একটি ঐচ্ছিক অ্যাট্রিবিউট এবং এটি `bool` হতে হবে যদি উপস্থিত থাকে।
  - এই সবটি গভীরভাবে অবস্থানরত JSON অবজেক্টগুলিতেও কাজ করবে।
- স্বয়ংক্রিয়ভাবে JSON হতে এবং JSON থেকে কনভার্ট করুন।
- OpenAPI দিয়ে সবকিছু ডকুমেন্ট করুন, যা ব্যবহার করা যেতে পারে:
  - ক্রিয়াশীল নির্দেশিকা নথি।
  - অনেক ভাষার জন্য স্বয়ংক্রিয় ক্লায়েন্ট কোড তৈরির ব্যবস্থা।
- সরাসরি 2টি ক্রিয়াশীল নির্দেশিকা নথি ওয়েব পৃষ্ঠ প্রদান করা হয়েছে।

---

আমরা এতক্ষন শুধু এর পৃষ্ঠ তৈরি করেছি, কিন্তু আপনি ইতমধ্যেই এটি কিভাবে কাজ করে তার ধারণাও পেয়ে গিয়েছেন।

নিম্নোক্ত লাইন গুলো পরিবর্তন করার চেষ্টা করুন:

```Python
    return {"item_name": item.name, "item_id": item_id}
```

...পুর্বে:

```Python
        ... "item_name": item.name ...
```

...পরবর্তীতে:

```Python
        ... "item_price": item.price ...
```

...এবং দেখুন কিভাবে আপনার এডিটর উপাদানগুলোকে সয়ংক্রিয়ভাবে-সম্পন্ন করবে এবং তাদের ধরন জানতে পারবে:

![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)

আরও বৈশিষ্ট্য সম্পন্ন উদাহরণের জন্য, দেখুন <a href="https://fastapi.tiangolo.com/tutorial/">টিউটোরিয়াল - ব্যবহারকারীর গাইড</a>.

**স্পয়লার সতর্কতা**: টিউটোরিয়াল - ব্যবহারকারীর গাইড নিম্নোক্ত বিষয়গুলি অন্তর্ভুক্ত করে:

- **হেডার**, **কুকিজ**, **ফর্ম ফিল্ড** এবং **ফাইলগুলি** এমন অন্যান্য জায়গা থেকে প্যারামিটার ঘোষণা করা।
- `maximum_length` বা `regex` এর মতো **যাচাইকরণ বাধামুক্তি** সেট করা হয় কিভাবে, তা নিয়ে আলোচনা করা হবে।
- একটি খুব শক্তিশালী এবং ব্যবহার করা সহজ <abbr title="also known as components, resources, providers, services, injectables">ডিপেন্ডেন্সি ইনজেকশন</abbr> পদ্ধতি
- **OAuth2** এবং **JWT টোকেন** এবং **HTTP Basic** auth সহ নিরাপত্তা এবং অনুমোদনপ্রাপ্তি সম্পর্কিত বিষয়সমূহের উপর।
- **গভীরভাবে অবস্থানরত JSON মডেল** ঘোষণা করার জন্য আরও উন্নত (কিন্তু সমান সহজ) কৌশল (Pydantic কে ধন্যবাদ)।
- আরো অতিরিক্ত বৈশিষ্ট্য (স্টারলেটকে ধন্যবাদ) হিসাবে:
  - **WebSockets**
  - **GraphQL**
  - HTTPX এবং `pytest` ভিত্তিক অত্যন্ত সহজ পরীক্ষা
  - **CORS**
  - **Cookie Sessions**
  - ...এবং আরো।

## কর্মক্ষমতা

স্বাধীন TechEmpower Benchmarks দেখায় যে **FastAPI** অ্যাপ্লিকেশনগুলি Uvicorn-এর অধীনে চলমান দ্রুততম<a href="https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7" class="external-link" target="_blank">পাইথন ফ্রেমওয়ার্কগুলির মধ্যে একটি,</a> শুধুমাত্র Starlette এবং Uvicorn-এর পর (FastAPI দ্বারা অভ্যন্তরীণভাবে ব্যবহৃত)। (\*)

এটি সম্পর্কে আরও বুঝতে, দেখুন <a href="https://fastapi.tiangolo.com/benchmarks/" class="internal-link" target="_blank">Benchmarks</a>.

## ঐচ্ছিক নির্ভরশীলতা

Pydantic দ্বারা ব্যবহৃত:

- <a href="https://github.com/JoshData/python-email-validator" target="_blank"><code>email-validator</code></a> - ইমেল যাচাইকরণের জন্য।

স্টারলেট দ্বারা ব্যবহৃত:

- <a href="https://www.python-httpx.org" target="_blank"><code>httpx</code></a> - আপনি যদি `TestClient` ব্যবহার করতে চান তাহলে আবশ্যক।
- <a href="https://jinja.palletsprojects.com" target="_blank"><code>jinja2</code></a> - আপনি যদি প্রদত্ত টেমপ্লেট রূপরেখা ব্যবহার করতে চান তাহলে প্রয়োজন।
- <a href="https://github.com/Kludex/python-multipart" target="_blank"><code>python-multipart</code></a> - আপনি যদি ফর্ম সহায়তা করতে চান তাহলে প্রয়োজন <abbr title="converting the string that comes from an HTTP request into Python data">"parsing"</abbr>, `request.form()` সহ।
- <a href="https://pythonhosted.org/itsdangerous/" target="_blank"><code>itsdangerous</code></a> - `SessionMiddleware` সহায়তার জন্য প্রয়োজন।
- <a href="https://pyyaml.org/wiki/PyYAMLDocumentation" target="_blank"><code>pyyaml</code></a> - স্টারলেটের SchemaGenerator সাপোর্ট এর জন্য প্রয়োজন (আপনার সম্ভাবত FastAPI প্রয়োজন নেই)।
- <a href="https://graphene-python.org/" target="_blank"><code>graphene</code></a> - `GraphQLApp` সহায়তার জন্য প্রয়োজন।

FastAPI / Starlette দ্বারা ব্যবহৃত:

- <a href="https://www.uvicorn.org" target="_blank"><code>uvicorn</code></a> - সার্ভারের জন্য যা আপনার অ্যাপ্লিকেশন লোড করে এবং পরিবেশন করে।
- <a href="https://github.com/ijl/orjson" target="_blank"><code>orjson</code></a> - আপনি `ORJSONResponse` ব্যবহার করতে চাইলে প্রয়োজন।
- <a href="https://github.com/esnme/ultrajson" target="_blank"><code>ujson</code></a> - আপনি `UJSONResponse` ব্যবহার করতে চাইলে প্রয়োজন।

আপনি এই সব ইনস্টল করতে পারেন `pip install fastapi[all]` দিয়ে.

## লাইসেন্স

এই প্রজেক্ট MIT লাইসেন্স নীতিমালার অধীনে শর্তায়িত।


================================================
File: /docs/bn/docs/python-types.md
================================================
# পাইথন এর <abbr title="একটি ভেরিয়েবল কি ধরনের ডেটা ধারণ করতে পারে।">টাইপ্স</abbr> পরিচিতি

Python-এ ঐচ্ছিক "টাইপ হিন্ট" (যা "টাইপ অ্যানোটেশন" নামেও পরিচিত) এর জন্য সাপোর্ট রয়েছে।

এই **"টাইপ হিন্ট"** বা অ্যানোটেশনগুলি এক ধরণের বিশেষ <abbr title="সিনট্যাক্স হল প্রোগ্রামিং ভাষায় কোড লেখার নিয়ম ও গঠন।">সিনট্যাক্স</abbr> যা একটি ভেরিয়েবলের <abbr title="যেমন: str, int, float, bool">টাইপ</abbr> ঘোষণা করতে দেয়।

ভেরিয়েবলগুলির জন্য টাইপ ঘোষণা করলে, এডিটর এবং টুলগুলি আপনাকে আরও ভালো সাপোর্ট দিতে পারে।

এটি পাইথন টাইপ হিন্ট সম্পর্কে একটি দ্রুত **টিউটোরিয়াল / রিফ্রেশার** মাত্র। এটি **FastAPI** এর সাথে ব্যবহার করার জন্য শুধুমাত্র ন্যূনতম প্রয়োজনীয়তা কভার করে... যা আসলে খুব একটা বেশি না।

**FastAPI** এই টাইপ হিন্টগুলির উপর ভিত্তি করে নির্মিত, যা এটিকে অনেক সুবিধা এবং লাভ প্রদান করে।

তবে, আপনি যদি কখনো **FastAPI** ব্যবহার নাও করেন, তবুও এগুলি সম্পর্কে একটু শেখা আপনার উপকারে আসবে।

/// note

যদি আপনি একজন Python বিশেষজ্ঞ হন, এবং টাইপ হিন্ট সম্পর্কে সবকিছু জানেন, তাহলে পরবর্তী অধ্যায়ে চলে যান।

///

## প্রেরণা

চলুন একটি সাধারণ উদাহরণ দিয়ে শুরু করি:

{* ../../docs_src/python_types/tutorial001.py *}


এই প্রোগ্রামটি কল করলে আউটপুট হয়:

```
John Doe
```

ফাংশনটি নিম্নলিখিত কাজ করে:

* `first_name` এবং `last_name` নেয়।
* প্রতিটির প্রথম অক্ষরকে `title()` ব্যবহার করে বড় হাতের অক্ষরে রূপান্তর করে।
* তাদেরকে মাঝখানে একটি স্পেস দিয়ে <abbr title="একটার পরে একটা একত্রিত করা">concatenate</abbr> করে।

{* ../../docs_src/python_types/tutorial001.py hl[2] *}


### এটি সম্পাদনা করুন

এটি একটি খুব সাধারণ প্রোগ্রাম।

কিন্তু এখন কল্পনা করুন যে আপনি এটি শুরু থেকে লিখছিলেন।

এক পর্যায়ে আপনি ফাংশনের সংজ্ঞা শুরু করেছিলেন, আপনার প্যারামিটারগুলি প্রস্তুত ছিল...

কিন্তু তারপর আপনাকে "সেই method কল করতে হবে যা প্রথম অক্ষরকে বড় হাতের অক্ষরে রূপান্তর করে"।

এটা কি `upper` ছিল? নাকি `uppercase`? `first_uppercase`? `capitalize`?

তারপর, আপনি পুরোনো প্রোগ্রামারের বন্ধু, এডিটর অটোকমপ্লিশনের সাহায্যে নেওয়ার চেষ্টা করেন।

আপনি ফাংশনের প্রথম প্যারামিটার `first_name` টাইপ করেন, তারপর একটি ডট (`.`) টাইপ করেন এবং `Ctrl+Space` চাপেন অটোকমপ্লিশন ট্রিগার করার জন্য।

কিন্তু, দুর্ভাগ্যবশত, আপনি কিছুই উপযোগী পান না:

<img src="/img/python-types/image01.png">

### টাইপ যোগ করুন

আসুন আগের সংস্করণ থেকে একটি লাইন পরিবর্তন করি।

আমরা ঠিক এই অংশটি পরিবর্তন করব অর্থাৎ ফাংশনের প্যারামিটারগুলি, এইগুলি:

```Python
    first_name, last_name
```

থেকে এইগুলি:

```Python
    first_name: str, last_name: str
```

ব্যাস।

এগুলিই "টাইপ হিন্ট":

{* ../../docs_src/python_types/tutorial002.py hl[1] *}


এটি ডিফল্ট ভ্যালু ঘোষণা করার মত নয় যেমন:

```Python
    first_name="john", last_name="doe"
```

এটি একটি ভিন্ন জিনিস।

আমরা সমান (`=`) নয়, কোলন (`:`) ব্যবহার করছি।

এবং টাইপ হিন্ট যোগ করা সাধারণত তেমন কিছু পরিবর্তন করে না যা টাইপ হিন্ট ছাড়াই ঘটত।

কিন্তু এখন, কল্পনা করুন আপনি আবার সেই ফাংশন তৈরির মাঝখানে আছেন, কিন্তু টাইপ হিন্ট সহ।

একই পর্যায়ে, আপনি অটোকমপ্লিট ট্রিগার করতে `Ctrl+Space` চাপেন এবং আপনি দেখতে পান:

<img src="/img/python-types/image02.png">

এর সাথে, আপনি অপশনগুলি দেখে, স্ক্রল করতে পারেন, যতক্ষণ না আপনি এমন একটি অপশন খুঁজে পান যা কিছু মনে পরিয়ে দেয়:

<img src="/img/python-types/image03.png">

## আরও প্রেরণা

এই ফাংশনটি দেখুন, এটিতে ইতিমধ্যে টাইপ হিন্ট রয়েছে:

{* ../../docs_src/python_types/tutorial003.py hl[1] *}


এডিটর ভেরিয়েবলগুলির টাইপ জানার কারণে, আপনি শুধুমাত্র অটোকমপ্লিশনই পান না, আপনি এরর চেকও পান:

<img src="/img/python-types/image04.png">

এখন আপনি জানেন যে আপনাকে এটি ঠিক করতে হবে, `age`-কে একটি স্ট্রিং হিসেবে রূপান্তর করতে `str(age)` ব্যবহার করতে হবে:

{* ../../docs_src/python_types/tutorial004.py hl[2] *}


## টাইপ ঘোষণা

আপনি এতক্ষন টাইপ হিন্ট ঘোষণা করার মূল স্থানটি দেখে ফেলেছেন-- ফাংশন প্যারামিটার হিসেবে।

সাধারণত এটি **FastAPI** এর ক্ষেত্রেও একই।

### সিম্পল টাইপ

আপনি `str` ছাড়াও সমস্ত স্ট্যান্ডার্ড পাইথন টাইপ ঘোষণা করতে পারেন।

উদাহরণস্বরূপ, আপনি এগুলো  ব্যবহার করতে পারেন:

* `int`
* `float`
* `bool`
* `bytes`

{* ../../docs_src/python_types/tutorial005.py hl[1] *}


### টাইপ প্যারামিটার সহ জেনেরিক টাইপ

কিছু ডাটা স্ট্রাকচার অন্যান্য মান ধারণ করতে পারে, যেমন `dict`, `list`, `set` এবং `tuple`। এবং অভ্যন্তরীণ মানগুলোরও নিজেদের টাইপ থাকতে পারে।

এই ধরনের টাইপগুলিকে বলা হয় "**জেনেরিক**" টাইপ এবং এগুলিকে তাদের অভ্যন্তরীণ টাইপগুলি সহ ঘোষণা করা সম্ভব।

এই টাইপগুলি এবং অভ্যন্তরীণ টাইপগুলি ঘোষণা করতে, আপনি Python মডিউল `typing` ব্যবহার করতে পারেন। এটি বিশেষভাবে এই টাইপ হিন্টগুলি সমর্থন করার জন্য রয়েছে।

#### Python এর নতুন সংস্করণ

`typing` ব্যবহার করা সিনট্যাক্সটি Python 3.6 থেকে সর্বশেষ সংস্করণগুলি পর্যন্ত, অর্থাৎ Python 3.9, Python 3.10 ইত্যাদি সহ সকল সংস্করণের সাথে **সামঞ্জস্যপূর্ণ**।

Python যত এগিয়ে যাচ্ছে, **নতুন সংস্করণগুলি** এই টাইপ অ্যানোটেশনগুলির জন্য তত উন্নত সাপোর্ট নিয়ে আসছে এবং অনেক ক্ষেত্রে আপনাকে টাইপ অ্যানোটেশন ঘোষণা করতে `typing` মডিউল ইম্পোর্ট এবং ব্যবহার করার প্রয়োজন হবে না।

যদি আপনি আপনার প্রজেক্টের জন্য Python-এর আরও সাম্প্রতিক সংস্করণ নির্বাচন করতে পারেন, তাহলে আপনি সেই অতিরিক্ত সরলতা থেকে সুবিধা নিতে পারবেন।

ডক্সে রয়েছে Python-এর প্রতিটি সংস্করণের সাথে সামঞ্জস্যপূর্ণ উদাহরণগুলি (যখন পার্থক্য আছে)।

উদাহরণস্বরূপ, "**Python 3.6+**" মানে এটি Python 3.6 বা তার উপরে সামঞ্জস্যপূর্ণ (যার মধ্যে 3.7, 3.8, 3.9, 3.10, ইত্যাদি অন্তর্ভুক্ত)। এবং "**Python 3.9+**" মানে এটি Python 3.9 বা তার উপরে সামঞ্জস্যপূর্ণ (যার মধ্যে 3.10, ইত্যাদি অন্তর্ভুক্ত)।

যদি আপনি Python-এর **সর্বশেষ সংস্করণগুলি ব্যবহার করতে পারেন**, তাহলে সর্বশেষ সংস্করণের জন্য উদাহরণগুলি ব্যবহার করুন, সেগুলি আপনাকে **সর্বোত্তম এবং সহজতম সিনট্যাক্স** প্রদান করবে, যেমন, "**Python 3.10+**"।

#### লিস্ট

উদাহরণস্বরূপ, একটি ভেরিয়েবলকে `str`-এর একটি `list` হিসেবে সংজ্ঞায়িত করা যাক।

//// tab | Python 3.9+

ভেরিয়েবলটি ঘোষণা করুন, একই কোলন (`:`) সিনট্যাক্স ব্যবহার করে।

টাইপ হিসেবে, `list` ব্যবহার করুন।

যেহেতু লিস্ট এমন একটি টাইপ যা অভ্যন্তরীণ টাইপগুলি ধারণ করে, আপনি তাদের স্কোয়ার ব্রাকেটের ভিতরে ব্যবহার করুন:

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial006_py39.py!}
```

////

//// tab | Python 3.8+

`typing` থেকে `List` (বড় হাতের `L` দিয়ে) ইমপোর্ট করুন:

``` Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial006.py!}
```

ভেরিয়েবলটি ঘোষণা করুন, একই কোলন (`:`) সিনট্যাক্স ব্যবহার করে।

টাইপ হিসেবে, `typing` থেকে আপনার ইম্পোর্ট করা `List` ব্যবহার করুন।

যেহেতু লিস্ট এমন একটি টাইপ যা অভ্যন্তরীণ টাইপগুলি ধারণ করে, আপনি তাদের স্কোয়ার ব্রাকেটের ভিতরে করুন:

```Python hl_lines="4"
{!> ../../docs_src/python_types/tutorial006.py!}
```

////

/// info

স্কোয়ার ব্রাকেট এর ভিতরে ব্যবহৃত এইসব অভন্তরীন টাইপগুলোকে "ইন্টারনাল টাইপ" বলে।

এই উদাহরণে, এটি হচ্ছে `List`(অথবা পাইথন ৩.৯ বা তার উপরের সংস্করণের ক্ষেত্রে `list`) এ পাস করা টাইপ প্যারামিটার।

///

এর অর্থ হচ্ছে: "ভেরিয়েবল `items` একটি `list`, এবং এই লিস্টের প্রতিটি আইটেম একটি `str`।"

/// tip

যদি আপনি Python 3.9 বা তার উপরে ব্যবহার করেন, আপনার `typing` থেকে `List` আমদানি করতে হবে না, আপনি সাধারণ `list` ওই টাইপের পরিবর্তে ব্যবহার করতে পারেন।

///

এর মাধ্যমে, আপনার এডিটর লিস্ট থেকে আইটেম প্রসেস করার সময় সাপোর্ট প্রদান করতে পারবে:

<img src="/img/python-types/image05.png">

টাইপগুলি ছাড়া, এটি করা প্রায় অসম্ভব।

লক্ষ্য করুন যে ভেরিয়েবল `item` হল `items` লিস্টের একটি এলিমেন্ট।

তবুও, এডিটর জানে যে এটি একটি `str`, এবং তার জন্য সাপোর্ট প্রদান করে।

#### টাপল এবং সেট

আপনি `tuple` এবং `set` ঘোষণা করার জন্য একই প্রক্রিয়া অনুসরণ করবেন:

//// tab | Python 3.9+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial007_py39.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial007.py!}
```

////

এর মানে হল:

* ভেরিয়েবল `items_t` হল একটি `tuple` যা ৩টি আইটেম ধারণ করে, একটি `int`, অন্য একটি `int`, এবং একটি `str`।
* ভেরিয়েবল `items_s` হল একটি `set`, এবং এর প্রতিটি আইটেম হল `bytes` টাইপের।

#### ডিক্ট

একটি `dict` সংজ্ঞায়িত করতে, আপনি ২টি টাইপ প্যারামিটার কমা দ্বারা পৃথক করে দেবেন।

প্রথম টাইপ প্যারামিটারটি হল `dict`-এর কীগুলির জন্য।

দ্বিতীয় টাইপ প্যারামিটারটি হল `dict`-এর মানগুলির জন্য:

//// tab | Python 3.9+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial008_py39.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial008.py!}
```

////

এর মানে হল:

* ভেরিয়েবল `prices` হল একটি `dict`:
    * এই `dict`-এর কীগুলি হল `str` টাইপের (ধরা যাক, প্রতিটি আইটেমের নাম)।
    * এই `dict`-এর মানগুলি হল `float` টাইপের (ধরা যাক, প্রতিটি আইটেমের দাম)।

#### ইউনিয়ন

আপনি একটি ভেরিয়েবলকে এমনভাবে ঘোষণা করতে পারেন যেন তা **একাধিক টাইপের** হয়, উদাহরণস্বরূপ, একটি `int` অথবা `str`।

Python 3.6 এবং তার উপরের সংস্করণগুলিতে (Python 3.10 অন্তর্ভুক্ত) আপনি `typing` থেকে `Union` টাইপ ব্যবহার করতে পারেন এবং স্কোয়ার ব্র্যাকেটের মধ্যে গ্রহণযোগ্য টাইপগুলি রাখতে পারেন।

Python 3.10-এ একটি **নতুন সিনট্যাক্স** আছে যেখানে আপনি সম্ভাব্য টাইপগুলিকে একটি <abbr title="উল্লম্ব বারালকে 'বিটওয়াইজ বা অপারেটর' বলা হয়, কিন্তু সেই অর্থ এখানে প্রাসঙ্গিক নয়">ভার্টিকাল বার (`|`)</abbr> দ্বারা পৃথক করতে পারেন।

//// tab | Python 3.10+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial008b_py310.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial008b.py!}
```

////

উভয় ক্ষেত্রেই এর মানে হল যে `item` হতে পারে একটি `int` অথবা `str`।

#### সম্ভবত `None`

আপনি এমনভাবে ঘোষণা করতে পারেন যে একটি মান হতে পারে এক টাইপের, যেমন `str`, আবার এটি `None`-ও হতে পারে।

Python 3.6 এবং তার উপরের সংস্করণগুলিতে (Python 3.10 অনতর্ভুক্ত) আপনি `typing` মডিউল থেকে `Optional` ইমপোর্ট করে এটি ঘোষণা এবং ব্যবহার করতে পারেন।

```Python hl_lines="1  4"
{!../../docs_src/python_types/tutorial009.py!}
```

`Optional[str]` ব্যবহার করা মানে হল শুধু `str` নয়, এটি হতে পারে `None`-ও, যা আপনার এডিটরকে সেই ত্রুটিগুলি শনাক্ত করতে সাহায্য করবে যেখানে আপনি ধরে নিচ্ছেন যে একটি মান সবসময় `str` হবে, অথচ এটি `None`-ও হতে পারেও।

`Optional[Something]` মূলত `Union[Something, None]`-এর একটি শর্টকাট, এবং তারা সমতুল্য।

এর মানে হল, Python 3.10-এ, আপনি টাইপগুলির ইউনিয়ন ঘোষণা করতে `Something | None` ব্যবহার করতে পারেন:

//// tab | Python 3.10+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial009_py310.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial009.py!}
```

////

//// tab | Python 3.8+ বিকল্প

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial009b.py!}
```

////

#### `Union` বা `Optional` ব্যবহার

যদি আপনি Python 3.10-এর নীচের সংস্করণ ব্যবহার করেন, তবে এখানে আমার খুবই **ব্যক্তিগত** দৃষ্টিভঙ্গি থেকে একটি টিপস:

* 🚨 `Optional[SomeType]` ব্যবহার এড়িয়ে চলুন।
* এর পরিবর্তে ✨ **`Union[SomeType, None]` ব্যবহার করুন** ✨।

উভয়ই সমতুল্য এবং মূলে একই, কিন্তু আমি `Union`-এর পক্ষে সুপারিশ করব কারণ "**অপশনাল**" শব্দটি মনে হতে পারে যে মানটি ঐচ্ছিক,অথচ এটি আসলে মানে "এটি হতে পারে `None`", এমনকি যদি এটি ঐচ্ছিক না হয়েও আবশ্যিক হয়।

আমি মনে করি `Union[SomeType, None]` এর অর্থ আরও স্পষ্টভাবে প্রকাশ করে।

এটি কেবল শব্দ এবং নামের ব্যাপার। কিন্তু সেই শব্দগুলি আপনি এবং আপনার সহকর্মীরা কোড সম্পর্কে কীভাবে চিন্তা করেন তা প্রভাবিত করতে পারে।

একটি উদাহরণ হিসেবে, এই ফাংশনটি নিন:

{* ../../docs_src/python_types/tutorial009c.py hl[1,4] *}


`name` প্যারামিটারটি `Optional[str]` হিসেবে সংজ্ঞায়িত হয়েছে, কিন্তু এটি **অপশনাল নয়**, আপনি প্যারামিটার ছাড়া ফাংশনটি কল করতে পারবেন না:

```Python
say_hi()  # ওহ না, এটি একটি ত্রুটি নিক্ষেপ করবে! 😱
```

`name` প্যারামিটারটি **এখনও আবশ্যিক** (নন-অপশনাল) কারণ এটির কোনো ডিফল্ট মান নেই। তবুও, `name` এর মান হিসেবে `None` গ্রহণযোগ্য:

```Python
say_hi(name=None)  # এটি কাজ করে, None বৈধ 🎉
```

সুখবর হল, একবার আপনি Python 3.10 ব্যবহার করা শুরু করলে, আপনাকে এগুলোর ব্যাপারে আর চিন্তা করতে হবে না, যেহুতু আপনি | ব্যবহার করেই ইউনিয়ন ঘোষণা করতে পারবেন:

{* ../../docs_src/python_types/tutorial009c_py310.py hl[1,4] *}


এবং তারপর আপনাকে নামগুলি যেমন `Optional` এবং `Union` নিয়ে আর চিন্তা করতে হবে না। 😎

#### জেনেরিক টাইপস

স্কোয়ার ব্র্যাকেটে টাইপ প্যারামিটার নেওয়া এই টাইপগুলিকে **জেনেরিক টাইপ** বা **জেনেরিকস** বলা হয়, যেমন:

//// tab | Python 3.10+

আপনি সেই একই বিল্টইন টাইপ জেনেরিক্স হিসেবে ব্যবহার করতে পারবেন(ভিতরে টাইপ সহ স্কয়ারে ব্রাকেট দিয়ে):

* `list`
* `tuple`
* `set`
* `dict`

এবং Python 3.8 এর মতোই, `typing` মডিউল থেকে:

* `Union`
* `Optional` (Python 3.8 এর মতোই)
* ...এবং অন্যান্য।

Python 3.10-এ, `Union` এবং `Optional` জেনেরিকস ব্যবহার করার বিকল্প হিসেবে, আপনি টাইপগুলির ইউনিয়ন ঘোষণা করতে <abbr title="উল্লম্ব বারালকে 'বিটওয়াইজ বা অপারেটর' বলা হয়, কিন্তু সেই অর্থ এখানে প্রাসঙ্গিক নয়">ভার্টিকাল বার (`|`)</abbr> ব্যবহার করতে পারেন, যা ওদের থেকে অনেক ভালো এবং সহজ।

////

//// tab | Python 3.9+

আপনি সেই একই বিল্টইন টাইপ জেনেরিক্স হিসেবে ব্যবহার করতে পারবেন(ভিতরে টাইপ সহ স্কয়ারে ব্রাকেট দিয়ে):

* `list`
* `tuple`
* `set`
* `dict`

এবং Python 3.8 এর মতোই, `typing` মডিউল থেকে:

* `Union`
* `Optional`
* ...এবং অন্যান্য।

////

//// tab | Python 3.8+

* `List`
* `Tuple`
* `Set`
* `Dict`
* `Union`
* `Optional`
* ...এবং অন্যান্য।

////

### ক্লাস হিসেবে টাইপস

আপনি একটি ভেরিয়েবলের টাইপ হিসেবে একটি ক্লাস ঘোষণা করতে পারেন।

ধরুন আপনার কাছে `Person` নামে একটি ক্লাস আছে, যার একটি নাম আছে:

{* ../../docs_src/python_types/tutorial010.py hl[1:3] *}


তারপর আপনি একটি ভেরিয়েবলকে `Person` টাইপের হিসেবে ঘোষণা করতে পারেন:

{* ../../docs_src/python_types/tutorial010.py hl[6] *}


এবং তারপর, আবার, আপনি এডিটর সাপোর্ট পেয়ে যাবেন:

<img src="/img/python-types/image06.png">

লক্ষ্য করুন যে এর মানে হল "`one_person` হল ক্লাস `Person`-এর একটি **ইন্সট্যান্স**।"

এর মানে এটি নয় যে "`one_person` হল **ক্লাস** যাকে বলা হয় `Person`।"

## Pydantic মডেল

[Pydantic](https://docs.pydantic.dev/) হল একটি Python লাইব্রেরি যা ডাটা ভ্যালিডেশন সম্পাদন করে।

আপনি ডাটার "আকার" এট্রিবিউট সহ ক্লাস হিসেবে ঘোষণা করেন।

এবং প্রতিটি এট্রিবিউট এর একটি টাইপ থাকে।

তারপর আপনি যদি কিছু মান দিয়ে সেই ক্লাসের একটি ইন্সট্যান্স তৈরি করেন-- এটি মানগুলিকে ভ্যালিডেট করবে, প্রয়োজন অনুযায়ী তাদেরকে উপযুক্ত টাইপে রূপান্তর করবে এবং আপনাকে সমস্ত ডাটা সহ একটি অবজেক্ট প্রদান করবে।

এবং আপনি সেই ফলাফল অবজেক্টের সাথে এডিটর সাপোর্ট পাবেন।

অফিসিয়াল Pydantic ডক্স থেকে একটি উদাহরণ:

//// tab | Python 3.10+

```Python
{!> ../../docs_src/python_types/tutorial011_py310.py!}
```

////

//// tab | Python 3.9+

```Python
{!> ../../docs_src/python_types/tutorial011_py39.py!}
```

////

//// tab | Python 3.8+

```Python
{!> ../../docs_src/python_types/tutorial011.py!}
```

////

/// info

[Pydantic সম্পর্কে আরও জানতে, এর ডকুমেন্টেশন দেখুন](https://docs.pydantic.dev/)।

///

**FastAPI** মূলত Pydantic-এর উপর নির্মিত।

আপনি এই সমস্ত কিছুর অনেক বাস্তবসম্মত উদাহরণ পাবেন [টিউটোরিয়াল - ইউজার গাইডে](https://fastapi.tiangolo.com/tutorial/)।

/// tip

যখন আপনি `Optional` বা `Union[Something, None]` ব্যবহার করেন এবং কোনো ডিফল্ট মান না থাকে, Pydantic-এর একটি বিশেষ আচরণ রয়েছে, আপনি Pydantic ডকুমেন্টেশনে [Required Optional fields](https://docs.pydantic.dev/latest/concepts/models/#required-optional-fields) সম্পর্কে আরও পড়তে পারেন।

///

## মেটাডাটা অ্যানোটেশন সহ টাইপ হিন্টস

Python-এ এমন একটি ফিচার আছে যা `Annotated` ব্যবহার করে এই টাইপ হিন্টগুলিতে **অতিরিক্ত মেটাডাটা** রাখতে দেয়।

//// tab | Python 3.9+

Python 3.9-এ, `Annotated` স্ট্যান্ডার্ড লাইব্রেরিতে অন্তর্ভুক্ত, তাই আপনি এটি `typing` থেকে ইমপোর্ট করতে পারেন।

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial013_py39.py!}
```

////

//// tab | Python 3.8+

Python 3.9-এর নীচের সংস্করণগুলিতে, আপনি `Annotated`-কে `typing_extensions` থেকে ইমপোর্ট করেন।

এটি **FastAPI** এর সাথে ইতিমদ্ধে ইনস্টল হয়ে থাকবে।

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial013.py!}
```

////

Python নিজে এই `Annotated` দিয়ে কিছুই করে না। এবং এডিটর এবং অন্যান্য টুলগুলির জন্য, টাইপটি এখনও `str`।

কিন্তু আপনি এই `Annotated` এর মধ্যকার জায়গাটির মধ্যে **FastAPI**-এ কীভাবে আপনার অ্যাপ্লিকেশন আচরণ করুক তা সম্পর্কে অতিরিক্ত মেটাডাটা প্রদান করার জন্য ব্যবহার করতে পারেন।

মনে রাখার গুরুত্বপূর্ণ বিষয় হল যে **প্রথম *টাইপ প্যারামিটার*** আপনি `Annotated`-এ পাস করেন সেটি হল **আসল টাইপ**। বাকি শুধুমাত্র অন্যান্য টুলগুলির জন্য মেটাডাটা।

এখন আপনার কেবল জানা প্রয়োজন যে `Annotated` বিদ্যমান, এবং এটি স্ট্যান্ডার্ড Python। 😎

পরবর্তীতে আপনি দেখবেন এটি কতটা **শক্তিশালী** হতে পারে।

/// tip

এটি **স্ট্যান্ডার্ড Python** হওয়ার মানে হল আপনি আপনার এডিটরে, আপনি যে টুলগুলি কোড বিশ্লেষণ এবং রিফ্যাক্টর করার জন্য ব্যবহার করেন তাতে **সেরা সম্ভাব্য ডেভেলপার এক্সপেরিয়েন্স** পাবেন। ✨

এবং এছাড়াও আপনার কোড অন্যান্য অনেক Python টুল এবং লাইব্রেরিগুলির সাথে খুব সামঞ্জস্যপূর্ণ হবে। 🚀

///

## **FastAPI**-এ টাইপ হিন্টস

**FastAPI** এই টাইপ হিন্টগুলি ব্যবহার করে বেশ কিছু জিনিস করে।

**FastAPI**-এ আপনি টাইপ হিন্টগুলি সহ প্যারামিটার ঘোষণা করেন এবং আপনি পান:

* **এডিটর সাপোর্ট**।
* **টাইপচেক**।

...এবং **FastAPI** একই ঘোষণাগুলি ব্যবহার করে:

* **রিকুইরেমেন্টস সংজ্ঞায়িত করে**: রিকোয়েস্ট পাথ প্যারামিটার, কুয়েরি প্যারামিটার, হেডার, বডি, ডিপেন্ডেন্সিস, ইত্যাদি থেকে।
* **ডেটা রূপান্তর করে**: রিকোয়েস্ট থেকে প্রয়োজনীয় টাইপে ডেটা।
* **ডেটা যাচাই করে**: প্রতিটি রিকোয়েস্ট থেকে আসা ডেটা:
    * যখন ডেটা অবৈধ হয় তখন **স্বয়ংক্রিয় ত্রুটি** গ্রাহকের কাছে ফেরত পাঠানো।
* **API ডকুমেন্টেশন তৈরি করে**: OpenAPI ব্যবহার করে:
    * যা স্বয়ংক্রিয় ইন্টার‌্যাক্টিভ ডকুমেন্টেশন ইউজার ইন্টারফেস দ্বারা ব্যবহৃত হয়।

এই সব কিছু আপনার কাছে অস্পষ্ট মনে হতে পারে। চিন্তা করবেন না। আপনি [টিউটোরিয়াল - ইউজার গাইড](https://fastapi.tiangolo.com/tutorial/) এ এই সব কিছু প্র্যাকটিসে দেখতে পাবেন।

গুরুত্বপূর্ণ বিষয় হল, আপনি যদি স্ট্যান্ডার্ড Python টাইপগুলি ব্যবহার করেন, তবে আরও বেশি ক্লাস, ডেকোরেটর ইত্যাদি যোগ না করেই একই স্থানে **FastAPI** আপনার অনেক কাজ করে দিবে।

/// info

যদি আপনি টিউটোরিয়ালের সমস্ত বিষয় পড়ে ফেলে থাকেন এবং টাইপ সম্পর্কে আরও জানতে চান, তবে একটি ভালো রিসোর্স হল [mypy এর "cheat sheet"](https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html)। এই "cheat sheet" এ আপনি Python টাইপ হিন্ট সম্পর্কে বেসিক থেকে উন্নত লেভেলের ধারণা পেতে পারেন, যা আপনার কোডে টাইপ সেফটি এবং স্পষ্টতা বাড়াতে সাহায্য করবে।

///


================================================
File: /docs/bn/docs/learn/index.md
================================================
# শিখুন

এখানে **FastAPI** শিখার জন্য প্রাথমিক বিভাগগুলি এবং টিউটোরিয়ালগুলি রয়েছে।

আপনি এটিকে একটি **বই**, একটি **কোর্স**, এবং FastAPI শিখার **অফিসিয়াল** এবং প্রস্তাবিত উপায় বিবেচনা করতে পারেন। 😎


================================================
File: /docs/de/mkdocs.yml
================================================
INHERIT: ../en/mkdocs.yml


================================================
File: /docs/de/docs/alternatives.md
================================================
# Alternativen, Inspiration und Vergleiche

Was hat **FastAPI** inspiriert, ein Vergleich zu Alternativen, und was FastAPI von diesen gelernt hat.

## Einführung

**FastAPI** würde ohne die frühere Arbeit anderer nicht existieren.

Es wurden zuvor viele Tools entwickelt, die als Inspiration für seine Entwicklung dienten.

Ich habe die Schaffung eines neuen Frameworks viele Jahre lang vermieden. Zuerst habe ich versucht, alle von **FastAPI** abgedeckten Funktionen mithilfe vieler verschiedener Frameworks, Plugins und Tools zu lösen.

Aber irgendwann gab es keine andere Möglichkeit, als etwas zu schaffen, das all diese Funktionen bereitstellte, die besten Ideen früherer Tools aufnahm und diese auf die bestmögliche Weise kombinierte, wobei Sprachfunktionen verwendet wurden, die vorher noch nicht einmal verfügbar waren (Python 3.6+ Typhinweise).

## Vorherige Tools

### <a href="https://www.djangoproject.com/" class="external-link" target="_blank">Django</a>

Es ist das beliebteste Python-Framework und genießt großes Vertrauen. Es wird zum Aufbau von Systemen wie Instagram verwendet.

Ist relativ eng mit relationalen Datenbanken (wie MySQL oder PostgreSQL) gekoppelt, daher ist es nicht sehr einfach, eine NoSQL-Datenbank (wie Couchbase, MongoDB, Cassandra, usw.) als Hauptspeicherengine zu verwenden.

Es wurde erstellt, um den HTML-Code im Backend zu generieren, nicht um APIs zu erstellen, die von einem modernen Frontend (wie React, Vue.js und Angular) oder von anderen Systemen (wie <abbr title="Internet of Things">IoT</abbr>-Geräten) verwendet werden, um mit ihm zu kommunizieren.

### <a href="https://www.django-rest-framework.org/" class="external-link" target="_blank">Django REST Framework</a>

Das Django REST Framework wurde als flexibles Toolkit zum Erstellen von Web-APIs unter Verwendung von Django entwickelt, um dessen API-Möglichkeiten zu verbessern.

Es wird von vielen Unternehmen verwendet, darunter Mozilla, Red Hat und Eventbrite.

Es war eines der ersten Beispiele für **automatische API-Dokumentation**, und dies war insbesondere eine der ersten Ideen, welche „die Suche nach“ **FastAPI** inspirierten.

/// note | Hinweis

Das Django REST Framework wurde von Tom Christie erstellt. Derselbe Schöpfer von Starlette und Uvicorn, auf denen **FastAPI** basiert.

///

/// check | Inspirierte **FastAPI**

Eine automatische API-Dokumentationsoberfläche zu haben.

///

### <a href="https://flask.palletsprojects.com" class="external-link" target="_blank">Flask</a>

Flask ist ein „Mikroframework“, es enthält weder Datenbankintegration noch viele der Dinge, die standardmäßig in Django enthalten sind.

Diese Einfachheit und Flexibilität ermöglichen beispielsweise die Verwendung von NoSQL-Datenbanken als Hauptdatenspeichersystem.

Da es sehr einfach ist, ist es relativ intuitiv zu erlernen, obwohl die Dokumentation an einigen Stellen etwas technisch wird.

Es wird auch häufig für andere Anwendungen verwendet, die nicht unbedingt eine Datenbank, Benutzerverwaltung oder eine der vielen in Django enthaltenen Funktionen benötigen. Obwohl viele dieser Funktionen mit Plugins hinzugefügt werden können.

Diese Entkopplung der Teile und die Tatsache, dass es sich um ein „Mikroframework“ handelt, welches so erweitert werden kann, dass es genau das abdeckt, was benötigt wird, war ein Schlüsselmerkmal, das ich beibehalten wollte.

Angesichts der Einfachheit von Flask schien es eine gute Ergänzung zum Erstellen von APIs zu sein. Als Nächstes musste ein „Django REST Framework“ für Flask gefunden werden.

/// check | Inspirierte **FastAPI**

Ein Mikroframework zu sein. Es einfach zu machen, die benötigten Tools und Teile zu kombinieren.

Über ein einfaches und benutzerfreundliches Routingsystem zu verfügen.

///

### <a href="https://requests.readthedocs.io" class="external-link" target="_blank">Requests</a>

**FastAPI** ist eigentlich keine Alternative zu **Requests**. Der Umfang der beiden ist sehr unterschiedlich.

Es wäre tatsächlich üblich, Requests *innerhalb* einer FastAPI-Anwendung zu verwenden.

Dennoch erhielt FastAPI von Requests einiges an Inspiration.

**Requests** ist eine Bibliothek zur *Interaktion* mit APIs (als Client), während **FastAPI** eine Bibliothek zum *Erstellen* von APIs (als Server) ist.

Die beiden stehen mehr oder weniger an entgegengesetzten Enden und ergänzen sich.

Requests hat ein sehr einfaches und intuitives Design, ist sehr einfach zu bedienen und verfügt über sinnvolle Standardeinstellungen. Aber gleichzeitig ist es sehr leistungsstark und anpassbar.

Aus diesem Grund heißt es auf der offiziellen Website:

> Requests ist eines der am häufigsten heruntergeladenen Python-Packages aller Zeiten

Die Art und Weise, wie Sie es verwenden, ist sehr einfach. Um beispielsweise einen `GET`-Request zu machen, würden Sie schreiben:

```Python
response = requests.get("http://example.com/some/url")
```

Die entsprechende *Pfadoperation* der FastAPI-API könnte wie folgt aussehen:

```Python hl_lines="1"
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

Sehen Sie sich die Ähnlichkeiten in `requests.get(...)` und `@app.get(...)` an.

/// check | Inspirierte **FastAPI**

* Über eine einfache und intuitive API zu verfügen.
* HTTP-Methodennamen (Operationen) direkt, auf einfache und intuitive Weise zu verwenden.
* Vernünftige Standardeinstellungen zu haben, aber auch mächtige Einstellungsmöglichkeiten.

///

### <a href="https://swagger.io/" class="external-link" target="_blank">Swagger</a> / <a href="https://github.com/OAI/OpenAPI-Specification/" class="external-link" target="_blank">OpenAPI</a>

Die Hauptfunktion, die ich vom Django REST Framework haben wollte, war die automatische API-Dokumentation.

Dann fand ich heraus, dass es einen Standard namens Swagger gab, zur Dokumentation von APIs unter Verwendung von JSON (oder YAML, einer Erweiterung von JSON).

Und es gab bereits eine Web-Oberfläche für Swagger-APIs. Die Möglichkeit, Swagger-Dokumentation für eine API zu generieren, würde die automatische Nutzung dieser Web-Oberfläche ermöglichen.

Irgendwann wurde Swagger an die Linux Foundation übergeben und in OpenAPI umbenannt.

Aus diesem Grund spricht man bei Version 2.0 häufig von „Swagger“ und ab Version 3 von „OpenAPI“.

/// check | Inspirierte **FastAPI**

Einen offenen Standard für API-Spezifikationen zu übernehmen und zu verwenden, anstelle eines benutzerdefinierten Schemas.

Und Standard-basierte Tools für die Oberfläche zu integrieren:

* <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a>
* <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a>

Diese beiden wurden ausgewählt, weil sie ziemlich beliebt und stabil sind, aber bei einer schnellen Suche könnten Sie Dutzende alternativer Benutzeroberflächen für OpenAPI finden (welche Sie mit **FastAPI** verwenden können).

///

### Flask REST Frameworks

Es gibt mehrere Flask REST Frameworks, aber nachdem ich die Zeit und Arbeit investiert habe, sie zu untersuchen, habe ich festgestellt, dass viele nicht mehr unterstützt werden oder abgebrochen wurden und dass mehrere fortbestehende Probleme sie unpassend machten.

### <a href="https://marshmallow.readthedocs.io/en/stable/" class="external-link" target="_blank">Marshmallow</a>

Eine der von API-Systemen benötigen Hauptfunktionen ist die Daten-„<abbr title="Auch „Marshalling“, „Konvertierung“ genannt">Serialisierung</abbr>“, welche Daten aus dem Code (Python) entnimmt und in etwas umwandelt, was durch das Netzwerk gesendet werden kann. Beispielsweise das Konvertieren eines Objekts, welches Daten aus einer Datenbank enthält, in ein JSON-Objekt. Konvertieren von `datetime`-Objekten in Strings, usw.

Eine weitere wichtige Funktion, benötigt von APIs, ist die Datenvalidierung, welche sicherstellt, dass die Daten unter gegebenen Umständen gültig sind. Zum Beispiel, dass ein Feld ein `int` ist und kein zufälliger String. Das ist besonders nützlich für hereinkommende Daten.

Ohne ein Datenvalidierungssystem müssten Sie alle Prüfungen manuell im Code durchführen.

Für diese Funktionen wurde Marshmallow entwickelt. Es ist eine großartige Bibliothek und ich habe sie schon oft genutzt.

Aber sie wurde erstellt, bevor Typhinweise in Python existierten. Um also ein <abbr title="die Definition, wie Daten geformt sein werden sollen">Schema</abbr> zu definieren, müssen Sie bestimmte Werkzeuge und Klassen verwenden, die von Marshmallow bereitgestellt werden.

/// check | Inspirierte **FastAPI**

Code zu verwenden, um „Schemas“ zu definieren, welche Datentypen und Validierung automatisch bereitstellen.

///

### <a href="https://webargs.readthedocs.io/en/latest/" class="external-link" target="_blank">Webargs</a>

Eine weitere wichtige Funktion, die von APIs benötigt wird, ist das <abbr title="Lesen und Konvertieren nach Python-Daten">Parsen</abbr> von Daten aus eingehenden Requests.

Webargs wurde entwickelt, um dieses für mehrere Frameworks, einschließlich Flask, bereitzustellen.

Es verwendet unter der Haube Marshmallow, um die Datenvalidierung durchzuführen. Und es wurde von denselben Entwicklern erstellt.

Es ist ein großartiges Tool und ich habe es auch oft verwendet, bevor ich **FastAPI** hatte.

/// info

Webargs wurde von denselben Marshmallow-Entwicklern erstellt.

///

/// check | Inspirierte **FastAPI**

Eingehende Requestdaten automatisch zu validieren.

///

### <a href="https://apispec.readthedocs.io/en/stable/" class="external-link" target="_blank">APISpec</a>

Marshmallow und Webargs bieten Validierung, Parsen und Serialisierung als Plugins.

Es fehlt jedoch noch die Dokumentation. Dann wurde APISpec erstellt.

Es ist ein Plugin für viele Frameworks (und es gibt auch ein Plugin für Starlette).

Die Funktionsweise besteht darin, dass Sie die Definition des Schemas im YAML-Format im Docstring jeder Funktion schreiben, die eine Route verarbeitet.

Und es generiert OpenAPI-Schemas.

So funktioniert es in Flask, Starlette, Responder, usw.

Aber dann haben wir wieder das Problem einer Mikrosyntax innerhalb eines Python-Strings (eines großen YAML).

Der Texteditor kann dabei nicht viel helfen. Und wenn wir Parameter oder Marshmallow-Schemas ändern und vergessen, auch den YAML-Docstring zu ändern, wäre das generierte Schema veraltet.

/// info

APISpec wurde von denselben Marshmallow-Entwicklern erstellt.

///

/// check | Inspirierte **FastAPI**

Den offenen Standard für APIs, OpenAPI, zu unterstützen.

///

### <a href="https://flask-apispec.readthedocs.io/en/latest/" class="external-link" target="_blank">Flask-apispec</a>

Hierbei handelt es sich um ein Flask-Plugin, welches Webargs, Marshmallow und APISpec miteinander verbindet.

Es nutzt die Informationen von Webargs und Marshmallow, um mithilfe von APISpec automatisch OpenAPI-Schemas zu generieren.

Ein großartiges Tool, sehr unterbewertet. Es sollte weitaus populärer als viele andere Flask-Plugins sein. Möglicherweise liegt es daran, dass die Dokumentation zu kompakt und abstrakt ist.

Das löste das Problem, YAML (eine andere Syntax) in Python-Docstrings schreiben zu müssen.

Diese Kombination aus Flask, Flask-apispec mit Marshmallow und Webargs war bis zur Entwicklung von **FastAPI** mein Lieblings-Backend-Stack.

Die Verwendung führte zur Entwicklung mehrerer Flask-Full-Stack-Generatoren. Dies sind die Hauptstacks, die ich (und mehrere externe Teams) bisher verwendet haben:

* <a href="https://github.com/tiangolo/full-stack" class="external-link" target="_blank">https://github.com/tiangolo/full-stack</a>
* <a href="https://github.com/tiangolo/full-stack-flask-couchbase" class="external-link" target="_blank">https://github.com/tiangolo/full-stack-flask-couchbase</a>
* <a href="https://github.com/tiangolo/full-stack-flask-couchdb" class="external-link" target="_blank">https://github.com/tiangolo/full-stack-flask-couchdb</a>

Und dieselben Full-Stack-Generatoren bildeten die Basis der [**FastAPI**-Projektgeneratoren](project-generation.md){.internal-link target=_blank}.

/// info

Flask-apispec wurde von denselben Marshmallow-Entwicklern erstellt.

///

/// check | Inspirierte **FastAPI**

Das OpenAPI-Schema automatisch zu generieren, aus demselben Code, welcher die Serialisierung und Validierung definiert.

///

### <a href="https://nestjs.com/" class="external-link" target="_blank">NestJS</a> (und <a href="https://angular.io/" class="external-link" target="_blank">Angular</a>)

Dies ist nicht einmal Python, NestJS ist ein von Angular inspiriertes JavaScript (TypeScript) NodeJS Framework.

Es erreicht etwas Ähnliches wie Flask-apispec.

Es verfügt über ein integriertes Dependency Injection System, welches von Angular 2 inspiriert ist. Erfordert ein Vorab-Registrieren der „Injectables“ (wie alle anderen Dependency Injection Systeme, welche ich kenne), sodass der Code ausschweifender wird und es mehr Codeverdoppelung gibt.

Da die Parameter mit TypeScript-Typen beschrieben werden (ähnlich den Python-Typhinweisen), ist die Editorunterstützung ziemlich gut.

Da TypeScript-Daten jedoch nach der Kompilierung nach JavaScript nicht erhalten bleiben, können die Typen nicht gleichzeitig die Validierung, Serialisierung und Dokumentation definieren. Aus diesem Grund und aufgrund einiger Designentscheidungen ist es für die Validierung, Serialisierung und automatische Schemagenerierung erforderlich, an vielen Stellen Dekoratoren hinzuzufügen. Es wird also ziemlich ausführlich.

Es kann nicht sehr gut mit verschachtelten Modellen umgehen. Wenn es sich beim JSON-Body in der Anfrage also um ein JSON-Objekt mit inneren Feldern handelt, die wiederum verschachtelte JSON-Objekte sind, kann er nicht richtig dokumentiert und validiert werden.

/// check | Inspirierte **FastAPI**

Python-Typen zu verwenden, um eine hervorragende Editorunterstützung zu erhalten.

Über ein leistungsstarkes Dependency Injection System zu verfügen. Eine Möglichkeit zu finden, Codeverdoppelung zu minimieren.

///

### <a href="https://sanic.readthedocs.io/en/latest/" class="external-link" target="_blank">Sanic</a>

Es war eines der ersten extrem schnellen Python-Frameworks, welches auf `asyncio` basierte. Es wurde so gestaltet, dass es Flask sehr ähnlich ist.

/// note | Technische Details

Es verwendete <a href="https://github.com/MagicStack/uvloop" class="external-link" target="_blank">`uvloop`</a> anstelle der standardmäßigen Python-`asyncio`-Schleife. Das hat es so schnell gemacht.

Hat eindeutig Uvicorn und Starlette inspiriert, welche derzeit in offenen Benchmarks schneller als Sanic sind.

///

/// check | Inspirierte **FastAPI**

Einen Weg zu finden, eine hervorragende Performanz zu haben.

Aus diesem Grund basiert **FastAPI** auf Starlette, da dieses das schnellste verfügbare Framework ist (getestet in Benchmarks von Dritten).

///

### <a href="https://falconframework.org/" class="external-link" target="_blank">Falcon</a>

Falcon ist ein weiteres leistungsstarkes Python-Framework. Es ist minimalistisch konzipiert und dient als Grundlage für andere Frameworks wie Hug.

Es ist so konzipiert, dass es über Funktionen verfügt, welche zwei Parameter empfangen, einen „Request“ und eine „Response“. Dann „lesen“ Sie Teile des Requests und „schreiben“ Teile der Response. Aufgrund dieses Designs ist es nicht möglich, Request-Parameter und -Bodys mit Standard-Python-Typhinweisen als Funktionsparameter zu deklarieren.

Daher müssen Datenvalidierung, Serialisierung und Dokumentation im Code und nicht automatisch erfolgen. Oder sie müssen als Framework oberhalb von Falcon implementiert werden, so wie Hug. Dieselbe Unterscheidung findet auch in anderen Frameworks statt, die vom Design von Falcon inspiriert sind und ein Requestobjekt und ein Responseobjekt als Parameter haben.

/// check | Inspirierte **FastAPI**

Wege zu finden, eine großartige Performanz zu erzielen.

Zusammen mit Hug (da Hug auf Falcon basiert), einen `response`-Parameter in Funktionen zu deklarieren.

Obwohl er in FastAPI optional ist und hauptsächlich zum Festlegen von Headern, Cookies und alternativen Statuscodes verwendet wird.

///

### <a href="https://moltenframework.com/" class="external-link" target="_blank">Molten</a>

Ich habe Molten in den ersten Phasen der Entwicklung von **FastAPI** entdeckt. Und es hat ganz ähnliche Ideen:

* Basierend auf Python-Typhinweisen.
* Validierung und Dokumentation aus diesen Typen.
* Dependency Injection System.

Es verwendet keine Datenvalidierungs-, Serialisierungs- und Dokumentationsbibliothek eines Dritten wie Pydantic, sondern verfügt über eine eigene. Daher wären diese Datentyp-Definitionen nicht so einfach wiederverwendbar.

Es erfordert eine etwas ausführlichere Konfiguration. Und da es auf WSGI (anstelle von ASGI) basiert, ist es nicht darauf ausgelegt, die hohe Leistung von Tools wie Uvicorn, Starlette und Sanic zu nutzen.

Das Dependency Injection System erfordert eine Vorab-Registrierung der Abhängigkeiten und die Abhängigkeiten werden basierend auf den deklarierten Typen aufgelöst. Daher ist es nicht möglich, mehr als eine „Komponente“ zu deklarieren, welche einen bestimmten Typ bereitstellt.

Routen werden an einer einzigen Stelle deklariert, indem Funktionen verwendet werden, die an anderen Stellen deklariert wurden (anstatt Dekoratoren zu verwenden, welche direkt über der Funktion platziert werden können, welche den Endpunkt verarbeitet). Dies ähnelt eher der Vorgehensweise von Django als der Vorgehensweise von Flask (und Starlette). Es trennt im Code Dinge, die relativ eng miteinander gekoppelt sind.

/// check | Inspirierte **FastAPI**

Zusätzliche Validierungen für Datentypen zu definieren, mithilfe des „Default“-Werts von Modellattributen. Dies verbessert die Editorunterstützung und war zuvor in Pydantic nicht verfügbar.

Das hat tatsächlich dazu geführt, dass Teile von Pydantic aktualisiert wurden, um denselben Validierungsdeklarationsstil zu unterstützen (diese gesamte Funktionalität ist jetzt bereits in Pydantic verfügbar).

///

### <a href="https://github.com/hugapi/hug" class="external-link" target="_blank">Hug</a>

Hug war eines der ersten Frameworks, welches die Deklaration von API-Parametertypen mithilfe von Python-Typhinweisen implementierte. Das war eine großartige Idee, die andere Tools dazu inspirierte, dasselbe zu tun.

Es verwendete benutzerdefinierte Typen in seinen Deklarationen anstelle von Standard-Python-Typen, es war aber dennoch ein großer Fortschritt.

Außerdem war es eines der ersten Frameworks, welches ein benutzerdefiniertes Schema generierte, welches die gesamte API in JSON deklarierte.

Es basierte nicht auf einem Standard wie OpenAPI und JSON Schema. Daher wäre es nicht einfach, es in andere Tools wie Swagger UI zu integrieren. Aber, nochmal, es war eine sehr innovative Idee.

Es verfügt über eine interessante, ungewöhnliche Funktion: Mit demselben Framework ist es möglich, APIs und auch CLIs zu erstellen.

Da es auf dem bisherigen Standard für synchrone Python-Webframeworks (WSGI) basiert, kann es nicht mit Websockets und anderen Dingen umgehen, verfügt aber dennoch über eine hohe Performanz.

/// info

Hug wurde von Timothy Crosley erstellt, dem gleichen Schöpfer von <a href="https://github.com/timothycrosley/isort" class="external-link" target="_blank">`isort`</a>, einem großartigen Tool zum automatischen Sortieren von Importen in Python-Dateien.

///

/// check | Ideen, die **FastAPI** inspiriert haben

Hug inspirierte Teile von APIStar und war eines der Tools, die ich am vielversprechendsten fand, neben APIStar.

Hug hat dazu beigetragen, **FastAPI** dazu zu inspirieren, Python-Typhinweise zum Deklarieren von Parametern zu verwenden und ein Schema zu generieren, das die API automatisch definiert.

Hug inspirierte **FastAPI** dazu, einen `response`-Parameter in Funktionen zu deklarieren, um Header und Cookies zu setzen.

///

### <a href="https://github.com/encode/apistar" class="external-link" target="_blank">APIStar</a> (≦ 0.5)

Kurz bevor ich mich entschied, **FastAPI** zu erstellen, fand ich den **APIStar**-Server. Er hatte fast alles, was ich suchte, und ein tolles Design.

Er war eine der ersten Implementierungen eines Frameworks, die ich je gesehen hatte (vor NestJS und Molten), welches Python-Typhinweise zur Deklaration von Parametern und Requests verwendeten. Ich habe ihn mehr oder weniger zeitgleich mit Hug gefunden. Aber APIStar nutzte den OpenAPI-Standard.

Er verfügte an mehreren Stellen über automatische Datenvalidierung, Datenserialisierung und OpenAPI-Schemagenerierung, basierend auf denselben Typhinweisen.

Body-Schemadefinitionen verwendeten nicht die gleichen Python-Typhinweise wie Pydantic, er war Marshmallow etwas ähnlicher, sodass die Editorunterstützung nicht so gut war, aber dennoch war APIStar die beste verfügbare Option.

Er hatte zu dieser Zeit die besten Leistungsbenchmarks (nur übertroffen von Starlette).

Anfangs gab es keine Web-Oberfläche für die automatische API-Dokumentation, aber ich wusste, dass ich Swagger UI hinzufügen konnte.

Er verfügte über ein Dependency Injection System. Es erforderte eine Vorab-Registrierung der Komponenten, wie auch bei anderen oben besprochenen Tools. Aber dennoch, es war ein tolles Feature.

Ich konnte ihn nie in einem vollständigen Projekt verwenden, da er keine Sicherheitsintegration hatte, sodass ich nicht alle Funktionen, die ich hatte, durch die auf Flask-apispec basierenden Full-Stack-Generatoren ersetzen konnte. Ich hatte in meinem Projekte-Backlog den Eintrag, einen Pull Request zu erstellen, welcher diese Funktionalität hinzufügte.

Doch dann verlagerte sich der Schwerpunkt des Projekts.

Es handelte sich nicht länger um ein API-Webframework, da sich der Entwickler auf Starlette konzentrieren musste.

Jetzt handelt es sich bei APIStar um eine Reihe von Tools zur Validierung von OpenAPI-Spezifikationen, nicht um ein Webframework.

/// info

APIStar wurde von Tom Christie erstellt. Derselbe, welcher Folgendes erstellt hat:

* Django REST Framework
* Starlette (auf welchem **FastAPI** basiert)
* Uvicorn (verwendet von Starlette und **FastAPI**)

///

/// check | Inspirierte **FastAPI**

Zu existieren.

Die Idee, mehrere Dinge (Datenvalidierung, Serialisierung und Dokumentation) mit denselben Python-Typen zu deklarieren, welche gleichzeitig eine hervorragende Editorunterstützung bieten, hielt ich für eine brillante Idee.

Und nach einer langen Suche nach einem ähnlichen Framework und dem Testen vieler verschiedener Alternativen, war APIStar die beste verfügbare Option.

Dann hörte APIStar auf, als Server zu existieren, und Starlette wurde geschaffen, welches eine neue, bessere Grundlage für ein solches System bildete. Das war die finale Inspiration für die Entwicklung von **FastAPI**.

Ich betrachte **FastAPI** als einen „spirituellen Nachfolger“ von APIStar, welcher die Funktionen, das Typsystem und andere Teile verbessert und erweitert, basierend auf den Erkenntnissen aus all diesen früheren Tools.

///

## Verwendet von **FastAPI**

### <a href="https://pydantic-docs.helpmanual.io/" class="external-link" target="_blank">Pydantic</a>

Pydantic ist eine Bibliothek zum Definieren von Datenvalidierung, Serialisierung und Dokumentation (unter Verwendung von JSON Schema) basierend auf Python-Typhinweisen.

Das macht es äußerst intuitiv.

Es ist vergleichbar mit Marshmallow. Obwohl es in Benchmarks schneller als Marshmallow ist. Und da es auf den gleichen Python-Typhinweisen basiert, ist die Editorunterstützung großartig.

/// check | **FastAPI** verwendet es, um

Die gesamte Datenvalidierung, Datenserialisierung und automatische Modelldokumentation (basierend auf JSON Schema) zu erledigen.

**FastAPI** nimmt dann, abgesehen von all den anderen Dingen, die es tut, dieses JSON-Schema und fügt es in OpenAPI ein.

///

### <a href="https://www.starlette.io/" class="external-link" target="_blank">Starlette</a>

Starlette ist ein leichtgewichtiges <abbr title="Der neue Standard für die Erstellung asynchroner Python-Webanwendungen">ASGI</abbr>-Framework/Toolkit, welches sich ideal für die Erstellung hochperformanter asynchroner Dienste eignet.

Es ist sehr einfach und intuitiv. Es ist so konzipiert, dass es leicht erweiterbar ist und über modulare Komponenten verfügt.

Es bietet:

* Eine sehr beeindruckende Leistung.
* WebSocket-Unterstützung.
* Hintergrundtasks im selben Prozess.
* Events für das Hoch- und Herunterfahren.
* Testclient basierend auf HTTPX.
* CORS, GZip, statische Dateien, Streamende Responses.
* Session- und Cookie-Unterstützung.
* 100 % Testabdeckung.
* 100 % Typannotierte Codebasis.
* Wenige starke Abhängigkeiten.

Starlette ist derzeit das schnellste getestete Python-Framework. Nur übertroffen von Uvicorn, welches kein Framework, sondern ein Server ist.

Starlette bietet alle grundlegenden Funktionen eines Web-Microframeworks.

Es bietet jedoch keine automatische Datenvalidierung, Serialisierung oder Dokumentation.

Das ist eines der wichtigsten Dinge, welche **FastAPI** hinzufügt, alles basierend auf Python-Typhinweisen (mit Pydantic). Das, plus, das Dependency Injection System, Sicherheitswerkzeuge, OpenAPI-Schemagenerierung, usw.

/// note | Technische Details

ASGI ist ein neuer „Standard“, welcher von Mitgliedern des Django-Kernteams entwickelt wird. Es handelt sich immer noch nicht um einen „Python-Standard“ (ein PEP), obwohl sie gerade dabei sind, das zu tun.

Dennoch wird es bereits von mehreren Tools als „Standard“ verwendet. Das verbessert die Interoperabilität erheblich, da Sie Uvicorn mit jeden anderen ASGI-Server (wie Daphne oder Hypercorn) tauschen oder ASGI-kompatible Tools wie `python-socketio` hinzufügen können.

///

/// check | **FastAPI** verwendet es, um

Alle Kern-Webaspekte zu handhaben. Und fügt Funktionen obenauf.

Die Klasse `FastAPI` selbst erbt direkt von der Klasse `Starlette`.

Alles, was Sie also mit Starlette machen können, können Sie direkt mit **FastAPI** machen, da es sich im Grunde um Starlette auf Steroiden handelt.

///

### <a href="https://www.uvicorn.org/" class="external-link" target="_blank">Uvicorn</a>

Uvicorn ist ein blitzschneller ASGI-Server, der auf uvloop und httptools basiert.

Es handelt sich nicht um ein Webframework, sondern um einen Server. Beispielsweise werden keine Tools für das Routing von Pfaden bereitgestellt. Das ist etwas, was ein Framework wie Starlette (oder **FastAPI**) zusätzlich bieten würde.

Es ist der empfohlene Server für Starlette und **FastAPI**.

/// check | **FastAPI** empfiehlt es als

Hauptwebserver zum Ausführen von **FastAPI**-Anwendungen.

Sie können ihn mit Gunicorn kombinieren, um einen asynchronen Multiprozess-Server zu erhalten.

Weitere Details finden Sie im Abschnitt [Deployment](deployment/index.md){.internal-link target=_blank}.

///

## Benchmarks und Geschwindigkeit

Um den Unterschied zwischen Uvicorn, Starlette und FastAPI zu verstehen, zu vergleichen und zu sehen, lesen Sie den Abschnitt über [Benchmarks](benchmarks.md){.internal-link target=_blank}.


================================================
File: /docs/de/docs/async.md
================================================
# Nebenläufigkeit und async / await

Details zur `async def`-Syntax für *Pfadoperation-Funktionen* und Hintergrundinformationen zu asynchronem Code, Nebenläufigkeit und Parallelität.

## In Eile?

<abbr title="too long; didn't read – Zu lang; nicht gelesen"><strong>TL;DR:</strong></abbr>

Wenn Sie Bibliotheken von Dritten verwenden, die mit `await` aufgerufen werden müssen, wie zum Beispiel:

```Python
results = await some_library()
```

Dann deklarieren Sie Ihre *Pfadoperation-Funktionen* mit `async def` wie in:

```Python hl_lines="2"
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

/// note

Sie können `await` nur innerhalb von Funktionen verwenden, die mit `async def` erstellt wurden.

///

---

Wenn Sie eine Bibliothek eines Dritten verwenden, die mit etwas kommuniziert (einer Datenbank, einer API, dem Dateisystem, usw.) und welche die Verwendung von `await` nicht unterstützt (dies ist derzeit bei den meisten Datenbankbibliotheken der Fall), dann deklarieren Sie Ihre *Pfadoperation-Funktionen* ganz normal nur mit `def`, etwa:

```Python hl_lines="2"
@app.get('/')
def results():
    results = some_library()
    return results
```

---

Wenn Ihre Anwendung (irgendwie) mit nichts anderem kommunizieren und auf dessen Antwort warten muss, verwenden Sie `async def`.

---

Wenn Sie sich unsicher sind, verwenden Sie einfach `def`.

---

**Hinweis**: Sie können `def` und `async def` in Ihren *Pfadoperation-Funktionen* beliebig mischen, so wie Sie es benötigen, und jede einzelne Funktion in der für Sie besten Variante erstellen. FastAPI wird damit das Richtige tun.

Wie dem auch sei, in jedem der oben genannten Fälle wird FastAPI immer noch asynchron arbeiten und extrem schnell sein.

Wenn Sie jedoch den oben genannten Schritten folgen, können einige Performance-Optimierungen vorgenommen werden.

## Technische Details

Moderne Versionen von Python unterstützen **„asynchronen Code“** unter Verwendung sogenannter **„Coroutinen“** mithilfe der Syntax **`async`** und **`await`**.

Nehmen wir obigen Satz in den folgenden Abschnitten Schritt für Schritt unter die Lupe:

* **Asynchroner Code**
* **`async` und `await`**
* **Coroutinen**

## Asynchroner Code

Asynchroner Code bedeutet lediglich, dass die Sprache 💬 eine Möglichkeit hat, dem Computersystem / Programm 🤖 mitzuteilen, dass es 🤖 an einem bestimmten Punkt im Code darauf warten muss, dass *etwas anderes* irgendwo anders fertig wird. Nehmen wir an, *etwas anderes* ist hier „Langsam-Datei“ 📝.

Während der Zeit, die „Langsam-Datei“ 📝 benötigt, kann das System also andere Aufgaben erledigen.

Dann kommt das System / Programm 🤖 bei jeder Gelegenheit zurück, wenn es entweder wieder wartet, oder wann immer es 🤖 die ganze Arbeit erledigt hat, die zu diesem Zeitpunkt zu tun war. Und es 🤖 wird nachschauen, ob eine der Aufgaben, auf die es gewartet hat, fertig damit ist, zu tun, was sie tun sollte.

Dann nimmt es 🤖 die erste erledigte Aufgabe (sagen wir, unsere „Langsam-Datei“ 📝) und bearbeitet sie weiter.

Das „Warten auf etwas anderes“ bezieht sich normalerweise auf <abbr title="Input and Output – Eingabe und Ausgabe">I/O</abbr>-Operationen, die relativ „langsam“ sind (im Vergleich zur Geschwindigkeit des Prozessors und des Arbeitsspeichers), wie etwa das Warten darauf, dass:

* die Daten des Clients über das Netzwerk empfangen wurden
* die von Ihrem Programm gesendeten Daten vom Client über das Netzwerk empfangen wurden
* der Inhalt einer Datei vom System von der Festplatte gelesen und an Ihr Programm übergeben wurde
* der Inhalt, den Ihr Programm dem System übergeben hat, auf die Festplatte geschrieben wurde
* eine Remote-API-Operation beendet wurde
* Eine Datenbankoperation abgeschlossen wurde
* eine Datenbankabfrage die Ergebnisse zurückgegeben hat
* usw.

Da die Ausführungszeit hier hauptsächlich durch das Warten auf <abbr title="Input and Output – Eingabe und Ausgabe">I/O</abbr>-Operationen verbraucht wird, nennt man dies auch „I/O-lastige“ („I/O bound“) Operationen.

„Asynchron“, sagt man, weil das Computersystem / Programm nicht mit einer langsamen Aufgabe „synchronisiert“ werden muss und nicht auf den genauen Moment warten muss, in dem die Aufgabe beendet ist, ohne dabei etwas zu tun, um schließlich das Ergebnis der Aufgabe zu übernehmen und die Arbeit fortsetzen zu können.

Da es sich stattdessen um ein „asynchrones“ System handelt, kann die Aufgabe nach Abschluss ein wenig (einige Mikrosekunden) in der Schlange warten, bis das System / Programm seine anderen Dinge erledigt hat und zurückkommt, um die Ergebnisse entgegenzunehmen und mit ihnen weiterzuarbeiten.

Für „synchron“ (im Gegensatz zu „asynchron“) wird auch oft der Begriff „sequentiell“ verwendet, da das System / Programm alle Schritte in einer Sequenz („der Reihe nach“) ausführt, bevor es zu einer anderen Aufgabe wechselt, auch wenn diese Schritte mit Warten verbunden sind.

### Nebenläufigkeit und Hamburger

Diese oben beschriebene Idee von **asynchronem** Code wird manchmal auch **„Nebenläufigkeit“** genannt. Sie unterscheidet sich von **„Parallelität“**.

**Nebenläufigkeit** und **Parallelität** beziehen sich beide auf „verschiedene Dinge, die mehr oder weniger gleichzeitig passieren“.

Aber die Details zwischen *Nebenläufigkeit* und *Parallelität* sind ziemlich unterschiedlich.

Um den Unterschied zu erkennen, stellen Sie sich die folgende Geschichte über Hamburger vor:

### Nebenläufige Hamburger

Sie gehen mit Ihrem Schwarm Fastfood holen, stehen in der Schlange, während der Kassierer die Bestellungen der Leute vor Ihnen entgegennimmt. 😍

<img src="/img/async/concurrent-burgers/concurrent-burgers-01.png" class="illustration">

Dann sind Sie an der Reihe und Sie bestellen zwei sehr schmackhafte Burger für Ihren Schwarm und Sie. 🍔🍔

<img src="/img/async/concurrent-burgers/concurrent-burgers-02.png" class="illustration">

Der Kassierer sagt etwas zum Koch in der Küche, damit dieser weiß, dass er Ihre Burger zubereiten muss (obwohl er gerade die für die vorherigen Kunden zubereitet).

<img src="/img/async/concurrent-burgers/concurrent-burgers-03.png" class="illustration">

Sie bezahlen. 💸

Der Kassierer gibt Ihnen die Nummer Ihrer Bestellung.

<img src="/img/async/concurrent-burgers/concurrent-burgers-04.png" class="illustration">

Während Sie warten, suchen Sie sich mit Ihrem Schwarm einen Tisch aus, Sie sitzen da und reden lange mit Ihrem Schwarm (da Ihre Burger sehr aufwändig sind und die Zubereitung einige Zeit dauert).

Während Sie mit Ihrem Schwarm am Tisch sitzen und auf die Burger warten, können Sie die Zeit damit verbringen, zu bewundern, wie großartig, süß und klug Ihr Schwarm ist ✨😍✨.

<img src="/img/async/concurrent-burgers/concurrent-burgers-05.png" class="illustration">

Während Sie warten und mit Ihrem Schwarm sprechen, überprüfen Sie von Zeit zu Zeit die auf dem Zähler angezeigte Nummer, um zu sehen, ob Sie bereits an der Reihe sind.

Dann, irgendwann, sind Sie endlich an der Reihe. Sie gehen zur Theke, holen sich die Burger und kommen zurück an den Tisch.

<img src="/img/async/concurrent-burgers/concurrent-burgers-06.png" class="illustration">

Sie und Ihr Schwarm essen die Burger und haben eine schöne Zeit. ✨

<img src="/img/async/concurrent-burgers/concurrent-burgers-07.png" class="illustration">

/// info

Die wunderschönen Illustrationen stammen von <a href="https://www.instagram.com/ketrinadrawsalot" class="external-link" target="_blank">Ketrina Thompson</a>. 🎨

///

---

Stellen Sie sich vor, Sie wären das Computersystem / Programm 🤖 in dieser Geschichte.

Während Sie an der Schlange stehen, sind Sie einfach untätig 😴, warten darauf, dass Sie an die Reihe kommen, und tun nichts sehr „Produktives“. Aber die Schlange ist schnell abgearbeitet, weil der Kassierer nur die Bestellungen entgegennimmt (und nicht zubereitet), also ist das vertretbar.

Wenn Sie dann an der Reihe sind, erledigen Sie tatsächliche „produktive“ Arbeit, Sie gehen das Menü durch, entscheiden sich, was Sie möchten, bekunden Ihre und die Wahl Ihres Schwarms, bezahlen, prüfen, ob Sie die richtige Menge Geld oder die richtige Karte geben, prüfen, ob die Rechnung korrekt ist, prüfen, dass die Bestellung die richtigen Artikel enthält, usw.

Aber dann, auch wenn Sie Ihre Burger noch nicht haben, ist Ihre Interaktion mit dem Kassierer erst mal „auf Pause“ ⏸, weil Sie warten müssen 🕙, bis Ihre Burger fertig sind.

Aber wenn Sie sich von der Theke entfernt haben und mit der Nummer für die Bestellung an einem Tisch sitzen, können Sie Ihre Aufmerksamkeit auf Ihren Schwarm lenken und an dieser Aufgabe „arbeiten“ ⏯ 🤓. Sie machen wieder etwas sehr „Produktives“ und flirten mit Ihrem Schwarm 😍.

Dann sagt der Kassierer 💁 „Ich bin mit dem Burger fertig“, indem er Ihre Nummer auf dem Display über der Theke anzeigt, aber Sie springen nicht sofort wie verrückt auf, wenn das Display auf Ihre Nummer springt. Sie wissen, dass niemand Ihnen Ihre Burger wegnimmt, denn Sie haben die Nummer Ihrer Bestellung, und andere Leute haben andere Nummern.

Also warten Sie darauf, dass Ihr Schwarm ihre Geschichte zu Ende erzählt (die aktuelle Arbeit ⏯ / bearbeitete Aufgabe beendet 🤓), lächeln sanft und sagen, dass Sie die Burger holen ⏸.

Dann gehen Sie zur Theke 🔀, zur ursprünglichen Aufgabe, die nun erledigt ist ⏯, nehmen die Burger auf, sagen Danke, und bringen sie zum Tisch. Damit ist dieser Schritt / diese Aufgabe der Interaktion mit der Theke abgeschlossen ⏹. Das wiederum schafft eine neue Aufgabe, „Burger essen“ 🔀 ⏯, aber die vorherige Aufgabe „Burger holen“ ist erledigt ⏹.

### Parallele Hamburger

Stellen wir uns jetzt vor, dass es sich hierbei nicht um „nebenläufige Hamburger“, sondern um „parallele Hamburger“ handelt.

Sie gehen los mit Ihrem Schwarm, um paralleles Fast Food zu bekommen.

Sie stehen in der Schlange, während mehrere (sagen wir acht) Kassierer, die gleichzeitig Köche sind, die Bestellungen der Leute vor Ihnen entgegennehmen.

Alle vor Ihnen warten darauf, dass ihre Burger fertig sind, bevor sie die Theke verlassen, denn jeder der 8 Kassierer geht los und bereitet den Burger sofort zu, bevor er die nächste Bestellung entgegennimmt.

<img src="/img/async/parallel-burgers/parallel-burgers-01.png" class="illustration">

Dann sind Sie endlich an der Reihe und bestellen zwei sehr leckere Burger für Ihren Schwarm und Sie.

Sie zahlen 💸.

<img src="/img/async/parallel-burgers/parallel-burgers-02.png" class="illustration">

Der Kassierer geht in die Küche.

Sie warten, vor der Theke stehend 🕙, damit niemand außer Ihnen Ihre Burger entgegennimmt, da es keine Nummern für die Reihenfolge gibt.

<img src="/img/async/parallel-burgers/parallel-burgers-03.png" class="illustration">

Da Sie und Ihr Schwarm damit beschäftigt sind, niemanden vor sich zu lassen, der Ihre Burger nimmt, wenn sie ankommen, können Sie Ihrem Schwarm keine Aufmerksamkeit schenken. 😞

Das ist „synchrone“ Arbeit, Sie sind mit dem Kassierer/Koch „synchronisiert“ 👨‍🍳. Sie müssen warten 🕙 und genau in dem Moment da sein, in dem der Kassierer/Koch 👨‍🍳 die Burger zubereitet hat und Ihnen gibt, sonst könnte jemand anderes sie nehmen.

<img src="/img/async/parallel-burgers/parallel-burgers-04.png" class="illustration">

Dann kommt Ihr Kassierer/Koch 👨‍🍳 endlich mit Ihren Burgern zurück, nachdem Sie lange vor der Theke gewartet 🕙 haben.

<img src="/img/async/parallel-burgers/parallel-burgers-05.png" class="illustration">

Sie nehmen Ihre Burger und gehen mit Ihrem Schwarm an den Tisch.

Sie essen sie und sind fertig. ⏹

<img src="/img/async/parallel-burgers/parallel-burgers-06.png" class="illustration">

Es wurde nicht viel geredet oder geflirtet, da die meiste Zeit mit Warten 🕙 vor der Theke verbracht wurde. 😞

/// info

Die wunderschönen Illustrationen stammen von <a href="https://www.instagram.com/ketrinadrawsalot" class="external-link" target="_blank">Ketrina Thompson</a>. 🎨

///

---

In diesem Szenario der parallelen Hamburger sind Sie ein Computersystem / Programm 🤖 mit zwei Prozessoren (Sie und Ihr Schwarm), die beide warten 🕙 und ihre Aufmerksamkeit darauf verwenden, „lange Zeit vor der Theke zu warten“ 🕙.

Der Fast-Food-Laden verfügt über 8 Prozessoren (Kassierer/Köche). Während der nebenläufige Burger-Laden nur zwei hatte (einen Kassierer und einen Koch).

Dennoch ist das schlussendliche Benutzererlebnis nicht das Beste. 😞

---

Dies wäre die parallele äquivalente Geschichte für Hamburger. 🍔

Für ein „realeres“ Beispiel hierfür, stellen Sie sich eine Bank vor.

Bis vor kurzem hatten die meisten Banken mehrere Kassierer 👨‍💼👨‍💼👨‍💼👨‍💼 und eine große Warteschlange 🕙🕙🕙🕙🕙🕙🕙🕙.

Alle Kassierer erledigen die ganze Arbeit mit einem Kunden nach dem anderen 👨‍💼⏯.

Und man muss lange in der Schlange warten 🕙 sonst kommt man nicht an die Reihe.

Sie würden Ihren Schwarm 😍 wahrscheinlich nicht mitnehmen wollen, um Besorgungen bei der Bank zu erledigen 🏦.

### Hamburger Schlussfolgerung

In diesem Szenario „Fast Food Burger mit Ihrem Schwarm“ ist es viel sinnvoller, ein nebenläufiges System zu haben ⏸🔀⏯, da viel gewartet wird 🕙.

Das ist auch bei den meisten Webanwendungen der Fall.

Viele, viele Benutzer, aber Ihr Server wartet 🕙 darauf, dass deren nicht so gute Internetverbindungen die Requests übermitteln.

Und dann warten 🕙, bis die Responses zurückkommen.

Dieses „Warten“ 🕙 wird in Mikrosekunden gemessen, aber zusammenfassend lässt sich sagen, dass am Ende eine Menge gewartet wird.

Deshalb ist es sehr sinnvoll, asynchronen ⏸🔀⏯ Code für Web-APIs zu verwenden.

Diese Art der Asynchronität hat NodeJS populär gemacht (auch wenn NodeJS nicht parallel ist) und darin liegt die Stärke von Go als Programmiersprache.

Und das ist das gleiche Leistungsniveau, das Sie mit **FastAPI** erhalten.

Und da Sie Parallelität und Asynchronität gleichzeitig haben können, erzielen Sie eine höhere Performanz als die meisten getesteten NodeJS-Frameworks und sind mit Go auf Augenhöhe, einer kompilierten Sprache, die näher an C liegt <a href="https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=query&l=zijmkf-1" class="external-link" target="_blank">(alles dank Starlette)</a>.

### Ist Nebenläufigkeit besser als Parallelität?

Nein! Das ist nicht die Moral der Geschichte.

Nebenläufigkeit unterscheidet sich von Parallelität. Und sie ist besser bei **bestimmten** Szenarien, die viel Warten erfordern. Aus diesem Grund ist sie im Allgemeinen viel besser als Parallelität für die Entwicklung von Webanwendungen. Aber das stimmt nicht für alle Anwendungen.

Um die Dinge auszugleichen, stellen Sie sich die folgende Kurzgeschichte vor:

> Sie müssen ein großes, schmutziges Haus aufräumen.

*Yup, das ist die ganze Geschichte*.

---

Es gibt kein Warten 🕙, nur viel Arbeit an mehreren Stellen im Haus.

Sie könnten wie im Hamburger-Beispiel hin- und herspringen, zuerst das Wohnzimmer, dann die Küche, aber da Sie auf nichts warten 🕙, sondern nur putzen und putzen, hätte das Hin- und Herspringen keine Auswirkungen.

Es würde mit oder ohne Hin- und Herspringen (Nebenläufigkeit) die gleiche Zeit in Anspruch nehmen, um fertig zu werden, und Sie hätten die gleiche Menge an Arbeit erledigt.

Aber wenn Sie in diesem Fall die acht Ex-Kassierer/Köche/jetzt Reinigungskräfte mitbringen würden und jeder von ihnen (plus Sie) würde einen Bereich des Hauses reinigen, könnten Sie die ganze Arbeit **parallel** erledigen, und würden mit dieser zusätzlichen Hilfe viel schneller fertig werden.

In diesem Szenario wäre jede einzelne Reinigungskraft (einschließlich Ihnen) ein Prozessor, der seinen Teil der Arbeit erledigt.

Und da die meiste Ausführungszeit durch tatsächliche Arbeit (anstatt durch Warten) in Anspruch genommen wird und die Arbeit in einem Computer von einer <abbr title="Central Processing Unit – Zentrale Recheneinheit">CPU</abbr> erledigt wird, werden diese Probleme als „CPU-lastig“ („CPU bound“) bezeichnet.

---

Typische Beispiele für CPU-lastige Vorgänge sind Dinge, die komplexe mathematische Berechnungen erfordern.

Zum Beispiel:

* **Audio-** oder **Bildbearbeitung**.
* **Computer Vision**: Ein Bild besteht aus Millionen von Pixeln, jedes Pixel hat 3 Werte / Farben, die Verarbeitung erfordert normalerweise, Berechnungen mit diesen Pixeln durchzuführen, alles zur gleichen Zeit.
* **Maschinelles Lernen**: Normalerweise sind viele „Matrix“- und „Vektor“-Multiplikationen erforderlich. Stellen Sie sich eine riesige Tabelle mit Zahlen vor, in der Sie alle Zahlen gleichzeitig multiplizieren.
* **Deep Learning**: Dies ist ein Teilgebiet des maschinellen Lernens, daher gilt das Gleiche. Es ist nur so, dass es nicht eine einzige Tabelle mit Zahlen zum Multiplizieren gibt, sondern eine riesige Menge davon, und in vielen Fällen verwendet man einen speziellen Prozessor, um diese Modelle zu erstellen und / oder zu verwenden.

### Nebenläufigkeit + Parallelität: Web + maschinelles Lernen

Mit **FastAPI** können Sie die Vorteile der Nebenläufigkeit nutzen, die in der Webentwicklung weit verbreitet ist (derselbe Hauptvorteil von NodeJS).

Sie können aber auch die Vorteile von Parallelität und Multiprocessing (Mehrere Prozesse werden parallel ausgeführt) für **CPU-lastige** Workloads wie in Systemen für maschinelles Lernen nutzen.

Dies und die einfache Tatsache, dass Python die Hauptsprache für **Data Science**, maschinelles Lernen und insbesondere Deep Learning ist, machen FastAPI zu einem sehr passenden Werkzeug für Web-APIs und Anwendungen für Data Science / maschinelles Lernen (neben vielen anderen).

Wie Sie diese Parallelität in der Produktion erreichen, erfahren Sie im Abschnitt über [Deployment](deployment/index.md){.internal-link target=_blank}.

## `async` und `await`.

Moderne Versionen von Python verfügen über eine sehr intuitive Möglichkeit, asynchronen Code zu schreiben. Dadurch sieht es wie normaler „sequentieller“ Code aus und übernimmt im richtigen Moment das „Warten“ für Sie.

Wenn es einen Vorgang gibt, der erfordert, dass gewartet wird, bevor die Ergebnisse zurückgegeben werden, und der diese neue Python-Funktionalität unterstützt, können Sie ihn wie folgt schreiben:

```Python
burgers = await get_burgers(2)
```

Der Schlüssel hier ist das `await`. Es teilt Python mit, dass es warten ⏸ muss, bis `get_burgers(2)` seine Aufgabe erledigt hat 🕙, bevor die Ergebnisse in `burgers` gespeichert werden. Damit weiß Python, dass es in der Zwischenzeit etwas anderes tun kann 🔀 ⏯ (z. B. einen weiteren Request empfangen).

Damit `await` funktioniert, muss es sich in einer Funktion befinden, die diese Asynchronität unterstützt. Dazu deklarieren Sie sie einfach mit `async def`:

```Python hl_lines="1"
async def get_burgers(number: int):
    # Mach Sie hier etwas Asynchrones, um die Burger zu erstellen
    return burgers
```

... statt mit `def`:

```Python hl_lines="2"
# Die ist nicht asynchron
def get_sequential_burgers(number: int):
    # Mach Sie hier etwas Sequentielles, um die Burger zu erstellen
    return burgers
```

Mit `async def` weiß Python, dass es innerhalb dieser Funktion auf `await`-Ausdrücke achten muss und dass es die Ausführung dieser Funktion „anhalten“ ⏸ und etwas anderes tun kann 🔀, bevor es zurückkommt.

Wenn Sie eine `async def`-Funktion aufrufen möchten, müssen Sie sie „erwarten“ („await“). Das folgende wird also nicht funktionieren:

```Python
# Das funktioniert nicht, weil get_burgers definiert wurde mit: async def
burgers = get_burgers(2)
```

---

Wenn Sie also eine Bibliothek verwenden, die Ihnen sagt, dass Sie sie mit `await` aufrufen können, müssen Sie die *Pfadoperation-Funktionen*, die diese Bibliothek verwenden, mittels `async def` erstellen, wie in:

```Python hl_lines="2-3"
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

### Weitere technische Details

Ihnen ist wahrscheinlich aufgefallen, dass `await` nur innerhalb von Funktionen verwendet werden kann, die mit `async def` definiert sind.

Gleichzeitig müssen aber mit `async def` definierte Funktionen „erwartet“ („awaited“) werden. Daher können Funktionen mit `async def` nur innerhalb von Funktionen aufgerufen werden, die auch mit `async def` definiert sind.

Daraus resultiert das Ei-und-Huhn-Problem: Wie ruft man die erste `async` Funktion auf?

Wenn Sie mit **FastAPI** arbeiten, müssen Sie sich darüber keine Sorgen machen, da diese „erste“ Funktion Ihre *Pfadoperation-Funktion* sein wird und FastAPI weiß, was zu tun ist.

Wenn Sie jedoch `async` / `await` ohne FastAPI verwenden möchten, können Sie dies auch tun.

### Schreiben Sie Ihren eigenen asynchronen Code

Starlette (und **FastAPI**) basiert auf <a href="https://anyio.readthedocs.io/en/stable/" class="external-link" target="_blank">AnyIO</a>, was bedeutet, es ist sowohl kompatibel mit der Python-Standardbibliothek <a href="https://docs.python.org/3/library/asyncio-task.html" class="external-link" target="_blank">asyncio</a>, als auch mit <a href="https://trio.readthedocs.io/en/stable/" class="external-link" target="_blank">Trio</a>.

Insbesondere können Sie <a href="https://anyio.readthedocs.io/en/stable/" class="external-link" target="_blank">AnyIO</a> direkt verwenden für Ihre fortgeschritten nebenläufigen und parallelen Anwendungsfälle, die fortgeschrittenere Muster in Ihrem eigenen Code erfordern.

Und selbst wenn Sie FastAPI nicht verwenden würden, könnten Sie auch Ihre eigenen asynchronen Anwendungen mit <a href="https://anyio.readthedocs.io/en/stable/" class="external-link" target="_blank">AnyIO</a> so schreiben, dass sie hoch kompatibel sind und Sie dessen Vorteile nutzen können (z. B. *strukturierte Nebenläufigkeit*).

### Andere Formen von asynchronem Code

Diese Art der Verwendung von `async` und `await` ist in der Sprache relativ neu.

Aber sie erleichtert die Arbeit mit asynchronem Code erheblich.

Die gleiche Syntax (oder fast identisch) wurde kürzlich auch in moderne Versionen von JavaScript (im Browser und in NodeJS) aufgenommen.

Davor war der Umgang mit asynchronem Code jedoch deutlich komplexer und schwieriger.

In früheren Versionen von Python hätten Sie Threads oder <a href="https://www.gevent.org/" class="external-link" target="_blank">Gevent</a> verwenden können. Der Code ist jedoch viel komplexer zu verstehen, zu debuggen und nachzuvollziehen.

In früheren Versionen von NodeJS / Browser JavaScript hätten Sie „Callbacks“ verwendet. Was zur <a href="http://callbackhell.com/" class="external-link" target="_blank">Callback-Hölle</a> führt.

## Coroutinen

**Coroutine** ist nur ein schicker Begriff für dasjenige, was von einer `async def`-Funktion zurückgegeben wird. Python weiß, dass es so etwas wie eine Funktion ist, die es starten kann und die irgendwann endet, aber auch dass sie pausiert ⏸ werden kann, wann immer darin ein `await` steht.

Aber all diese Funktionalität der Verwendung von asynchronem Code mit `async` und `await` wird oft als Verwendung von „Coroutinen“ zusammengefasst. Es ist vergleichbar mit dem Hauptmerkmal von Go, den „Goroutinen“.

## Fazit

Sehen wir uns den gleichen Satz von oben noch mal an:

> Moderne Versionen von Python unterstützen **„asynchronen Code“** unter Verwendung sogenannter **„Coroutinen“** mithilfe der Syntax **`async`** und **`await`**.

Das sollte jetzt mehr Sinn ergeben. ✨

All das ist es, was FastAPI (via Starlette) befeuert und es eine so beeindruckende Performanz haben lässt.

## Sehr technische Details

/// warning | Achtung

Das folgende können Sie wahrscheinlich überspringen.

Dies sind sehr technische Details darüber, wie **FastAPI** unter der Haube funktioniert.

Wenn Sie über gute technische Kenntnisse verfügen (Coroutinen, Threads, Blocking, usw.) und neugierig sind, wie FastAPI mit `async def`s im Vergleich zu normalen `def`s umgeht, fahren Sie fort.

///

### Pfadoperation-Funktionen

Wenn Sie eine *Pfadoperation-Funktion* mit normalem `def` anstelle von `async def` deklarieren, wird sie in einem externen Threadpool ausgeführt, der dann `await`et wird, anstatt direkt aufgerufen zu werden (da dies den Server blockieren würde).

Wenn Sie von einem anderen asynchronen Framework kommen, das nicht auf die oben beschriebene Weise funktioniert, und Sie es gewohnt sind, triviale, nur-berechnende *Pfadoperation-Funktionen* mit einfachem `def` zu definieren, um einen geringfügigen Geschwindigkeitsgewinn (etwa 100 Nanosekunden) zu erzielen, beachten Sie bitte, dass der Effekt in **FastAPI** genau gegenteilig wäre. In solchen Fällen ist es besser, `async def` zu verwenden, es sei denn, Ihre *Pfadoperation-Funktionen* verwenden Code, der blockierende <abbr title="Input/Output – Eingabe/Ausgabe: Lesen oder Schreiben von/auf Festplatte, Netzwerkkommunikation.">I/O</abbr>-Operationen durchführt.

Dennoch besteht in beiden Fällen eine gute Chance, dass **FastAPI** [immer noch schneller](index.md#performanz){.internal-link target=_blank} als Ihr bisheriges Framework (oder zumindest damit vergleichbar) ist.

### Abhängigkeiten

Das Gleiche gilt für [Abhängigkeiten](tutorial/dependencies/index.md){.internal-link target=_blank}. Wenn eine Abhängigkeit eine normale `def`-Funktion ist, anstelle einer `async def`-Funktion, dann wird sie im externen Threadpool ausgeführt.

### Unterabhängigkeiten

Sie können mehrere Abhängigkeiten und [Unterabhängigkeiten](tutorial/dependencies/sub-dependencies.md){.internal-link target=_blank} haben, die einander bedingen (als Parameter der Funktionsdefinitionen), einige davon könnten erstellt werden mit `async def` und einige mit normalem `def`. Es würde immer noch funktionieren und diejenigen, die mit normalem `def` erstellt wurden, würden in einem externen Thread (vom Threadpool stammend) aufgerufen werden, anstatt `await`et zu werden.

### Andere Hilfsfunktionen

Jede andere Hilfsfunktion, die Sie direkt aufrufen, kann mit normalem `def` oder `async def` erstellt werden, und FastAPI beeinflusst nicht die Art und Weise, wie Sie sie aufrufen.

Dies steht im Gegensatz zu den Funktionen, die FastAPI für Sie aufruft: *Pfadoperation-Funktionen* und Abhängigkeiten.

Wenn Ihre Hilfsfunktion eine normale Funktion mit `def` ist, wird sie direkt aufgerufen (so wie Sie es in Ihrem Code schreiben), nicht in einem Threadpool. Wenn die Funktion mit `async def` erstellt wurde, sollten Sie sie `await`en, wenn Sie sie in Ihrem Code aufrufen.

---

Nochmal, es handelt sich hier um sehr technische Details, die Ihnen helfen, falls Sie danach gesucht haben.

Andernfalls liegen Sie richtig, wenn Sie sich an die Richtlinien aus dem obigen Abschnitt halten: <a href="#in-eile">In Eile?</a>.


================================================
File: /docs/de/docs/benchmarks.md
================================================
# Benchmarks

Unabhängige TechEmpower-Benchmarks zeigen, **FastAPI**-Anwendungen, die unter Uvicorn ausgeführt werden, gehören zu <a href="https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7" class="external-link" target="_blank">den schnellsten existierenden Python-Frameworks</a>, nur Starlette und Uvicorn selbst (intern von FastAPI verwendet) sind schneller.

Beim Ansehen von Benchmarks und Vergleichen sollten Sie jedoch Folgende Punkte beachten.

## Benchmarks und Geschwindigkeit

Wenn Sie sich die Benchmarks ansehen, werden häufig mehrere Tools mit unterschiedlichen Eigenschaften als gleichwertig verglichen.

Konkret geht es darum, Uvicorn, Starlette und FastAPI miteinander zu vergleichen (neben vielen anderen Tools).

Je einfacher das Problem, welches durch das Tool gelöst wird, desto besser ist die Performanz. Und die meisten Benchmarks testen nicht die zusätzlichen Funktionen, welche das Tool bietet.

Die Hierarchie ist wie folgt:

* **Uvicorn**: ein ASGI-Server
    * **Starlette**: (verwendet Uvicorn) ein Web-Mikroframework
        * **FastAPI**: (verwendet Starlette) ein API-Mikroframework mit mehreren zusätzlichen Funktionen zum Erstellen von APIs, mit Datenvalidierung, usw.

* **Uvicorn**:
    * Bietet die beste Leistung, da außer dem Server selbst nicht viel zusätzlicher Code vorhanden ist.
    * Sie würden eine Anwendung nicht direkt in Uvicorn schreiben. Das würde bedeuten, dass Ihr Code zumindest mehr oder weniger den gesamten von Starlette (oder **FastAPI**) bereitgestellten Code enthalten müsste. Und wenn Sie das täten, hätte Ihre endgültige Anwendung den gleichen Overhead wie die Verwendung eines Frameworks nebst Minimierung Ihres Anwendungscodes und der Fehler.
    * Wenn Sie Uvicorn vergleichen, vergleichen Sie es mit Anwendungsservern wie Daphne, Hypercorn, uWSGI, usw.
* **Starlette**:
    * Wird nach Uvicorn die nächstbeste Performanz erbringen. Tatsächlich nutzt Starlette intern Uvicorn. Daher kann es wahrscheinlich nur „langsamer“ als Uvicorn sein, weil mehr Code ausgeführt wird.
    * Aber es bietet Ihnen die Tools zum Erstellen einfacher Webanwendungen, mit Routing basierend auf Pfaden, usw.
    * Wenn Sie Starlette vergleichen, vergleichen Sie es mit Webframeworks (oder Mikroframeworks) wie Sanic, Flask, Django, usw.
* **FastAPI**:
    * So wie Starlette Uvicorn verwendet und nicht schneller als dieses sein kann, verwendet **FastAPI** Starlette, sodass es nicht schneller als dieses sein kann.
    * FastAPI bietet zusätzlich zu Starlette weitere Funktionen. Funktionen, die Sie beim Erstellen von APIs fast immer benötigen, wie Datenvalidierung und Serialisierung. Und wenn Sie es verwenden, erhalten Sie kostenlos automatische Dokumentation (die automatische Dokumentation verursacht nicht einmal zusätzlichen Aufwand für laufende Anwendungen, sie wird beim Start generiert).
    * Wenn Sie FastAPI nicht, und direkt Starlette (oder ein anderes Tool wie Sanic, Flask, Responder, usw.) verwenden würden, müssten Sie die gesamte Datenvalidierung und Serialisierung selbst implementieren. Ihre finale Anwendung hätte also immer noch den gleichen Overhead, als ob sie mit FastAPI erstellt worden wäre. Und in vielen Fällen ist diese Datenvalidierung und Serialisierung der größte Teil des in Anwendungen geschriebenen Codes.
    * Durch die Verwendung von FastAPI sparen Sie also Entwicklungszeit, Fehler und Codezeilen und würden wahrscheinlich die gleiche Leistung (oder eine bessere) erzielen, die Sie hätten, wenn Sie es nicht verwenden würden (da Sie alles in Ihrem Code implementieren müssten).
    * Wenn Sie FastAPI vergleichen, vergleichen Sie es mit einem Webanwendung-Framework (oder einer Reihe von Tools), welche Datenvalidierung, Serialisierung und Dokumentation bereitstellen, wie Flask-apispec, NestJS, Molten, usw. – Frameworks mit integrierter automatischer Datenvalidierung, Serialisierung und Dokumentation.


================================================
File: /docs/de/docs/features.md
================================================
# Merkmale

## FastAPI Merkmale

**FastAPI** ermöglicht Ihnen Folgendes:

### Basiert auf offenen Standards

* <a href="https://github.com/OAI/OpenAPI-Specification" class="external-link" target="_blank"><strong>OpenAPI</strong></a> für die Erstellung von APIs, inklusive Deklarationen von <abbr title="auch genannt Endpunkte, Routen">Pfad</abbr>-<abbr title="gemeint sind HTTP-Methoden wie POST, GET, PUT, DELETE">Operationen</abbr>, Parametern, Requestbodys, Sicherheit, usw.
* Automatische Dokumentation der Datenmodelle mit <a href="https://json-schema.org/" class="external-link" target="_blank"><strong>JSON Schema</strong></a> (da OpenAPI selbst auf JSON Schema basiert).
* Um diese Standards herum entworfen, nach sorgfältigem Studium. Statt einer nachträglichen Schicht darüber.
* Dies ermöglicht auch automatische **Client-Code-Generierung** in vielen Sprachen.

### Automatische Dokumentation

Interaktive API-Dokumentation und erkundbare Web-Benutzeroberflächen. Da das Framework auf OpenAPI basiert, gibt es mehrere Optionen, zwei sind standardmäßig vorhanden.

* <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank"><strong>Swagger UI</strong></a>, bietet interaktive Erkundung, testen und rufen Sie ihre API direkt im Webbrowser auf.

![Swagger UI Interaktion](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)

* Alternative API-Dokumentation mit <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank"><strong>ReDoc</strong></a>.

![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)

### Nur modernes Python

Alles basiert auf **Python 3.8 Typ**-Deklarationen (dank Pydantic). Es muss keine neue Syntax gelernt werden, nur standardisiertes modernes Python.

Wenn Sie eine zweiminütige Auffrischung benötigen, wie man Python-Typen verwendet (auch wenn Sie FastAPI nicht benutzen), schauen Sie sich das kurze Tutorial an: [Einführung in Python-Typen](python-types.md){.internal-link target=_blank}.

Sie schreiben Standard-Python mit Typen:

```Python
from typing import List, Dict
from datetime import date

from pydantic import BaseModel

# Deklarieren Sie eine Variable als ein `str`
# und bekommen Sie Editor-Unterstütung innerhalb der Funktion
def main(user_id: str):
    return user_id


# Ein Pydantic-Modell
class User(BaseModel):
    id: int
    name: str
    joined: date
```

Das kann nun wie folgt verwendet werden:

```Python
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

/// info

`**second_user_data` bedeutet:

Nimm die Schlüssel-Wert-Paare des `second_user_data` <abbr title="Dictionary – Wörterbuch: In anderen Programmiersprachen auch Hash, Map, Objekt, Assoziatives Array genannt">Dicts</abbr> und übergib sie direkt als Schlüsselwort-Argumente. Äquivalent zu: `User(id=4, name="Mary", joined="2018-11-30")`.

///

### Editor Unterstützung

Das ganze Framework wurde so entworfen, dass es einfach und intuitiv zu benutzen ist; alle Entscheidungen wurden auf mehreren Editoren getestet, sogar vor der Implementierung, um die bestmögliche Entwicklererfahrung zu gewährleisten.

In der letzten Python-Entwickler-Umfrage wurde klar, <a href="https://www.jetbrains.com/research/python-developers-survey-2017/#tools-and-features" class="external-link" target="_blank">dass die meist genutzte Funktion die „Autovervollständigung“ ist</a>.

Das gesamte **FastAPI**-Framework ist darauf ausgelegt, das zu erfüllen. Autovervollständigung funktioniert überall.

Sie werden selten noch mal in der Dokumentation nachschauen müssen.

So kann ihr Editor Sie unterstützen:

* in <a href="https://code.visualstudio.com/" class="external-link" target="_blank">Visual Studio Code</a>:

![Editor Unterstützung](https://fastapi.tiangolo.com/img/vscode-completion.png)

* in <a href="https://www.jetbrains.com/pycharm/" class="external-link" target="_blank">PyCharm</a>:

![Editor Unterstützung](https://fastapi.tiangolo.com/img/pycharm-completion.png)

Sie bekommen sogar Autovervollständigung an Stellen, an denen Sie dies vorher nicht für möglich gehalten hätten. Zum Beispiel der `price` Schlüssel in einem JSON Datensatz (dieser könnte auch verschachtelt sein), der aus einer Anfrage kommt.

Nie wieder falsche Schlüsselnamen tippen, Hin und Herhüpfen zwischen der Dokumentation, Hoch- und Runterscrollen, um herauszufinden, ob es `username` oder `user_name` war.

### Kompakt

Es gibt für alles sensible **Defaultwerte**, mit optionaler Konfiguration überall. Alle Parameter können feinjustiert werden, damit sie tun, was Sie benötigen, und die API definieren, die Sie brauchen.

Aber standardmäßig **„funktioniert einfach alles“**.

### Validierung

* Validierung für die meisten (oder alle?) Python-**Datentypen**, hierzu gehören:
    * JSON Objekte (`dict`).
    * JSON Listen (`list`), die den Typ ihrer Elemente definieren.
    * Strings (`str`) mit definierter minimaler und maximaler Länge.
    * Zahlen (`int`, `float`) mit Mindest- und Maximal-Werten, usw.

* Validierung für mehr exotische Typen, wie:
    * URL.
    * E-Mail.
    * UUID.
    * ... und andere.

Die gesamte Validierung übernimmt das gut etablierte und robuste **Pydantic**.

### Sicherheit und Authentifizierung

Sicherheit und Authentifizierung ist integriert. Ohne Kompromisse bei Datenbanken oder Datenmodellen.

Alle in OpenAPI definierten Sicherheitsschemas, inklusive:

* HTTP Basic Authentifizierung.
* **OAuth2** (auch mit **JWT Tokens**). Siehe dazu das Tutorial zu [OAuth2 mit JWT](tutorial/security/oauth2-jwt.md){.internal-link target=_blank}.
* API Schlüssel in:
    * Header-Feldern.
    * Anfrageparametern.
    * Cookies, usw.

Zusätzlich alle Sicherheitsfunktionen von Starlette (inklusive **Session Cookies**).

Alles als wiederverwendbare Tools und Komponenten gebaut, die einfach in ihre Systeme, Datenspeicher, relationalen und nicht-relationalen Datenbanken, usw., integriert werden können.

### Einbringen von Abhängigkeiten (Dependency Injection)

FastAPI enthält ein extrem einfach zu verwendendes, aber extrem mächtiges <abbr title='Dependency Injection – Einbringen von Abhängigkeiten: Auch bekannt als Komponenten, Resourcen, Dienste, Dienstanbieter'><strong>Dependency Injection</strong></abbr> System.

* Selbst Abhängigkeiten können Abhängigkeiten haben, woraus eine Hierarchie oder ein **„Graph“ von Abhängigkeiten** entsteht.
* Alles **automatisch gehandhabt** durch das Framework.
* Alle Abhängigkeiten können Daten von Anfragen anfordern und das Verhalten von **Pfadoperationen** und der automatisierten Dokumentation **modifizieren**.
* **Automatische Validierung** selbst für solche Parameter von *Pfadoperationen*, welche in Abhängigkeiten definiert sind.
* Unterstützung für komplexe Authentifizierungssysteme, **Datenbankverbindungen**, usw.
* **Keine Kompromisse** bei Datenbanken, Frontends, usw., sondern einfache Integration mit allen.

### Unbegrenzte Erweiterungen

Oder mit anderen Worten, sie werden nicht benötigt. Importieren und nutzen Sie den Code, den Sie brauchen.

Jede Integration wurde so entworfen, dass sie so einfach zu nutzen ist (mit Abhängigkeiten), dass Sie eine Erweiterung für Ihre Anwendung mit nur zwei Zeilen Code erstellen können. Hierbei nutzen Sie die gleiche Struktur und Syntax, wie bei *Pfadoperationen*.

### Getestet

* 100 % <abbr title="Der Prozentsatz an Code, der automatisch getestet wird">Testabdeckung</abbr>.
* 100 % <abbr title="Python-Typannotationen, mit denen Ihr Editor und andere exteren Werkezuge Sie besser unterstützen können">Typen annotiert</abbr>.
* Verwendet in Produktionsanwendungen.

## Starlette's Merkmale

**FastAPI** ist vollkommen kompatibel (und basiert auf) <a href="https://www.starlette.io/" class="external-link" target="_blank"><strong>Starlette</strong></a>. Das bedeutet, wenn Sie eigenen Starlette Quellcode haben, funktioniert der.

`FastAPI` ist tatsächlich eine Unterklasse von `Starlette`. Wenn Sie also bereits Starlette kennen oder benutzen, das meiste funktioniert genau so.

Mit **FastAPI** bekommen Sie alles von **Starlette** (da FastAPI nur Starlette auf Steroiden ist):

* Schwer beeindruckende Performanz. Es ist <a href="https://github.com/encode/starlette#performance" class="external-link" target="_blank">eines der schnellsten Python-Frameworks, auf Augenhöhe mit **NodeJS** und **Go**</a>.
* **WebSocket**-Unterstützung.
* Hintergrundaufgaben im selben Prozess.
* Ereignisse beim Starten und Herunterfahren.
* Testclient baut auf HTTPX auf.
* **CORS**, GZip, statische Dateien, Responses streamen.
* **Sitzungs- und Cookie**-Unterstützung.
* 100 % Testabdeckung.
* 100 % Typen annotierte Codebasis.

## Pydantic's Merkmale

**FastAPI** ist vollkommen kompatibel (und basiert auf) <a href="https://docs.pydantic.dev/" class="external-link" target="_blank"><strong>Pydantic</strong></a>. Das bedeutet, wenn Sie eigenen Pydantic Quellcode haben, funktioniert der.

Inklusive externer Bibliotheken, die auf Pydantic basieren, wie <abbr title="Object-Relational Mapper (Abbildung von Objekten auf relationale Strukturen)">ORM</abbr>s, <abbr title="Object-Document Mapper (Abbildung von Objekten auf nicht-relationale Strukturen)">ODM</abbr>s für Datenbanken.

Daher können Sie in vielen Fällen das Objekt einer Anfrage **direkt zur Datenbank** schicken, weil alles automatisch validiert wird.

Das gleiche gilt auch für die andere Richtung: Sie können in vielen Fällen das Objekt aus der Datenbank **direkt zum Client** schicken.

Mit **FastAPI** bekommen Sie alle Funktionen von **Pydantic** (da FastAPI für die gesamte Datenverarbeitung Pydantic nutzt):

* **Kein Kopfzerbrechen**:
    * Keine neue Schemadefinition-Mikrosprache zu lernen.
    * Wenn Sie Pythons Typen kennen, wissen Sie, wie man Pydantic verwendet.
* Gutes Zusammenspiel mit Ihrer/Ihrem **<abbr title="Integrierten Entwicklungsumgebung, ähnlich zu (Quellcode-)Editor">IDE</abbr>/<abbr title="Ein Programm, was Fehler im Quellcode sucht">Linter</abbr>/Gehirn**:
    * Weil Pydantics Datenstrukturen einfach nur Instanzen ihrer definierten Klassen sind; Autovervollständigung, Linting, mypy und ihre Intuition sollten alle einwandfrei mit ihren validierten Daten funktionieren.
* Validierung von **komplexen Strukturen**:
    * Benutzung von hierarchischen Pydantic-Modellen, Python-`typing`s `List` und `Dict`, etc.
    * Die Validierer erlauben es, komplexe Datenschemen klar und einfach zu definieren, überprüft und dokumentiert als JSON Schema.
    * Sie können tief **verschachtelte JSON** Objekte haben, die alle validiert und annotiert sind.
* **Erweiterbar**:
    * Pydantic erlaubt die Definition von eigenen Datentypen oder sie können die Validierung mit einer `validator`-dekorierten Methode im Modell erweitern.
* 100 % Testabdeckung.


================================================
File: /docs/de/docs/help-fastapi.md
================================================
# FastAPI helfen – Hilfe erhalten

Gefällt Ihnen **FastAPI**?

Möchten Sie FastAPI, anderen Benutzern und dem Autor helfen?

Oder möchten Sie Hilfe zu **FastAPI** erhalten?

Es gibt sehr einfache Möglichkeiten zu helfen (manche erfordern nur ein oder zwei Klicks).

Und es gibt auch viele Möglichkeiten, Hilfe zu bekommen.

## Newsletter abonnieren

Sie können den (unregelmäßig erscheinenden) [**FastAPI and Friends**-Newsletter](newsletter.md){.internal-link target=_blank} abonnieren, um auf dem Laufenden zu bleiben:

* Neuigkeiten über FastAPI and Friends 🚀
* Anleitungen 📝
* Funktionen ✨
* Breaking Changes 🚨
* Tipps und Tricks ✅
## FastAPI auf Twitter folgen

<a href="https://twitter.com/fastapi" class="external-link" target="_blank">Folgen Sie @fastapi auf **Twitter**</a>, um die neuesten Nachrichten über **FastAPI** zu erhalten. 🐦

## **FastAPI** auf GitHub einen Stern geben

Sie können FastAPI auf GitHub „starren“ (durch Klicken auf den Stern-Button oben rechts): <a href="https://github.com/fastapi/fastapi" class="external-link" target="_blank">https://github.com/fastapi/fastapi</a>. ⭐️

Durch das Hinzufügen eines Sterns können andere Benutzer es leichter finden und sehen, dass es für andere bereits nützlich war.

## Das GitHub-Repository auf Releases beobachten

Sie können FastAPI in GitHub beobachten (Klicken Sie oben rechts auf den Button „watch“): <a href="https://github.com/fastapi/fastapi" class="external-link" target="_blank">https://github.com/fastapi/fastapi</a>. 👀

Dort können Sie „Releases only“ auswählen.

Auf diese Weise erhalten Sie Benachrichtigungen (per E-Mail), wenn es einen neuen Release (eine neue Version) von **FastAPI** mit Fehlerbehebungen und neuen Funktionen gibt.

## Mit dem Autor vernetzen

Sie können sich mit <a href="https://tiangolo.com" class="external-link" target="_blank">mir (Sebastián Ramírez / `tiangolo`)</a>, dem Autor, verbinden.

Insbesondere:

* <a href="https://github.com/tiangolo" class="external-link" target="_blank"> Folgen Sie mir auf **GitHub**</a>.
    * Finden Sie andere Open-Source-Projekte, die ich erstellt habe und die Ihnen helfen könnten.
    * Folgen Sie mir, um mitzubekommen, wenn ich ein neues Open-Source-Projekt erstelle.
* <a href="https://twitter.com/tiangolo" class="external-link" target="_blank">Folgen Sie mir auf **Twitter**</a> oder <a href="https://fosstodon.org/@tiangolo" class="external-link" target="_blank">Mastodon</a>.
    * Berichten Sie mir, wie Sie FastAPI verwenden (das höre ich gerne).
    * Bekommen Sie mit, wenn ich Ankündigungen mache oder neue Tools veröffentliche.
    * Sie können auch <a href="https://twitter.com/fastapi" class="external-link" target="_blank">@fastapi auf Twitter folgen</a> (ein separates Konto).
* <a href="https://www.linkedin.com/in/tiangolo/" class="external-link" target="_blank">Folgen Sie mir auf **LinkedIn**</a>.
    * Bekommen Sie mit, wenn ich Ankündigungen mache oder neue Tools veröffentliche (obwohl ich Twitter häufiger verwende 🤷‍♂).
* Lesen Sie, was ich schreibe (oder folgen Sie mir) auf <a href="https://dev.to/tiangolo" class="external-link" target="_blank">**Dev.to**</a> oder <a href="https://medium.com/@tiangolo" class="external-link" target="_blank">**Medium**</a>.
    * Lesen Sie andere Ideen, Artikel, und erfahren Sie mehr über die von mir erstellten Tools.
    * Folgen Sie mir, um zu lesen, wenn ich etwas Neues veröffentliche.

## Über **FastAPI** tweeten

<a href="https://twitter.com/compose/tweet?text=Ich liebe @fastapi, weil ... https://github.com/fastapi/fastapi" class="external-link" target= "_blank">Tweeten Sie über **FastAPI**</a> und teilen Sie mir und anderen mit, warum es Ihnen gefällt. 🎉

Ich höre gerne, wie **FastAPI** verwendet wird, was Ihnen daran gefallen hat, in welchem Projekt/Unternehmen Sie es verwenden, usw.

## Für FastAPI abstimmen

* <a href="https://www.slant.co/options/34241/~fastapi-review" class="external-link" target="_blank">Stimmen Sie für **FastAPI** auf Slant</a >.
* <a href="https://alternativeto.net/software/fastapi/about/" class="external-link" target="_blank">Stimmen Sie für **FastAPI** auf AlternativeTo</a>.
* <a href="https://stackshare.io/pypi-fastapi" class="external-link" target="_blank">Berichten Sie auf StackShare, dass Sie **FastAPI** verwenden</a>.

## Anderen bei Fragen auf GitHub helfen

Sie können versuchen, anderen bei ihren Fragen zu helfen:

* <a href="https://github.com/fastapi/fastapi/discussions/categories/questions?discussions_q=category%3AQuestions+is%3Aunanswered" class="external-link" target="_blank">GitHub-Diskussionen</a>
* <a href="https://github.com/fastapi/fastapi/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aquestion+-label%3Aanswered+" class="external-link" target="_blank">GitHub-Issues</a>

In vielen Fällen kennen Sie möglicherweise bereits die Antwort auf diese Fragen. 🤓

Wenn Sie vielen Menschen bei ihren Fragen helfen, werden Sie offizieller [FastAPI-Experte](fastapi-people.md#experten){.internal-link target=_blank}. 🎉

Denken Sie aber daran, der wichtigste Punkt ist: Versuchen Sie, freundlich zu sein. Die Leute bringen ihre Frustrationen mit und fragen in vielen Fällen nicht auf die beste Art und Weise, aber versuchen Sie dennoch so gut wie möglich, freundlich zu sein. 🤗

Die **FastAPI**-Community soll freundlich und einladend sein. Und auch kein Mobbing oder respektloses Verhalten gegenüber anderen akzeptieren. Wir müssen uns umeinander kümmern.

---

So helfen Sie anderen bei Fragen (in Diskussionen oder Problemen):

### Die Frage verstehen

* Fragen Sie sich, ob Sie verstehen, was das **Ziel** und der Anwendungsfall der fragenden Person ist.

* Überprüfen Sie dann, ob die Frage (die überwiegende Mehrheit sind Fragen) **klar** ist.

* In vielen Fällen handelt es sich bei der gestellten Frage um eine Lösung, die der Benutzer sich vorstellt, aber es könnte eine **bessere** Lösung geben. Wenn Sie das Problem und den Anwendungsfall besser verstehen, können Sie eine bessere **Alternativlösung** vorschlagen.

* Wenn Sie die Frage nicht verstehen können, fragen Sie nach weiteren **Details**.

### Das Problem reproduzieren

In den meisten Fällen und bei den meisten Fragen ist etwas mit dem von der Person erstellten **eigenen Quellcode** los.

In vielen Fällen wird nur ein Fragment des Codes gepostet, aber das reicht nicht aus, um **das Problem zu reproduzieren**.

* Sie können die Person darum bitten, ein <a href="https://stackoverflow.com/help/minimal-reproducible-example" class="external-link" target="_blank">minimales, reproduzierbares Beispiel</a> bereitzustellen, welches Sie **kopieren, einfügen** und lokal ausführen können, um den gleichen Fehler oder das gleiche Verhalten zu sehen, das die Person sieht, oder um ihren Anwendungsfall besser zu verstehen.

* Wenn Sie in Geberlaune sind, können Sie versuchen, selbst ein solches Beispiel zu erstellen, nur basierend auf der Beschreibung des Problems. Denken Sie jedoch daran, dass dies viel Zeit in Anspruch nehmen kann und dass es besser sein kann, zunächst um eine Klärung des Problems zu bitten.

### Lösungen vorschlagen

* Nachdem Sie die Frage verstanden haben, können Sie eine mögliche **Antwort** geben.

* In vielen Fällen ist es besser, das **zugrunde liegende Problem oder den Anwendungsfall** zu verstehen, da es möglicherweise einen besseren Weg zur Lösung gibt als das, was die Person versucht.

### Um Schließung bitten

Wenn die Person antwortet, besteht eine hohe Chance, dass Sie ihr Problem gelöst haben. Herzlichen Glückwunsch, **Sie sind ein Held**! 🦸

* Wenn es tatsächlich das Problem gelöst hat, können Sie sie darum bitten:

    * In GitHub-Diskussionen: den Kommentar als **Antwort** zu markieren.
    * In GitHub-Issues: Das Issue zu **schließen**.

## Das GitHub-Repository beobachten

Sie können FastAPI auf GitHub „beobachten“ (Klicken Sie oben rechts auf die Schaltfläche „watch“): <a href="https://github.com/fastapi/fastapi" class="external-link" target="_blank" >https://github.com/fastapi/fastapi</a>. 👀

Wenn Sie dann „Watching“ statt „Releases only“ auswählen, erhalten Sie Benachrichtigungen, wenn jemand ein neues Issue eröffnet oder eine neue Frage stellt. Sie können auch spezifizieren, dass Sie nur über neue Issues, Diskussionen, PRs, usw. benachrichtigt werden möchten.

Dann können Sie versuchen, bei der Lösung solcher Fragen zu helfen.

## Fragen stellen

Sie können im GitHub-Repository <a href="https://github.com/fastapi/fastapi/discussions/new?category=questions" class="external-link" target="_blank">eine neue Frage erstellen</a>, zum Beispiel:

* Stellen Sie eine **Frage** oder bitten Sie um Hilfe mit einem **Problem**.
* Schlagen Sie eine neue **Funktionalität** vor.

**Hinweis**: Wenn Sie das tun, bitte ich Sie, auch anderen zu helfen. 😉

## Pull Requests prüfen

Sie können mir helfen, Pull Requests von anderen zu überprüfen (Review).

Noch einmal, bitte versuchen Sie Ihr Bestes, freundlich zu sein. 🤗

---

Hier ist, was Sie beachten sollten und wie Sie einen Pull Request überprüfen:

### Das Problem verstehen

* Stellen Sie zunächst sicher, dass Sie **das Problem verstehen**, welches der Pull Request zu lösen versucht. Möglicherweise gibt es eine längere Diskussion dazu in einer GitHub-Diskussion oder einem GitHub-Issue.

* Es besteht auch eine gute Chance, dass der Pull Request nicht wirklich benötigt wird, da das Problem auf **andere Weise** gelöst werden kann. Dann können Sie das vorschlagen oder danach fragen.

### Der Stil ist nicht so wichtig

* Machen Sie sich nicht zu viele Gedanken über Dinge wie den Stil von Commit-Nachrichten, ich werde den Commit manuell zusammenführen und anpassen.

* Machen Sie sich auch keine Sorgen über Stilregeln, es gibt bereits automatisierte Tools, die das überprüfen.

Und wenn es irgendeinen anderen Stil- oder Konsistenz-Bedarf gibt, bitte ich direkt darum oder füge zusätzliche Commits mit den erforderlichen Änderungen hinzu.

### Den Code überprüfen

* Prüfen und lesen Sie den Code, fragen Sie sich, ob er Sinn macht, **führen Sie ihn lokal aus** und testen Sie, ob er das Problem tatsächlich löst.

* Schreiben Sie dann einen **Kommentar** und berichten, dass Sie das getan haben. So weiß ich, dass Sie ihn wirklich überprüft haben.

/// info

Leider kann ich PRs, nur weil sie von Mehreren gutgeheißen wurden, nicht einfach vertrauen.

Es ist mehrmals passiert, dass es PRs mit drei, fünf oder mehr Zustimmungen gibt, wahrscheinlich weil die Beschreibung ansprechend ist, aber wenn ich die PRs überprüfe, sind sie tatsächlich fehlerhaft, haben einen Bug, oder lösen das Problem nicht, welches sie behaupten, zu lösen. 😅

Daher ist es wirklich wichtig, dass Sie den Code tatsächlich lesen und ausführen und mir in den Kommentaren mitteilen, dass Sie dies getan haben. 🤓

///

* Wenn der PR irgendwie vereinfacht werden kann, fragen Sie ruhig danach, aber seien Sie nicht zu wählerisch, es gibt viele subjektive Standpunkte (und ich habe auch meinen eigenen 🙈), also ist es besser, wenn man sich auf die wesentlichen Dinge konzentriert.

### Tests

* Helfen Sie mir zu überprüfen, dass der PR **Tests** hat.

* Überprüfen Sie, dass diese Tests vor dem PR **fehlschlagen**. 🚨

* Überprüfen Sie, dass diese Tests nach dem PR **bestanden** werden. ✅

* Viele PRs haben keine Tests. Sie können den Autor daran **erinnern**, Tests hinzuzufügen, oder Sie können sogar selbst einige Tests **vorschlagen**. Das ist eines der Dinge, die die meiste Zeit in Anspruch nehmen, und dabei können Sie viel helfen.

* Kommentieren Sie auch hier anschließend, was Sie versucht haben, sodass ich weiß, dass Sie es überprüft haben. 🤓

## Einen Pull Request erstellen

Sie können zum Quellcode mit Pull Requests [beitragen](contributing.md){.internal-link target=_blank}, zum Beispiel:

* Um einen Tippfehler zu beheben, den Sie in der Dokumentation gefunden haben.
* Um einen Artikel, ein Video oder einen Podcast über FastAPI zu teilen, den Sie erstellt oder gefunden haben, indem Sie <a href="https://github.com/fastapi/fastapi/edit/master/docs/en/data/external_links.yml" class="external-link" target="_blank">diese Datei bearbeiten</a>.
    * Stellen Sie sicher, dass Sie Ihren Link am Anfang des entsprechenden Abschnitts einfügen.
* Um zu helfen, [die Dokumentation in Ihre Sprache zu übersetzen](contributing.md#ubersetzungen){.internal-link target=_blank}.
    * Sie können auch dabei helfen, die von anderen erstellten Übersetzungen zu überprüfen (Review).
* Um neue Dokumentationsabschnitte vorzuschlagen.
* Um ein bestehendes Problem / einen bestehenden Bug zu beheben.
    * Stellen Sie sicher, dass Sie Tests hinzufügen.
* Um eine neue Funktionalität hinzuzufügen.
    * Stellen Sie sicher, dass Sie Tests hinzufügen.
    * Stellen Sie sicher, dass Sie Dokumentation hinzufügen, falls das notwendig ist.

## FastAPI pflegen

Helfen Sie mir, **FastAPI** instand zu halten! 🤓

Es gibt viel zu tun, und das meiste davon können **SIE** tun.

Die Hauptaufgaben, die Sie jetzt erledigen können, sind:

* [Helfen Sie anderen bei Fragen auf GitHub](#anderen-bei-fragen-auf-github-helfen){.internal-link target=_blank} (siehe Abschnitt oben).
* [Prüfen Sie Pull Requests](#pull-requests-prufen){.internal-link target=_blank} (siehe Abschnitt oben).

Diese beiden Dinge sind es, die **die meiste Zeit in Anspruch nehmen**. Das ist die Hauptarbeit bei der Wartung von FastAPI.

Wenn Sie mir dabei helfen können, **helfen Sie mir, FastAPI am Laufen zu erhalten** und sorgen dafür, dass es weiterhin **schneller und besser voranschreitet**. 🚀

## Beim Chat mitmachen

Treten Sie dem 👥 <a href="https://discord.gg/VQjSZaeJmf" class="external-link" target="_blank">Discord-Chatserver</a> 👥 bei und treffen Sie sich mit anderen Mitgliedern der FastAPI-Community.

/// tip | Tipp

Wenn Sie Fragen haben, stellen Sie sie bei <a href="https://github.com/fastapi/fastapi/discussions/new?category=questions" class="external-link" target="_blank">GitHub Diskussionen</a>, es besteht eine viel bessere Chance, dass Sie hier Hilfe von den [FastAPI-Experten](fastapi-people.md#experten){.internal-link target=_blank} erhalten.

Nutzen Sie den Chat nur für andere allgemeine Gespräche.

///

### Den Chat nicht für Fragen verwenden

Bedenken Sie, da Chats mehr „freie Konversation“ ermöglichen, dass es verlockend ist, Fragen zu stellen, die zu allgemein und schwierig zu beantworten sind, sodass Sie möglicherweise keine Antworten erhalten.

Auf GitHub hilft Ihnen die Vorlage dabei, die richtige Frage zu schreiben, sodass Sie leichter eine gute Antwort erhalten oder das Problem sogar selbst lösen können, noch bevor Sie fragen. Und auf GitHub kann ich sicherstellen, dass ich immer alles beantworte, auch wenn es einige Zeit dauert. Ich persönlich kann das mit den Chat-Systemen nicht machen. 😅

Unterhaltungen in den Chat-Systemen sind außerdem nicht so leicht durchsuchbar wie auf GitHub, sodass Fragen und Antworten möglicherweise im Gespräch verloren gehen. Und nur die auf GitHub machen einen [FastAPI-Experten](fastapi-people.md#experten){.internal-link target=_blank}, Sie werden also höchstwahrscheinlich mehr Aufmerksamkeit auf GitHub erhalten.

Auf der anderen Seite gibt es Tausende von Benutzern in den Chat-Systemen, sodass die Wahrscheinlichkeit hoch ist, dass Sie dort fast immer jemanden zum Reden finden. 😄

## Den Autor sponsern

Sie können den Autor (mich) auch über <a href="https://github.com/sponsors/tiangolo" class="external-link" target="_blank">GitHub-Sponsoren</a> finanziell unterstützen.

Dort könnten Sie mir als Dankeschön einen Kaffee spendieren ☕️. 😄

Und Sie können auch Silber- oder Gold-Sponsor für FastAPI werden. 🏅🎉

## Die Tools sponsern, die FastAPI unterstützen

Wie Sie in der Dokumentation gesehen haben, steht FastAPI auf den Schultern von Giganten, Starlette und Pydantic.

Sie können auch sponsern:

* <a href="https://github.com/sponsors/samuelcolvin" class="external-link" target="_blank">Samuel Colvin (Pydantic)</a>
* <a href="https://github.com/sponsors/encode" class="external-link" target="_blank">Encode (Starlette, Uvicorn)</a>

---

Danke! 🚀


================================================
File: /docs/de/docs/history-design-future.md
================================================
# Geschichte, Design und Zukunft

Vor einiger Zeit fragte <a href="https://github.com/fastapi/fastapi/issues/3#issuecomment-454956920" class="external-link" target="_blank">ein **FastAPI**-Benutzer</a>:

> Was ist die Geschichte dieses Projekts? Es scheint, als wäre es in ein paar Wochen aus dem Nichts zu etwas Großartigem geworden [...]

Hier ist ein wenig über diese Geschichte.

## Alternativen

Ich habe seit mehreren Jahren APIs mit komplexen Anforderungen (maschinelles Lernen, verteilte Systeme, asynchrone Jobs, NoSQL-Datenbanken, usw.) erstellt und leitete mehrere Entwicklerteams.

Dabei musste ich viele Alternativen untersuchen, testen und nutzen.

Die Geschichte von **FastAPI** ist zu einem großen Teil die Geschichte seiner Vorgänger.

Wie im Abschnitt [Alternativen](alternatives.md){.internal-link target=_blank} gesagt:

<blockquote markdown="1">

**FastAPI** würde ohne die frühere Arbeit anderer nicht existieren.

Es wurden zuvor viele Tools entwickelt, die als Inspiration für seine Entwicklung dienten.

Ich habe die Schaffung eines neuen Frameworks viele Jahre lang vermieden. Zuerst habe ich versucht, alle von **FastAPI** abgedeckten Funktionen mithilfe vieler verschiedener Frameworks, Plugins und Tools zu lösen.

Aber irgendwann gab es keine andere Möglichkeit, als etwas zu schaffen, das all diese Funktionen bereitstellte, die besten Ideen früherer Tools aufnahm und diese auf die bestmögliche Weise kombinierte, wobei Sprachfunktionen verwendet wurden, die vorher noch nicht einmal verfügbar waren (Python 3.6+ Typhinweise).

</blockquote>

## Investigation

Durch die Nutzung all dieser vorherigen Alternativen hatte ich die Möglichkeit, von allen zu lernen, Ideen aufzunehmen und sie auf die beste Weise zu kombinieren, die ich für mich und die Entwicklerteams, mit denen ich zusammengearbeitet habe, finden konnte.

Es war beispielsweise klar, dass es idealerweise auf Standard-Python-Typhinweisen basieren sollte.

Der beste Ansatz bestand außerdem darin, bereits bestehende Standards zu nutzen.

Bevor ich also überhaupt angefangen habe, **FastAPI** zu schreiben, habe ich mehrere Monate damit verbracht, die Spezifikationen für OpenAPI, JSON Schema, OAuth2, usw. zu studieren und deren Beziehungen, Überschneidungen und Unterschiede zu verstehen.

## Design

Dann habe ich einige Zeit damit verbracht, die Entwickler-„API“ zu entwerfen, die ich als Benutzer haben wollte (als Entwickler, welcher FastAPI verwendet).

Ich habe mehrere Ideen in den beliebtesten Python-Editoren getestet: PyCharm, VS Code, Jedi-basierte Editoren.

Laut der letzten <a href="https://www.jetbrains.com/research/python-developers-survey-2018/#development-tools" class="external-link" target="_blank">Python-Entwickler-Umfrage</a>, deckt das etwa 80 % der Benutzer ab.

Das bedeutet, dass **FastAPI** speziell mit den Editoren getestet wurde, die von 80 % der Python-Entwickler verwendet werden. Und da die meisten anderen Editoren in der Regel ähnlich funktionieren, sollten alle diese Vorteile für praktisch alle Editoren funktionieren.

Auf diese Weise konnte ich die besten Möglichkeiten finden, die Codeverdoppelung so weit wie möglich zu reduzieren, überall Autovervollständigung, Typ- und Fehlerprüfungen, usw. zu gewährleisten.

Alles auf eine Weise, die allen Entwicklern das beste Entwicklungserlebnis bot.

## Anforderungen

Nachdem ich mehrere Alternativen getestet hatte, entschied ich, dass ich <a href="https://pydantic-docs.helpmanual.io/" class="external-link" target="_blank">**Pydantic**</a> wegen seiner Vorteile verwenden würde.

Dann habe ich zu dessen Code beigetragen, um es vollständig mit JSON Schema kompatibel zu machen, und so verschiedene Möglichkeiten zum Definieren von einschränkenden Deklarationen (Constraints) zu unterstützen, und die Editorunterstützung (Typprüfungen, Codevervollständigung) zu verbessern, basierend auf den Tests in mehreren Editoren.

Während der Entwicklung habe ich auch zu <a href="https://www.starlette.io/" class="external-link" target="_blank">**Starlette**</a> beigetragen, der anderen Schlüsselanforderung.

## Entwicklung

Als ich mit der Erstellung von **FastAPI** selbst begann, waren die meisten Teile bereits vorhanden, das Design definiert, die Anforderungen und Tools bereit und das Wissen über die Standards und Spezifikationen klar und frisch.

## Zukunft

Zu diesem Zeitpunkt ist bereits klar, dass **FastAPI** mit seinen Ideen für viele Menschen nützlich ist.

Es wird gegenüber früheren Alternativen gewählt, da es für viele Anwendungsfälle besser geeignet ist.

Viele Entwickler und Teams verlassen sich bei ihren Projekten bereits auf **FastAPI** (einschließlich mir und meinem Team).

Dennoch stehen uns noch viele Verbesserungen und Funktionen bevor.

**FastAPI** hat eine große Zukunft vor sich.

Und [Ihre Hilfe](help-fastapi.md){.internal-link target=_blank} wird sehr geschätzt.


================================================
File: /docs/de/docs/index.md
================================================
# FastAPI

<style>
.md-content .md-typeset h1 { display: none; }
</style>

<p align="center">
  <a href="https://fastapi.tiangolo.com"><img src="https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png" alt="FastAPI"></a>
</p>
<p align="center">
    <em>FastAPI Framework, hochperformant, leicht zu erlernen, schnell zu programmieren, einsatzbereit</em>
</p>
<p align="center">
<a href="https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster" target="_blank">
    <img src="https://github.com/fastapi/fastapi/workflows/Test/badge.svg?event=push&branch=master" alt="Test">
</a>
<a href="https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi" target="_blank">
    <img src="https://coverage-badge.samuelcolvin.workers.dev/fastapi/fastapi.svg" alt="Coverage">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package" alt="Package-Version">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058" alt="Unterstützte Python-Versionen">
</a>
</p>

---

**Dokumentation**: <a href="https://fastapi.tiangolo.com" target="_blank">https://fastapi.tiangolo.com</a>

**Quellcode**: <a href="https://github.com/fastapi/fastapi" target="_blank">https://github.com/fastapi/fastapi</a>

---

FastAPI ist ein modernes, schnelles (hoch performantes) Webframework zur Erstellung von APIs mit Python auf Basis von Standard-Python-Typhinweisen.

Seine Schlüssel-Merkmale sind:

* **Schnell**: Sehr hohe Leistung, auf Augenhöhe mit **NodeJS** und **Go** (Dank Starlette und Pydantic). [Eines der schnellsten verfügbaren Python-Frameworks](#performanz).

* **Schnell zu programmieren**: Erhöhen Sie die Geschwindigkeit bei der Entwicklung von Funktionen um etwa 200 % bis 300 %. *
* **Weniger Bugs**: Verringern Sie die von Menschen (Entwicklern) verursachten Fehler um etwa 40 %. *
* **Intuitiv**: Exzellente Editor-Unterstützung. <abbr title="auch bekannt als Autovervollständigung, Autocompletion, IntelliSense">Code-Vervollständigung</abbr> überall. Weniger Debuggen.
* **Einfach**: So konzipiert, dass es einfach zu benutzen und zu erlernen ist. Weniger Zeit für das Lesen der Dokumentation.
* **Kurz**: Minimieren Sie die Verdoppelung von Code. Mehrere Funktionen aus jeder Parameterdeklaration. Weniger Bugs.
* **Robust**: Erhalten Sie produktionsreifen Code. Mit automatischer, interaktiver Dokumentation.
* **Standards-basiert**: Basierend auf (und vollständig kompatibel mit) den offenen Standards für APIs: <a href="https://github.com/OAI/OpenAPI-Specification" class="external-link" target="_blank">OpenAPI</a> (früher bekannt als Swagger) und <a href="https://json-schema.org/" class="external-link" target="_blank">JSON Schema</a>.

<small>* Schätzung auf Basis von Tests in einem internen Entwicklungsteam, das Produktionsanwendungen erstellt.</small>

## Sponsoren

<!-- sponsors -->

{% if sponsors %}
{% for sponsor in sponsors.gold -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor -%}
{%- for sponsor in sponsors.silver -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

<!-- /sponsors -->

<a href="https://fastapi.tiangolo.com/de/fastapi-people/#sponsoren" class="external-link" target="_blank">Andere Sponsoren</a>

## Meinungen

„_[...] Ich verwende **FastAPI** heutzutage sehr oft. [...] Ich habe tatsächlich vor, es für alle **ML-Dienste meines Teams bei Microsoft** zu verwenden. Einige davon werden in das Kernprodukt **Windows** und einige **Office**-Produkte integriert._“

<div style="text-align: right; margin-right: 10%;">Kabir Khan - <strong>Microsoft</strong> <a href="https://github.com/fastapi/fastapi/pull/26" target="_blank"><small>(Ref)</small></a></div>

---

„_Wir haben die **FastAPI**-Bibliothek genommen, um einen **REST**-Server zu erstellen, der abgefragt werden kann, um **Vorhersagen** zu erhalten. [für Ludwig]_“

<div style="text-align: right; margin-right: 10%;">Piero Molino, Yaroslav Dudin, und Sai Sumanth Miryala - <strong>Uber</strong> <a href="https://eng.uber.com/ludwig-v0-2/" target="_blank"><small>(Ref)</small></a></div>

---

„_**Netflix** freut sich, die Open-Source-Veröffentlichung unseres **Krisenmanagement**-Orchestrierung-Frameworks bekannt zu geben: **Dispatch**! [erstellt mit **FastAPI**]_“

<div style="text-align: right; margin-right: 10%;">Kevin Glisson, Marc Vilanova, Forest Monsen - <strong>Netflix</strong> <a href="https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072" target="_blank"><small>(Ref)</small></a></div>

---

„_Ich bin überglücklich mit **FastAPI**. Es macht so viel Spaß!_“

<div style="text-align: right; margin-right: 10%;">Brian Okken - <strong>Host des <a href="https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855" target="_blank">Python Bytes</a> Podcast</strong> <a href="https://twitter.com/brianokken/status/1112220079972728832" target="_blank"><small>(Ref)</small></a></div>

---

„_Ehrlich, was Du gebaut hast, sieht super solide und poliert aus. In vielerlei Hinsicht ist es so, wie ich **Hug** haben wollte – es ist wirklich inspirierend, jemanden so etwas bauen zu sehen._“

<div style="text-align: right; margin-right: 10%;">Timothy Crosley - <strong>Autor von <a href="https://github.com/hugapi/hug" target="_blank">Hug</a></strong> <a href="https://news.ycombinator.com/item?id=19455465" target="_blank"><small>(Ref)</small></a></div>

---

„_Wenn Sie ein **modernes Framework** zum Erstellen von REST-APIs erlernen möchten, schauen Sie sich **FastAPI** an. [...] Es ist schnell, einfach zu verwenden und leicht zu erlernen [...]_“

„_Wir haben zu **FastAPI** für unsere **APIs** gewechselt [...] Ich denke, es wird Ihnen gefallen [...]_“

<div style="text-align: right; margin-right: 10%;">Ines Montani - Matthew Honnibal - <strong>Gründer von <a href="https://explosion.ai" target="_blank">Explosion AI</a> - Autoren von <a href="https://spacy.io" target="_blank">spaCy</a></strong> <a href="https://twitter.com/_inesmontani/status/1144173225322143744" target="_blank"><small>(Ref)</small></a> - <a href="https://twitter.com/honnibal/status/1144031421859655680" target="_blank"><small>(Ref)</small></a></div>

---

„_Falls irgendjemand eine Produktions-Python-API erstellen möchte, kann ich **FastAPI** wärmstens empfehlen. Es ist **wunderschön konzipiert**, **einfach zu verwenden** und **hoch skalierbar**; es ist zu einer **Schlüsselkomponente** in unserer API-First-Entwicklungsstrategie geworden und treibt viele Automatisierungen und Dienste an, wie etwa unseren virtuellen TAC-Ingenieur._“

<div style="text-align: right; margin-right: 10%;">Deon Pillsbury - <strong>Cisco</strong> <a href="https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/" target="_blank"><small>(Ref)</small></a></div>

---

## **Typer**, das FastAPI der CLIs

<a href="https://typer.tiangolo.com" target="_blank"><img src="https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg" style="width: 20%;"></a>

Wenn Sie eine <abbr title="Command Line Interface – Kommandozeilen-Schnittstelle">CLI</abbr>-Anwendung für das Terminal erstellen, anstelle einer Web-API, schauen Sie sich <a href="https://typer.tiangolo.com/" class="external-link" target="_blank">**Typer**</a> an.

**Typer** ist die kleine Schwester von FastAPI. Und es soll das **FastAPI der CLIs** sein. ⌨️ 🚀

## Anforderungen

FastAPI steht auf den Schultern von Giganten:

* <a href="https://www.starlette.io/" class="external-link" target="_blank">Starlette</a> für die Webanteile.
* <a href="https://pydantic-docs.helpmanual.io/" class="external-link" target="_blank">Pydantic</a> für die Datenanteile.

## Installation

<div class="termy">

```console
$ pip install fastapi

---> 100%
```

</div>

Sie benötigen außerdem einen <abbr title="Asynchronous Server Gateway Interface – Asynchrone Server-Verbindungsschnittstelle">ASGI</abbr>-Server. Für die Produktumgebung beispielsweise <a href="https://www.uvicorn.org" class="external-link" target="_blank">Uvicorn</a> oder <a href="https://github.com/pgjones/hypercorn" class="external-link" target="_blank">Hypercorn</a>.

<div class="termy">

```console
$ pip install "uvicorn[standard]"

---> 100%
```

</div>

## Beispiel

### Erstellung

* Erstellen Sie eine Datei `main.py` mit:

```Python
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

<details markdown="1">
<summary>Oder verwenden Sie <code>async def</code> ...</summary>

Wenn Ihr Code `async` / `await` verwendet, benutzen Sie `async def`:

```Python hl_lines="9  14"
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

**Anmerkung**:

Wenn Sie das nicht kennen, schauen Sie sich den Abschnitt _„In Eile?“_ über <a href="https://fastapi.tiangolo.com/de/async/#in-eile" target="_blank">`async` und `await` in der Dokumentation</a> an.
</details>

### Starten

Führen Sie den Server aus:

<div class="termy">

```console
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

</div>

<details markdown="1">
<summary>Was macht der Befehl <code>uvicorn main:app --reload</code> ...</summary>

Der Befehl `uvicorn main:app` bezieht sich auf:

* `main`: die Datei `main.py` (das Python-„Modul“).
* `app`: das Objekt, das innerhalb von `main.py` mit der Zeile `app = FastAPI()` erzeugt wurde.
* `--reload`: lässt den Server nach Codeänderungen neu starten. Tun Sie das nur während der Entwicklung.

</details>

### Testen

Öffnen Sie Ihren Browser unter <a href="http://127.0.0.1:8000/items/5?q=somequery" class="external-link" target="_blank">http://127.0.0.1:8000/items/5?q=somequery</a>.

Sie erhalten die JSON-Response:

```JSON
{"item_id": 5, "q": "somequery"}
```

Damit haben Sie bereits eine API erstellt, welche:

* HTTP-Anfragen auf den _Pfaden_ `/` und `/items/{item_id}` entgegennimmt.
* Beide _Pfade_ erhalten `GET` <em>Operationen</em> (auch bekannt als HTTP _Methoden_).
* Der _Pfad_ `/items/{item_id}` hat einen _Pfadparameter_ `item_id`, der ein `int` sein sollte.
* Der _Pfad_ `/items/{item_id}` hat einen optionalen `str` _Query Parameter_ `q`.

### Interaktive API-Dokumentation

Gehen Sie nun auf <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Sie sehen die automatische interaktive API-Dokumentation (bereitgestellt von <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a>):

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)

### Alternative API-Dokumentation

Gehen Sie jetzt auf <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a>.

Sie sehen die alternative automatische Dokumentation (bereitgestellt von <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a>):

![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)

## Beispiel Aktualisierung

Ändern Sie jetzt die Datei `main.py`, um den <abbr title="Body – Körper, Inhalt: Der eigentliche Inhalt einer Nachricht, nicht die Metadaten">Body</abbr> einer `PUT`-Anfrage zu empfangen.

Deklarieren Sie den Body mithilfe von Standard-Python-Typen, dank Pydantic.

```Python hl_lines="4  9-12  25-27"
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

Der Server sollte automatisch neu geladen werden (weil Sie oben `--reload` zum Befehl `uvicorn` hinzugefügt haben).

### Aktualisierung der interaktiven API-Dokumentation

Gehen Sie jetzt auf <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

* Die interaktive API-Dokumentation wird automatisch aktualisiert, einschließlich des neuen Bodys:

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)

* Klicken Sie auf die Taste „Try it out“, damit können Sie die Parameter ausfüllen und direkt mit der API interagieren:

![Swagger UI Interaktion](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)

* Klicken Sie dann auf die Taste „Execute“, die Benutzeroberfläche wird mit Ihrer API kommunizieren, sendet die Parameter, holt die Ergebnisse und zeigt sie auf dem Bildschirm an:

![Swagger UI Interaktion](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)

### Aktualisierung der alternativen API-Dokumentation

Und nun gehen Sie auf <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a>.

