</div>

/// tip

⏮️ `passlib`, 👆 💪 🔗 ⚫️ 💪 ✍ 🔐 ✍ **✳**, **🏺** 💂‍♂ 🔌-⚖️ 📚 🎏.

, 👆 🔜 💪, 🖼, 💰 🎏 📊 ⚪️➡️ ✳ 🈸 💽 ⏮️ FastAPI 🈸. ⚖️ 📉 ↔ ✳ 🈸 ⚙️ 🎏 💽.

 &amp; 👆 👩‍💻 🔜 💪 💳 ⚪️➡️ 👆 ✳ 📱 ⚖️ ⚪️➡️ 👆 **FastAPI** 📱, 🎏 🕰.

///

##  #️⃣ &amp; ✔ 🔐

🗄 🧰 👥 💪 ⚪️➡️ `passlib`.

✍ 🇸🇲 "🔑". 👉 ⚫️❔ 🔜 ⚙️ #️⃣ &amp; ✔ 🔐.

/// tip

🇸🇲 🔑 ✔️ 🛠️ ⚙️ 🎏 🔁 📊, 🔌 😢 🗝 🕐 🕴 ✔ ✔ 👫, ♒️.

🖼, 👆 💪 ⚙️ ⚫️ ✍ &amp; ✔ 🔐 🏗 ➕1️⃣ ⚙️ (💖 ✳) ✋️ #️⃣ 🙆 🆕 🔐 ⏮️ 🎏 📊 💖 🐡.

 &amp; 🔗 ⏮️ 🌐 👫 🎏 🕰.

///

✍ 🚙 🔢 #️⃣ 🔐 👟 ⚪️➡️ 👩‍💻.

&amp; ➕1️⃣ 🚙 ✔ 🚥 📨 🔐 🏏 #️⃣ 🏪.

&amp; ➕1️⃣ 1️⃣ 🔓 &amp; 📨 👩‍💻.

{* ../../docs_src/security/tutorial004.py hl[7,48,55:56,59:60,69:75] *}

/// note

🚥 👆 ✅ 🆕 (❌) 💽 `fake_users_db`, 👆 🔜 👀 ❔ #️⃣ 🔐 👀 💖 🔜: `"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW"`.

///

## 🍵 🥙 🤝

🗄 🕹 ❎.

✍ 🎲 ㊙ 🔑 👈 🔜 ⚙️ 🛑 🥙 🤝.

🏗 🔐 🎲 ㊙ 🔑 ⚙️ 📋:

<div class="termy">

```console
$ openssl rand -hex 32

09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
```

</div>

&amp; 📁 🔢 🔢 `SECRET_KEY` (🚫 ⚙️ 1️⃣ 🖼).

✍ 🔢 `ALGORITHM` ⏮️ 📊 ⚙️ 🛑 🥙 🤝 &amp; ⚒ ⚫️ `"HS256"`.

✍ 🔢 👔 🤝.

🔬 Pydantic 🏷 👈 🔜 ⚙️ 🤝 🔗 📨.

✍ 🚙 🔢 🏗 🆕 🔐 🤝.

{* ../../docs_src/security/tutorial004.py hl[6,12:14,28:30,78:86] *}

## ℹ 🔗

ℹ `get_current_user` 📨 🎏 🤝 ⏭, ✋️ 👉 🕰, ⚙️ 🥙 🤝.

🔣 📨 🤝, ✔ ⚫️, &amp; 📨 ⏮️ 👩‍💻.

🚥 🤝 ❌, 📨 🇺🇸🔍 ❌ ▶️️ ↖️.

{* ../../docs_src/security/tutorial004.py hl[89:106] *}

## ℹ `/token` *➡ 🛠️*

✍ `timedelta` ⏮️ 👔 🕰 🤝.

✍ 🎰 🥙 🔐 🤝 &amp; 📨 ⚫️.

{* ../../docs_src/security/tutorial004.py hl[115:130] *}

### 📡 ℹ 🔃 🥙 "📄" `sub`

🥙 🔧 💬 👈 📤 🔑 `sub`, ⏮️ 📄 🤝.

⚫️ 📦 ⚙️ ⚫️, ✋️ 👈 🌐❔ 👆 🔜 🚮 👩‍💻 🆔, 👥 ⚙️ ⚫️ 📥.

🥙 5️⃣📆 ⚙️ 🎏 👜 ↖️ ⚪️➡️ ⚖ 👩‍💻 &amp; 🤝 👫 🎭 🛠️ 🔗 🔛 👆 🛠️.

🖼, 👆 💪 🔬 "🚘" ⚖️ "📰 🏤".

⤴️ 👆 💪 🚮 ✔ 🔃 👈 👨‍💼, 💖 "💾" (🚘) ⚖️ "✍" (📰).

&amp; ⤴️, 👆 💪 🤝 👈 🥙 🤝 👩‍💻 (⚖️ 🤖), &amp; 👫 💪 ⚙️ ⚫️ 🎭 👈 🎯 (💾 🚘, ⚖️ ✍ 📰 🏤) 🍵 💆‍♂ ✔️ 🏧, ⏮️ 🥙 🤝 👆 🛠️ 🏗 👈.

⚙️ 👫 💭, 🥙 💪 ⚙️ 🌌 🌖 🤓 😐.

📚 💼, 📚 👈 👨‍💼 💪 ✔️ 🎏 🆔, ➡️ 💬 `foo` (👩‍💻 `foo`, 🚘 `foo`, &amp; 📰 🏤 `foo`).

, ❎ 🆔 💥, 🕐❔ 🏗 🥙 🤝 👩‍💻, 👆 💪 🔡 💲 `sub` 🔑, ✅ ⏮️ `username:`. , 👉 🖼, 💲 `sub` 💪 ✔️: `username:johndoe`.

⚠ 👜 ✔️ 🤯 👈 `sub` 🔑 🔜 ✔️ 😍 🆔 🤭 🎂 🈸, &amp; ⚫️ 🔜 🎻.

## ✅ ⚫️

🏃 💽 &amp; 🚶 🩺: <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

👆 🔜 👀 👩‍💻 🔢 💖:

<img src="/img/tutorial/security/image07.png">

✔ 🈸 🎏 🌌 ⏭.

⚙️ 🎓:

🆔: `johndoe`
🔐: `secret`

/// check

👀 👈 🕳 📟 🔢 🔐 "`secret`", 👥 🕴 ✔️ #️⃣ ⏬.

///

<img src="/img/tutorial/security/image08.png">

🤙 🔗 `/users/me/`, 👆 🔜 🤚 📨:

```JSON
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false
}
```

<img src="/img/tutorial/security/image09.png">

🚥 👆 📂 👩‍💻 🧰, 👆 💪 👀 ❔ 📊 📨 🕴 🔌 🤝, 🔐 🕴 📨 🥇 📨 🔓 👩‍💻 &amp; 🤚 👈 🔐 🤝, ✋️ 🚫 ⏮️:

<img src="/img/tutorial/security/image10.png">

/// note

👀 🎚 `Authorization`, ⏮️ 💲 👈 ▶️ ⏮️ `Bearer `.

///

## 🏧 ⚙️ ⏮️ `scopes`

Oauth2️⃣ ✔️ 🔑 "↔".

👆 💪 ⚙️ 👫 🚮 🎯 ⚒ ✔ 🥙 🤝.

⤴️ 👆 💪 🤝 👉 🤝 👩‍💻 🔗 ⚖️ 🥉 🥳, 🔗 ⏮️ 👆 🛠️ ⏮️ ⚒ 🚫.

👆 💪 💡 ❔ ⚙️ 👫 &amp; ❔ 👫 🛠️ 🔘 **FastAPI** ⏪ **🏧 👩‍💻 🦮**.

## 🌃

⏮️ ⚫️❔ 👆 ✔️ 👀 🆙 🔜, 👆 💪 ⚒ 🆙 🔐 **FastAPI** 🈸 ⚙️ 🐩 💖 Oauth2️⃣ &amp; 🥙.

🌖 🙆 🛠️ 🚚 💂‍♂ ▶️️ 👍 🏗 📄 🔜.

📚 📦 👈 📉 ⚫️ 📚 ✔️ ⚒ 📚 ⚠ ⏮️ 💽 🏷, 💽, &amp; 💪 ⚒. &amp; 👉 📦 👈 📉 👜 💁‍♂️ 🌅 🤙 ✔️ 💂‍♂ ⚠ 🔘.

---

**FastAPI** 🚫 ⚒ 🙆 ⚠ ⏮️ 🙆 💽, 💽 🏷 ⚖️ 🧰.

⚫️ 🤝 👆 🌐 💪 ⚒ 🕐 👈 👖 👆 🏗 🏆.

&amp; 👆 💪 ⚙️ 🔗 📚 👍 🚧 &amp; 🛎 ⚙️ 📦 💖 `passlib` &amp; `python-jose`, ↩️ **FastAPI** 🚫 🚚 🙆 🏗 🛠️ 🛠️ 🔢 📦.

✋️ ⚫️ 🚚 👆 🧰 📉 🛠️ 🌅 💪 🍵 🎯 💪, ⚖, ⚖️ 💂‍♂.

&amp; 👆 💪 ⚙️ &amp; 🛠️ 🔐, 🐩 🛠️, 💖 Oauth2️⃣ 📶 🙅 🌌.

👆 💪 💡 🌅 **🏧 👩‍💻 🦮** 🔃 ❔ ⚙️ Oauth2️⃣ "↔", 🌖 👌-🧽 ✔ ⚙️, 📄 👫 🎏 🐩. Oauth2️⃣ ⏮️ ↔ 🛠️ ⚙️ 📚 🦏 🤝 🐕‍🦺, 💖 👱📔, 🇺🇸🔍, 📂, 🤸‍♂, 👱📔, ♒️. ✔ 🥉 🥳 🈸 🔗 ⏮️ 👫 🔗 🔛 👨‍💼 👫 👩‍💻.


================================================
File: /docs/em/docs/tutorial/security/simple-oauth2.md
================================================
# 🙅 Oauth2️⃣ ⏮️ 🔐 &amp; 📨

🔜 ➡️ 🏗 ⚪️➡️ ⏮️ 📃 &amp; 🚮 ❌ 🍕 ✔️ 🏁 💂‍♂ 💧.

## 🤚 `username` &amp; `password`

👥 🔜 ⚙️ **FastAPI** 💂‍♂ 🚙 🤚 `username` &amp; `password`.

Oauth2️⃣ ✔ 👈 🕐❔ ⚙️ "🔐 💧" (👈 👥 ⚙️) 👩‍💻/👩‍💻 🔜 📨 `username` &amp; `password` 🏑 📨 💽.

&amp; 🔌 💬 👈 🏑 ✔️ 🌟 💖 👈. `user-name` ⚖️ `email` 🚫🔜 👷.

✋️ 🚫 😟, 👆 💪 🎦 ⚫️ 👆 🎋 👆 🏁 👩‍💻 🕸.

&amp; 👆 💽 🏷 💪 ⚙️ 🙆 🎏 📛 👆 💚.

✋️ 💳 *➡ 🛠️*, 👥 💪 ⚙️ 👉 📛 🔗 ⏮️ 🔌 (&amp; 💪, 🖼, ⚙️ 🛠️ 🛠️ 🧾 ⚙️).

🔌 🇵🇸 👈 `username` &amp; `password` 🔜 📨 📨 💽 (, 🙅‍♂ 🎻 📥).

### `scope`

🔌 💬 👈 👩‍💻 💪 📨 ➕1️⃣ 📨 🏑 "`scope`".

📨 🏑 📛 `scope` (⭐), ✋️ ⚫️ 🤙 📏 🎻 ⏮️ "↔" 🎏 🚀.

🔠 "↔" 🎻 (🍵 🚀).

👫 🛎 ⚙️ 📣 🎯 💂‍♂ ✔, 🖼:

* `users:read` ⚖️ `users:write` ⚠ 🖼.
* `instagram_basic` ⚙️ 👱📔 / 👱📔.
* `https://www.googleapis.com/auth/drive` ⚙️ 🇺🇸🔍.

/// info

Oauth2️⃣ "↔" 🎻 👈 📣 🎯 ✔ ✔.

⚫️ 🚫 🤔 🚥 ⚫️ ✔️ 🎏 🦹 💖 `:` ⚖️ 🚥 ⚫️ 📛.

👈 ℹ 🛠️ 🎯.

Oauth2️⃣ 👫 🎻.

///

## 📟 🤚 `username` &amp; `password`

🔜 ➡️ ⚙️ 🚙 🚚 **FastAPI** 🍵 👉.

### `OAuth2PasswordRequestForm`

🥇, 🗄 `OAuth2PasswordRequestForm`, &amp; ⚙️ ⚫️ 🔗 ⏮️ `Depends` *➡ 🛠️* `/token`:

{* ../../docs_src/security/tutorial003.py hl[4,76] *}

`OAuth2PasswordRequestForm` 🎓 🔗 👈 📣 📨 💪 ⏮️:

*  `username`.
*  `password`.
* 📦 `scope` 🏑 🦏 🎻, ✍ 🎻 🎏 🚀.
* 📦 `grant_type`.

/// tip

Oauth2️⃣ 🔌 🤙 *🚚* 🏑 `grant_type` ⏮️ 🔧 💲 `password`, ✋️ `OAuth2PasswordRequestForm` 🚫 🛠️ ⚫️.

🚥 👆 💪 🛠️ ⚫️, ⚙️ `OAuth2PasswordRequestFormStrict` ↩️ `OAuth2PasswordRequestForm`.

///

* 📦 `client_id` (👥 🚫 💪 ⚫️ 👆 🖼).
* 📦 `client_secret` (👥 🚫 💪 ⚫️ 👆 🖼).

/// info

`OAuth2PasswordRequestForm` 🚫 🎁 🎓 **FastAPI** `OAuth2PasswordBearer`.

`OAuth2PasswordBearer` ⚒ **FastAPI** 💭 👈 ⚫️ 💂‍♂ ⚖. ⚫️ 🚮 👈 🌌 🗄.

✋️ `OAuth2PasswordRequestForm` 🎓 🔗 👈 👆 💪 ✔️ ✍ 👆, ⚖️ 👆 💪 ✔️ 📣 `Form` 🔢 🔗.

✋️ ⚫️ ⚠ ⚙️ 💼, ⚫️ 🚚 **FastAPI** 🔗, ⚒ ⚫️ ⏩.

///

### ⚙️ 📨 💽

/// tip

👐 🔗 🎓 `OAuth2PasswordRequestForm` 🏆 🚫 ✔️ 🔢 `scope` ⏮️ 📏 🎻 👽 🚀, ↩️, ⚫️ 🔜 ✔️ `scopes` 🔢 ⏮️ ☑ 📇 🎻 🔠 ↔ 📨.

👥 🚫 ⚙️ `scopes` 👉 🖼, ✋️ 🛠️ 📤 🚥 👆 💪 ⚫️.

///

🔜, 🤚 👩‍💻 📊 ⚪️➡️ (❌) 💽, ⚙️ `username` ⚪️➡️ 📨 🏑.

🚥 📤 🙅‍♂ ✅ 👩‍💻, 👥 📨 ❌ 💬 "❌ 🆔 ⚖️ 🔐".

❌, 👥 ⚙️ ⚠ `HTTPException`:

{* ../../docs_src/security/tutorial003.py hl[3,77:79] *}

### ✅ 🔐

👉 ☝ 👥 ✔️ 👩‍💻 📊 ⚪️➡️ 👆 💽, ✋️ 👥 🚫 ✅ 🔐.

➡️ 🚮 👈 💽 Pydantic `UserInDB` 🏷 🥇.

👆 🔜 🙅 🖊 🔢 🔐,, 👥 🔜 ⚙️ (❌) 🔐 🔁 ⚙️.

🚥 🔐 🚫 🏏, 👥 📨 🎏 ❌.

#### 🔐 🔁

"🔁" ⛓: 🏭 🎚 (🔐 👉 💼) 🔘 🔁 🔢 (🎻) 👈 👀 💖 🙃.

🕐❔ 👆 🚶‍♀️ ⚫️❔ 🎏 🎚 (⚫️❔ 🎏 🔐) 👆 🤚 ⚫️❔ 🎏 🙃.

✋️ 👆 🚫🔜 🗜 ⚪️➡️ 🙃 🔙 🔐.

##### ⚫️❔ ⚙️ 🔐 🔁

🚥 👆 💽 📎, 🧙‍♀ 🏆 🚫 ✔️ 👆 👩‍💻' 🔢 🔐, 🕴#️⃣.

, 🧙‍♀ 🏆 🚫 💪 🔄 ⚙️ 👈 🎏 🔐 ➕1️⃣ ⚙️ (📚 👩‍💻 ⚙️ 🎏 🔐 🌐, 👉 🔜 ⚠).

{* ../../docs_src/security/tutorial003.py hl[80:83] *}

#### 🔃 `**user_dict`

`UserInDB(**user_dict)` ⛓:

*🚶‍♀️ 🔑 &amp; 💲 `user_dict` 🔗 🔑-💲 ❌, 🌓:*

```Python
UserInDB(
    username = user_dict["username"],
    email = user_dict["email"],
    full_name = user_dict["full_name"],
    disabled = user_dict["disabled"],
    hashed_password = user_dict["hashed_password"],
)
```

/// info

🌅 🏁 🔑 `**👩‍💻_ #️⃣ ` ✅ 🔙 [🧾 **➕ 🏷**](../extra-models.md#user_indict){.internal-link target=_blank}.

///

## 📨 🤝

📨 `token` 🔗 🔜 🎻 🎚.

⚫️ 🔜 ✔️ `token_type`. 👆 💼, 👥 ⚙️ "📨" 🤝, 🤝 🆎 🔜 "`bearer`".

&amp; ⚫️ 🔜 ✔️ `access_token`, ⏮️ 🎻 ⚗ 👆 🔐 🤝.

👉 🙅 🖼, 👥 🔜 🍕 😟 &amp; 📨 🎏 `username` 🤝.

/// tip

⏭ 📃, 👆 🔜 👀 🎰 🔐 🛠️, ⏮️ 🔐 #️⃣ &amp; <abbr title="JSON Web Tokens">🥙</abbr> 🤝.

✋️ 🔜, ➡️ 🎯 🔛 🎯 ℹ 👥 💪.

///

{* ../../docs_src/security/tutorial003.py hl[85] *}

/// tip

🔌, 👆 🔜 📨 🎻 ⏮️ `access_token` &amp; `token_type`, 🎏 👉 🖼.

👉 🕳 👈 👆 ✔️ 👆 👆 📟, &amp; ⚒ 💭 👆 ⚙️ 📚 🎻 🔑.

⚫️ 🌖 🕴 👜 👈 👆 ✔️ 💭 ☑ 👆, 🛠️ ⏮️ 🔧.

🎂, **FastAPI** 🍵 ⚫️ 👆.

///

## ℹ 🔗

🔜 👥 🔜 ℹ 👆 🔗.

👥 💚 🤚 `current_user` *🕴* 🚥 👉 👩‍💻 🦁.

, 👥 ✍ 🌖 🔗 `get_current_active_user` 👈 🔄 ⚙️ `get_current_user` 🔗.

👯‍♂️ 👉 🔗 🔜 📨 🇺🇸🔍 ❌ 🚥 👩‍💻 🚫 🔀, ⚖️ 🚥 🔕.

, 👆 🔗, 👥 🔜 🕴 🤚 👩‍💻 🚥 👩‍💻 🔀, ☑ 🔓, &amp; 🦁:

{* ../../docs_src/security/tutorial003.py hl[58:66,69:72,90] *}

/// info

🌖 🎚 `WWW-Authenticate` ⏮️ 💲 `Bearer` 👥 🛬 📥 🍕 🔌.

🙆 🇺🇸🔍 (❌) 👔 📟 4️⃣0️⃣1️⃣ "⛔" 🤔 📨 `WWW-Authenticate` 🎚.

💼 📨 🤝 (👆 💼), 💲 👈 🎚 🔜 `Bearer`.

👆 💪 🤙 🚶 👈 ➕ 🎚 &amp; ⚫️ 🔜 👷.

✋️ ⚫️ 🚚 📥 🛠️ ⏮️ 🔧.

, 📤 5️⃣📆 🧰 👈 ⌛ &amp; ⚙️ ⚫️ (🔜 ⚖️ 🔮) &amp; 👈 💪 ⚠ 👆 ⚖️ 👆 👩‍💻, 🔜 ⚖️ 🔮.

👈 💰 🐩...

///

## 👀 ⚫️ 🎯

📂 🎓 🩺: <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

### 🔓

🖊 "✔" 🔼.

⚙️ 🎓:

👩‍💻: `johndoe`

🔐: `secret`

<img src="/img/tutorial/security/image04.png">

⏮️ 🔗 ⚙️, 👆 🔜 👀 ⚫️ 💖:

<img src="/img/tutorial/security/image05.png">

### 🤚 👆 👍 👩‍💻 💽

🔜 ⚙️ 🛠️ `GET` ⏮️ ➡ `/users/me`.

👆 🔜 🤚 👆 👩‍💻 📊, 💖:

```JSON
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false,
  "hashed_password": "fakehashedsecret"
}
```

<img src="/img/tutorial/security/image06.png">

🚥 👆 🖊 🔒 ℹ &amp; ⏏, &amp; ⤴️ 🔄 🎏 🛠️ 🔄, 👆 🔜 🤚 🇺🇸🔍 4️⃣0️⃣1️⃣ ❌:

```JSON
{
  "detail": "Not authenticated"
}
```

### 🔕 👩‍💻

🔜 🔄 ⏮️ 🔕 👩‍💻, 🔓 ⏮️:

👩‍💻: `alice`

🔐: `secret2`

&amp; 🔄 ⚙️ 🛠️ `GET` ⏮️ ➡ `/users/me`.

👆 🔜 🤚 "🔕 👩‍💻" ❌, 💖:

```JSON
{
  "detail": "Inactive user"
}
```

## 🌃

👆 🔜 ✔️ 🧰 🛠️ 🏁 💂‍♂ ⚙️ ⚓️ 🔛 `username` &amp; `password` 👆 🛠️.

⚙️ 👫 🧰, 👆 💪 ⚒ 💂‍♂ ⚙️ 🔗 ⏮️ 🙆 💽 &amp; ⏮️ 🙆 👩‍💻 ⚖️ 💽 🏷.

🕴 ℹ ❌ 👈 ⚫️ 🚫 🤙 "🔐".

⏭ 📃 👆 🔜 👀 ❔ ⚙️ 🔐 🔐 🔁 🗃 &amp; <abbr title="JSON Web Tokens">🥙</abbr> 🤝.


================================================
File: /docs/en/mkdocs.insiders.yml
================================================
plugins:
  social:
    cards_layout_options:
      logo: ../en/docs/img/icon-white.svg
  typeset:
markdown_extensions:
  material.extensions.preview:
    targets:
      include:
        - "*"


================================================
File: /docs/en/mkdocs.maybe-insiders.yml
================================================
# Define this here and not in the main mkdocs.yml file because that one is auto
# updated and written, and the script would remove the env var
INHERIT: !ENV [INSIDERS_FILE, '../en/mkdocs.no-insiders.yml']
markdown_extensions:
  pymdownx.highlight:
    linenums: !ENV [LINENUMS, false]


================================================
File: /docs/en/mkdocs.yml
================================================
INHERIT: ../en/mkdocs.maybe-insiders.yml
site_name: FastAPI
site_description: FastAPI framework, high performance, easy to learn, fast to code, ready for production
site_url: https://fastapi.tiangolo.com/
theme:
  name: material
  custom_dir: ../en/overrides
  palette:
  - media: "(prefers-color-scheme)"
    toggle:
      icon: material/lightbulb-auto
      name: Switch to light mode
  - media: '(prefers-color-scheme: light)'
    scheme: default
    primary: teal
    accent: amber
    toggle:
      icon: material/lightbulb
      name: Switch to dark mode
  - media: '(prefers-color-scheme: dark)'
    scheme: slate
    primary: teal
    accent: amber
    toggle:
      icon: material/lightbulb-outline
      name: Switch to system preference
  features:
  - content.code.annotate
  - content.code.copy
  # - content.code.select
  - content.footnote.tooltips
  - content.tabs.link
  - content.tooltips
  - navigation.footer
  - navigation.indexes
  - navigation.instant
  - navigation.instant.prefetch
  # - navigation.instant.preview
  - navigation.instant.progress
  - navigation.path
  - navigation.tabs
  - navigation.tabs.sticky
  - navigation.top
  - navigation.tracking
  - search.highlight
  - search.share
  - search.suggest
  - toc.follow

  icon:
    repo: fontawesome/brands/github-alt
  logo: img/icon-white.svg
  favicon: img/favicon.png
  language: en
repo_name: fastapi/fastapi
repo_url: https://github.com/fastapi/fastapi
plugins:
  # Material for MkDocs
  search:
  # Configured in mkdocs.insiders.yml
  # social:
  # Other plugins
  macros:
    include_yaml:
    - external_links: ../en/data/external_links.yml
    - github_sponsors: ../en/data/github_sponsors.yml
    - people: ../en/data/people.yml
    - contributors: ../en/data/contributors.yml
    - translators: ../en/data/translators.yml
    - translation_reviewers: ../en/data/translation_reviewers.yml
    - skip_users: ../en/data/skip_users.yml
    - members: ../en/data/members.yml
    - sponsors_badge: ../en/data/sponsors_badge.yml
    - sponsors: ../en/data/sponsors.yml
    - topic_repos: ../en/data/topic_repos.yml
  redirects:
    redirect_maps:
      deployment/deta.md: deployment/cloud.md
      advanced/graphql.md: how-to/graphql.md
      advanced/custom-request-and-route.md: how-to/custom-request-and-route.md
      advanced/conditional-openapi.md: how-to/conditional-openapi.md
      advanced/extending-openapi.md: how-to/extending-openapi.md
      advanced/testing-database.md: how-to/testing-database.md
  mkdocstrings:
    handlers:
      python:
        options:
          extensions:
          - griffe_typingdoc
          show_root_heading: true
          show_if_no_docstring: true
          preload_modules:
          - httpx
          - starlette
          inherited_members: true
          members_order: source
          separate_signature: true
          unwrap_annotated: true
          filters:
          - '!^_'
          merge_init_into_class: true
          docstring_section_style: spacy
          signature_crossrefs: true
          show_symbol_type_heading: true
          show_symbol_type_toc: true

nav:
- FastAPI: index.md
- features.md
- Learn:
  - learn/index.md
  - python-types.md
  - async.md
  - environment-variables.md
  - virtual-environments.md
  - Tutorial - User Guide:
    - tutorial/index.md
    - tutorial/first-steps.md
    - tutorial/path-params.md
    - tutorial/query-params.md
    - tutorial/body.md
    - tutorial/query-params-str-validations.md
    - tutorial/path-params-numeric-validations.md
    - tutorial/query-param-models.md
    - tutorial/body-multiple-params.md
    - tutorial/body-fields.md
    - tutorial/body-nested-models.md
    - tutorial/schema-extra-example.md
    - tutorial/extra-data-types.md
    - tutorial/cookie-params.md
    - tutorial/header-params.md
    - tutorial/cookie-param-models.md
    - tutorial/header-param-models.md
    - tutorial/response-model.md
    - tutorial/extra-models.md
    - tutorial/response-status-code.md
    - tutorial/request-forms.md
    - tutorial/request-form-models.md
    - tutorial/request-files.md
    - tutorial/request-forms-and-files.md
    - tutorial/handling-errors.md
    - tutorial/path-operation-configuration.md
    - tutorial/encoder.md
    - tutorial/body-updates.md
    - Dependencies:
      - tutorial/dependencies/index.md
      - tutorial/dependencies/classes-as-dependencies.md
      - tutorial/dependencies/sub-dependencies.md
      - tutorial/dependencies/dependencies-in-path-operation-decorators.md
      - tutorial/dependencies/global-dependencies.md
      - tutorial/dependencies/dependencies-with-yield.md
    - Security:
      - tutorial/security/index.md
      - tutorial/security/first-steps.md
      - tutorial/security/get-current-user.md
      - tutorial/security/simple-oauth2.md
      - tutorial/security/oauth2-jwt.md
    - tutorial/middleware.md
    - tutorial/cors.md
    - tutorial/sql-databases.md
    - tutorial/bigger-applications.md
    - tutorial/background-tasks.md
    - tutorial/metadata.md
    - tutorial/static-files.md
    - tutorial/testing.md
    - tutorial/debugging.md
  - Advanced User Guide:
    - advanced/index.md
    - advanced/path-operation-advanced-configuration.md
    - advanced/additional-status-codes.md
    - advanced/response-directly.md
    - advanced/custom-response.md
    - advanced/additional-responses.md
    - advanced/response-cookies.md
    - advanced/response-headers.md
    - advanced/response-change-status-code.md
    - advanced/advanced-dependencies.md
    - Advanced Security:
      - advanced/security/index.md
      - advanced/security/oauth2-scopes.md
      - advanced/security/http-basic-auth.md
    - advanced/using-request-directly.md
    - advanced/dataclasses.md
    - advanced/middleware.md
    - advanced/sub-applications.md
    - advanced/behind-a-proxy.md
    - advanced/templates.md
    - advanced/websockets.md
    - advanced/events.md
    - advanced/testing-websockets.md
    - advanced/testing-events.md
    - advanced/testing-dependencies.md
    - advanced/async-tests.md
    - advanced/settings.md
    - advanced/openapi-callbacks.md
    - advanced/openapi-webhooks.md
    - advanced/wsgi.md
    - advanced/generate-clients.md
  - fastapi-cli.md
  - Deployment:
    - deployment/index.md
    - deployment/versions.md
    - deployment/https.md
    - deployment/manually.md
    - deployment/concepts.md
    - deployment/cloud.md
    - deployment/server-workers.md
    - deployment/docker.md
  - How To - Recipes:
    - how-to/index.md
    - how-to/general.md
    - how-to/graphql.md
    - how-to/custom-request-and-route.md
    - how-to/conditional-openapi.md
    - how-to/extending-openapi.md
    - how-to/separate-openapi-schemas.md
    - how-to/custom-docs-ui-assets.md
    - how-to/configure-swagger-ui.md
    - how-to/testing-database.md
- Reference (Code API):
  - reference/index.md
  - reference/fastapi.md
  - reference/parameters.md
  - reference/status.md
  - reference/uploadfile.md
  - reference/exceptions.md
  - reference/dependencies.md
  - reference/apirouter.md
  - reference/background.md
  - reference/request.md
  - reference/websockets.md
  - reference/httpconnection.md
  - reference/response.md
  - reference/responses.md
  - reference/middleware.md
  - OpenAPI:
    - reference/openapi/index.md
    - reference/openapi/docs.md
    - reference/openapi/models.md
  - reference/security/index.md
  - reference/encoders.md
  - reference/staticfiles.md
  - reference/templating.md
  - reference/testclient.md
- fastapi-people.md
- Resources:
  - resources/index.md
  - help-fastapi.md
  - contributing.md
  - project-generation.md
  - external-links.md
  - newsletter.md
  - management-tasks.md
- About:
  - about/index.md
  - alternatives.md
  - history-design-future.md
  - benchmarks.md
  - management.md
- release-notes.md

markdown_extensions:
  # Python Markdown
  abbr:
  attr_list:
  footnotes:
  md_in_html:
  tables:
  toc:
    permalink: true

  # Python Markdown Extensions
  pymdownx.betterem:
  pymdownx.caret:
  pymdownx.highlight:
    line_spans: __span
  pymdownx.inlinehilite:
  pymdownx.keys:
  pymdownx.mark:
  pymdownx.superfences:
    custom_fences:
    - name: mermaid
      class: mermaid
      format: !!python/name:pymdownx.superfences.fence_code_format
  pymdownx.tilde:

  # pymdownx blocks
  pymdownx.blocks.admonition:
    types:
    - note
    - attention
    - caution
    - danger
    - error
    - tip
    - hint
    - warning
    # Custom types
    - info
    - check
  pymdownx.blocks.details:
  pymdownx.blocks.tab:
    alternate_style: True

  # Other extensions
  mdx_include:
  markdown_include_variants:

extra:
  analytics:
    provider: google
    property: G-YNEVN69SC3
    feedback:
      title: Was this page helpful?
      ratings:
        - icon: material/emoticon-happy-outline
          name: This page was helpful
          data: 1
          note: >-
            Thanks for your feedback!
        - icon: material/emoticon-sad-outline
          name: This page could be improved
          data: 0
          note: >-
            Thanks for your feedback!
  social:
  - icon: fontawesome/brands/github-alt
    link: https://github.com/fastapi/fastapi
  - icon: fontawesome/brands/discord
    link: https://discord.gg/VQjSZaeJmf
  - icon: fontawesome/brands/twitter
    link: https://twitter.com/fastapi
  - icon: fontawesome/brands/linkedin
    link: https://www.linkedin.com/in/tiangolo
  - icon: fontawesome/brands/dev
    link: https://dev.to/tiangolo
  - icon: fontawesome/brands/medium
    link: https://medium.com/@tiangolo
  - icon: fontawesome/solid/globe
    link: https://tiangolo.com

  alternate:
  - link: /
    name: en - English
  - link: /az/
    name: az - azərbaycan dili
  - link: /bn/
    name: bn - বাংলা
  - link: /de/
    name: de - Deutsch
  - link: /es/
    name: es - español
  - link: /fa/
    name: fa - فارسی
  - link: /fr/
    name: fr - français
  - link: /he/
    name: he - עברית
  - link: /hu/
    name: hu - magyar
  - link: /id/
    name: id - Bahasa Indonesia
  - link: /it/
    name: it - italiano
  - link: /ja/
    name: ja - 日本語
  - link: /ko/
    name: ko - 한국어
  - link: /nl/
    name: nl - Nederlands
  - link: /pl/
    name: pl - Polski
  - link: /pt/
    name: pt - português
  - link: /ru/
    name: ru - русский язык
  - link: /tr/
    name: tr - Türkçe
  - link: /uk/
    name: uk - українська мова
  - link: /ur/
    name: ur - اردو
  - link: /vi/
    name: vi - Tiếng Việt
  - link: /yo/
    name: yo - Yorùbá
  - link: /zh/
    name: zh - 简体中文
  - link: /zh-hant/
    name: zh-hant - 繁體中文
  - link: /em/
    name: 😉

extra_css:
- css/termynal.css
- css/custom.css

extra_javascript:
- js/termynal.js
- js/custom.js

hooks:
- ../../scripts/mkdocs_hooks.py


================================================
File: /docs/en/data/contributors.yml
================================================
tiangolo:
  login: tiangolo
  count: 697
  avatarUrl: https://avatars.githubusercontent.com/u/1326112?u=cb5d06e73a9e1998141b1641aa88e443c6717651&v=4
  url: https://github.com/tiangolo
dependabot:
  login: dependabot
  count: 89
  avatarUrl: https://avatars.githubusercontent.com/in/29110?v=4
  url: https://github.com/apps/dependabot
github-actions:
  login: github-actions
  count: 26
  avatarUrl: https://avatars.githubusercontent.com/in/15368?v=4
  url: https://github.com/apps/github-actions
Kludex:
  login: Kludex
  count: 22
  avatarUrl: https://avatars.githubusercontent.com/u/7353520?u=df8a3f06ba8f55ae1967a3e2d5ed882903a4e330&v=4
  url: https://github.com/Kludex
pre-commit-ci:
  login: pre-commit-ci
  count: 22
  avatarUrl: https://avatars.githubusercontent.com/in/68672?v=4
  url: https://github.com/apps/pre-commit-ci
alejsdev:
  login: alejsdev
  count: 21
  avatarUrl: https://avatars.githubusercontent.com/u/90076947?u=356f39ff3f0211c720b06d3dbb060e98884085e3&v=4
  url: https://github.com/alejsdev
dmontagu:
  login: dmontagu
  count: 17
  avatarUrl: https://avatars.githubusercontent.com/u/35119617?u=540f30c937a6450812628b9592a1dfe91bbe148e&v=4
  url: https://github.com/dmontagu
euri10:
  login: euri10
  count: 13
  avatarUrl: https://avatars.githubusercontent.com/u/1104190?u=321a2e953e6645a7d09b732786c7a8061e0f8a8b&v=4
  url: https://github.com/euri10
kantandane:
  login: kantandane
  count: 13
  avatarUrl: https://avatars.githubusercontent.com/u/3978368?u=cccc199291f991a73b1ebba5abc735a948e0bd16&v=4
  url: https://github.com/kantandane
nilslindemann:
  login: nilslindemann
  count: 11
  avatarUrl: https://avatars.githubusercontent.com/u/6892179?u=1dca6a22195d6cd1ab20737c0e19a4c55d639472&v=4
  url: https://github.com/nilslindemann
zhaohan-dong:
  login: zhaohan-dong
  count: 11
  avatarUrl: https://avatars.githubusercontent.com/u/65422392?u=8260f8781f50248410ebfa4c9bf70e143fe5c9f2&v=4
  url: https://github.com/zhaohan-dong
mariacamilagl:
  login: mariacamilagl
  count: 9
  avatarUrl: https://avatars.githubusercontent.com/u/11489395?u=4adb6986bf3debfc2b8216ae701f2bd47d73da7d&v=4
  url: https://github.com/mariacamilagl
handabaldeep:
  login: handabaldeep
  count: 9
  avatarUrl: https://avatars.githubusercontent.com/u/12239103?u=6c39ef15d14c6d5211f5dd775cc4842f8d7f2f3a&v=4
  url: https://github.com/handabaldeep
vishnuvskvkl:
  login: vishnuvskvkl
  count: 8
  avatarUrl: https://avatars.githubusercontent.com/u/84698110?u=8af5de0520dd4fa195f53c2850a26f57c0f6bc64&v=4
  url: https://github.com/vishnuvskvkl
alissadb:
  login: alissadb
  count: 6
  avatarUrl: https://avatars.githubusercontent.com/u/96190409?u=be42d85938c241be781505a5a872575be28b2906&v=4
  url: https://github.com/alissadb
wshayes:
  login: wshayes
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/365303?u=07ca03c5ee811eb0920e633cc3c3db73dbec1aa5&v=4
  url: https://github.com/wshayes
samuelcolvin:
  login: samuelcolvin
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/4039449?u=42eb3b833047c8c4b4f647a031eaef148c16d93f&v=4
  url: https://github.com/samuelcolvin
waynerv:
  login: waynerv
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/39515546?u=ec35139777597cdbbbddda29bf8b9d4396b429a9&v=4
  url: https://github.com/waynerv
svlandeg:
  login: svlandeg
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/8796347?u=556c97650c27021911b0b9447ec55e75987b0e8a&v=4
  url: https://github.com/svlandeg
krishnamadhavan:
  login: krishnamadhavan
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/31798870?u=950693b28f3ae01105fd545c046e46ca3d31ab06&v=4
  url: https://github.com/krishnamadhavan
jekirl:
  login: jekirl
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/2546697?u=a027452387d85bd4a14834e19d716c99255fb3b7&v=4
  url: https://github.com/jekirl
hitrust:
  login: hitrust
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/3360631?u=5fa1f475ad784d64eb9666bdd43cc4d285dcc773&v=4
  url: https://github.com/hitrust
adriangb:
  login: adriangb
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/1755071?u=612704256e38d6ac9cbed24f10e4b6ac2da74ecb&v=4
  url: https://github.com/adriangb
iudeen:
  login: iudeen
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/10519440?u=2843b3303282bff8b212dcd4d9d6689452e4470c&v=4
  url: https://github.com/iudeen
philipokiokio:
  login: philipokiokio
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/55271518?u=d30994d339aaaf1f6bf1b8fc810132016fbd4fdc&v=4
  url: https://github.com/philipokiokio
AlexWendland:
  login: AlexWendland
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/3949212?u=c4c0c615e0ea33d00bfe16b779cf6ebc0f58071c&v=4
  url: https://github.com/AlexWendland
divums:
  login: divums
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/1397556?v=4
  url: https://github.com/divums
prostomarkeloff:
  login: prostomarkeloff
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/28061158?u=6918e39a1224194ba636e897461a02a20126d7ad&v=4
  url: https://github.com/prostomarkeloff
nsidnev:
  login: nsidnev
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/22559461?u=a9cc3238217e21dc8796a1a500f01b722adb082c&v=4
  url: https://github.com/nsidnev
pawamoy:
  login: pawamoy
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/3999221?u=b030e4c89df2f3a36bc4710b925bdeb6745c9856&v=4
  url: https://github.com/pawamoy
patrickmckenna:
  login: patrickmckenna
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/3589536?u=53aef07250d226d35e526768e26891964907b41a&v=4
  url: https://github.com/patrickmckenna
hukkin:
  login: hukkin
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/3275109?u=77bb83759127965eacbfe67e2ca983066e964fde&v=4
  url: https://github.com/hukkin
marcosmmb:
  login: marcosmmb
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/6181089?u=b8567a842b38c5570c315b2b7ca766fa7be6721e&v=4
  url: https://github.com/marcosmmb
Serrones:
  login: Serrones
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/22691749?u=4795b880e13ca33a73e52fc0ef7dc9c60c8fce47&v=4
  url: https://github.com/Serrones
uriyyo:
  login: uriyyo
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/32038156?u=a27b65a9ec3420586a827a0facccbb8b6df1ffb3&v=4
  url: https://github.com/uriyyo
amacfie:
  login: amacfie
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/889657?u=d70187989940b085bcbfa3bedad8dbc5f3ab1fe7&v=4
  url: https://github.com/amacfie
rkbeatss:
  login: rkbeatss
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/23391143?u=56ab6bff50be950fa8cae5cf736f2ae66e319ff3&v=4
  url: https://github.com/rkbeatss
asheux:
  login: asheux
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/22955146?u=4553ebf5b5a7c7fe031a46182083aa224faba2e1&v=4
  url: https://github.com/asheux
n25a:
  login: n25a
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/49960770?u=7d8a6d5f0a75a5e9a865a2527edfd48895ea27ae&v=4
  url: https://github.com/n25a
ghandic:
  login: ghandic
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/23500353?u=e2e1d736f924d9be81e8bfc565b6d8836ba99773&v=4
  url: https://github.com/ghandic
TeoZosa:
  login: TeoZosa
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/13070236?u=96fdae85800ef85dcfcc4b5f8281dc8778c8cb7d&v=4
  url: https://github.com/TeoZosa
graingert:
  login: graingert
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/413772?u=64b77b6aa405c68a9c6bcf45f84257c66eea5f32&v=4
  url: https://github.com/graingert
ShahriyarR:
  login: ShahriyarR
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/3852029?u=c9a1691e5ebdc94cbf543086099a6ed705cdb873&v=4
  url: https://github.com/ShahriyarR
jaystone776:
  login: jaystone776
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/11191137?u=299205a95e9b6817a43144a48b643346a5aac5cc&v=4
  url: https://github.com/jaystone776
zanieb:
  login: zanieb
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/2586601?u=e5c86f7ff3b859e7e183187ac2b17fd6ee32b3ab&v=4
  url: https://github.com/zanieb
MicaelJarniac:
  login: MicaelJarniac
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/19514231?u=158c91874ea98d6e9e6f0c6db37ee2ce60c55ff2&v=4
  url: https://github.com/MicaelJarniac
papb:
  login: papb
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/20914054?u=890511fae7ea90d887e2a65ce44a1775abba38d5&v=4
  url: https://github.com/papb
gitworkflows:
  login: gitworkflows
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/118260833?v=4
  url: https://github.com/gitworkflows
Nimitha-jagadeesha:
  login: Nimitha-jagadeesha
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/58389915?v=4
  url: https://github.com/Nimitha-jagadeesha
lucaromagnoli:
  login: lucaromagnoli
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/38782977?u=e66396859f493b4ddcb3a837a1b2b2039c805417&v=4
  url: https://github.com/lucaromagnoli
salmantec:
  login: salmantec
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/41512228?u=443551b893ff2425c59d5d021644f098cf7c68d5&v=4
  url: https://github.com/salmantec
OCE1960:
  login: OCE1960
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/45076670?u=0e9a44712b92ffa89ddfbaa83c112f3f8e1d68e2&v=4
  url: https://github.com/OCE1960
hamidrasti:
  login: hamidrasti
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/43915620?v=4
  url: https://github.com/hamidrasti
kkinder:
  login: kkinder
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1115018?u=c5e90284a9f5c5049eae1bb029e3655c7dc913ed&v=4
  url: https://github.com/kkinder
kabirkhan:
  login: kabirkhan
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/13891834?u=e0eabf792376443ac853e7dca6f550db4166fe35&v=4
  url: https://github.com/kabirkhan
zamiramir:
  login: zamiramir
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/40475662?u=e58ef61034e8d0d6a312cc956fb09b9c3332b449&v=4
  url: https://github.com/zamiramir
trim21:
  login: trim21
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/13553903?u=3cadf0f02095c9621aa29df6875f53a80ca4fbfb&v=4
  url: https://github.com/trim21
koxudaxi:
  login: koxudaxi
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/630670?u=507d8577b4b3670546b449c4c2ccbc5af40d72f7&v=4
  url: https://github.com/koxudaxi
pablogamboa:
  login: pablogamboa
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/12892536?u=326a57059ee0c40c4eb1b38413957236841c631b&v=4
  url: https://github.com/pablogamboa
dconathan:
  login: dconathan
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/15098095?v=4
  url: https://github.com/dconathan
Jamim:
  login: Jamim
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/5607572?u=0cf3027bec78ba4f0b89802430c136bc69847d7a&v=4
  url: https://github.com/Jamim
svalouch:
  login: svalouch
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/54674660?v=4
  url: https://github.com/svalouch
frankie567:
  login: frankie567
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1144727?u=c159fe047727aedecbbeeaa96a1b03ceb9d39add&v=4
  url: https://github.com/frankie567
marier-nico:
  login: marier-nico
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/30477068?u=c7df6af853c8f4163d1517814f3e9a0715c82713&v=4
  url: https://github.com/marier-nico
Dustyposa:
  login: Dustyposa
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/27180793?u=5cf2877f50b3eb2bc55086089a78a36f07042889&v=4
  url: https://github.com/Dustyposa
aviramha:
  login: aviramha
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/41201924?u=6883cc4fc13a7b2e60d4deddd4be06f9c5287880&v=4
  url: https://github.com/aviramha
iwpnd:
  login: iwpnd
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/6152183?u=ec59396e9437fff488791c5ecdf6d23f1f1ebf3a&v=4
  url: https://github.com/iwpnd
raphaelauv:
  login: raphaelauv
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/10202690?u=e6f86f5c0c3026a15d6b51792fa3e532b12f1371&v=4
  url: https://github.com/raphaelauv
windson:
  login: windson
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1826682?u=8b28dcd716c46289f191f8828e01d74edd058bef&v=4
  url: https://github.com/windson
sm-Fifteen:
  login: sm-Fifteen
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/516999?u=437c0c5038558c67e887ccd863c1ba0f846c03da&v=4
  url: https://github.com/sm-Fifteen
sattosan:
  login: sattosan
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/20574756?u=b0d8474d2938189c6954423ae8d81d91013f80a8&v=4
  url: https://github.com/sattosan
michaeloliverx:
  login: michaeloliverx
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/55017335?u=e606eb5cc397c07523be47637b1ee796904fbb59&v=4
  url: https://github.com/michaeloliverx
voegtlel:
  login: voegtlel
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/5764745?u=db8df3d70d427928ab6d7dbfc395a4a7109c1d1b&v=4
  url: https://github.com/voegtlel
HarshaLaxman:
  login: HarshaLaxman
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/19939186?u=a112f38b0f6b4d4402dc8b51978b5a0b2e5c5970&v=4
  url: https://github.com/HarshaLaxman
RunningIkkyu:
  login: RunningIkkyu
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/31848542?u=494ecc298e3f26197495bb357ad0f57cfd5f7a32&v=4
  url: https://github.com/RunningIkkyu
cassiobotaro:
  login: cassiobotaro
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/3127847?u=a08022b191ddbd0a6159b2981d9d878b6d5bb71f&v=4
  url: https://github.com/cassiobotaro
chenl:
  login: chenl
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1677651?u=c618508eaad6d596cea36c8ea784b424288f6857&v=4
  url: https://github.com/chenl
retnikt:
  login: retnikt
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/24581770?v=4
  url: https://github.com/retnikt
yankeexe:
  login: yankeexe
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/13623913?u=f970e66421775a8d3cdab89c0c752eaead186f6d&v=4
  url: https://github.com/yankeexe
patrickkwang:
  login: patrickkwang
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1263870?u=4bf74020e15be490f19ef8322a76eec882220b96&v=4
  url: https://github.com/patrickkwang
victorphoenix3:
  login: victorphoenix3
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/48182195?u=e4875bd088623cb4ddeb7be194ec54b453aff035&v=4
  url: https://github.com/victorphoenix3
davidefiocco:
  login: davidefiocco
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/4547987?v=4
  url: https://github.com/davidefiocco
adriencaccia:
  login: adriencaccia
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/19605940?u=980b0b366a02791a5600b2e9f9ac2037679acaa8&v=4
  url: https://github.com/adriencaccia
jamescurtin:
  login: jamescurtin
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/10189269?u=0b491fc600ca51f41cf1d95b49fa32a3eba1de57&v=4
  url: https://github.com/jamescurtin
jmriebold:
  login: jmriebold
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/6983392?u=4efdc97bf2422dcc7e9ff65b9ff80087c8eb2a20&v=4
  url: https://github.com/jmriebold
nukopy:
  login: nukopy
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/42367320?u=6061be0bd060506f6d564a8df3ae73fab048cdfe&v=4
  url: https://github.com/nukopy
imba-tjd:
  login: imba-tjd
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/24759802?u=01e901a4fe004b4b126549d3ff1c4000fe3720b5&v=4
  url: https://github.com/imba-tjd
paxcodes:
  login: paxcodes
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/13646646?u=e7429cc7ab11211ef762f4cd3efea7db6d9ef036&v=4
  url: https://github.com/paxcodes
kaustubhgupta:
  login: kaustubhgupta
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/43691873?u=8dd738718ac7ffad4ef31e86b5d780a1141c695d&v=4
  url: https://github.com/kaustubhgupta
wakabame:
  login: wakabame
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/35513518?u=41ef6b0a55076e5c540620d68fb006e386c2ddb0&v=4
  url: https://github.com/wakabame
nzig:
  login: nzig
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/7372858?u=e769add36ed73c778cdb136eb10bf96b1e119671&v=4
  url: https://github.com/nzig
yezz123:
  login: yezz123
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/52716203?u=d7062cbc6eb7671d5dc9cc0e32a24ae335e0f225&v=4
  url: https://github.com/yezz123
musicinmybrain:
  login: musicinmybrain
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/6898909?u=9010312053e7141383b9bdf538036c7f37fbaba0&v=4
  url: https://github.com/musicinmybrain
softwarebloat:
  login: softwarebloat
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/16540684?v=4
  url: https://github.com/softwarebloat
Lancetnik:
  login: Lancetnik
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/44573917?u=f9a18be7324333daf9cc314c35c3051f0a20a7a6&v=4
  url: https://github.com/Lancetnik
yogabonito:
  login: yogabonito
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/7026269?v=4
  url: https://github.com/yogabonito
s111d:
  login: s111d
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/4954856?v=4
  url: https://github.com/s111d
estebanx64:
  login: estebanx64
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/10840422?u=45f015f95e1c0f06df602be4ab688d4b854cc8a8&v=4
  url: https://github.com/estebanx64
tamird:
  login: tamird
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1535036?v=4
  url: https://github.com/tamird
rabinlamadong:
  login: rabinlamadong
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/170439781?v=4
  url: https://github.com/rabinlamadong
AyushSinghal1794:
  login: AyushSinghal1794
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/89984761?v=4
  url: https://github.com/AyushSinghal1794


================================================
File: /docs/en/data/external_links.yml
================================================
Articles:
  English:
  - author: Balthazar Rouberol
    author_link: https://balthazar-rouberol.com
    link: https://blog.balthazar-rouberol.com/how-to-profile-a-fastapi-asynchronous-request
    title: How to profile a FastAPI asynchronous request
  - author: Stephen Siegert - Neon
    link: https://neon.tech/blog/deploy-a-serverless-fastapi-app-with-neon-postgres-and-aws-app-runner-at-any-scale
    title: Deploy a Serverless FastAPI App with Neon Postgres and AWS App Runner at any scale
  - author: Kurtis Pykes - NVIDIA
    link: https://developer.nvidia.com/blog/building-a-machine-learning-microservice-with-fastapi/
    title: Building a Machine Learning Microservice with FastAPI
  - author: Ravgeet Dhillon - Twilio
    link: https://www.twilio.com/en-us/blog/booking-appointments-twilio-notion-fastapi
    title: Booking Appointments with Twilio, Notion, and FastAPI
  - author: Abhinav Tripathi - Microsoft Blogs
    link: https://devblogs.microsoft.com/cosmosdb/azure-cosmos-db-python-and-fastapi/
    title: Write a Python data layer with Azure Cosmos DB and FastAPI
  - author: Donny Peeters
    author_link: https://github.com/Donnype
    link: https://bitestreams.com/blog/fastapi-sqlalchemy/
    title: 10 Tips for adding SQLAlchemy to FastAPI
  - author: Jessica Temporal
    author_link: https://jtemporal.com/socials
    link: https://jtemporal.com/tips-on-migrating-from-flask-to-fastapi-and-vice-versa/
    title: Tips on migrating from Flask to FastAPI and vice-versa
  - author: Ankit Anchlia
    author_link: https://linkedin.com/in/aanchlia21
    link: https://hackernoon.com/explore-how-to-effectively-use-jwt-with-fastapi
    title: Explore How to Effectively Use JWT With FastAPI
  - author: Nicoló Lino
    author_link: https://www.nlino.com
    link: https://github.com/softwarebloat/python-tracing-demo
    title: Instrument FastAPI with OpenTelemetry tracing and visualize traces in Grafana Tempo.
  - author: Mikhail Rozhkov, Elena Samuylova
    author_link: https://www.linkedin.com/in/mnrozhkov/
    link: https://www.evidentlyai.com/blog/fastapi-tutorial
    title: ML serving and monitoring with FastAPI and Evidently
  - author: Visual Studio Code Team
    author_link: https://code.visualstudio.com/
    link: https://code.visualstudio.com/docs/python/tutorial-fastapi
    title: FastAPI Tutorial in Visual Studio Code
  - author: Apitally
    author_link: https://apitally.io
    link: https://blog.apitally.io/fastapi-application-monitoring-made-easy
    title: FastAPI application monitoring made easy
  - author: John Philip
    author_link: https://medium.com/@amjohnphilip
    link: https://python.plainenglish.io/building-a-restful-api-with-fastapi-secure-signup-and-login-functionality-included-45cdbcb36106
    title: "Building a RESTful API with FastAPI: Secure Signup and Login Functionality Included"
  - author: Keshav Malik
    author_link: https://theinfosecguy.xyz/
    link: https://blog.theinfosecguy.xyz/building-a-crud-api-with-fastapi-and-supabase-a-step-by-step-guide
    title: Building a CRUD API with FastAPI and Supabase
  - author: Adejumo Ridwan Suleiman
    author_link: https://www.linkedin.com/in/adejumoridwan/
    link: https://medium.com/python-in-plain-english/build-an-sms-spam-classifier-serverless-database-with-faunadb-and-fastapi-23dbb275bc5b
    title: Build an SMS Spam Classifier Serverless Database with FaunaDB and FastAPI
  - author: Raf Rasenberg
    author_link: https://rafrasenberg.com/about/
    link: https://rafrasenberg.com/fastapi-lambda/
    title: 'FastAPI lambda container: serverless simplified'
  - author: Teresa N. Fontanella De Santis
    author_link: https://dev.to/
    link: https://dev.to/teresafds/authorization-on-fastapi-with-casbin-41og
    title: Authorization on FastAPI with Casbin
  - author: New Relic
    author_link: https://newrelic.com
    link: https://newrelic.com/instant-observability/fastapi/e559ec64-f765-4470-a15f-1901fcebb468
    title: How to monitor FastAPI application performance using Python agent
  - author: Jean-Baptiste Rocher
    author_link: https://hashnode.com/@jibrocher
    link: https://dev.indooroutdoor.io/series/fastapi-react-poll-app
    title: Building the Poll App From Django Tutorial With FastAPI And React
  - author: Silvan Melchior
    author_link: https://github.com/silvanmelchior
    link: https://blog.devgenius.io/seamless-fastapi-configuration-with-confz-90949c14ea12
    title: Seamless FastAPI Configuration with ConfZ
  - author: Kaustubh Gupta
    author_link: https://medium.com/@kaustubhgupta1828/
    link: https://levelup.gitconnected.com/5-advance-features-of-fastapi-you-should-try-7c0ac7eebb3e
    title: 5 Advanced Features of FastAPI You Should Try
  - author: Kaustubh Gupta
    author_link: https://medium.com/@kaustubhgupta1828/
    link: https://www.analyticsvidhya.com/blog/2021/06/deploying-ml-models-as-api-using-fastapi-and-heroku/
    title: Deploying ML Models as API Using FastAPI and Heroku
  - link: https://jarmos.netlify.app/posts/using-github-actions-to-deploy-a-fastapi-project-to-heroku/
    title: Using GitHub Actions to Deploy a FastAPI Project to Heroku
    author_link: https://jarmos.netlify.app/
    author: Somraj Saha
  - author: "@pystar"
    author_link: https://pystar.substack.com/
    link: https://pystar.substack.com/p/how-to-create-a-fake-certificate
    title: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI
  - author: Ben Gamble
    author_link: https://uk.linkedin.com/in/bengamble7
    link: https://ably.com/blog/realtime-ticket-booking-solution-kafka-fastapi-ably
    title: Building a realtime ticket booking solution with Kafka, FastAPI, and Ably
  - author: Shahriyar(Shako) Rzayev
    author_link: https://www.linkedin.com/in/shahriyar-rzayev/
    link: https://www.azepug.az/posts/fastapi/#building-simple-e-commerce-with-nuxtjs-and-fastapi-series
    title: Building simple E-Commerce with NuxtJS and FastAPI
  - author: Rodrigo Arenas
    author_link: https://rodrigo-arenas.medium.com/
    link: https://medium.com/analytics-vidhya/serve-a-machine-learning-model-using-sklearn-fastapi-and-docker-85aabf96729b
    title: "Serve a machine learning model using Sklearn, FastAPI and Docker"
  - author: Yashasvi Singh
    author_link: https://hashnode.com/@aUnicornDev
    link: https://aunicorndev.hashnode.dev/series/supafast-api
    title: "Building an API with FastAPI and Supabase and Deploying on Deta"
  - author: Navule Pavan Kumar Rao
    author_link: https://www.linkedin.com/in/navule/
    link: https://www.tutlinks.com/deploy-fastapi-on-ubuntu-gunicorn-caddy-2/
    title: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server
  - author: Patrick Ladon
    author_link: https://dev.to/factorlive
    link: https://dev.to/factorlive/python-facebook-messenger-webhook-with-fastapi-on-glitch-4n90
    title: Python Facebook messenger webhook with FastAPI on Glitch
  - author: Valon Januzaj
    author_link: https://www.linkedin.com/in/valon-januzaj-b02692187/
    link: https://valonjanuzaj.medium.com/deploy-a-dockerized-fastapi-application-to-aws-cc757830ba1b
    title: Deploy a dockerized FastAPI application to AWS
  - author: Amit Chaudhary
    author_link: https://twitter.com/amitness
    link: https://amitness.com/2020/06/fastapi-vs-flask/
    title: FastAPI for Flask Users
  - author: Louis Guitton
    author_link: https://twitter.com/louis_guitton
    link: https://guitton.co/posts/fastapi-monitoring/
    title: How to monitor your FastAPI service
  - author: Precious Ndubueze
    author_link: https://medium.com/@gabbyprecious2000
    link: https://medium.com/@gabbyprecious2000/creating-a-crud-app-with-fastapi-part-one-7c049292ad37
    title: Creating a CRUD App with FastAPI (Part one)
  - author: Farhad Malik
    author_link: https://medium.com/@farhadmalik
    link: https://towardsdatascience.com/build-and-host-fast-data-science-applications-using-fastapi-823be8a1d6a0
    title: Build And Host Fast Data Science Applications Using FastAPI
  - author: Navule Pavan Kumar Rao
    author_link: https://www.linkedin.com/in/navule/
    link: https://www.tutlinks.com/deploy-fastapi-on-azure/
    title: Deploy FastAPI on Azure App Service
  - author: Davide Fiocco
    author_link: https://github.com/davidefiocco
    link: https://davidefiocco.github.io/streamlit-fastapi-ml-serving/
    title: Machine learning model serving in Python using FastAPI and streamlit
  - author: Netflix
    author_link: https://netflixtechblog.com/
    link: https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072
    title: Introducing Dispatch
  - author: Stavros Korokithakis
    author_link: https://twitter.com/Stavros
    link: https://www.stavros.io/posts/fastapi-with-django/
    title: Using FastAPI with Django
  - author: Twilio
    author_link: https://www.twilio.com
    link: https://www.twilio.com/blog/build-secure-twilio-webhook-python-fastapi
    title: Build a Secure Twilio Webhook with Python and FastAPI
  - author: Sebastián Ramírez (tiangolo)
    author_link: https://twitter.com/tiangolo
    link: https://dev.to/tiangolo/build-a-web-api-from-scratch-with-fastapi-the-workshop-2ehe
    title: Build a web API from scratch with FastAPI - the workshop
  - author: Paul Sec
    author_link: https://twitter.com/PaulWebSec
    link: https://paulsec.github.io/posts/fastapi_plus_zeit_serverless_fu/
    title: FastAPI + Zeit.co = 🚀
  - author: cuongld2
    author_link: https://dev.to/cuongld2
    link: https://dev.to/cuongld2/build-simple-api-service-with-python-fastapi-part-1-581o
    title: Build simple API service with Python FastAPI — Part 1
  - author: Paurakh Sharma Humagain
    author_link: https://twitter.com/PaurakhSharma
    link: https://dev.to/paurakhsharma/microservice-in-python-using-fastapi-24cc
    title: Microservice in Python using FastAPI
  - author: Guillermo Cruz
    author_link: https://wuilly.com/
    link: https://wuilly.com/2019/10/real-time-notifications-with-python-and-postgres/
    title: Real-time Notifications with Python and Postgres
  - author: Navule Pavan Kumar Rao
    author_link: https://www.linkedin.com/in/navule/
    link: https://www.tutlinks.com/create-and-deploy-fastapi-app-to-heroku/
    title: Create and Deploy FastAPI app to Heroku without using Docker
  - author: Arthur Henrique
    author_link: https://twitter.com/arthurheinrique
    link: https://medium.com/@arthur393/another-boilerplate-to-fastapi-azure-pipeline-ci-pytest-3c8d9a4be0bb
    title: 'Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest'
  - author: Shane Soh
    author_link: https://medium.com/@shane.soh
    link: https://medium.com/analytics-vidhya/deploy-machine-learning-models-with-keras-fastapi-redis-and-docker-4940df614ece
    title: Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker
  - author: Mandy Gu
    author_link: https://towardsdatascience.com/@mandygu
    link: https://towardsdatascience.com/deploying-iris-classifications-with-fastapi-and-docker-7c9b83fdec3a
    title: 'Towards Data Science: Deploying Iris Classifications with FastAPI and Docker'
  - author: Michael Herman
    author_link: https://testdriven.io/authors/herman
    link: https://testdriven.io/blog/fastapi-crud/
    title: 'TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest'
  - author: Bernard Brenyah
    author_link: https://medium.com/@bbrenyah
    link: https://medium.com/python-data/how-to-deploy-tensorflow-2-0-models-as-an-api-service-with-fastapi-docker-128b177e81f3
    title: How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker
  - author: Dylan Anthony
    author_link: https://dev.to/dbanty
    link: https://dev.to/dbanty/why-i-m-leaving-flask-3ki6
    title: Why I'm Leaving Flask
  - author: Mike Moritz
    author_link: https://medium.com/@mike.p.moritz
    link: https://medium.com/@mike.p.moritz/using-docker-compose-to-deploy-a-lightweight-python-rest-api-with-a-job-queue-37e6072a209b
    title: Using Docker Compose to deploy a lightweight Python REST API with a job queue
  - author: '@euri10'
    author_link: https://gitlab.com/euri10
    link: https://gitlab.com/euri10/fastapi_cheatsheet
    title: A FastAPI and Swagger UI visual cheatsheet
  - author: Uber Engineering
    author_link: https://eng.uber.com
    link: https://eng.uber.com/ludwig-v0-2/
    title: 'Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server]'
  - author: Maarten Grootendorst
    author_link: https://www.linkedin.com/in/mgrootendorst/
    link: https://towardsdatascience.com/how-to-deploy-a-machine-learning-model-dc51200fe8cf
    title: How to Deploy a Machine Learning Model
  - author: Johannes Gontrum
    author_link: https://twitter.com/gntrm
    link: https://medium.com/@gntrm/jwt-authentication-with-fastapi-and-aws-cognito-1333f7f2729e
    title: JWT Authentication with FastAPI and AWS Cognito
  - author: Ankush Thakur
    author_link: https://geekflare.com/author/ankush/
    link: https://geekflare.com/python-asynchronous-web-frameworks/
    title: Top 5 Asynchronous Web Frameworks for Python
  - author: Nico Axtmann
    author_link: https://www.linkedin.com/in/nico-axtmann
    link: https://medium.com/@nico.axtmann95/deploying-a-scikit-learn-model-with-onnx-und-fastapi-1af398268915
    title: Deploying a scikit-learn model with ONNX and FastAPI
  - author: Nils de Bruin
    author_link: https://medium.com/@nilsdebruin
    link: https://medium.com/data-rebels/fastapi-authentication-revisited-enabling-api-key-authentication-122dc5975680
    title: 'FastAPI authentication revisited: Enabling API key authentication'
  - author: Nick Cortale
    author_link: https://nickc1.github.io/
    link: https://nickc1.github.io/api,/scikit-learn/2019/01/10/scikit-fastapi.html
    title: 'FastAPI and Scikit-Learn: Easily Deploy Models'
  - author: Errieta Kostala
    author_link: https://dev.to/errietta
    link: https://dev.to/errietta/introduction-to-the-fastapi-python-framework-2n10
    title: Introduction to the fastapi python framework
  - author: Nils de Bruin
    author_link: https://medium.com/@nilsdebruin
    link: https://medium.com/data-rebels/fastapi-how-to-add-basic-and-cookie-authentication-a45c85ef47d3
    title: FastAPI — How to add basic and cookie authentication
  - author: Nils de Bruin
    author_link: https://medium.com/@nilsdebruin
    link: https://medium.com/data-rebels/fastapi-google-as-an-external-authentication-provider-3a527672cf33
    title: FastAPI — Google as an external authentication provider
  - author: William Hayes
    author_link: https://medium.com/@williamhayes
    link: https://medium.com/@williamhayes/fastapi-starlette-debug-vs-prod-5f7561db3a59
    title: FastAPI/Starlette debug vs prod
  - author: Mukul Mantosh
    author_link: https://twitter.com/MantoshMukul
    link: https://www.jetbrains.com/pycharm/guide/tutorials/fastapi-aws-kubernetes/
    title: Developing FastAPI Application using K8s & AWS
  - author: KrishNa
    author_link: https://medium.com/@krishnardt365
    link: https://medium.com/@krishnardt365/fastapi-docker-and-postgres-91943e71be92
    title: Fastapi, Docker(Docker compose) and Postgres
  - author: Devon Ray
    author_link: https://devonray.com
    link: https://devonray.com/blog/deploying-a-fastapi-project-using-aws-lambda-aurora-cdk
    title: Deployment using Docker, Lambda, Aurora, CDK & GH Actions
  - author: Shubhendra Kushwaha
    author_link: https://www.linkedin.com/in/theshubhendra/
    link: https://theshubhendra.medium.com/mastering-soft-delete-advanced-sqlalchemy-techniques-4678f4738947
    title: 'Mastering Soft Delete: Advanced SQLAlchemy Techniques'
  - author: Shubhendra Kushwaha
    author_link: https://www.linkedin.com/in/theshubhendra/
    link: https://theshubhendra.medium.com/role-based-row-filtering-advanced-sqlalchemy-techniques-733e6b1328f6
    title: 'Role based row filtering: Advanced SQLAlchemy Techniques'
  German:
  - author: Marcel Sander (actidoo)
    author_link: https://www.actidoo.com
    link: https://www.actidoo.com/de/blog/python-fastapi-domain-driven-design
    title: Domain-driven Design mit Python und FastAPI
  - author: Nico Axtmann
    author_link: https://twitter.com/_nicoax
    link: https://blog.codecentric.de/2019/08/inbetriebnahme-eines-scikit-learn-modells-mit-onnx-und-fastapi/
    title: Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI
  - author: Felix Schürmeyer
    author_link: https://hellocoding.de/autor/felix-schuermeyer/
    link: https://hellocoding.de/blog/coding-language/python/fastapi
    title: REST-API Programmieren mittels Python und dem FastAPI Modul
  Japanese:
  - author: '@bee2'
    author_link: https://qiita.com/bee2
    link: https://qiita.com/bee2/items/75d9c0d7ba20e7a4a0e9
    title: '[FastAPI] Python製のASGI Web フレームワーク FastAPIに入門する'
  - author: '@bee2'
    author_link: https://qiita.com/bee2
    link: https://qiita.com/bee2/items/0ad260ab9835a2087dae
    title: PythonのWeb frameworkのパフォーマンス比較 (Django, Flask, responder, FastAPI, japronto)
  - author: ライトコードメディア編集部
    author_link: https://rightcode.co.jp/author/jun
    link: https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-admin-page-improvement
    title: '【第4回】FastAPIチュートリアル: toDoアプリを作ってみよう【管理者ページ改良編】'
  - author: ライトコードメディア編集部
    author_link: https://rightcode.co.jp/author/jun
    link: https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-authentication-user-registration
    title: '【第3回】FastAPIチュートリアル: toDoアプリを作ってみよう【認証・ユーザ登録編】'
  - author: ライトコードメディア編集部
    author_link: https://rightcode.co.jp/author/jun
    link: https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-model-building
    title: '【第2回】FastAPIチュートリアル: ToDoアプリを作ってみよう【モデル構築編】'
  - author: ライトコードメディア編集部
    author_link: https://rightcode.co.jp/author/jun
    link: https://rightcode.co.jp/blog/information-technology/fastapi-tutorial-todo-apps-environment
    title: '【第1回】FastAPIチュートリアル: ToDoアプリを作ってみよう【環境構築編】'
  - author: Hikaru Takahashi
    author_link: https://qiita.com/hikarut
    link: https://qiita.com/hikarut/items/b178af2e2440c67c6ac4
    title: フロントエンド開発者向けのDockerによるPython開発環境構築
  - author: '@angel_katayoku'
    author_link: https://qiita.com/angel_katayoku
    link: https://qiita.com/angel_katayoku/items/8a458a8952f50b73f420
    title: FastAPIでPOSTされたJSONのレスポンスbodyを受け取る
  - author: '@angel_katayoku'
    author_link: https://qiita.com/angel_katayoku
    link: https://qiita.com/angel_katayoku/items/4fbc1a4e2b33fa2237d2
    title: FastAPIをMySQLと接続してDockerで管理してみる
  - author: '@angel_katayoku'
    author_link: https://qiita.com/angel_katayoku
    link: https://qiita.com/angel_katayoku/items/0e1f5dbbe62efc612a78
    title: FastAPIでCORSを回避
  - author: '@ryoryomaru'
    author_link: https://qiita.com/ryoryomaru
    link: https://qiita.com/ryoryomaru/items/59958ed385b3571d50de
    title: python製の最新APIフレームワーク FastAPI を触ってみた
  - author: '@mtitg'
    author_link: https://qiita.com/mtitg
    link: https://qiita.com/mtitg/items/47770e9a562dd150631d
    title: FastAPI｜DB接続してCRUDするPython製APIサーバーを構築
  Portuguese:
  - author: Eduardo Mendes
    author_link: https://bolha.us/@dunossauro
    link: https://fastapidozero.dunossauro.com/
    title: FastAPI do ZERO
  - author: Jessica Temporal
    author_link: https://jtemporal.com/socials
    link: https://jtemporal.com/dicas-para-migrar-de-flask-para-fastapi-e-vice-versa/
    title: Dicas para migrar uma aplicação de Flask para FastAPI e vice-versa
  Russian:
  - author: Troy Köhler
    author_link: https://www.linkedin.com/in/trkohler/
    link: https://trkohler.com/fast-api-introduction-to-framework
    title: 'FastAPI: знакомимся с фреймворком'
  - author: prostomarkeloff
    author_link: https://github.com/prostomarkeloff
    link: https://habr.com/ru/post/478620/
    title: Почему Вы должны попробовать FastAPI?
  - author: Andrey Korchak
    author_link: https://habr.com/ru/users/57uff3r/
    link: https://habr.com/ru/post/454440/
    title: 'Мелкая питонячая радость #2: Starlette - Солидная примочка – FastAPI'
  Vietnamese:
  - author: Nguyễn Nhân
    author_link: https://fullstackstation.com/author/figonking/
    link: https://fullstackstation.com/fastapi-trien-khai-bang-docker/
    title: 'FASTAPI: TRIỂN KHAI BẰNG DOCKER'
  Taiwanese:
  - author: Leon
    author_link: http://editor.leonh.space/
    link: https://editor.leonh.space/2022/tortoise/
    title: 'Tortoise ORM / FastAPI 整合快速筆記'
  Spanish:
  - author: Eduardo Zepeda
    author_link: https://coffeebytes.dev/en/authors/eduardo-zepeda/
    link: https://coffeebytes.dev/es/python-fastapi-el-mejor-framework-de-python/
    title: 'Tutorial de FastAPI, ¿el mejor framework de Python?'
Podcasts:
  English:
  - author: Real Python
    author_link: https://realpython.com/
    link: https://realpython.com/podcasts/rpp/72/
    title: Starting With FastAPI and Examining Python's Import System - Episode 72
  - author: Python Bytes FM
    author_link: https://pythonbytes.fm/
    link: https://www.pythonpodcast.com/fastapi-web-application-framework-episode-259/
    title: 'Do you dare to press "."? - Episode 247 - Dan #6: SQLModel - use the same models for SQL and FastAPI'
  - author: Podcast.`__init__`
    author_link: https://www.pythonpodcast.com/
    link: https://www.pythonpodcast.com/fastapi-web-application-framework-episode-259/
    title: Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebastían Ramírez (tiangolo)
  - author: Python Bytes FM
    author_link: https://pythonbytes.fm/
    link: https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855
    title: FastAPI on PythonBytes
Talks:
  English:
  - author: Jeny Sadadia
    author_link: https://github.com/JenySadadia
    link: https://www.youtube.com/watch?v=uZdTe8_Z6BQ
    title: 'PyCon AU 2023: Testing asynchronous applications with FastAPI and pytest'
  - author: Sebastián Ramírez (tiangolo)
    author_link: https://twitter.com/tiangolo
    link: https://www.youtube.com/watch?v=PnpTY1f4k2U
    title: '[VIRTUAL] Py.Amsterdam''s flying Software Circus: Intro to FastAPI'
  - author: Sebastián Ramírez (tiangolo)
    author_link: https://twitter.com/tiangolo
    link: https://www.youtube.com/watch?v=z9K5pwb0rt8
    title: 'PyConBY 2020: Serve ML models easily with FastAPI'
  - author: Chris Withers
    author_link: https://twitter.com/chriswithers13
    link: https://www.youtube.com/watch?v=3DLwPcrE5mA
    title: 'PyCon UK 2019: FastAPI from the ground up'


================================================
File: /docs/en/data/github_sponsors.yml
================================================
sponsors:
- - login: bump-sh
    avatarUrl: https://avatars.githubusercontent.com/u/33217836?v=4
    url: https://github.com/bump-sh
  - login: porter-dev
    avatarUrl: https://avatars.githubusercontent.com/u/62078005?v=4
    url: https://github.com/porter-dev
  - login: andrew-propelauth
    avatarUrl: https://avatars.githubusercontent.com/u/89474256?u=1188c27cb744bbec36447a2cfd4453126b2ddb5c&v=4
    url: https://github.com/andrew-propelauth
  - login: zanfaruqui
    avatarUrl: https://avatars.githubusercontent.com/u/104461687?v=4
    url: https://github.com/zanfaruqui
  - login: Alek99
    avatarUrl: https://avatars.githubusercontent.com/u/38776361?u=bd6c163fe787c2de1a26c881598e54b67e2482dd&v=4
    url: https://github.com/Alek99
  - login: cryptapi
    avatarUrl: https://avatars.githubusercontent.com/u/44925437?u=61369138589bc7fee6c417f3fbd50fbd38286cc4&v=4
    url: https://github.com/cryptapi
  - login: Kong
    avatarUrl: https://avatars.githubusercontent.com/u/962416?v=4
    url: https://github.com/Kong
  - login: codacy
    avatarUrl: https://avatars.githubusercontent.com/u/1834093?v=4
    url: https://github.com/codacy
  - login: scalar
    avatarUrl: https://avatars.githubusercontent.com/u/301879?v=4
    url: https://github.com/scalar
- - login: ObliviousAI
    avatarUrl: https://avatars.githubusercontent.com/u/65656077?v=4
    url: https://github.com/ObliviousAI
- - login: databento
    avatarUrl: https://avatars.githubusercontent.com/u/64141749?v=4
    url: https://github.com/databento
  - login: svix
    avatarUrl: https://avatars.githubusercontent.com/u/80175132?v=4
    url: https://github.com/svix
  - login: deepset-ai
    avatarUrl: https://avatars.githubusercontent.com/u/51827949?v=4
    url: https://github.com/deepset-ai
  - login: mikeckennedy
    avatarUrl: https://avatars.githubusercontent.com/u/2035561?u=ce6165b799ea3164cb6f5ff54ea08042057442af&v=4
    url: https://github.com/mikeckennedy
  - login: ndimares
    avatarUrl: https://avatars.githubusercontent.com/u/6267663?u=cfb27efde7a7212be8142abb6c058a1aeadb41b1&v=4
    url: https://github.com/ndimares
- - login: takashi-yoneya
    avatarUrl: https://avatars.githubusercontent.com/u/33813153?u=2d0522bceba0b8b69adf1f2db866503bd96f944e&v=4
    url: https://github.com/takashi-yoneya
  - login: xoflare
    avatarUrl: https://avatars.githubusercontent.com/u/74335107?v=4
    url: https://github.com/xoflare
  - login: marvin-robot
    avatarUrl: https://avatars.githubusercontent.com/u/41086007?u=b9fcab402d0cd0aec738b6574fe60855cb0cd36d&v=4
    url: https://github.com/marvin-robot
  - login: BoostryJP
    avatarUrl: https://avatars.githubusercontent.com/u/57932412?v=4
    url: https://github.com/BoostryJP
  - login: acsone
    avatarUrl: https://avatars.githubusercontent.com/u/7601056?v=4
    url: https://github.com/acsone
- - login: Trivie
    avatarUrl: https://avatars.githubusercontent.com/u/8161763?v=4
    url: https://github.com/Trivie
- - login: americanair
    avatarUrl: https://avatars.githubusercontent.com/u/12281813?v=4
    url: https://github.com/americanair
  - login: CanoaPBC
    avatarUrl: https://avatars.githubusercontent.com/u/64223768?v=4
    url: https://github.com/CanoaPBC
  - login: mainframeindustries
    avatarUrl: https://avatars.githubusercontent.com/u/55092103?v=4
    url: https://github.com/mainframeindustries
  - login: mangualero
    avatarUrl: https://avatars.githubusercontent.com/u/3422968?u=c59272d7b5a912d6126fd6c6f17db71e20f506eb&v=4
    url: https://github.com/mangualero
  - login: birkjernstrom
    avatarUrl: https://avatars.githubusercontent.com/u/281715?u=4be14b43f76b4bd497b1941309bb390250b405e6&v=4
    url: https://github.com/birkjernstrom
  - login: yasyf
    avatarUrl: https://avatars.githubusercontent.com/u/709645?u=f36736b3c6a85f578886ecc42a740e7b436e7a01&v=4
    url: https://github.com/yasyf
- - login: primer-io
    avatarUrl: https://avatars.githubusercontent.com/u/62146168?v=4
    url: https://github.com/primer-io
  - login: povilasb
    avatarUrl: https://avatars.githubusercontent.com/u/1213442?u=b11f58ed6ceea6e8297c9b310030478ebdac894d&v=4
    url: https://github.com/povilasb
- - login: jhundman
    avatarUrl: https://avatars.githubusercontent.com/u/24263908?v=4
    url: https://github.com/jhundman
  - login: upciti
    avatarUrl: https://avatars.githubusercontent.com/u/43346262?v=4
    url: https://github.com/upciti
- - login: samuelcolvin
    avatarUrl: https://avatars.githubusercontent.com/u/4039449?u=42eb3b833047c8c4b4f647a031eaef148c16d93f&v=4
    url: https://github.com/samuelcolvin
  - login: Kludex
    avatarUrl: https://avatars.githubusercontent.com/u/7353520?u=62adc405ef418f4b6c8caa93d3eb8ab107bc4927&v=4
    url: https://github.com/Kludex
  - login: b-rad-c
    avatarUrl: https://avatars.githubusercontent.com/u/25362581?u=5bb10629f4015b62bec1f9a366675d5085551af9&v=4
    url: https://github.com/b-rad-c
  - login: ehaca
    avatarUrl: https://avatars.githubusercontent.com/u/25950317?u=cec1a3e0643b785288ae8260cc295a85ab344995&v=4
    url: https://github.com/ehaca
  - login: raphaellaude
    avatarUrl: https://avatars.githubusercontent.com/u/28026311?u=9ae4b158c0d2cb29ebd46df6b6edb7de08a67566&v=4
    url: https://github.com/raphaellaude
  - login: timlrx
    avatarUrl: https://avatars.githubusercontent.com/u/28362229?u=9a745ca31372ee324af682715ae88ce8522f9094&v=4
    url: https://github.com/timlrx
  - login: Leay15
    avatarUrl: https://avatars.githubusercontent.com/u/32212558?u=c4aa9c1737e515959382a5515381757b1fd86c53&v=4
    url: https://github.com/Leay15
  - login: ygorpontelo
    avatarUrl: https://avatars.githubusercontent.com/u/32963605?u=35f7103f9c4c4c2589ae5737ee882e9375ef072e&v=4
    url: https://github.com/ygorpontelo
  - login: ProteinQure
    avatarUrl: https://avatars.githubusercontent.com/u/33707203?v=4
    url: https://github.com/ProteinQure
  - login: catherinenelson1
    avatarUrl: https://avatars.githubusercontent.com/u/11951946?u=e714b957185b8cf3d301cced7fc3ad2842122c6a&v=4
    url: https://github.com/catherinenelson1
  - login: jsoques
    avatarUrl: https://avatars.githubusercontent.com/u/12414216?u=620921d94196546cc8b9eae2cc4cbc3f95bab42f&v=4
    url: https://github.com/jsoques
  - login: joeds13
    avatarUrl: https://avatars.githubusercontent.com/u/13631604?u=628eb122e08bef43767b3738752b883e8e7f6259&v=4
    url: https://github.com/joeds13
  - login: dannywade
    avatarUrl: https://avatars.githubusercontent.com/u/13680237?u=418ee985bd41577b20fde81417fb2d901e875e8a&v=4
    url: https://github.com/dannywade
  - login: khadrawy
    avatarUrl: https://avatars.githubusercontent.com/u/13686061?u=59f25ef42ecf04c22657aac4238ce0e2d3d30304&v=4
    url: https://github.com/khadrawy
  - login: mjohnsey
    avatarUrl: https://avatars.githubusercontent.com/u/16784016?u=38fad2e6b411244560b3af99c5f5a4751bc81865&v=4
    url: https://github.com/mjohnsey
  - login: ashi-agrawal
    avatarUrl: https://avatars.githubusercontent.com/u/17105294?u=99c7a854035e5398d8e7b674f2d42baae6c957f8&v=4
    url: https://github.com/ashi-agrawal
  - login: sepsi77
    avatarUrl: https://avatars.githubusercontent.com/u/18682303?v=4
    url: https://github.com/sepsi77
  - login: wedwardbeck
    avatarUrl: https://avatars.githubusercontent.com/u/19333237?u=1de4ae2bf8d59eb4c013f21d863cbe0f2010575f&v=4
    url: https://github.com/wedwardbeck
  - login: RaamEEIL
    avatarUrl: https://avatars.githubusercontent.com/u/20320552?v=4
    url: https://github.com/RaamEEIL
  - login: anthonycepeda
    avatarUrl: https://avatars.githubusercontent.com/u/72019805?u=60bdf46240cff8fca482ff0fc07d963fd5e1a27c&v=4
    url: https://github.com/anthonycepeda
  - login: patricioperezv
    avatarUrl: https://avatars.githubusercontent.com/u/73832292?u=5f471f156e19ee7920e62ae0f4a47b95580e61cf&v=4
    url: https://github.com/patricioperezv
  - login: kaoru0310
    avatarUrl: https://avatars.githubusercontent.com/u/80977929?u=1b61d10142b490e56af932ddf08a390fae8ee94f&v=4
    url: https://github.com/kaoru0310
  - login: DelfinaCare
    avatarUrl: https://avatars.githubusercontent.com/u/83734439?v=4
    url: https://github.com/DelfinaCare
  - login: Eruditis
    avatarUrl: https://avatars.githubusercontent.com/u/95244703?v=4
    url: https://github.com/Eruditis
  - login: jugeeem
    avatarUrl: https://avatars.githubusercontent.com/u/116043716?u=ae590d79c38ac79c91b9c5caa6887d061e865a3d&v=4
    url: https://github.com/jugeeem
  - login: apitally
    avatarUrl: https://avatars.githubusercontent.com/u/138365043?v=4
    url: https://github.com/apitally
  - login: logic-automation
    avatarUrl: https://avatars.githubusercontent.com/u/144732884?v=4
    url: https://github.com/logic-automation
  - login: ddilidili
    avatarUrl: https://avatars.githubusercontent.com/u/42176885?u=c0a849dde06987434653197b5f638d3deb55fc6c&v=4
    url: https://github.com/ddilidili
  - login: ramonalmeidam
    avatarUrl: https://avatars.githubusercontent.com/u/45269580?u=3358750b3a5854d7c3ed77aaca7dd20a0f529d32&v=4
    url: https://github.com/ramonalmeidam
  - login: dudikbender
    avatarUrl: https://avatars.githubusercontent.com/u/53487583?u=3a57542938ebfd57579a0111db2b297e606d9681&v=4
    url: https://github.com/dudikbender
  - login: prodhype
    avatarUrl: https://avatars.githubusercontent.com/u/60444672?u=3f278cff25ea37ead487d7861d4a984795de819e&v=4
    url: https://github.com/prodhype
  - login: patsatsia
    avatarUrl: https://avatars.githubusercontent.com/u/61111267?u=3271b85f7a37b479c8d0ae0a235182e83c166edf&v=4
    url: https://github.com/patsatsia
  - login: tcsmith
    avatarUrl: https://avatars.githubusercontent.com/u/989034?u=7d8d741552b3279e8f4d3878679823a705a46f8f&v=4
    url: https://github.com/tcsmith
  - login: dodo5522
    avatarUrl: https://avatars.githubusercontent.com/u/1362607?u=9bf1e0e520cccc547c046610c468ce6115bbcf9f&v=4
    url: https://github.com/dodo5522
  - login: nihpo
    avatarUrl: https://avatars.githubusercontent.com/u/1841030?u=0264956d7580f7e46687a762a7baa629f84cf97c&v=4
    url: https://github.com/nihpo
  - login: knallgelb
    avatarUrl: https://avatars.githubusercontent.com/u/2358812?u=c48cb6362b309d74cbf144bd6ad3aed3eb443e82&v=4
    url: https://github.com/knallgelb
  - login: johannquerne
    avatarUrl: https://avatars.githubusercontent.com/u/2736484?u=9b3381546a25679913a2b08110e4373c98840821&v=4
    url: https://github.com/johannquerne
  - login: Shark009
    avatarUrl: https://avatars.githubusercontent.com/u/3163309?u=0c6f4091b0eda05c44c390466199826e6dc6e431&v=4
    url: https://github.com/Shark009
  - login: dblackrun
    avatarUrl: https://avatars.githubusercontent.com/u/3528486?v=4
    url: https://github.com/dblackrun
  - login: zsinx6
    avatarUrl: https://avatars.githubusercontent.com/u/3532625?u=ba75a5dc744d1116ccfeaaf30d41cb2fe81fe8dd&v=4
    url: https://github.com/zsinx6
  - login: kennywakeland
    avatarUrl: https://avatars.githubusercontent.com/u/3631417?u=7c8f743f1ae325dfadea7c62bbf1abd6a824fc55&v=4
    url: https://github.com/kennywakeland
  - login: simw
    avatarUrl: https://avatars.githubusercontent.com/u/6322526?v=4
    url: https://github.com/simw
  - login: koconder
    avatarUrl: https://avatars.githubusercontent.com/u/25068?u=582657b23622aaa3dfe68bd028a780f272f456fa&v=4
    url: https://github.com/koconder
  - login: jstanden
    avatarUrl: https://avatars.githubusercontent.com/u/63288?u=c3658d57d2862c607a0e19c2101c3c51876e36ad&v=4
    url: https://github.com/jstanden
  - login: andreaso
    avatarUrl: https://avatars.githubusercontent.com/u/285964?u=837265cc7562c0685f25b2d81cd9de0434fe107c&v=4
    url: https://github.com/andreaso
  - login: robintw
    avatarUrl: https://avatars.githubusercontent.com/u/296686?v=4
    url: https://github.com/robintw
  - login: pamelafox
    avatarUrl: https://avatars.githubusercontent.com/u/297042?v=4
    url: https://github.com/pamelafox
  - login: ericof
    avatarUrl: https://avatars.githubusercontent.com/u/306014?u=cf7c8733620397e6584a451505581c01c5d842d7&v=4
    url: https://github.com/ericof
  - login: wshayes
    avatarUrl: https://avatars.githubusercontent.com/u/365303?u=07ca03c5ee811eb0920e633cc3c3db73dbec1aa5&v=4
    url: https://github.com/wshayes
  - login: koxudaxi
    avatarUrl: https://avatars.githubusercontent.com/u/630670?u=507d8577b4b3670546b449c4c2ccbc5af40d72f7&v=4
    url: https://github.com/koxudaxi
  - login: falkben
    avatarUrl: https://avatars.githubusercontent.com/u/653031?u=ad9838e089058c9e5a0bab94c0eec7cc181e0cd0&v=4
    url: https://github.com/falkben
  - login: mintuhouse
    avatarUrl: https://avatars.githubusercontent.com/u/769950?u=ecfbd79a97d33177e0d093ddb088283cf7fe8444&v=4
    url: https://github.com/mintuhouse
  - login: Rehket
    avatarUrl: https://avatars.githubusercontent.com/u/7015688?u=3afb0ba200feebbc7f958950e92db34df2a3c172&v=4
    url: https://github.com/Rehket
  - login: hiancdtrsnm
    avatarUrl: https://avatars.githubusercontent.com/u/7343177?v=4
    url: https://github.com/hiancdtrsnm
  - login: TrevorBenson
    avatarUrl: https://avatars.githubusercontent.com/u/9167887?u=afdd1766fdb79e04e59094cc6a54cd011ee7f686&v=4
    url: https://github.com/TrevorBenson
  - login: wdwinslow
    avatarUrl: https://avatars.githubusercontent.com/u/11562137?u=dc01daafb354135603a263729e3d26d939c0c452&v=4
    url: https://github.com/wdwinslow
  - login: aacayaco
    avatarUrl: https://avatars.githubusercontent.com/u/3634801?u=eaadda178c964178fcb64886f6c732172c8f8219&v=4
    url: https://github.com/aacayaco
  - login: anomaly
    avatarUrl: https://avatars.githubusercontent.com/u/3654837?v=4
    url: https://github.com/anomaly
  - login: jgreys
    avatarUrl: https://avatars.githubusercontent.com/u/4136890?u=096820d1ef89877d57d0f68e669ead8b0fde84df&v=4
    url: https://github.com/jgreys
  - login: Ryandaydev
    avatarUrl: https://avatars.githubusercontent.com/u/4292423?u=48f68868db8886fce31a1d802c1003914c6cd7c6&v=4
    url: https://github.com/Ryandaydev
  - login: jaredtrog
    avatarUrl: https://avatars.githubusercontent.com/u/4381365?v=4
    url: https://github.com/jaredtrog
  - login: oliverxchen
    avatarUrl: https://avatars.githubusercontent.com/u/4471774?u=534191f25e32eeaadda22dfab4b0a428733d5489&v=4
    url: https://github.com/oliverxchen
  - login: ennui93
    avatarUrl: https://avatars.githubusercontent.com/u/5300907?u=5b5452725ddb391b2caaebf34e05aba873591c3a&v=4
    url: https://github.com/ennui93
  - login: ternaus
    avatarUrl: https://avatars.githubusercontent.com/u/5481618?u=513a26b02a39e7a28d587cd37c6cc877ea368e6e&v=4
    url: https://github.com/ternaus
  - login: eseglem
    avatarUrl: https://avatars.githubusercontent.com/u/5920492?u=208d419cf667b8ac594c82a8db01932c7e50d057&v=4
    url: https://github.com/eseglem
  - login: FernandoCelmer
    avatarUrl: https://avatars.githubusercontent.com/u/6262214?u=d29fff3fd862fda4ca752079f13f32e84c762ea4&v=4
    url: https://github.com/FernandoCelmer
- - login: getsentry
    avatarUrl: https://avatars.githubusercontent.com/u/1396951?v=4
    url: https://github.com/getsentry
- - login: pawamoy
    avatarUrl: https://avatars.githubusercontent.com/u/3999221?u=b030e4c89df2f3a36bc4710b925bdeb6745c9856&v=4
    url: https://github.com/pawamoy
  - login: SebTota
    avatarUrl: https://avatars.githubusercontent.com/u/25122511?v=4
    url: https://github.com/SebTota
  - login: nisutec
    avatarUrl: https://avatars.githubusercontent.com/u/25281462?u=e562484c451fdfc59053163f64405f8eb262b8b0&v=4
    url: https://github.com/nisutec
  - login: hoenie-ams
    avatarUrl: https://avatars.githubusercontent.com/u/25708487?u=cda07434f0509ac728d9edf5e681117c0f6b818b&v=4
    url: https://github.com/hoenie-ams
  - login: joerambo
    avatarUrl: https://avatars.githubusercontent.com/u/26282974?v=4
    url: https://github.com/joerambo
  - login: rlnchow
    avatarUrl: https://avatars.githubusercontent.com/u/28018479?u=a93ca9cf1422b9ece155784a72d5f2fdbce7adff&v=4
    url: https://github.com/rlnchow
  - login: engineerjoe440
    avatarUrl: https://avatars.githubusercontent.com/u/33275230?u=eb223cad27017bb1e936ee9b429b450d092d0236&v=4
    url: https://github.com/engineerjoe440
  - login: bnkc
    avatarUrl: https://avatars.githubusercontent.com/u/34930566?u=db5e6f4f87836cad26c2aa90ce390ce49041c5a9&v=4
    url: https://github.com/bnkc
  - login: DevOpsKev
    avatarUrl: https://avatars.githubusercontent.com/u/36336550?u=6ccd5978fdaab06f37e22f2a14a7439341df7f67&v=4
    url: https://github.com/DevOpsKev
  - login: petercool
    avatarUrl: https://avatars.githubusercontent.com/u/37613029?u=81c525232bb35780945a68e88afd96bb2cdad9c4&v=4
    url: https://github.com/petercool
  - login: JimFawkes
    avatarUrl: https://avatars.githubusercontent.com/u/12075115?u=dc58ecfd064d72887c34bf500ddfd52592509acd&v=4
    url: https://github.com/JimFawkes
  - login: artempronevskiy
    avatarUrl: https://avatars.githubusercontent.com/u/12235104?u=03df6e1e55c9c6fe5d230adabb8dd7d43d8bbe8f&v=4
    url: https://github.com/artempronevskiy
  - login: TheR1D
    avatarUrl: https://avatars.githubusercontent.com/u/16740832?u=b0dfdbdb27b79729430c71c6128962f77b7b53f7&v=4
    url: https://github.com/TheR1D
  - login: joshuatz
    avatarUrl: https://avatars.githubusercontent.com/u/17817563?u=f1bf05b690d1fc164218f0b420cdd3acb7913e21&v=4
    url: https://github.com/joshuatz
  - login: jangia
    avatarUrl: https://avatars.githubusercontent.com/u/17927101?u=9261b9bb0c3e3bb1ecba43e8915dc58d8c9a077e&v=4
    url: https://github.com/jangia
  - login: jackleeio
    avatarUrl: https://avatars.githubusercontent.com/u/20477587?u=c5184dab6d021733d10c8f975b20e391856303d6&v=4
    url: https://github.com/jackleeio
  - login: shuheng-liu
    avatarUrl: https://avatars.githubusercontent.com/u/22414322?u=813c45f30786c6b511b21a661def025d8f7b609e&v=4
    url: https://github.com/shuheng-liu
  - login: pers0n4
    avatarUrl: https://avatars.githubusercontent.com/u/24864600?u=f211a13a7b572cbbd7779b9c8d8cb428cc7ba07e&v=4
    url: https://github.com/pers0n4
  - login: curegit
    avatarUrl: https://avatars.githubusercontent.com/u/37978051?u=1733c322079118c0cdc573c03d92813f50a9faec&v=4
    url: https://github.com/curegit
  - login: fernandosmither
    avatarUrl: https://avatars.githubusercontent.com/u/66154723?u=f79753eb207d01cca5bbb91ac62db6123e7622d1&v=4
    url: https://github.com/fernandosmither
  - login: PunRabbit
    avatarUrl: https://avatars.githubusercontent.com/u/70463212?u=1a835cfbc99295a60c8282f6aa6199d1b42241a5&v=4
    url: https://github.com/PunRabbit
  - login: PelicanQ
    avatarUrl: https://avatars.githubusercontent.com/u/77930606?v=4
    url: https://github.com/PelicanQ
  - login: tahmarrrr23
    avatarUrl: https://avatars.githubusercontent.com/u/138208610?u=465a46b0ff72a74252d3e3a71ac7d2f1919cda28&v=4
    url: https://github.com/tahmarrrr23
  - login: zk-Call
    avatarUrl: https://avatars.githubusercontent.com/u/147117264?v=4
    url: https://github.com/zk-Call
  - login: kristiangronberg
    avatarUrl: https://avatars.githubusercontent.com/u/42678548?v=4
    url: https://github.com/kristiangronberg
  - login: leonardo-holguin
    avatarUrl: https://avatars.githubusercontent.com/u/43093055?u=b59013d52fb6c4e0954aaaabc0882bd844985b38&v=4
    url: https://github.com/leonardo-holguin
  - login: arrrrrmin
    avatarUrl: https://avatars.githubusercontent.com/u/43553423?u=36a3880a6eb29309c19e6cadbb173bafbe91deb1&v=4
    url: https://github.com/arrrrrmin
  - login: mobyw
    avatarUrl: https://avatars.githubusercontent.com/u/44370805?v=4
    url: https://github.com/mobyw
  - login: ArtyomVancyan
    avatarUrl: https://avatars.githubusercontent.com/u/44609997?v=4
    url: https://github.com/ArtyomVancyan
  - login: harol97
    avatarUrl: https://avatars.githubusercontent.com/u/49042862?u=2b18e115ab73f5f09a280be2850f93c58a12e3d2&v=4
    url: https://github.com/harol97
  - login: hgalytoby
    avatarUrl: https://avatars.githubusercontent.com/u/50397689?u=62c7ff3519858423579676cd0efbd7e3f1ffe63a&v=4
    url: https://github.com/hgalytoby
  - login: conservative-dude
    avatarUrl: https://avatars.githubusercontent.com/u/55538308?u=f250c44942ea6e73a6bd90739b381c470c192c11&v=4
    url: https://github.com/conservative-dude
  - login: Joaopcamposs
    avatarUrl: https://avatars.githubusercontent.com/u/57376574?u=699d5ba5ee66af1d089df6b5e532b97169e73650&v=4
    url: https://github.com/Joaopcamposs
  - login: browniebroke
    avatarUrl: https://avatars.githubusercontent.com/u/861044?u=5abfca5588f3e906b31583d7ee62f6de4b68aa24&v=4
    url: https://github.com/browniebroke
  - login: miguelgr
    avatarUrl: https://avatars.githubusercontent.com/u/1484589?u=54556072b8136efa12ae3b6902032ea2a39ace4b&v=4
    url: https://github.com/miguelgr
  - login: WillHogan
    avatarUrl: https://avatars.githubusercontent.com/u/1661551?u=7036c064cf29781470573865264ec8e60b6b809f&v=4
    url: https://github.com/WillHogan
  - login: my3
    avatarUrl: https://avatars.githubusercontent.com/u/1825270?v=4
    url: https://github.com/my3
  - login: leobiscassi
    avatarUrl: https://avatars.githubusercontent.com/u/1977418?u=f9f82445a847ab479bd7223debd677fcac6c49a0&v=4
    url: https://github.com/leobiscassi
  - login: cbonoz
    avatarUrl: https://avatars.githubusercontent.com/u/2351087?u=fd3e8030b2cc9fbfbb54a65e9890c548a016f58b&v=4
    url: https://github.com/cbonoz
  - login: ddanier
    avatarUrl: https://avatars.githubusercontent.com/u/113563?u=ed1dc79de72f93bd78581f88ebc6952b62f472da&v=4
    url: https://github.com/ddanier
  - login: bryanculbertson
    avatarUrl: https://avatars.githubusercontent.com/u/144028?u=defda4f90e93429221cc667500944abde60ebe4a&v=4
    url: https://github.com/bryanculbertson
  - login: slafs
    avatarUrl: https://avatars.githubusercontent.com/u/210173?v=4
    url: https://github.com/slafs
  - login: adamghill
    avatarUrl: https://avatars.githubusercontent.com/u/317045?u=f1349d5ffe84a19f324e204777859fbf69ddf633&v=4
    url: https://github.com/adamghill
  - login: eteq
    avatarUrl: https://avatars.githubusercontent.com/u/346587?v=4
    url: https://github.com/eteq
  - login: dmig
    avatarUrl: https://avatars.githubusercontent.com/u/388564?v=4
    url: https://github.com/dmig
  - login: securancy
    avatarUrl: https://avatars.githubusercontent.com/u/606673?v=4
    url: https://github.com/securancy
  - login: tochikuji
    avatarUrl: https://avatars.githubusercontent.com/u/851759?v=4
    url: https://github.com/tochikuji
  - login: KentShikama
    avatarUrl: https://avatars.githubusercontent.com/u/6329898?u=8b236810db9b96333230430837e1f021f9246da1&v=4
    url: https://github.com/KentShikama
  - login: katnoria
    avatarUrl: https://avatars.githubusercontent.com/u/7674948?u=09767eb13e07e09496c5fee4e5ce21d9eac34a56&v=4
    url: https://github.com/katnoria
  - login: harsh183
    avatarUrl: https://avatars.githubusercontent.com/u/7780198?v=4
    url: https://github.com/harsh183
  - login: hcristea
    avatarUrl: https://avatars.githubusercontent.com/u/7814406?u=61d7a4fcf846983a4606788eac25e1c6c1209ba8&v=4
    url: https://github.com/hcristea
  - login: moonape1226
    avatarUrl: https://avatars.githubusercontent.com/u/8532038?u=d9f8b855a429fff9397c3833c2ff83849ebf989d&v=4
    url: https://github.com/moonape1226
  - login: msehnout
    avatarUrl: https://avatars.githubusercontent.com/u/9369632?u=8c988f1b008a3f601385a3616f9327820f66e3a5&v=4
    url: https://github.com/msehnout
  - login: xncbf
    avatarUrl: https://avatars.githubusercontent.com/u/9462045?u=2ef1ede118a72c170805f50b9ad07341fd16a354&v=4
    url: https://github.com/xncbf
  - login: DMantis
    avatarUrl: https://avatars.githubusercontent.com/u/9536869?v=4
    url: https://github.com/DMantis
  - login: hard-coders
    avatarUrl: https://avatars.githubusercontent.com/u/9651103?u=95db33927bbff1ed1c07efddeb97ac2ff33068ed&v=4
    url: https://github.com/hard-coders
  - login: supdann
    avatarUrl: https://avatars.githubusercontent.com/u/9986994?u=9671810f4ae9504c063227fee34fd47567ff6954&v=4
    url: https://github.com/supdann
  - login: satwikkansal
    avatarUrl: https://avatars.githubusercontent.com/u/10217535?u=b12d6ef74ea297de9e46da6933b1a5b7ba9e6a61&v=4
    url: https://github.com/satwikkansal
  - login: mntolia
    avatarUrl: https://avatars.githubusercontent.com/u/10390224?v=4
    url: https://github.com/mntolia
  - login: pheanex
    avatarUrl: https://avatars.githubusercontent.com/u/10408624?u=5b6bab6ee174aa6e991333e06eb29f628741013d&v=4
    url: https://github.com/pheanex
  - login: dzoladz
    avatarUrl: https://avatars.githubusercontent.com/u/10561752?u=5ee314d54aa79592c18566827ad8914debd5630d&v=4
    url: https://github.com/dzoladz
  - login: Zuzah
    avatarUrl: https://avatars.githubusercontent.com/u/10934846?u=1ef43e075ddc87bd1178372bf4d95ee6175cae27&v=4
    url: https://github.com/Zuzah
  - login: Alisa-lisa
    avatarUrl: https://avatars.githubusercontent.com/u/4137964?u=e7e393504f554f4ff15863a1e01a5746863ef9ce&v=4
    url: https://github.com/Alisa-lisa
  - login: Graeme22
    avatarUrl: https://avatars.githubusercontent.com/u/4185684?u=498182a42300d7bcd4de1215190cb17eb501136c&v=4
    url: https://github.com/Graeme22
  - login: danielunderwood
    avatarUrl: https://avatars.githubusercontent.com/u/4472301?v=4
    url: https://github.com/danielunderwood
  - login: rangulvers
    avatarUrl: https://avatars.githubusercontent.com/u/5235430?v=4
    url: https://github.com/rangulvers
  - login: sdevkota
    avatarUrl: https://avatars.githubusercontent.com/u/5250987?u=4ed9a120c89805a8aefda1cbdc0cf6512e64d1b4&v=4
    url: https://github.com/sdevkota
  - login: brizzbuzz
    avatarUrl: https://avatars.githubusercontent.com/u/5607577?u=58d5aae33bc97e52f11f334d2702e8710314b5c1&v=4
    url: https://github.com/brizzbuzz
  - login: Baghdady92
    avatarUrl: https://avatars.githubusercontent.com/u/5708590?v=4
    url: https://github.com/Baghdady92
  - login: jakeecolution
    avatarUrl: https://avatars.githubusercontent.com/u/5884696?u=4a7c7883fb064b593b50cb6697b54687e6f7aafe&v=4
    url: https://github.com/jakeecolution
  - login: stephane-rbn
    avatarUrl: https://avatars.githubusercontent.com/u/5939522?u=eb7ffe768fa3bcbcd04de14fe4a47444cc00ec4c&v=4
    url: https://github.com/stephane-rbn
- - login: danburonline
    avatarUrl: https://avatars.githubusercontent.com/u/34251194?u=94935cccfbec58083ab1e535212d54f1bf2c978a&v=4
    url: https://github.com/danburonline
  - login: AliYmn
    avatarUrl: https://avatars.githubusercontent.com/u/18416653?u=0de5a262e8b4dc0a08d065f30f7a39941e246530&v=4
    url: https://github.com/AliYmn
  - login: sadikkuzu
    avatarUrl: https://avatars.githubusercontent.com/u/23168063?u=d179c06bb9f65c4167fcab118526819f8e0dac17&v=4
    url: https://github.com/sadikkuzu
  - login: tran-hai-long
    avatarUrl: https://avatars.githubusercontent.com/u/119793901?u=3b173a845dcf099b275bdc9713a69cbbc36040ce&v=4
    url: https://github.com/tran-hai-long
  - login: rwxd
    avatarUrl: https://avatars.githubusercontent.com/u/40308458?u=cd04a39e3655923be4f25c2ba8a5a07b3da3230a&v=4
    url: https://github.com/rwxd
  - login: ssbarnea
    avatarUrl: https://avatars.githubusercontent.com/u/102495?u=c2efbf6fea2737e21dfc6b1113c4edc9644e9eaa&v=4
    url: https://github.com/ssbarnea
  - login: yuawn
    avatarUrl: https://avatars.githubusercontent.com/u/5111198?u=5315576f3fe1a70fd2d0f02181588f4eea5d353d&v=4
    url: https://github.com/yuawn
  - login: dongzhenye
    avatarUrl: https://avatars.githubusercontent.com/u/5765843?u=fe420c9a4c41e5b060faaf44029f5485616b470d&v=4
    url: https://github.com/dongzhenye


================================================
File: /docs/en/data/members.yml
================================================
members:
- login: tiangolo
  avatar_url: https://avatars.githubusercontent.com/u/1326112
  url: https://github.com/tiangolo
- login: Kludex
  avatar_url: https://avatars.githubusercontent.com/u/7353520
  url: https://github.com/Kludex
- login: alejsdev
  avatar_url: https://avatars.githubusercontent.com/u/90076947
  url: https://github.com/alejsdev
- login: svlandeg
  avatar_url: https://avatars.githubusercontent.com/u/8796347
  url: https://github.com/svlandeg
- login: YuriiMotov
  avatar_url: https://avatars.githubusercontent.com/u/109919500
  url: https://github.com/YuriiMotov
- login: patrick91
  avatar_url: https://avatars.githubusercontent.com/u/667029
  url: https://github.com/patrick91


================================================
File: /docs/en/data/skip_users.yml
================================================
- tiangolo
- codecov
- github-actions
- pre-commit-ci
- dependabot


================================================
File: /docs/en/data/sponsors.yml
================================================
gold:
  - url: https://blockbee.io?ref=fastapi
    title: BlockBee Cryptocurrency Payment Gateway
    img: https://fastapi.tiangolo.com/img/sponsors/blockbee.png
  - url: https://platform.sh/try-it-now/?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023
    title: "Build, run and scale your apps on a modern, reliable, and secure PaaS."
    img: https://fastapi.tiangolo.com/img/sponsors/platform-sh.png
  - url: https://www.porter.run
    title: Deploy FastAPI on AWS with a few clicks
    img: https://fastapi.tiangolo.com/img/sponsors/porter.png
  - url: https://bump.sh/fastapi?utm_source=fastapi&utm_medium=referral&utm_campaign=sponsor
    title: Automate FastAPI documentation generation with Bump.sh
    img: https://fastapi.tiangolo.com/img/sponsors/bump-sh.svg
  - url: https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge
    title: "Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files"
    img: https://fastapi.tiangolo.com/img/sponsors/scalar.svg
  - url: https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge
    title: Auth, user management and more for your B2B product
    img: https://fastapi.tiangolo.com/img/sponsors/propelauth.png
  - url: https://www.withcoherence.com/?utm_medium=advertising&utm_source=fastapi&utm_campaign=website
    title: Coherence
    img: https://fastapi.tiangolo.com/img/sponsors/coherence.png
  - url: https://www.mongodb.com/developer/languages/python/python-quickstart-fastapi/?utm_campaign=fastapi_framework&utm_source=fastapi_sponsorship&utm_medium=web_referral
    title: Simplify Full Stack Development with FastAPI & MongoDB
    img: https://fastapi.tiangolo.com/img/sponsors/mongodb.png
  - url: https://zuplo.link/fastapi-gh
    title: 'Zuplo: Scale, Protect, Document, and Monetize your FastAPI'
    img: https://fastapi.tiangolo.com/img/sponsors/zuplo.png
  - url: https://liblab.com?utm_source=fastapi
    title: liblab - Generate SDKs from FastAPI
    img: https://fastapi.tiangolo.com/img/sponsors/liblab.png
  - url: https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi
    title: Deploy & scale any full-stack web app on Render. Focus on building apps, not infra.
    img: https://fastapi.tiangolo.com/img/sponsors/render.svg
silver:
  - url: https://github.com/deepset-ai/haystack/
    title: Build powerful search from composable, open source building blocks
    img: https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg
  - url: https://databento.com/
    title: Pay as you go for market data
    img: https://fastapi.tiangolo.com/img/sponsors/databento.svg
  - url: https://speakeasy.com?utm_source=fastapi+repo&utm_medium=github+sponsorship
    title: SDKs for your API | Speakeasy
    img: https://fastapi.tiangolo.com/img/sponsors/speakeasy.png
  - url: https://www.svix.com/
    title: Svix - Webhooks as a service
    img: https://fastapi.tiangolo.com/img/sponsors/svix.svg
  - url: https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral
    title: Stainless | Generate best-in-class SDKs
    img: https://fastapi.tiangolo.com/img/sponsors/stainless.png
bronze:
  - url: https://www.exoflare.com/open-source/?utm_source=FastAPI&utm_campaign=open_source
    title: Biosecurity risk assessments made easy.
    img: https://fastapi.tiangolo.com/img/sponsors/exoflare.png
  - url: https://testdriven.io/courses/tdd-fastapi/
    title: Learn to build high-quality web apps with best practices
    img: https://fastapi.tiangolo.com/img/sponsors/testdriven.svg


================================================
File: /docs/en/data/sponsors_badge.yml
================================================
logins:
  - jina-ai
  - deta
  - investsuite
  - mikeckennedy
  - deepset-ai
  - cryptapi
  - xoflare
  - DropbaseHQ
  - VincentParedes
  - BLUE-DEVIL1134
  - ObliviousAI
  - Doist
  - nihpo
  - armand-sauzay
  - databento-bot
  - databento
  - nanram22
  - Flint-company
  - porter-dev
  - fern-api
  - ndimares
  - svixhq
  - Alek99
  - codacy
  - zanfaruqui
  - scalar
  - bump-sh
  - andrew-propelauth
  - svix
  - zuplo-oss
  - Kong
  - speakeasy-api
  - jess-render
  - blockbee-io


================================================
File: /docs/en/data/topic_repos.yml
================================================
- name: full-stack-fastapi-template
  html_url: https://github.com/fastapi/full-stack-fastapi-template
  stars: 28796
  owner_login: fastapi
  owner_html_url: https://github.com/fastapi
- name: Hello-Python
  html_url: https://github.com/mouredev/Hello-Python
  stars: 27554
  owner_login: mouredev
  owner_html_url: https://github.com/mouredev
- name: serve
  html_url: https://github.com/jina-ai/serve
  stars: 21225
  owner_login: jina-ai
  owner_html_url: https://github.com/jina-ai
- name: sqlmodel
  html_url: https://github.com/fastapi/sqlmodel
  stars: 14921
  owner_login: fastapi
  owner_html_url: https://github.com/fastapi
- name: HivisionIDPhotos
  html_url: https://github.com/Zeyi-Lin/HivisionIDPhotos
  stars: 14025
  owner_login: Zeyi-Lin
  owner_html_url: https://github.com/Zeyi-Lin
- name: Douyin_TikTok_Download_API
  html_url: https://github.com/Evil0ctal/Douyin_TikTok_Download_API
  stars: 10001
  owner_login: Evil0ctal
  owner_html_url: https://github.com/Evil0ctal
- name: fastapi-best-practices
  html_url: https://github.com/zhanymkanov/fastapi-best-practices
  stars: 9820
  owner_login: zhanymkanov
  owner_html_url: https://github.com/zhanymkanov
- name: awesome-fastapi
  html_url: https://github.com/mjhea0/awesome-fastapi
  stars: 8899
  owner_login: mjhea0
  owner_html_url: https://github.com/mjhea0
- name: FastUI
  html_url: https://github.com/pydantic/FastUI
  stars: 8400
  owner_login: pydantic
  owner_html_url: https://github.com/pydantic
- name: nonebot2
  html_url: https://github.com/nonebot/nonebot2
  stars: 6235
  owner_login: nonebot
  owner_html_url: https://github.com/nonebot
- name: serge
  html_url: https://github.com/serge-chat/serge
  stars: 5685
  owner_login: serge-chat
  owner_html_url: https://github.com/serge-chat
- name: fastapi-users
  html_url: https://github.com/fastapi-users/fastapi-users
  stars: 4787
  owner_login: fastapi-users
  owner_html_url: https://github.com/fastapi-users
- name: FileCodeBox
  html_url: https://github.com/vastsa/FileCodeBox
  stars: 4479
  owner_login: vastsa
  owner_html_url: https://github.com/vastsa
- name: hatchet
  html_url: https://github.com/hatchet-dev/hatchet
  stars: 4413
  owner_login: hatchet-dev
  owner_html_url: https://github.com/hatchet-dev
- name: chatgpt-web-share
  html_url: https://github.com/chatpire/chatgpt-web-share
  stars: 4322
  owner_login: chatpire
  owner_html_url: https://github.com/chatpire
- name: atrilabs-engine
  html_url: https://github.com/Atri-Labs/atrilabs-engine
  stars: 4115
  owner_login: Atri-Labs
  owner_html_url: https://github.com/Atri-Labs
- name: strawberry
  html_url: https://github.com/strawberry-graphql/strawberry
  stars: 4084
  owner_login: strawberry-graphql
  owner_html_url: https://github.com/strawberry-graphql
- name: dynaconf
  html_url: https://github.com/dynaconf/dynaconf
  stars: 3844
  owner_login: dynaconf
  owner_html_url: https://github.com/dynaconf
- name: poem
  html_url: https://github.com/poem-web/poem
  stars: 3698
  owner_login: poem-web
  owner_html_url: https://github.com/poem-web
- name: polar
  html_url: https://github.com/polarsource/polar
  stars: 3355
  owner_login: polarsource
  owner_html_url: https://github.com/polarsource
- name: opyrator
  html_url: https://github.com/ml-tooling/opyrator
  stars: 3114
  owner_login: ml-tooling
  owner_html_url: https://github.com/ml-tooling
- name: farfalle
  html_url: https://github.com/rashadphz/farfalle
  stars: 3022
  owner_login: rashadphz
  owner_html_url: https://github.com/rashadphz
- name: fastapi-admin
  html_url: https://github.com/fastapi-admin/fastapi-admin
  stars: 3002
  owner_login: fastapi-admin
  owner_html_url: https://github.com/fastapi-admin
- name: docarray
  html_url: https://github.com/docarray/docarray
  stars: 2998
  owner_login: docarray
  owner_html_url: https://github.com/docarray
- name: datamodel-code-generator
  html_url: https://github.com/koxudaxi/datamodel-code-generator
  stars: 2845
  owner_login: koxudaxi
  owner_html_url: https://github.com/koxudaxi
- name: fastapi-realworld-example-app
  html_url: https://github.com/nsidnev/fastapi-realworld-example-app
  stars: 2832
  owner_login: nsidnev
  owner_html_url: https://github.com/nsidnev
- name: uvicorn-gunicorn-fastapi-docker
  html_url: https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker
  stars: 2727
  owner_login: tiangolo
  owner_html_url: https://github.com/tiangolo
- name: WrenAI
  html_url: https://github.com/Canner/WrenAI
  stars: 2699
  owner_login: Canner
  owner_html_url: https://github.com/Canner
- name: LitServe
  html_url: https://github.com/Lightning-AI/LitServe
  stars: 2664
  owner_login: Lightning-AI
  owner_html_url: https://github.com/Lightning-AI
- name: logfire
  html_url: https://github.com/pydantic/logfire
  stars: 2495
  owner_login: pydantic
  owner_html_url: https://github.com/pydantic
- name: huma
  html_url: https://github.com/danielgtaylor/huma
  stars: 2479
  owner_login: danielgtaylor
  owner_html_url: https://github.com/danielgtaylor
- name: tracecat
  html_url: https://github.com/TracecatHQ/tracecat
  stars: 2446
  owner_login: TracecatHQ
  owner_html_url: https://github.com/TracecatHQ
- name: RasaGPT
  html_url: https://github.com/paulpierre/RasaGPT
  stars: 2378
  owner_login: paulpierre
  owner_html_url: https://github.com/paulpierre
- name: best-of-web-python
  html_url: https://github.com/ml-tooling/best-of-web-python
  stars: 2374
  owner_login: ml-tooling
  owner_html_url: https://github.com/ml-tooling
- name: fastapi-react
  html_url: https://github.com/Buuntu/fastapi-react
  stars: 2274
  owner_login: Buuntu
  owner_html_url: https://github.com/Buuntu
- name: nextpy
  html_url: https://github.com/dot-agent/nextpy
  stars: 2244
  owner_login: dot-agent
  owner_html_url: https://github.com/dot-agent
- name: 30-Days-of-Python
  html_url: https://github.com/codingforentrepreneurs/30-Days-of-Python
  stars: 2154
  owner_login: codingforentrepreneurs
  owner_html_url: https://github.com/codingforentrepreneurs
- name: FastAPI-template
  html_url: https://github.com/s3rius/FastAPI-template
  stars: 2067
  owner_login: s3rius
  owner_html_url: https://github.com/s3rius
- name: langserve
  html_url: https://github.com/langchain-ai/langserve
  stars: 1980
  owner_login: langchain-ai
  owner_html_url: https://github.com/langchain-ai
- name: sqladmin
  html_url: https://github.com/aminalaee/sqladmin
  stars: 1980
  owner_login: aminalaee
  owner_html_url: https://github.com/aminalaee
- name: fastapi-utils
  html_url: https://github.com/fastapiutils/fastapi-utils
  stars: 1970
  owner_login: fastapiutils
  owner_html_url: https://github.com/fastapiutils
- name: solara
  html_url: https://github.com/widgetti/solara
  stars: 1950
  owner_login: widgetti
  owner_html_url: https://github.com/widgetti
- name: python-week-2022
  html_url: https://github.com/rochacbruno/python-week-2022
  stars: 1836
  owner_login: rochacbruno
  owner_html_url: https://github.com/rochacbruno
- name: supabase-py
  html_url: https://github.com/supabase/supabase-py
  stars: 1803
  owner_login: supabase
  owner_html_url: https://github.com/supabase
- name: mangum
  html_url: https://github.com/Kludex/mangum
  stars: 1760
  owner_login: Kludex
  owner_html_url: https://github.com/Kludex
- name: manage-fastapi
  html_url: https://github.com/ycd/manage-fastapi
  stars: 1704
  owner_login: ycd
  owner_html_url: https://github.com/ycd
- name: ormar
  html_url: https://github.com/collerek/ormar
  stars: 1688
  owner_login: collerek
  owner_html_url: https://github.com/collerek
- name: agentkit
  html_url: https://github.com/BCG-X-Official/agentkit
  stars: 1615
  owner_login: BCG-X-Official
  owner_html_url: https://github.com/BCG-X-Official
- name: langchain-serve
  html_url: https://github.com/jina-ai/langchain-serve
  stars: 1615
  owner_login: jina-ai
  owner_html_url: https://github.com/jina-ai
- name: termpair
  html_url: https://github.com/cs01/termpair
  stars: 1613
  owner_login: cs01
  owner_html_url: https://github.com/cs01
- name: coronavirus-tracker-api
  html_url: https://github.com/ExpDev07/coronavirus-tracker-api
  stars: 1591
  owner_login: ExpDev07
  owner_html_url: https://github.com/ExpDev07
- name: piccolo
  html_url: https://github.com/piccolo-orm/piccolo
  stars: 1477
  owner_login: piccolo-orm
  owner_html_url: https://github.com/piccolo-orm
- name: fastapi-crudrouter
  html_url: https://github.com/awtkns/fastapi-crudrouter
  stars: 1435
  owner_login: awtkns
  owner_html_url: https://github.com/awtkns
- name: fastapi-cache
  html_url: https://github.com/long2ice/fastapi-cache
  stars: 1412
  owner_login: long2ice
  owner_html_url: https://github.com/long2ice
- name: openapi-python-client
  html_url: https://github.com/openapi-generators/openapi-python-client
  stars: 1398
  owner_login: openapi-generators
  owner_html_url: https://github.com/openapi-generators
- name: awesome-fastapi-projects
  html_url: https://github.com/Kludex/awesome-fastapi-projects
  stars: 1386
  owner_login: Kludex
  owner_html_url: https://github.com/Kludex
- name: awesome-python-resources
  html_url: https://github.com/DjangoEx/awesome-python-resources
  stars: 1371
  owner_login: DjangoEx
  owner_html_url: https://github.com/DjangoEx
- name: budgetml
  html_url: https://github.com/ebhy/budgetml
  stars: 1342
  owner_login: ebhy
  owner_html_url: https://github.com/ebhy
- name: slowapi
  html_url: https://github.com/laurentS/slowapi
  stars: 1289
  owner_login: laurentS
  owner_html_url: https://github.com/laurentS
- name: fastapi-pagination
  html_url: https://github.com/uriyyo/fastapi-pagination
  stars: 1240
  owner_login: uriyyo
  owner_html_url: https://github.com/uriyyo
- name: fastapi-boilerplate
  html_url: https://github.com/teamhide/fastapi-boilerplate
  stars: 1173
  owner_login: teamhide
  owner_html_url: https://github.com/teamhide
- name: fastapi-tutorial
  html_url: https://github.com/liaogx/fastapi-tutorial
  stars: 1162
  owner_login: liaogx
  owner_html_url: https://github.com/liaogx
- name: fastapi-amis-admin
  html_url: https://github.com/amisadmin/fastapi-amis-admin
  stars: 1118
  owner_login: amisadmin
  owner_html_url: https://github.com/amisadmin
- name: fastapi-code-generator
  html_url: https://github.com/koxudaxi/fastapi-code-generator
  stars: 1095
  owner_login: koxudaxi
  owner_html_url: https://github.com/koxudaxi
- name: bolt-python
  html_url: https://github.com/slackapi/bolt-python
  stars: 1086
  owner_login: slackapi
  owner_html_url: https://github.com/slackapi
- name: odmantic
  html_url: https://github.com/art049/odmantic
  stars: 1085
  owner_login: art049
  owner_html_url: https://github.com/art049
- name: langchain-extract
  html_url: https://github.com/langchain-ai/langchain-extract
  stars: 1068
  owner_login: langchain-ai
  owner_html_url: https://github.com/langchain-ai
- name: fastapi_production_template
  html_url: https://github.com/zhanymkanov/fastapi_production_template
  stars: 1059
  owner_login: zhanymkanov
  owner_html_url: https://github.com/zhanymkanov
- name: fastapi-alembic-sqlmodel-async
  html_url: https://github.com/jonra1993/fastapi-alembic-sqlmodel-async
  stars: 1031
  owner_login: jonra1993
  owner_html_url: https://github.com/jonra1993
- name: prometheus-fastapi-instrumentator
  html_url: https://github.com/trallnag/prometheus-fastapi-instrumentator
  stars: 1013
  owner_login: trallnag
  owner_html_url: https://github.com/trallnag
- name: runhouse
  html_url: https://github.com/run-house/runhouse
  stars: 988
  owner_login: run-house
  owner_html_url: https://github.com/run-house
- name: lanarky
  html_url: https://github.com/ajndkr/lanarky
  stars: 982
  owner_login: ajndkr
  owner_html_url: https://github.com/ajndkr
- name: autollm
  html_url: https://github.com/viddexa/autollm
  stars: 981
  owner_login: viddexa
  owner_html_url: https://github.com/viddexa
- name: bedrock-claude-chat
  html_url: https://github.com/aws-samples/bedrock-claude-chat
  stars: 977
  owner_login: aws-samples
  owner_html_url: https://github.com/aws-samples
- name: SurfSense
  html_url: https://github.com/MODSetter/SurfSense
  stars: 971
  owner_login: MODSetter
  owner_html_url: https://github.com/MODSetter
- name: restish
  html_url: https://github.com/danielgtaylor/restish
  stars: 954
  owner_login: danielgtaylor
  owner_html_url: https://github.com/danielgtaylor
- name: secure
  html_url: https://github.com/TypeError/secure
  stars: 911
  owner_login: TypeError
  owner_html_url: https://github.com/TypeError
- name: langcorn
  html_url: https://github.com/msoedov/langcorn
  stars: 909
  owner_login: msoedov
  owner_html_url: https://github.com/msoedov
- name: energy-forecasting
  html_url: https://github.com/iusztinpaul/energy-forecasting
  stars: 884
  owner_login: iusztinpaul
  owner_html_url: https://github.com/iusztinpaul
- name: vue-fastapi-admin
  html_url: https://github.com/mizhexiaoxiao/vue-fastapi-admin
  stars: 863
  owner_login: mizhexiaoxiao
  owner_html_url: https://github.com/mizhexiaoxiao
- name: authx
  html_url: https://github.com/yezz123/authx
  stars: 850
  owner_login: yezz123
  owner_html_url: https://github.com/yezz123
- name: titiler
  html_url: https://github.com/developmentseed/titiler
  stars: 809
  owner_login: developmentseed
  owner_html_url: https://github.com/developmentseed
- name: marker-api
  html_url: https://github.com/adithya-s-k/marker-api
  stars: 792
  owner_login: adithya-s-k
  owner_html_url: https://github.com/adithya-s-k
- name: fastapi_best_architecture
  html_url: https://github.com/fastapi-practices/fastapi_best_architecture
  stars: 742
  owner_login: fastapi-practices
  owner_html_url: https://github.com/fastapi-practices
- name: fastapi-mail
  html_url: https://github.com/sabuhish/fastapi-mail
  stars: 728
  owner_login: sabuhish
  owner_html_url: https://github.com/sabuhish
- name: fastcrud
  html_url: https://github.com/igorbenav/fastcrud
  stars: 727
  owner_login: igorbenav
  owner_html_url: https://github.com/igorbenav
- name: annotated-py-projects
  html_url: https://github.com/hhstore/annotated-py-projects
  stars: 722
  owner_login: hhstore
  owner_html_url: https://github.com/hhstore
- name: FastAPI-boilerplate
  html_url: https://github.com/igorbenav/FastAPI-boilerplate
  stars: 716
  owner_login: igorbenav
  owner_html_url: https://github.com/igorbenav
- name: lccn_predictor
  html_url: https://github.com/baoliay2008/lccn_predictor
  stars: 707
  owner_login: baoliay2008
  owner_html_url: https://github.com/baoliay2008
- name: chatGPT-web
  html_url: https://github.com/mic1on/chatGPT-web
  stars: 706
  owner_login: mic1on
  owner_html_url: https://github.com/mic1on
- name: fastapi-do-zero
  html_url: https://github.com/dunossauro/fastapi-do-zero
  stars: 702
  owner_login: dunossauro
  owner_html_url: https://github.com/dunossauro
- name: linbing
  html_url: https://github.com/taomujian/linbing
  stars: 699
  owner_login: taomujian
  owner_html_url: https://github.com/taomujian
- name: fastapi-observability
  html_url: https://github.com/blueswen/fastapi-observability
  stars: 698
  owner_login: blueswen
  owner_html_url: https://github.com/blueswen
- name: FastAPI-Backend-Template
  html_url: https://github.com/Aeternalis-Ingenium/FastAPI-Backend-Template
  stars: 682
  owner_login: Aeternalis-Ingenium
  owner_html_url: https://github.com/Aeternalis-Ingenium
- name: learn-generative-ai
  html_url: https://github.com/panaverse/learn-generative-ai
  stars: 673
  owner_login: panaverse
  owner_html_url: https://github.com/panaverse
- name: fastapi-jwt-auth
  html_url: https://github.com/IndominusByte/fastapi-jwt-auth
  stars: 668
  owner_login: IndominusByte
  owner_html_url: https://github.com/IndominusByte
- name: pity
  html_url: https://github.com/wuranxu/pity
  stars: 660
  owner_login: wuranxu
  owner_html_url: https://github.com/wuranxu
- name: starlette-admin
  html_url: https://github.com/jowilf/starlette-admin
  stars: 653
  owner_login: jowilf
  owner_html_url: https://github.com/jowilf
- name: fastapi_login
  html_url: https://github.com/MushroomMaula/fastapi_login
  stars: 650
  owner_login: MushroomMaula
  owner_html_url: https://github.com/MushroomMaula


================================================
File: /docs/en/data/translators.yml
================================================
nilslindemann:
  login: nilslindemann
  count: 120
  avatarUrl: https://avatars.githubusercontent.com/u/6892179?u=1dca6a22195d6cd1ab20737c0e19a4c55d639472&v=4
  url: https://github.com/nilslindemann
jaystone776:
  login: jaystone776
  count: 46
  avatarUrl: https://avatars.githubusercontent.com/u/11191137?u=299205a95e9b6817a43144a48b643346a5aac5cc&v=4
  url: https://github.com/jaystone776
tokusumi:
  login: tokusumi
  count: 23
  avatarUrl: https://avatars.githubusercontent.com/u/41147016?u=55010621aece725aa702270b54fed829b6a1fe60&v=4
  url: https://github.com/tokusumi
SwftAlpc:
  login: SwftAlpc
  count: 23
  avatarUrl: https://avatars.githubusercontent.com/u/52768429?u=6a3aa15277406520ad37f6236e89466ed44bc5b8&v=4
  url: https://github.com/SwftAlpc
hasansezertasan:
  login: hasansezertasan
  count: 22
  avatarUrl: https://avatars.githubusercontent.com/u/13135006?u=99f0b0f0fc47e88e8abb337b4447357939ef93e7&v=4
  url: https://github.com/hasansezertasan
ceb10n:
  login: ceb10n
  count: 22
  avatarUrl: https://avatars.githubusercontent.com/u/235213?u=edcce471814a1eba9f0cdaa4cd0de18921a940a6&v=4
  url: https://github.com/ceb10n
waynerv:
  login: waynerv
  count: 20
  avatarUrl: https://avatars.githubusercontent.com/u/39515546?u=ec35139777597cdbbbddda29bf8b9d4396b429a9&v=4
  url: https://github.com/waynerv
AlertRED:
  login: AlertRED
  count: 16
  avatarUrl: https://avatars.githubusercontent.com/u/15695000?u=f5a4944c6df443030409c88da7d7fa0b7ead985c&v=4
  url: https://github.com/AlertRED
hard-coders:
  login: hard-coders
  count: 15
  avatarUrl: https://avatars.githubusercontent.com/u/9651103?u=95db33927bbff1ed1c07efddeb97ac2ff33068ed&v=4
  url: https://github.com/hard-coders
codingjenny:
  login: codingjenny
  count: 14
  avatarUrl: https://avatars.githubusercontent.com/u/103817302?u=3a042740dc0ff58615da0d8679230966fd7693e8&v=4
  url: https://github.com/codingjenny
Xewus:
  login: Xewus
  count: 13
  avatarUrl: https://avatars.githubusercontent.com/u/85196001?u=f8e2dc7e5104f109cef944af79050ea8d1b8f914&v=4
  url: https://github.com/Xewus
Joao-Pedro-P-Holanda:
  login: Joao-Pedro-P-Holanda
  count: 12
  avatarUrl: https://avatars.githubusercontent.com/u/110267046?u=331bd016326dac4cf3df4848f6db2dbbf8b5f978&v=4
  url: https://github.com/Joao-Pedro-P-Holanda
Smlep:
  login: Smlep
  count: 11
  avatarUrl: https://avatars.githubusercontent.com/u/16785985?u=ffe99fa954c8e774ef1117e58d34aece92051e27&v=4
  url: https://github.com/Smlep
marcelomarkus:
  login: marcelomarkus
  count: 11
  avatarUrl: https://avatars.githubusercontent.com/u/20115018?u=dda090ce9160ef0cd2ff69b1e5ea741283425cba&v=4
  url: https://github.com/marcelomarkus
KaniKim:
  login: KaniKim
  count: 10
  avatarUrl: https://avatars.githubusercontent.com/u/19832624?u=296dbdd490e0eb96e3d45a2608c065603b17dc31&v=4
  url: https://github.com/KaniKim
Vincy1230:
  login: Vincy1230
  count: 9
  avatarUrl: https://avatars.githubusercontent.com/u/81342412?u=ab5e256a4077a4a91f3f9cd2115ba80780454cbe&v=4
  url: https://github.com/Vincy1230
rjNemo:
  login: rjNemo
  count: 8
  avatarUrl: https://avatars.githubusercontent.com/u/56785022?u=d5c3a02567c8649e146fcfc51b6060ccaf8adef8&v=4
  url: https://github.com/rjNemo
xzmeng:
  login: xzmeng
  count: 8
  avatarUrl: https://avatars.githubusercontent.com/u/40202897?v=4
  url: https://github.com/xzmeng
pablocm83:
  login: pablocm83
  count: 8
  avatarUrl: https://avatars.githubusercontent.com/u/28315068?u=3310fbb05bb8bfc50d2c48b6cb64ac9ee4a14549&v=4
  url: https://github.com/pablocm83
Zhongheng-Cheng:
  login: Zhongheng-Cheng
  count: 8
  avatarUrl: https://avatars.githubusercontent.com/u/95612344?u=a0f7730a3cc7486827965e01a119ad610bda4b0a&v=4
  url: https://github.com/Zhongheng-Cheng
batlopes:
  login: batlopes
  count: 6
  avatarUrl: https://avatars.githubusercontent.com/u/33462923?u=0fb3d7acb316764616f11e4947faf080e49ad8d9&v=4
  url: https://github.com/batlopes
lucasbalieiro:
  login: lucasbalieiro
  count: 6
  avatarUrl: https://avatars.githubusercontent.com/u/37416577?u=5a395a69384e7fa0f9840ea32ef963d3f1cd9da4&v=4
  url: https://github.com/lucasbalieiro
Alexandrhub:
  login: Alexandrhub
  count: 6
  avatarUrl: https://avatars.githubusercontent.com/u/119126536?u=9fc0d48f3307817bafecc5861eb2168401a6cb04&v=4
  url: https://github.com/Alexandrhub
Serrones:
  login: Serrones
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/22691749?u=4795b880e13ca33a73e52fc0ef7dc9c60c8fce47&v=4
  url: https://github.com/Serrones
RunningIkkyu:
  login: RunningIkkyu
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/31848542?u=494ecc298e3f26197495bb357ad0f57cfd5f7a32&v=4
  url: https://github.com/RunningIkkyu
Attsun1031:
  login: Attsun1031
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/1175560?v=4
  url: https://github.com/Attsun1031
NinaHwang:
  login: NinaHwang
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/79563565?u=241f2cb6d38a2d379536608a8ea5a22ed4b1a3ea&v=4
  url: https://github.com/NinaHwang
tiangolo:
  login: tiangolo
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/1326112?u=cb5d06e73a9e1998141b1641aa88e443c6717651&v=4
  url: https://github.com/tiangolo
rostik1410:
  login: rostik1410
  count: 5
  avatarUrl: https://avatars.githubusercontent.com/u/11443899?u=e26a635c2ba220467b308a326a579b8ccf4a8701&v=4
  url: https://github.com/rostik1410
komtaki:
  login: komtaki
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/39375566?u=260ad6b1a4b34c07dbfa728da5e586f16f6d1824&v=4
  url: https://github.com/komtaki
JulianMaurin:
  login: JulianMaurin
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/63545168?u=b7d15ac865268cbefc2d739e2f23d9aeeac1a622&v=4
  url: https://github.com/JulianMaurin
stlucasgarcia:
  login: stlucasgarcia
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/61513630?u=c22d8850e9dc396a8820766a59837f967e14f9a0&v=4
  url: https://github.com/stlucasgarcia
ComicShrimp:
  login: ComicShrimp
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/43503750?u=d2fbf412e7730183ce91686ca48d4147e1b7dc74&v=4
  url: https://github.com/ComicShrimp
BilalAlpaslan:
  login: BilalAlpaslan
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/47563997?u=63ed66e304fe8d765762c70587d61d9196e5c82d&v=4
  url: https://github.com/BilalAlpaslan
axel584:
  login: axel584
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/1334088?u=9667041f5b15dc002b6f9665fda8c0412933ac04&v=4
  url: https://github.com/axel584
tamtam-fitness:
  login: tamtam-fitness
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/62091034?u=8da19a6bd3d02f5d6ba30c7247d5b46c98dd1403&v=4
  url: https://github.com/tamtam-fitness
Limsunoh:
  login: Limsunoh
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/90311848?u=f456e0c5709fd50c8cd2898b551558eda14e5f21&v=4
  url: https://github.com/Limsunoh
kwang1215:
  login: kwang1215
  count: 4
  avatarUrl: https://avatars.githubusercontent.com/u/74170199?u=2a63ff6692119dde3f5e5693365b9fcd6f977b08&v=4
  url: https://github.com/kwang1215
jfunez:
  login: jfunez
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/805749?v=4
  url: https://github.com/jfunez
ycd:
  login: ycd
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/62724709?u=29682e4b6ac7d5293742ccf818188394b9a82972&v=4
  url: https://github.com/ycd
mariacamilagl:
  login: mariacamilagl
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/11489395?u=4adb6986bf3debfc2b8216ae701f2bd47d73da7d&v=4
  url: https://github.com/mariacamilagl
maoyibo:
  login: maoyibo
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/7887703?v=4
  url: https://github.com/maoyibo
blt232018:
  login: blt232018
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/43393471?u=172b0e0391db1aa6c1706498d6dfcb003c8a4857&v=4
  url: https://github.com/blt232018
magiskboy:
  login: magiskboy
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/13352088?u=18b6d672523f9e9d98401f31dd50e28bb27d826f&v=4
  url: https://github.com/magiskboy
luccasmmg:
  login: luccasmmg
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/11317382?u=65099a5a0d492b89119471f8a7014637cc2e04da&v=4
  url: https://github.com/luccasmmg
lbmendes:
  login: lbmendes
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/80999926?u=646619e2f07ac5a7c3f65fe7834197461a4fff9f&v=4
  url: https://github.com/lbmendes
Zssaer:
  login: Zssaer
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/45691504?u=4c0c195f25cb5ac6af32acfb0ab35427682938d2&v=4
  url: https://github.com/Zssaer
wdh99:
  login: wdh99
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/108172295?u=8a8fb95d5afe3e0fa33257b2aecae88d436249eb&v=4
  url: https://github.com/wdh99
ChuyuChoyeon:
  login: ChuyuChoyeon
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/129537877?u=f0c76f3327817a8b86b422d62e04a34bf2827f2b&v=4
  url: https://github.com/ChuyuChoyeon
ivan-abc:
  login: ivan-abc
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/36765187?u=c6e0ba571c1ccb6db9d94e62e4b8b5eda811a870&v=4
  url: https://github.com/ivan-abc
mojtabapaso:
  login: mojtabapaso
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/121169359?u=ced1d5ad673bcd9e949ebf967a4ab50185637443&v=4
  url: https://github.com/mojtabapaso
hsuanchi:
  login: hsuanchi
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/24913710?u=0b094ae292292fee093818e37ceb645c114d2bff&v=4
  url: https://github.com/hsuanchi
alejsdev:
  login: alejsdev
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/90076947?u=356f39ff3f0211c720b06d3dbb060e98884085e3&v=4
  url: https://github.com/alejsdev
riroan:
  login: riroan
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/33053284?u=2d18e3771506ee874b66d6aa2b3b1107fd95c38f&v=4
  url: https://github.com/riroan
nayeonkinn:
  login: nayeonkinn
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/98254573?u=64a75ac99b320d4935eff8d1fceea9680fa07473&v=4
  url: https://github.com/nayeonkinn
pe-brian:
  login: pe-brian
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/1783138?u=7e6242eb9e85bcf673fa88bbac9dd6dc3f03b1b5&v=4
  url: https://github.com/pe-brian
maxscheijen:
  login: maxscheijen
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/47034840?u=eb98f37882528ea349ca4e5255fa64ac3fef0294&v=4
  url: https://github.com/maxscheijen
ilacftemp:
  login: ilacftemp
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/159066669?v=4
  url: https://github.com/ilacftemp
devluisrodrigues:
  login: devluisrodrigues
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/103431660?u=d9674a3249edc4601d2c712cdebf899918503c3a&v=4
  url: https://github.com/devluisrodrigues
devfernandoa:
  login: devfernandoa
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/28360583?u=c4308abd62e8847c9e572e1bb9fe6b9dc9ef8e50&v=4
  url: https://github.com/devfernandoa
kim-sangah:
  login: kim-sangah
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/173775778?v=4
  url: https://github.com/kim-sangah
9zimin9:
  login: 9zimin9
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/174453744?v=4
  url: https://github.com/9zimin9
nahyunkeem:
  login: nahyunkeem
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/174440096?u=e12401d492eee58570f8914d0872b52e421a776e&v=4
  url: https://github.com/nahyunkeem
alv2017:
  login: alv2017
  count: 3
  avatarUrl: https://avatars.githubusercontent.com/u/31544722?v=4
  url: https://github.com/alv2017
izaguerreiro:
  login: izaguerreiro
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/2241504?v=4
  url: https://github.com/izaguerreiro
Xaraxx:
  login: Xaraxx
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/29824698?u=dde2e233e22bb5ca1f8bb0c6e353ccd0d06e6066&v=4
  url: https://github.com/Xaraxx
sh0nk:
  login: sh0nk
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/6478810?u=af15d724875cec682ed8088a86d36b2798f981c0&v=4
  url: https://github.com/sh0nk
dukkee:
  login: dukkee
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/36825394?u=ccfd86e6a4f2d093dad6f7544cc875af67fa2df8&v=4
  url: https://github.com/dukkee
oandersonmagalhaes:
  login: oandersonmagalhaes
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/83456692?v=4
  url: https://github.com/oandersonmagalhaes
leandrodesouzadev:
  login: leandrodesouzadev
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/85115541?u=4eb25f43f1fe23727d61e986cf83b73b86e2a95a&v=4
  url: https://github.com/leandrodesouzadev
kty4119:
  login: kty4119
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/49435654?v=4
  url: https://github.com/kty4119
ASpathfinder:
  login: ASpathfinder
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/31813636?u=2090bd1b7abb65cfeff0c618f99f11afa82c0548&v=4
  url: https://github.com/ASpathfinder
jujumilk3:
  login: jujumilk3
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/41659814?u=538f7dfef03b59f25e43f10d59a31c19ef538a0c&v=4
  url: https://github.com/jujumilk3
ayr-ton:
  login: ayr-ton
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1090517?u=5cf70a0e0f0dbf084e074e494aa94d7c91a46ba6&v=4
  url: https://github.com/ayr-ton
KdHyeon0661:
  login: KdHyeon0661
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/20253352?u=5ae1aae34b091a39f22cbe60a02b79dcbdbea031&v=4
  url: https://github.com/KdHyeon0661
LorhanSohaky:
  login: LorhanSohaky
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/16273730?u=095b66f243a2cd6a0aadba9a095009f8aaf18393&v=4
  url: https://github.com/LorhanSohaky
cfraboulet:
  login: cfraboulet
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/62244267?u=ed0e286ba48fa1dafd64a08e50f3364b8e12df34&v=4
  url: https://github.com/cfraboulet
dedkot01:
  login: dedkot01
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/26196675?u=e2966887124e67932853df4f10f86cb526edc7b0&v=4
  url: https://github.com/dedkot01
AGolicyn:
  login: AGolicyn
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/86262613?u=3c21606ab8d210a061a1673decff1e7d5592b380&v=4
  url: https://github.com/AGolicyn
fhabers21:
  login: fhabers21
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/58401847?v=4
  url: https://github.com/fhabers21
TabarakoAkula:
  login: TabarakoAkula
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/113298631?u=add801e370dbc502cd94ce6d3484760d7fef5406&v=4
  url: https://github.com/TabarakoAkula
AhsanSheraz:
  login: AhsanSheraz
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/51913596?u=08e31cacb3048be30722c94010ddd028f3fdbec4&v=4
  url: https://github.com/AhsanSheraz
ArtemKhymenko:
  login: ArtemKhymenko
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/14346625?u=f2fa553d9e5ec5e0f05d66bd649f7be347169631&v=4
  url: https://github.com/ArtemKhymenko
hasnatsajid:
  login: hasnatsajid
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/86589885?u=49958789e6385be624f2c6a55a860c599eb05e2c&v=4
  url: https://github.com/hasnatsajid
alperiox:
  login: alperiox
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/34214152?u=2c5acad3461d4dbc2d48371ba86cac56ae9b25cc&v=4
  url: https://github.com/alperiox
emrhnsyts:
  login: emrhnsyts
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/42899027?u=ad26798e3f8feed2041c5dd5f87e58933d6c3283&v=4
  url: https://github.com/emrhnsyts
vusallyv:
  login: vusallyv
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/85983771?u=53a7b755cb338d9313966dbf2e4e68b512565186&v=4
  url: https://github.com/vusallyv
jackleeio:
  login: jackleeio
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/20477587?u=c5184dab6d021733d10c8f975b20e391856303d6&v=4
  url: https://github.com/jackleeio
choi-haram:
  login: choi-haram
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/62204475?v=4
  url: https://github.com/choi-haram
imtiaz101325:
  login: imtiaz101325
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/54007087?u=7a210ee38a0a30b7536226419b3b799620ad57d9&v=4
  url: https://github.com/imtiaz101325
waketzheng:
  login: waketzheng
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/35413830?u=df19e4fd5bb928e7d086e053ef26a46aad23bf84&v=4
  url: https://github.com/waketzheng
billzhong:
  login: billzhong
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1644011?v=4
  url: https://github.com/billzhong
chaoless:
  login: chaoless
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/64477804?v=4
  url: https://github.com/chaoless
logan2d5:
  login: logan2d5
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/146642263?u=dbd6621f8b0330d6919f6a7131277b92e26fbe87&v=4
  url: https://github.com/logan2d5
andersonrocha0:
  login: andersonrocha0
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/22346169?u=93a1359c8c5461d894802c0cc65bcd09217e7a02&v=4
  url: https://github.com/andersonrocha0
saeye:
  login: saeye
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/62229734?v=4
  url: https://github.com/saeye
timothy-jeong:
  login: timothy-jeong
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/53824764?u=659311b6f6aeb0fbb8b527723fd4c83642f04327&v=4
  url: https://github.com/timothy-jeong
gerry-sabar:
  login: gerry-sabar
  count: 2
  avatarUrl: https://avatars.githubusercontent.com/u/1120123?v=4
  url: https://github.com/gerry-sabar


================================================
File: /docs/en/docs/alternatives.md
================================================
# Alternatives, Inspiration and Comparisons

What inspired **FastAPI**, how it compares to alternatives and what it learned from them.

## Intro

**FastAPI** wouldn't exist if not for the previous work of others.

There have been many tools created before that have helped inspire its creation.

I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by **FastAPI** using many different frameworks, plug-ins, and tools.

But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).

## Previous tools

### <a href="https://www.djangoproject.com/" class="external-link" target="_blank">Django</a>

It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram.

It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy.

It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like <abbr title="Internet of Things">IoT</abbr> devices) communicating with it.

### <a href="https://www.django-rest-framework.org/" class="external-link" target="_blank">Django REST Framework</a>

Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities.

It is used by many companies including Mozilla, Red Hat and Eventbrite.

It was one of the first examples of **automatic API documentation**, and this was specifically one of the first ideas that inspired "the search for" **FastAPI**.

/// note

Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which **FastAPI** is based.

///

/// check | Inspired **FastAPI** to

Have an automatic API documentation web user interface.

///

### <a href="https://flask.palletsprojects.com" class="external-link" target="_blank">Flask</a>

Flask is a "microframework", it doesn't include database integrations nor many of the things that come by default in Django.

This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system.

As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points.

It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins.

This decoupling of parts, and being a "microframework" that could be extended to cover exactly what is needed was a key feature that I wanted to keep.

Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a "Django REST Framework" for Flask.

/// check | Inspired **FastAPI** to

Be a micro-framework. Making it easy to mix and match the tools and parts needed.

Have a simple and easy to use routing system.

///

### <a href="https://requests.readthedocs.io" class="external-link" target="_blank">Requests</a>

**FastAPI** is not actually an alternative to **Requests**. Their scope is very different.

It would actually be common to use Requests *inside* of a FastAPI application.

But still, FastAPI got quite some inspiration from Requests.

**Requests** is a library to *interact* with APIs (as a client), while **FastAPI** is a library to *build* APIs (as a server).

They are, more or less, at opposite ends, complementing each other.

Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable.

That's why, as said in the official website:

> Requests is one of the most downloaded Python packages of all time

The way you use it is very simple. For example, to do a `GET` request, you would write:

```Python
response = requests.get("http://example.com/some/url")
```

The FastAPI counterpart API *path operation* could look like:

```Python hl_lines="1"
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

See the similarities in `requests.get(...)` and `@app.get(...)`.

/// check | Inspired **FastAPI** to

* Have a simple and intuitive API.
* Use HTTP method names (operations) directly, in a straightforward and intuitive way.
* Have sensible defaults, but powerful customizations.

///

### <a href="https://swagger.io/" class="external-link" target="_blank">Swagger</a> / <a href="https://github.com/OAI/OpenAPI-Specification/" class="external-link" target="_blank">OpenAPI</a>

The main feature I wanted from Django REST Framework was the automatic API documentation.

Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger.

And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically.

At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI.

That's why when talking about version 2.0 it's common to say "Swagger", and for version 3+ "OpenAPI".

/// check | Inspired **FastAPI** to

Adopt and use an open standard for API specifications, instead of a custom schema.

And integrate standards-based user interface tools:

* <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a>
* <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a>

These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of alternative user interfaces for OpenAPI (that you can use with **FastAPI**).

///

### Flask REST frameworks

There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit.

### <a href="https://marshmallow.readthedocs.io/en/stable/" class="external-link" target="_blank">Marshmallow</a>

One of the main features needed by API systems is data "<abbr title="also called marshalling, conversion">serialization</abbr>" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting `datetime` objects into strings, etc.

Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an `int`, and not some random string. This is especially useful for incoming data.

Without a data validation system, you would have to do all the checks by hand, in code.

These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before.

But it was created before there existed Python type hints. So, to define every <abbr title="the definition of how data should be formed">schema</abbr> you need to use specific utils and classes provided by Marshmallow.

/// check | Inspired **FastAPI** to

Use code to define "schemas" that provide data types and validation, automatically.

///

### <a href="https://webargs.readthedocs.io/en/latest/" class="external-link" target="_blank">Webargs</a>

Another big feature required by APIs is <abbr title="reading and converting to Python data">parsing</abbr> data from incoming requests.

Webargs is a tool that was made to provide that on top of several frameworks, including Flask.

It uses Marshmallow underneath to do the data validation. And it was created by the same developers.

It's a great tool and I have used it a lot too, before having **FastAPI**.

/// info

Webargs was created by the same Marshmallow developers.

///

/// check | Inspired **FastAPI** to

Have automatic validation of incoming request data.

///

### <a href="https://apispec.readthedocs.io/en/stable/" class="external-link" target="_blank">APISpec</a>

Marshmallow and Webargs provide validation, parsing and serialization as plug-ins.

But documentation is still missing. Then APISpec was created.

It is a plug-in for many frameworks (and there's a plug-in for Starlette too).

The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route.

And it generates OpenAPI schemas.

That's how it works in Flask, Starlette, Responder, etc.

But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML).

The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete.

/// info

APISpec was created by the same Marshmallow developers.

///

/// check | Inspired **FastAPI** to

Support the open standard for APIs, OpenAPI.

///

### <a href="https://flask-apispec.readthedocs.io/en/latest/" class="external-link" target="_blank">Flask-apispec</a>

It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec.

It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec.

It's a great tool, very underrated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract.

This solved having to write YAML (another syntax) inside of Python docstrings.

This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building **FastAPI**.

Using it led to the creation of several Flask full-stack generators. These are the main stacks I (and several external teams) have been using up to now:

* <a href="https://github.com/tiangolo/full-stack" class="external-link" target="_blank">https://github.com/tiangolo/full-stack</a>
* <a href="https://github.com/tiangolo/full-stack-flask-couchbase" class="external-link" target="_blank">https://github.com/tiangolo/full-stack-flask-couchbase</a>
* <a href="https://github.com/tiangolo/full-stack-flask-couchdb" class="external-link" target="_blank">https://github.com/tiangolo/full-stack-flask-couchdb</a>

And these same full-stack generators were the base of the [**FastAPI** Project Generators](project-generation.md){.internal-link target=_blank}.

/// info

Flask-apispec was created by the same Marshmallow developers.

///

/// check | Inspired **FastAPI** to

Generate the OpenAPI schema automatically, from the same code that defines serialization and validation.

///

### <a href="https://nestjs.com/" class="external-link" target="_blank">NestJS</a> (and <a href="https://angular.io/" class="external-link" target="_blank">Angular</a>)

This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular.

It achieves something somewhat similar to what can be done with Flask-apispec.

It has an integrated dependency injection system, inspired by Angular 2. It requires pre-registering the "injectables" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition.

As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good.

But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose.

It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated.

/// check | Inspired **FastAPI** to

Use Python types to have great editor support.

Have a powerful dependency injection system. Find a way to minimize code repetition.

///

### <a href="https://sanic.readthedocs.io/en/latest/" class="external-link" target="_blank">Sanic</a>

It was one of the first extremely fast Python frameworks based on `asyncio`. It was made to be very similar to Flask.

/// note | Technical Details

It used <a href="https://github.com/MagicStack/uvloop" class="external-link" target="_blank">`uvloop`</a> instead of the default Python `asyncio` loop. That's what made it so fast.

It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks.

///

/// check | Inspired **FastAPI** to

Find a way to have a crazy performance.

That's why **FastAPI** is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks).

///

### <a href="https://falconframework.org/" class="external-link" target="_blank">Falcon</a>

Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug.

It is designed to have functions that receive two parameters, one "request" and one "response". Then you "read" parts from the request, and "write" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters.

So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters.

/// check | Inspired **FastAPI** to

Find ways to get great performance.

Along with Hug (as Hug is based on Falcon) inspired **FastAPI** to declare a `response` parameter in functions.

Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes.

///

### <a href="https://moltenframework.com/" class="external-link" target="_blank">Molten</a>

I discovered Molten in the first stages of building **FastAPI**. And it has quite similar ideas:

* Based on Python type hints.
* Validation and documentation from these types.
* Dependency Injection system.

It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily.

It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high performance provided by tools like Uvicorn, Starlette and Sanic.

The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one "component" that provides a certain type.

Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled.

/// check | Inspired **FastAPI** to

Define extra validations for data types using the "default" value of model attributes. This improves editor support, and it was not available in Pydantic before.

This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic).

///

### <a href="https://github.com/hugapi/hug" class="external-link" target="_blank">Hug</a>

Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same.

It used custom types in its declarations instead of standard Python types, but it was still a huge step forward.

It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON.

It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea.

It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs.

As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too.

/// info

Hug was created by Timothy Crosley, the same creator of <a href="https://github.com/timothycrosley/isort" class="external-link" target="_blank">`isort`</a>, a great tool to automatically sort imports in Python files.

///

/// check | Ideas inspiring **FastAPI**

Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar.

Hug helped inspiring **FastAPI** to use Python type hints to declare parameters, and to generate a schema defining the API automatically.

Hug inspired **FastAPI** to declare a `response` parameter in functions to set headers and cookies.

///

### <a href="https://github.com/encode/apistar" class="external-link" target="_blank">APIStar</a> (<= 0.5)

Right before deciding to build **FastAPI** I found **APIStar** server. It had almost everything I was looking for and had a great design.

It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard.

It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places.

Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option.

It had the best performance benchmarks at the time (only surpassed by Starlette).

At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it.

It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature.

I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality.

But then, the project's focus shifted.

It was no longer an API web framework, as the creator needed to focus on Starlette.

Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework.

/// info

APIStar was created by Tom Christie. The same guy that created:

* Django REST Framework
* Starlette (in which **FastAPI** is based)
* Uvicorn (used by Starlette and **FastAPI**)

///

/// check | Inspired **FastAPI** to

Exist.

The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea.

And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available.

Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build **FastAPI**.

I consider **FastAPI** a "spiritual successor" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools.

///

## Used by **FastAPI**

### <a href="https://docs.pydantic.dev/" class="external-link" target="_blank">Pydantic</a>

Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints.

That makes it extremely intuitive.

It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great.

/// check | **FastAPI** uses it to

Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema).

**FastAPI** then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does.

///

### <a href="https://www.starlette.io/" class="external-link" target="_blank">Starlette</a>

Starlette is a lightweight <abbr title="The new standard for building asynchronous Python web applications">ASGI</abbr> framework/toolkit, which is ideal for building high-performance asyncio services.

It is very simple and intuitive. It's designed to be easily extensible, and have modular components.

It has:

* Seriously impressive performance.
* WebSocket support.
* In-process background tasks.
* Startup and shutdown events.
* Test client built on HTTPX.
* CORS, GZip, Static Files, Streaming responses.
* Session and Cookie support.
* 100% test coverage.
* 100% type annotated codebase.
* Few hard dependencies.

Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server.

Starlette provides all the basic web microframework functionality.

But it doesn't provide automatic data validation, serialization or documentation.

That's one of the main things that **FastAPI** adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc.

/// note | Technical Details

ASGI is a new "standard" being developed by Django core team members. It is still not a "Python standard" (a PEP), although they are in the process of doing that.

Nevertheless, it is already being used as a "standard" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like `python-socketio`.

///

/// check | **FastAPI** uses it to

Handle all the core web parts. Adding features on top.

The class `FastAPI` itself inherits directly from the class `Starlette`.

So, anything that you can do with Starlette, you can do it directly with **FastAPI**, as it is basically Starlette on steroids.

///

### <a href="https://www.uvicorn.org/" class="external-link" target="_blank">Uvicorn</a>

Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools.

It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or **FastAPI**) would provide on top.

It is the recommended server for Starlette and **FastAPI**.

/// check | **FastAPI** recommends it as

The main web server to run **FastAPI** applications.

You can also use the `--workers` command line option to have an asynchronous multi-process server.

Check more details in the [Deployment](deployment/index.md){.internal-link target=_blank} section.

///

## Benchmarks and speed

To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about [Benchmarks](benchmarks.md){.internal-link target=_blank}.


================================================
File: /docs/en/docs/async.md
================================================
# Concurrency and async / await

Details about the `async def` syntax for *path operation functions* and some background about asynchronous code, concurrency, and parallelism.

## In a hurry?

<abbr title="too long; didn't read"><strong>TL;DR:</strong></abbr>

If you are using third party libraries that tell you to call them with `await`, like:

```Python
results = await some_library()
```

Then, declare your *path operation functions* with `async def` like:

```Python hl_lines="2"
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

/// note

You can only use `await` inside of functions created with `async def`.

///

---

If you are using a third party library that communicates with something (a database, an API, the file system, etc.) and doesn't have support for using `await`, (this is currently the case for most database libraries), then declare your *path operation functions* as normally, with just `def`, like:

```Python hl_lines="2"
@app.get('/')
def results():
    results = some_library()
    return results
```

---

If your application (somehow) doesn't have to communicate with anything else and wait for it to respond, use `async def`.

---

If you just don't know, use normal `def`.

---

**Note**: You can mix `def` and `async def` in your *path operation functions* as much as you need and define each one using the best option for you. FastAPI will do the right thing with them.

Anyway, in any of the cases above, FastAPI will still work asynchronously and be extremely fast.

But by following the steps above, it will be able to do some performance optimizations.

## Technical Details

Modern versions of Python have support for **"asynchronous code"** using something called **"coroutines"**, with **`async` and `await`** syntax.

Let's see that phrase by parts in the sections below:

* **Asynchronous Code**
* **`async` and `await`**
* **Coroutines**

## Asynchronous Code

Asynchronous code just means that the language 💬 has a way to tell the computer / program 🤖 that at some point in the code, it 🤖 will have to wait for *something else* to finish somewhere else. Let's say that *something else* is called "slow-file" 📝.

So, during that time, the computer can go and do some other work, while "slow-file" 📝 finishes.

Then the computer / program 🤖 will come back every time it has a chance because it's waiting again, or whenever it 🤖 finished all the work it had at that point. And it 🤖 will see if any of the tasks it was waiting for have already finished, doing whatever it had to do.

Next, it 🤖 takes the first task to finish (let's say, our "slow-file" 📝) and continues whatever it had to do with it.

That "wait for something else" normally refers to <abbr title="Input and Output">I/O</abbr> operations that are relatively "slow" (compared to the speed of the processor and the RAM memory), like waiting for:

* the data from the client to be sent through the network
* the data sent by your program to be received by the client through the network
* the contents of a file in the disk to be read by the system and given to your program
* the contents your program gave to the system to be written to disk
* a remote API operation
* a database operation to finish
* a database query to return the results
* etc.

As the execution time is consumed mostly by waiting for <abbr title="Input and Output">I/O</abbr> operations, they call them "I/O bound" operations.

It's called "asynchronous" because the computer / program doesn't have to be "synchronized" with the slow task, waiting for the exact moment that the task finishes, while doing nothing, to be able to take the task result and continue the work.

Instead of that, by being an "asynchronous" system, once finished, the task can wait in line a little bit (some microseconds) for the computer / program to finish whatever it went to do, and then come back to take the results and continue working with them.

For "synchronous" (contrary to "asynchronous") they commonly also use the term "sequential", because the computer / program follows all the steps in sequence before switching to a different task, even if those steps involve waiting.

### Concurrency and Burgers

This idea of **asynchronous** code described above is also sometimes called **"concurrency"**. It is different from **"parallelism"**.

**Concurrency** and **parallelism** both relate to "different things happening more or less at the same time".

But the details between *concurrency* and *parallelism* are quite different.

To see the difference, imagine the following story about burgers:

### Concurrent Burgers

You go with your crush to get fast food, you stand in line while the cashier takes the orders from the people in front of you. 😍

<img src="/img/async/concurrent-burgers/concurrent-burgers-01.png" class="illustration">

Then it's your turn, you place your order of 2 very fancy burgers for your crush and you. 🍔🍔

<img src="/img/async/concurrent-burgers/concurrent-burgers-02.png" class="illustration">

The cashier says something to the cook in the kitchen so they know they have to prepare your burgers (even though they are currently preparing the ones for the previous clients).

<img src="/img/async/concurrent-burgers/concurrent-burgers-03.png" class="illustration">

You pay. 💸

The cashier gives you the number of your turn.

<img src="/img/async/concurrent-burgers/concurrent-burgers-04.png" class="illustration">

While you are waiting, you go with your crush and pick a table, you sit and talk with your crush for a long time (as your burgers are very fancy and take some time to prepare).

As you are sitting at the table with your crush, while you wait for the burgers, you can spend that time admiring how awesome, cute and smart your crush is ✨😍✨.

<img src="/img/async/concurrent-burgers/concurrent-burgers-05.png" class="illustration">

While waiting and talking to your crush, from time to time, you check the number displayed on the counter to see if it's your turn already.

Then at some point, it finally is your turn. You go to the counter, get your burgers and come back to the table.

<img src="/img/async/concurrent-burgers/concurrent-burgers-06.png" class="illustration">

You and your crush eat the burgers and have a nice time. ✨

<img src="/img/async/concurrent-burgers/concurrent-burgers-07.png" class="illustration">

/// info

Beautiful illustrations by <a href="https://www.instagram.com/ketrinadrawsalot" class="external-link" target="_blank">Ketrina Thompson</a>. 🎨

///

---

Imagine you are the computer / program 🤖 in that story.

While you are at the line, you are just idle 😴, waiting for your turn, not doing anything very "productive". But the line is fast because the cashier is only taking the orders (not preparing them), so that's fine.

Then, when it's your turn, you do actual "productive" work, you process the menu, decide what you want, get your crush's choice, pay, check that you give the correct bill or card, check that you are charged correctly, check that the order has the correct items, etc.

But then, even though you still don't have your burgers, your work with the cashier is "on pause" ⏸, because you have to wait 🕙 for your burgers to be ready.

But as you go away from the counter and sit at the table with a number for your turn, you can switch 🔀 your attention to your crush, and "work" ⏯ 🤓 on that. Then you are again doing something very "productive" as is flirting with your crush 😍.

Then the cashier 💁 says "I'm finished with doing the burgers" by putting your number on the counter's display, but you don't jump like crazy immediately when the displayed number changes to your turn number. You know no one will steal your burgers because you have the number of your turn, and they have theirs.

So you wait for your crush to finish the story (finish the current work ⏯ / task being processed 🤓), smile gently and say that you are going for the burgers ⏸.

Then you go to the counter 🔀, to the initial task that is now finished ⏯, pick the burgers, say thanks and take them to the table. That finishes that step / task of interaction with the counter ⏹. That in turn, creates a new task, of "eating burgers" 🔀 ⏯, but the previous one of "getting burgers" is finished ⏹.

### Parallel Burgers

Now let's imagine these aren't "Concurrent Burgers", but "Parallel Burgers".

You go with your crush to get parallel fast food.

You stand in line while several (let's say 8) cashiers that at the same time are cooks take the orders from the people in front of you.

Everyone before you is waiting for their burgers to be ready before leaving the counter because each of the 8 cashiers goes and prepares the burger right away before getting the next order.

<img src="/img/async/parallel-burgers/parallel-burgers-01.png" class="illustration">

Then it's finally your turn, you place your order of 2 very fancy burgers for your crush and you.

You pay 💸.

<img src="/img/async/parallel-burgers/parallel-burgers-02.png" class="illustration">

The cashier goes to the kitchen.

You wait, standing in front of the counter 🕙, so that no one else takes your burgers before you do, as there are no numbers for turns.

<img src="/img/async/parallel-burgers/parallel-burgers-03.png" class="illustration">

As you and your crush are busy not letting anyone get in front of you and take your burgers whenever they arrive, you cannot pay attention to your crush. 😞

This is "synchronous" work, you are "synchronized" with the cashier/cook 👨‍🍳. You have to wait 🕙 and be there at the exact moment that the cashier/cook 👨‍🍳 finishes the burgers and gives them to you, or otherwise, someone else might take them.

<img src="/img/async/parallel-burgers/parallel-burgers-04.png" class="illustration">

Then your cashier/cook 👨‍🍳 finally comes back with your burgers, after a long time waiting 🕙 there in front of the counter.

<img src="/img/async/parallel-burgers/parallel-burgers-05.png" class="illustration">

You take your burgers and go to the table with your crush.

You just eat them, and you are done. ⏹

<img src="/img/async/parallel-burgers/parallel-burgers-06.png" class="illustration">

There was not much talk or flirting as most of the time was spent waiting 🕙 in front of the counter. 😞

/// info

Beautiful illustrations by <a href="https://www.instagram.com/ketrinadrawsalot" class="external-link" target="_blank">Ketrina Thompson</a>. 🎨

///

---

In this scenario of the parallel burgers, you are a computer / program 🤖 with two processors (you and your crush), both waiting 🕙 and dedicating their attention ⏯ to be "waiting on the counter" 🕙 for a long time.

The fast food store has 8 processors (cashiers/cooks). While the concurrent burgers store might have had only 2 (one cashier and one cook).

But still, the final experience is not the best. 😞

---

This would be the parallel equivalent story for burgers. 🍔

For a more "real life" example of this, imagine a bank.

Up to recently, most of the banks had multiple cashiers 👨‍💼👨‍💼👨‍💼👨‍💼 and a big line 🕙🕙🕙🕙🕙🕙🕙🕙.

All of the cashiers doing all the work with one client after the other 👨‍💼⏯.

And you have to wait 🕙 in the line for a long time or you lose your turn.

You probably wouldn't want to take your crush 😍 with you to run errands at the bank 🏦.

### Burger Conclusion

In this scenario of "fast food burgers with your crush", as there is a lot of waiting 🕙, it makes a lot more sense to have a concurrent system ⏸🔀⏯.

This is the case for most of the web applications.

Many, many users, but your server is waiting 🕙 for their not-so-good connection to send their requests.

And then waiting 🕙 again for the responses to come back.

This "waiting" 🕙 is measured in microseconds, but still, summing it all, it's a lot of waiting in the end.

That's why it makes a lot of sense to use asynchronous ⏸🔀⏯ code for web APIs.

This kind of asynchronicity is what made NodeJS popular (even though NodeJS is not parallel) and that's the strength of Go as a programming language.

And that's the same level of performance you get with **FastAPI**.

And as you can have parallelism and asynchronicity at the same time, you get higher performance than most of the tested NodeJS frameworks and on par with Go, which is a compiled language closer to C <a href="https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=query&l=zijmkf-1" class="external-link" target="_blank">(all thanks to Starlette)</a>.

### Is concurrency better than parallelism?

Nope! That's not the moral of the story.

Concurrency is different than parallelism. And it is better on **specific** scenarios that involve a lot of waiting. Because of that, it generally is a lot better than parallelism for web application development. But not for everything.

So, to balance that out, imagine the following short story:

> You have to clean a big, dirty house.

*Yep, that's the whole story*.

---

There's no waiting 🕙 anywhere, just a lot of work to be done, on multiple places of the house.

You could have turns as in the burgers example, first the living room, then the kitchen, but as you are not waiting 🕙 for anything, just cleaning and cleaning, the turns wouldn't affect anything.

It would take the same amount of time to finish with or without turns (concurrency) and you would have done the same amount of work.

But in this case, if you could bring the 8 ex-cashier/cooks/now-cleaners, and each one of them (plus you) could take a zone of the house to clean it, you could do all the work in **parallel**, with the extra help, and finish much sooner.

In this scenario, each one of the cleaners (including you) would be a processor, doing their part of the job.

And as most of the execution time is taken by actual work (instead of waiting), and the work in a computer is done by a <abbr title="Central Processing Unit">CPU</abbr>, they call these problems "CPU bound".

---

Common examples of CPU bound operations are things that require complex math processing.

For example:

* **Audio** or **image processing**.
* **Computer vision**: an image is composed of millions of pixels, each pixel has 3 values / colors, processing that normally requires computing something on those pixels, all at the same time.
* **Machine Learning**: it normally requires lots of "matrix" and "vector" multiplications. Think of a huge spreadsheet with numbers and multiplying all of them together at the same time.
* **Deep Learning**: this is a sub-field of Machine Learning, so, the same applies. It's just that there is not a single spreadsheet of numbers to multiply, but a huge set of them, and in many cases, you use a special processor to build and / or use those models.

### Concurrency + Parallelism: Web + Machine Learning

With **FastAPI** you can take advantage of concurrency that is very common for web development (the same main attraction of NodeJS).

But you can also exploit the benefits of parallelism and multiprocessing (having multiple processes running in parallel) for **CPU bound** workloads like those in Machine Learning systems.

That, plus the simple fact that Python is the main language for **Data Science**, Machine Learning and especially Deep Learning, make FastAPI a very good match for Data Science / Machine Learning web APIs and applications (among many others).

To see how to achieve this parallelism in production see the section about [Deployment](deployment/index.md){.internal-link target=_blank}.

## `async` and `await`

Modern versions of Python have a very intuitive way to define asynchronous code. This makes it look just like normal "sequential" code and do the "awaiting" for you at the right moments.

When there is an operation that will require waiting before giving the results and has support for these new Python features, you can code it like:

```Python
burgers = await get_burgers(2)
```

The key here is the `await`. It tells Python that it has to wait ⏸ for `get_burgers(2)` to finish doing its thing 🕙 before storing the results in `burgers`. With that, Python will know that it can go and do something else 🔀 ⏯ in the meanwhile (like receiving another request).

For `await` to work, it has to be inside a function that supports this asynchronicity. To do that, you just declare it with `async def`:

```Python hl_lines="1"
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

...instead of `def`:

```Python hl_lines="2"
# This is not asynchronous
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

With `async def`, Python knows that, inside that function, it has to be aware of `await` expressions, and that it can "pause" ⏸ the execution of that function and go do something else 🔀 before coming back.

When you want to call an `async def` function, you have to "await" it. So, this won't work:

```Python
# This won't work, because get_burgers was defined with: async def
burgers = get_burgers(2)
```

---

So, if you are using a library that tells you that you can call it with `await`, you need to create the *path operation functions* that uses it with `async def`, like in:

```Python hl_lines="2-3"
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

### More technical details

You might have noticed that `await` can only be used inside of functions defined with `async def`.

But at the same time, functions defined with `async def` have to be "awaited". So, functions with `async def` can only be called inside of functions defined with `async def` too.

So, about the egg and the chicken, how do you call the first `async` function?

If you are working with **FastAPI** you don't have to worry about that, because that "first" function will be your *path operation function*, and FastAPI will know how to do the right thing.

But if you want to use `async` / `await` without FastAPI, you can do it as well.

### Write your own async code

Starlette (and **FastAPI**) are based on <a href="https://anyio.readthedocs.io/en/stable/" class="external-link" target="_blank">AnyIO</a>, which makes it compatible with both Python's standard library <a href="https://docs.python.org/3/library/asyncio-task.html" class="external-link" target="_blank">asyncio</a> and <a href="https://trio.readthedocs.io/en/stable/" class="external-link" target="_blank">Trio</a>.

In particular, you can directly use <a href="https://anyio.readthedocs.io/en/stable/" class="external-link" target="_blank">AnyIO</a> for your advanced concurrency use cases that require more advanced patterns in your own code.

And even if you were not using FastAPI, you could also write your own async applications with <a href="https://anyio.readthedocs.io/en/stable/" class="external-link" target="_blank">AnyIO</a> to be highly compatible and get its benefits (e.g. *structured concurrency*).

I created another library on top of AnyIO, as a thin layer on top, to improve a bit the type annotations and get better **autocompletion**, **inline errors**, etc. It also has a friendly introduction and tutorial to help you **understand** and write **your own async code**: <a href="https://asyncer.tiangolo.com/" class="external-link" target="_blank">Asyncer</a>. It would be particularly useful if you need to **combine async code with regular** (blocking/synchronous) code.

### Other forms of asynchronous code

This style of using `async` and `await` is relatively new in the language.

But it makes working with asynchronous code a lot easier.

This same syntax (or almost identical) was also included recently in modern versions of JavaScript (in Browser and NodeJS).

But before that, handling asynchronous code was quite more complex and difficult.

In previous versions of Python, you could have used threads or <a href="https://www.gevent.org/" class="external-link" target="_blank">Gevent</a>. But the code is way more complex to understand, debug, and think about.

In previous versions of NodeJS / Browser JavaScript, you would have used "callbacks". Which leads to <a href="http://callbackhell.com/" class="external-link" target="_blank">callback hell</a>.

## Coroutines

**Coroutine** is just the very fancy term for the thing returned by an `async def` function. Python knows that it is something like a function, that it can start and that it will end at some point, but that it might be paused ⏸ internally too, whenever there is an `await` inside of it.

But all this functionality of using asynchronous code with `async` and `await` is many times summarized as using "coroutines". It is comparable to the main key feature of Go, the "Goroutines".

## Conclusion

Let's see the same phrase from above:

> Modern versions of Python have support for **"asynchronous code"** using something called **"coroutines"**, with **`async` and `await`** syntax.

That should make more sense now. ✨

All that is what powers FastAPI (through Starlette) and what makes it have such an impressive performance.

## Very Technical Details

/// warning

You can probably skip this.

These are very technical details of how **FastAPI** works underneath.

If you have quite some technical knowledge (coroutines, threads, blocking, etc.) and are curious about how FastAPI handles `async def` vs normal `def`, go ahead.

///

### Path operation functions

When you declare a *path operation function* with normal `def` instead of `async def`, it is run in an external threadpool that is then awaited, instead of being called directly (as it would block the server).

If you are coming from another async framework that does not work in the way described above and you are used to defining trivial compute-only *path operation functions* with plain `def` for a tiny performance gain (about 100 nanoseconds), please note that in **FastAPI** the effect would be quite opposite. In these cases, it's better to use `async def` unless your *path operation functions* use code that performs blocking <abbr title="Input/Output: disk reading or writing, network communications.">I/O</abbr>.

Still, in both situations, chances are that **FastAPI** will [still be faster](index.md#performance){.internal-link target=_blank} than (or at least comparable to) your previous framework.

### Dependencies

The same applies for [dependencies](tutorial/dependencies/index.md){.internal-link target=_blank}. If a dependency is a standard `def` function instead of `async def`, it is run in the external threadpool.

### Sub-dependencies

You can have multiple dependencies and [sub-dependencies](tutorial/dependencies/sub-dependencies.md){.internal-link target=_blank} requiring each other (as parameters of the function definitions), some of them might be created with `async def` and some with normal `def`. It would still work, and the ones created with normal `def` would be called on an external thread (from the threadpool) instead of being "awaited".

### Other utility functions

Any other utility function that you call directly can be created with normal `def` or `async def` and FastAPI won't affect the way you call it.

This is in contrast to the functions that FastAPI calls for you: *path operation functions* and dependencies.

If your utility function is a normal function with `def`, it will be called directly (as you write it in your code), not in a threadpool, if the function is created with `async def` then you should `await` for that function when you call it in your code.

---

Again, these are very technical details that would probably be useful if you came searching for them.

Otherwise, you should be good with the guidelines from the section above: <a href="#in-a-hurry">In a hurry?</a>.


================================================
File: /docs/en/docs/benchmarks.md
================================================
# Benchmarks

Independent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as <a href="https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7" class="external-link" target="_blank">one of the fastest Python frameworks available</a>, only below Starlette and Uvicorn themselves (used internally by FastAPI).

But when checking benchmarks and comparisons you should keep the following in mind.

## Benchmarks and speed

When you check the benchmarks, it is common to see several tools of different types compared as equivalent.

Specifically, to see Uvicorn, Starlette and FastAPI compared together (among many other tools).

The simpler the problem solved by the tool, the better performance it will get. And most of the benchmarks don't test the additional features provided by the tool.

The hierarchy is like:

* **Uvicorn**: an ASGI server
    * **Starlette**: (uses Uvicorn) a web microframework
        * **FastAPI**: (uses Starlette) an API microframework with several additional features for building APIs, with data validation, etc.

* **Uvicorn**:
    * Will have the best performance, as it doesn't have much extra code apart from the server itself.
    * You wouldn't write an application in Uvicorn directly. That would mean that your code would have to include more or less, at least, all the code provided by Starlette (or **FastAPI**). And if you did that, your final application would have the same overhead as having used a framework and minimizing your app code and bugs.
    * If you are comparing Uvicorn, compare it against Daphne, Hypercorn, uWSGI, etc. Application servers.
* **Starlette**:
    * Will have the next best performance, after Uvicorn. In fact, Starlette uses Uvicorn to run. So, it probably can only get "slower" than Uvicorn by having to execute more code.
    * But it provides you the tools to build simple web applications, with routing based on paths, etc.
    * If you are comparing Starlette, compare it against Sanic, Flask, Django, etc. Web frameworks (or microframeworks).
* **FastAPI**:
    * The same way that Starlette uses Uvicorn and cannot be faster than it, **FastAPI** uses Starlette, so it cannot be faster than it.
    * FastAPI provides more features on top of Starlette. Features that you almost always need when building APIs, like data validation and serialization. And by using it, you get automatic documentation for free (the automatic documentation doesn't even add overhead to running applications, it is generated on startup).
    * If you didn't use FastAPI and used Starlette directly (or another tool, like Sanic, Flask, Responder, etc) you would have to implement all the data validation and serialization yourself. So, your final application would still have the same overhead as if it was built using FastAPI. And in many cases, this data validation and serialization is the biggest amount of code written in applications.
    * So, by using FastAPI you are saving development time, bugs, lines of code, and you would probably get the same performance (or better) you would if you didn't use it (as you would have to implement it all in your code).
    * If you are comparing FastAPI, compare it against a web application framework (or set of tools) that provides data validation, serialization and documentation, like Flask-apispec, NestJS, Molten, etc. Frameworks with integrated automatic data validation, serialization and documentation.


================================================
File: /docs/en/docs/contributing.md
================================================
# Development - Contributing

First, you might want to see the basic ways to [help FastAPI and get help](help-fastapi.md){.internal-link target=_blank}.

## Developing

If you already cloned the <a href="https://github.com/fastapi/fastapi" class="external-link" target="_blank">fastapi repository</a> and you want to deep dive in the code, here are some guidelines to set up your environment.

### Virtual environment

Follow the instructions to create and activate a [virtual environment](virtual-environments.md){.internal-link target=_blank} for the internal code of `fastapi`.

### Install requirements using pip

After activating the environment, install the required packages:

<div class="termy">

```console
$ pip install -r requirements.txt

---> 100%
```

</div>

It will install all the dependencies and your local FastAPI in your local environment.

### Using your local FastAPI

If you create a Python file that imports and uses FastAPI, and run it with the Python from your local environment, it will use your cloned local FastAPI source code.

And if you update that local FastAPI source code when you run that Python file again, it will use the fresh version of FastAPI you just edited.

That way, you don't have to "install" your local version to be able to test every change.

/// note | Technical Details

This only happens when you install using this included `requirements.txt` instead of running `pip install fastapi` directly.

That is because inside the `requirements.txt` file, the local version of FastAPI is marked to be installed in "editable" mode, with the `-e` option.

///

### Format the code

There is a script that you can run that will format and clean all your code:

<div class="termy">

```console
$ bash scripts/format.sh
```

</div>

It will also auto-sort all your imports.

## Tests

There is a script that you can run locally to test all the code and generate coverage reports in HTML:

<div class="termy">

```console
$ bash scripts/test-cov-html.sh
```

</div>

This command generates a directory `./htmlcov/`, if you open the file `./htmlcov/index.html` in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.

## Docs

First, make sure you set up your environment as described above, that will install all the requirements.

### Docs live

During local development, there is a script that builds the site and checks for any changes, live-reloading:

<div class="termy">

```console
$ python ./scripts/docs.py live

<span style="color: green;">[INFO]</span> Serving on http://127.0.0.1:8008
<span style="color: green;">[INFO]</span> Start watching changes
<span style="color: green;">[INFO]</span> Start detecting changes
```

</div>

It will serve the documentation on `http://127.0.0.1:8008`.

That way, you can edit the documentation/source files and see the changes live.

/// tip

Alternatively, you can perform the same steps that scripts does manually.

Go into the language directory, for the main docs in English it's at `docs/en/`:

```console
$ cd docs/en/
```

Then run `mkdocs` in that directory:

```console
$ mkdocs serve --dev-addr 127.0.0.1:8008
```

///

#### Typer CLI (optional)

The instructions here show you how to use the script at `./scripts/docs.py` with the `python` program directly.

But you can also use <a href="https://typer.tiangolo.com/typer-cli/" class="external-link" target="_blank">Typer CLI</a>, and you will get autocompletion in your terminal for the commands after installing completion.

If you install Typer CLI, you can install completion with:

<div class="termy">

```console
$ typer --install-completion

zsh completion installed in /home/user/.bashrc.
Completion will take effect once you restart the terminal.
```

</div>

### Docs Structure

The documentation uses <a href="https://www.mkdocs.org/" class="external-link" target="_blank">MkDocs</a>.

And there are extra tools/scripts in place to handle translations in `./scripts/docs.py`.

/// tip

You don't need to see the code in `./scripts/docs.py`, you just use it in the command line.

///

All the documentation is in Markdown format in the directory `./docs/en/`.

Many of the tutorials have blocks of code.

In most of the cases, these blocks of code are actual complete applications that can be run as is.

In fact, those blocks of code are not written inside the Markdown, they are Python files in the `./docs_src/` directory.

And those Python files are included/injected in the documentation when generating the site.

### Docs for tests

Most of the tests actually run against the example source files in the documentation.

This helps to make sure that:

* The documentation is up-to-date.
* The documentation examples can be run as is.
* Most of the features are covered by the documentation, ensured by test coverage.

#### Apps and docs at the same time

If you run the examples with, e.g.:

<div class="termy">

```console
$ fastapi dev tutorial001.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

as Uvicorn by default will use the port `8000`, the documentation on port `8008` won't clash.

### Translations

Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. 🌎 🚀

Here are the steps to help with translations.

#### Tips and guidelines

* Check the currently <a href="https://github.com/fastapi/fastapi/pulls" class="external-link" target="_blank">existing pull requests</a> for your language. You can filter the pull requests by the ones with the label for your language. For example, for Spanish, the label is <a href="https://github.com/fastapi/fastapi/pulls?q=is%3Aopen+sort%3Aupdated-desc+label%3Alang-es+label%3Aawaiting-review" class="external-link" target="_blank">`lang-es`</a>.

* Review those pull requests, requesting changes or approving them. For the languages I don't speak, I'll wait for several others to review the translation before merging.

/// tip

You can <a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/commenting-on-a-pull-request" class="external-link" target="_blank">add comments with change suggestions</a> to existing pull requests.

Check the docs about <a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-reviews" class="external-link" target="_blank">adding a pull request review</a> to approve it or request changes.

///

* Check if there's a <a href="https://github.com/fastapi/fastapi/discussions/categories/translations" class="external-link" target="_blank">GitHub Discussion</a> to coordinate translations for your language. You can subscribe to it, and when there's a new pull request to review, an automatic comment will be added to the discussion.

* If you translate pages, add a single pull request per page translated. That will make it much easier for others to review it.

* To check the 2-letter code for the language you want to translate, you can use the table <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" class="external-link" target="_blank">List of ISO 639-1 codes</a>.

#### Existing language

Let's say you want to translate a page for a language that already has translations for some pages, like Spanish.

In the case of Spanish, the 2-letter code is `es`. So, the directory for Spanish translations is located at `docs/es/`.

/// tip

The main ("official") language is English, located at `docs/en/`.

///

Now run the live server for the docs in Spanish:

<div class="termy">

```console
// Use the command "live" and pass the language code as a CLI argument
$ python ./scripts/docs.py live es

<span style="color: green;">[INFO]</span> Serving on http://127.0.0.1:8008
<span style="color: green;">[INFO]</span> Start watching changes
<span style="color: green;">[INFO]</span> Start detecting changes
```

</div>

/// tip

Alternatively, you can perform the same steps that scripts does manually.

Go into the language directory, for the Spanish translations it's at `docs/es/`:

```console
$ cd docs/es/
```

Then run `mkdocs` in that directory:

```console
$ mkdocs serve --dev-addr 127.0.0.1:8008
```

///

Now you can go to <a href="http://127.0.0.1:8008" class="external-link" target="_blank">http://127.0.0.1:8008</a> and see your changes live.

You will see that every language has all the pages. But some pages are not translated and have an info box at the top, about the missing translation.

Now let's say that you want to add a translation for the section [Features](features.md){.internal-link target=_blank}.

* Copy the file at:

```
docs/en/docs/features.md
```

* Paste it in exactly the same location but for the language you want to translate, e.g.:

```
docs/es/docs/features.md
```

/// tip

Notice that the only change in the path and file name is the language code, from `en` to `es`.

///

If you go to your browser you will see that now the docs show your new section (the info box at the top is gone). 🎉

Now you can translate it all and see how it looks as you save the file.

#### Don't Translate these Pages

🚨 Don't translate:

* Files under `reference/`
* `release-notes.md`
* `fastapi-people.md`
* `external-links.md`
* `newsletter.md`
* `management-tasks.md`
* `management.md`
* `contributing.md`

Some of these files are updated very frequently and a translation would always be behind, or they include the main content from English source files, etc.

#### New Language

Let's say that you want to add translations for a language that is not yet translated, not even some pages.

Let's say you want to add translations for Creole, and it's not yet there in the docs.

Checking the link from above, the code for "Creole" is `ht`.

The next step is to run the script to generate a new translation directory:

<div class="termy">

```console
// Use the command new-lang, pass the language code as a CLI argument
$ python ./scripts/docs.py new-lang ht

Successfully initialized: docs/ht
```

</div>

Now you can check in your code editor the newly created directory `docs/ht/`.

That command created a file `docs/ht/mkdocs.yml` with a simple config that inherits everything from the `en` version:

```yaml
INHERIT: ../en/mkdocs.yml
```

/// tip

You could also simply create that file with those contents manually.

///

That command also created a dummy file `docs/ht/index.md` for the main page, you can start by translating that one.

You can continue with the previous instructions for an "Existing Language" for that process.

You can make the first pull request with those two files, `docs/ht/mkdocs.yml` and `docs/ht/index.md`. 🎉

#### Preview the result

As already mentioned above, you can use the `./scripts/docs.py` with the `live` command to preview the results (or `mkdocs serve`).

Once you are done, you can also test it all as it would look online, including all the other languages.

To do that, first build all the docs:

<div class="termy">

```console
// Use the command "build-all", this will take a bit
$ python ./scripts/docs.py build-all

Building docs for: en
Building docs for: es
Successfully built docs for: es
```

</div>

This builds all those independent MkDocs sites for each language, combines them, and generates the final output at `./site/`.

Then you can serve that with the command `serve`:

<div class="termy">

```console
// Use the command "serve" after running "build-all"
$ python ./scripts/docs.py serve

Warning: this is a very simple server. For development, use mkdocs serve instead.
This is here only to preview a site with translations already built.
Make sure you run the build-all command first.
Serving at: http://127.0.0.1:8008
```

</div>

#### Translation specific tips and guidelines

* Translate only the Markdown documents (`.md`). Do not translate the code examples at `./docs_src`.

* In code blocks within the Markdown document, translate comments (`# a comment`), but leave the rest unchanged.

* Do not change anything enclosed in "``" (inline code).

* In lines starting with `///` translate only the text part after `|`. Leave the rest unchanged.

* You can translate info boxes like `/// warning` with for example `/// warning | Achtung`. But do not change the word immediately after the `///`, it determines the color of the info box.

* Do not change the paths in links to images, code files, Markdown documents.

* However, when a Markdown document is translated, the `#hash-parts` in links to its headings may change. Update these links if possible.
    * Search for such links in the translated document using the regex `#[^# ]`.
    * Search in all documents already translated into your language for `your-translated-document.md`. For example VS Code has an option "Edit" -> "Find in Files".
    * When translating a document, do not "pre-translate" `#hash-parts` that link to headings in untranslated documents.


================================================
File: /docs/en/docs/environment-variables.md
================================================
# Environment Variables

/// tip

If you already know what "environment variables" are and how to use them, feel free to skip this.

///

An environment variable (also known as "**env var**") is a variable that lives **outside** of the Python code, in the **operating system**, and could be read by your Python code (or by other programs as well).

Environment variables could be useful for handling application **settings**, as part of the **installation** of Python, etc.

## Create and Use Env Vars

You can **create** and use environment variables in the **shell (terminal)**, without needing Python:

//// tab | Linux, macOS, Windows Bash

<div class="termy">

```console
// You could create an env var MY_NAME with
$ export MY_NAME="Wade Wilson"

// Then you could use it with other programs, like
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

</div>

////

//// tab | Windows PowerShell

<div class="termy">

```console
// Create an env var MY_NAME
$ $Env:MY_NAME = "Wade Wilson"

// Use it with other programs, like
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

</div>

////

## Read env vars in Python

You could also create environment variables **outside** of Python, in the terminal (or with any other method), and then **read them in Python**.

For example you could have a file `main.py` with:

```Python hl_lines="3"
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

/// tip

The second argument to <a href="https://docs.python.org/3.8/library/os.html#os.getenv" class="external-link" target="_blank">`os.getenv()`</a> is the default value to return.

If not provided, it's `None` by default, here we provide `"World"` as the default value to use.

///

Then you could call that Python program:

//// tab | Linux, macOS, Windows Bash

<div class="termy">

```console
// Here we don't set the env var yet
$ python main.py

// As we didn't set the env var, we get the default value

Hello World from Python

// But if we create an environment variable first
$ export MY_NAME="Wade Wilson"

// And then call the program again
$ python main.py

// Now it can read the environment variable

Hello Wade Wilson from Python
```

</div>

////

//// tab | Windows PowerShell

<div class="termy">

```console
// Here we don't set the env var yet
$ python main.py

// As we didn't set the env var, we get the default value

Hello World from Python

// But if we create an environment variable first
$ $Env:MY_NAME = "Wade Wilson"

// And then call the program again
$ python main.py

// Now it can read the environment variable

Hello Wade Wilson from Python
```

</div>

////

As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to `git`) with the rest of the files, it's common to use them for configurations or **settings**.

You can also create an environment variable only for a **specific program invocation**, that is only available to that program, and only for its duration.

To do that, create it right before the program itself, on the same line:

<div class="termy">

```console
// Create an env var MY_NAME in line for this program call
$ MY_NAME="Wade Wilson" python main.py

// Now it can read the environment variable

Hello Wade Wilson from Python

// The env var no longer exists afterwards
$ python main.py

Hello World from Python
```

</div>

/// tip

You can read more about it at <a href="https://12factor.net/config" class="external-link" target="_blank">The Twelve-Factor App: Config</a>.

///

## Types and Validation

These environment variables can only handle **text strings**, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).

That means that **any value** read in Python from an environment variable **will be a `str`**, and any conversion to a different type or any validation has to be done in code.

You will learn more about using environment variables for handling **application settings** in the [Advanced User Guide - Settings and Environment Variables](./advanced/settings.md){.internal-link target=_blank}.

## `PATH` Environment Variable

There is a **special** environment variable called **`PATH`** that is used by the operating systems (Linux, macOS, Windows) to find programs to run.

The value of the variable `PATH` is a long string that is made of directories separated by a colon `:` on Linux and macOS, and by a semicolon `;` on Windows.

For example, the `PATH` environment variable could look like this:

//// tab | Linux, macOS

```plaintext
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

This means that the system should look for programs in the directories:

* `/usr/local/bin`
* `/usr/bin`
* `/bin`
* `/usr/sbin`
* `/sbin`

////

//// tab | Windows

```plaintext
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32
```

This means that the system should look for programs in the directories:

* `C:\Program Files\Python312\Scripts`
* `C:\Program Files\Python312`
* `C:\Windows\System32`

////

When you type a **command** in the terminal, the operating system **looks for** the program in **each of those directories** listed in the `PATH` environment variable.

For example, when you type `python` in the terminal, the operating system looks for a program called `python` in the **first directory** in that list.

If it finds it, then it will **use it**. Otherwise it keeps looking in the **other directories**.

### Installing Python and Updating the `PATH`

When you install Python, you might be asked if you want to update the `PATH` environment variable.

//// tab | Linux, macOS

Let's say you install Python and it ends up in a directory `/opt/custompython/bin`.

If you say yes to update the `PATH` environment variable, then the installer will add `/opt/custompython/bin` to the `PATH` environment variable.

It could look like this:

```plaintext
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin
```

This way, when you type `python` in the terminal, the system will find the Python program in `/opt/custompython/bin` (the last directory) and use that one.

////

//// tab | Windows

Let's say you install Python and it ends up in a directory `C:\opt\custompython\bin`.

If you say yes to update the `PATH` environment variable, then the installer will add `C:\opt\custompython\bin` to the `PATH` environment variable.

```plaintext
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32;C:\opt\custompython\bin
```

This way, when you type `python` in the terminal, the system will find the Python program in `C:\opt\custompython\bin` (the last directory) and use that one.

////

So, if you type:

<div class="termy">

```console
$ python
```

</div>

//// tab | Linux, macOS

The system will **find** the `python` program in `/opt/custompython/bin` and run it.

It would be roughly equivalent to typing:

<div class="termy">

```console
$ /opt/custompython/bin/python
```

</div>

////

//// tab | Windows

The system will **find** the `python` program in `C:\opt\custompython\bin\python` and run it.

It would be roughly equivalent to typing:

<div class="termy">

```console
$ C:\opt\custompython\bin\python
```

</div>

////

This information will be useful when learning about [Virtual Environments](virtual-environments.md){.internal-link target=_blank}.

## Conclusion

With this you should have a basic understanding of what **environment variables** are and how to use them in Python.

You can also read more about them in the <a href="https://en.wikipedia.org/wiki/Environment_variable" class="external-link" target="_blank">Wikipedia for Environment Variable</a>.

In many cases it's not very obvious how environment variables would be useful and applicable right away. But they keep showing up in many different scenarios when you are developing, so it's good to know about them.

For example, you will need this information in the next section, about [Virtual Environments](virtual-environments.md).


================================================
File: /docs/en/docs/external-links.md
================================================
# External Links and Articles

**FastAPI** has a great community constantly growing.

There are many posts, articles, tools, and projects, related to **FastAPI**.

Here's an incomplete list of some of them.

/// tip

If you have an article, project, tool, or anything related to **FastAPI** that is not yet listed here, create a <a href="https://github.com/fastapi/fastapi/edit/master/docs/en/data/external_links.yml" class="external-link" target="_blank">Pull Request adding it</a>.

///

{% for section_name, section_content in external_links.items() %}

## {{ section_name }}

{% for lang_name, lang_content in section_content.items() %}

### {{ lang_name }}

{% for item in lang_content %}

* <a href="{{ item.link }}" class="external-link" target="_blank">{{ item.title }}</a> by <a href="{{ item.author_link }}" class="external-link" target="_blank">{{ item.author }}</a>.

{% endfor %}
{% endfor %}
{% endfor %}

## GitHub Repositories

Most starred GitHub repositories with the topic `fastapi`:

{% for repo in topic_repos %}

<a href={{repo.html_url}} target="_blank">★ {{repo.stars}} - {{repo.name}}</a> by <a href={{repo.owner_html_url}} target="_blank">@{{repo.owner_login}}</a>.

{% endfor %}


================================================
File: /docs/en/docs/fastapi-cli.md
================================================
# FastAPI CLI

**FastAPI CLI** is a command line program that you can use to serve your FastAPI app, manage your FastAPI project, and more.

When you install FastAPI (e.g. with `pip install "fastapi[standard]"`), it includes a package called `fastapi-cli`, this package provides the `fastapi` command in the terminal.

To run your FastAPI app for development, you can use the `fastapi dev` command:

<div class="termy">

```console
$ <font color="#4E9A06">fastapi</font> dev <u style="text-decoration-style:solid">main.py</u>

  <span style="background-color:#009485"><font color="#D3D7CF"> FastAPI </font></span>  Starting development server 🚀

             Searching for package file structure from directories with
             <font color="#3465A4">__init__.py</font> files
             Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> module </font></span>  🐍 main.py

     <span style="background-color:#007166"><font color="#D3D7CF"> code </font></span>  Importing the FastAPI app object from the module with the
             following code:

             <u style="text-decoration-style:solid">from </u><u style="text-decoration-style:solid"><b>main</b></u><u style="text-decoration-style:solid"> import </u><u style="text-decoration-style:solid"><b>app</b></u>

      <span style="background-color:#007166"><font color="#D3D7CF"> app </font></span>  Using import string: <font color="#3465A4">main:app</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Server started at <font color="#729FCF"><u style="text-decoration-style:solid">http://127.0.0.1:8000</u></font>
   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Documentation at <font color="#729FCF"><u style="text-decoration-style:solid">http://127.0.0.1:8000/docs</u></font>

      <span style="background-color:#007166"><font color="#D3D7CF"> tip </font></span>  Running in development mode, for production use:
             <b>fastapi run</b>

             Logs:

     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Will watch for changes in these directories:
             <b>[</b><font color="#4E9A06">&apos;/home/user/code/awesomeapp&apos;</font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Uvicorn running on <font color="#729FCF"><u style="text-decoration-style:solid">http://127.0.0.1:8000</u></font> <b>(</b>Press CTRL+C to
             quit<b>)</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started reloader process <b>[</b><font color="#34E2E2"><b>383138</b></font><b>]</b> using WatchFiles
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>383153</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
```

</div>

The command line program called `fastapi` is **FastAPI CLI**.

FastAPI CLI takes the path to your Python program (e.g. `main.py`) and automatically detects the `FastAPI` instance (commonly named `app`), determines the correct import process, and then serves it.

For production you would use `fastapi run` instead. 🚀

Internally, **FastAPI CLI** uses <a href="https://www.uvicorn.org" class="external-link" target="_blank">Uvicorn</a>, a high-performance, production-ready, ASGI server. 😎

## `fastapi dev`

Running `fastapi dev` initiates development mode.

By default, **auto-reload** is enabled, automatically reloading the server when you make changes to your code. This is resource-intensive and could be less stable than when it's disabled. You should only use it for development. It also listens on the IP address `127.0.0.1`, which is the IP for your machine to communicate with itself alone (`localhost`).

## `fastapi run`

Executing `fastapi run` starts FastAPI in production mode by default.

By default, **auto-reload** is disabled. It also listens on the IP address `0.0.0.0`, which means all the available IP addresses, this way it will be publicly accessible to anyone that can communicate with the machine. This is how you would normally run it in production, for example, in a container.

In most cases you would (and should) have a "termination proxy" handling HTTPS for you on top, this will depend on how you deploy your application, your provider might do this for you, or you might need to set it up yourself.

/// tip

You can learn more about it in the [deployment documentation](deployment/index.md){.internal-link target=_blank}.

///


================================================
File: /docs/en/docs/fastapi-people.md
================================================
---
hide:
  - navigation
---

# FastAPI People

FastAPI has an amazing community that welcomes people from all backgrounds.

## Creator

Hey! 👋

This is me:

<div class="user-list user-list-center">
{% for user in people.maintainers %}

<div class="user"><a href="{{ contributors.tiangolo.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ contributors.tiangolo.avatarUrl }}"/></div><div class="title">@{{ contributors.tiangolo.login }}</div></a> <div class="count">Answers: {{ user.answers }}</div><div class="count">Pull Requests: {{ contributors.tiangolo.count }}</div></div>
{% endfor %}

</div>

I'm the creator of **FastAPI**. You can read more about that in [Help FastAPI - Get Help - Connect with the author](help-fastapi.md#connect-with-the-author){.internal-link target=_blank}.

...But here I want to show you the community.

---

**FastAPI** receives a lot of support from the community. And I want to highlight their contributions.

These are the people that:

* [Help others with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank}.
* [Create Pull Requests](help-fastapi.md#create-a-pull-request){.internal-link target=_blank}.
* Review Pull Requests, [especially important for translations](contributing.md#translations){.internal-link target=_blank}.
* Help [manage the repository](management-tasks.md){.internal-link target=_blank} (team members).

All these tasks help maintain the repository.

A round of applause to them. 👏 🙇

## Team

This is the current list of team members. 😎

They have different levels of involvement and permissions, they can perform [repository management tasks](./management-tasks.md){.internal-link target=_blank} and together we  [manage the FastAPI repository](./management.md){.internal-link target=_blank}.

<div class="user-list user-list-center">
{% for user in members["members"] %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatar_url }}"/></div><div class="title">@{{ user.login }}</div></a></div>
{% endfor %}

</div>

Although the team members have the permissions to perform privileged tasks, all the [help from others maintaining FastAPI](./help-fastapi.md#help-maintain-fastapi){.internal-link target=_blank} is very much appreciated! 🙇‍♂️

## FastAPI Experts

These are the users that have been [helping others the most with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank}. 🙇

They have proven to be **FastAPI Experts** by helping many others. ✨

/// tip

You could become an official FastAPI Expert too!

Just [help others with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank}. 🤓

///

You can see the **FastAPI Experts** for:

* [Last Month](#fastapi-experts-last-month) 🤓
* [3 Months](#fastapi-experts-3-months) 😎
* [6 Months](#fastapi-experts-6-months) 🧐
* [1 Year](#fastapi-experts-1-year) 🧑‍🔬
* [**All Time**](#fastapi-experts-all-time) 🧙

### FastAPI Experts - Last Month

These are the users that have been [helping others the most with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank} during the last month. 🤓

<div class="user-list user-list-center">
{% for user in people.last_month_experts[:10] %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Questions replied: {{ user.count }}</div></div>
{% endfor %}

</div>

### FastAPI Experts - 3 Months

These are the users that have been [helping others the most with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank} during the last 3 months. 😎

<div class="user-list user-list-center">
{% for user in people.three_months_experts[:10] %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Questions replied: {{ user.count }}</div></div>
{% endfor %}

</div>

### FastAPI Experts - 6 Months

These are the users that have been [helping others the most with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank} during the last 6 months. 🧐

<div class="user-list user-list-center">
{% for user in people.six_months_experts[:10] %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Questions replied: {{ user.count }}</div></div>
{% endfor %}

</div>

### FastAPI Experts - 1 Year

These are the users that have been [helping others the most with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank} during the last year. 🧑‍🔬

<div class="user-list user-list-center">
{% for user in people.one_year_experts[:20] %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Questions replied: {{ user.count }}</div></div>
{% endfor %}

</div>

### FastAPI Experts - All Time

Here are the all time **FastAPI Experts**. 🤓🤯

These are the users that have [helped others the most with questions in GitHub](help-fastapi.md#help-others-with-questions-in-github){.internal-link target=_blank} through *all time*. 🧙

<div class="user-list user-list-center">
{% for user in people.experts[:50] %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Questions replied: {{ user.count }}</div></div>
{% endfor %}

</div>

## Top Contributors

Here are the **Top Contributors**. 👷

These users have [created the most Pull Requests](help-fastapi.md#create-a-pull-request){.internal-link target=_blank} that have been *merged*.

They have contributed source code, documentation, etc. 📦

<div class="user-list user-list-center">
{% for user in (contributors.values() | list)[:50] %}

{% if user.login not in skip_users %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Pull Requests: {{ user.count }}</div></div>

{% endif %}

{% endfor %}

</div>

There are hundreds of other contributors, you can see them all in the <a href="https://github.com/fastapi/fastapi/graphs/contributors" class="external-link" target="_blank">FastAPI GitHub Contributors page</a>. 👷

## Top Translators

These are the **Top Translators**. 🌐

These users have created the most Pull Requests with [translations to other languages](contributing.md#translations){.internal-link target=_blank} that have been *merged*.

<div class="user-list user-list-center">

{% for user in (translators.values() | list)[:50] %}

{% if user.login not in skip_users %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Translations: {{ user.count }}</div></div>

{% endif %}

{% endfor %}

</div>

## Top Translation Reviewers

These users are the **Top Translation Reviewers**. 🕵️

I only speak a few languages (and not very well 😅). So, the reviewers are the ones that have the [**power to approve translations**](contributing.md#translations){.internal-link target=_blank} of the documentation. Without them, there wouldn't be documentation in several other languages.

<div class="user-list user-list-center">
{% for user in (translation_reviewers.values() | list)[:50] %}

{% if user.login not in skip_users %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Reviews: {{ user.count }}</div></div>

{% endif %}

{% endfor %}

</div>

## Sponsors

These are the **Sponsors**. 😎

They are supporting my work with **FastAPI** (and others), mainly through <a href="https://github.com/sponsors/tiangolo" class="external-link" target="_blank">GitHub Sponsors</a>.

{% if sponsors %}

{% if sponsors.gold %}

### Gold Sponsors

{% for sponsor in sponsors.gold -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

{% if sponsors.silver %}

### Silver Sponsors

{% for sponsor in sponsors.silver -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

{% if sponsors.bronze %}

### Bronze Sponsors

{% for sponsor in sponsors.bronze -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

{% endif %}

### Individual Sponsors

{% if github_sponsors %}
{% for group in github_sponsors.sponsors %}

<div class="user-list user-list-center">

{% for user in group %}
{% if user.login not in sponsors_badge.logins %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a></div>

{% endif %}
{% endfor %}

</div>

{% endfor %}
{% endif %}

## About the data - technical details

The main intention of this page is to highlight the effort of the community to help others.

Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with questions and reviewing Pull Requests with translations.

The data is calculated each month, you can read the <a href="https://github.com/fastapi/fastapi/blob/master/scripts/" class="external-link" target="_blank">source code here</a>.

Here I'm also highlighting contributions from sponsors.

I also reserve the right to update the algorithm, sections, thresholds, etc (just in case 🤷).


================================================
File: /docs/en/docs/features.md
================================================
# Features

## FastAPI features

**FastAPI** gives you the following:

### Based on open standards

* <a href="https://github.com/OAI/OpenAPI-Specification" class="external-link" target="_blank"><strong>OpenAPI</strong></a> for API creation, including declarations of <abbr title="also known as: endpoints, routes">path</abbr> <abbr title="also known as HTTP methods, as POST, GET, PUT, DELETE">operations</abbr>, parameters, request bodies, security, etc.
* Automatic data model documentation with <a href="https://json-schema.org/" class="external-link" target="_blank"><strong>JSON Schema</strong></a> (as OpenAPI itself is based on JSON Schema).
* Designed around these standards, after a meticulous study. Instead of an afterthought layer on top.
* This also allows using automatic **client code generation** in many languages.

### Automatic docs

Interactive API documentation and exploration web user interfaces. As the framework is based on OpenAPI, there are multiple options, 2 included by default.

* <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank"><strong>Swagger UI</strong></a>, with interactive exploration, call and test your API directly from the browser.

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)

* Alternative API documentation with <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank"><strong>ReDoc</strong></a>.

![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)

### Just Modern Python

It's all based on standard **Python type** declarations (thanks to Pydantic). No new syntax to learn. Just standard modern Python.

If you need a 2 minute refresher of how to use Python types (even if you don't use FastAPI), check the short tutorial: [Python Types](python-types.md){.internal-link target=_blank}.

You write standard Python with types:

```Python
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

That can then be used like:

```Python
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

/// info

`**second_user_data` means:

Pass the keys and values of the `second_user_data` dict directly as key-value arguments, equivalent to: `User(id=4, name="Mary", joined="2018-11-30")`

///

### Editor support

All the framework was designed to be easy and intuitive to use, all the decisions were tested on multiple editors even before starting development, to ensure the best development experience.

In the Python developer surveys, it's clear <a href="https://www.jetbrains.com/research/python-developers-survey-2017/#tools-and-features" class="external-link" target="_blank">that one of the most used features is "autocompletion"</a>.

The whole **FastAPI** framework is based to satisfy that. Autocompletion works everywhere.

You will rarely need to come back to the docs.

Here's how your editor might help you:

* in <a href="https://code.visualstudio.com/" class="external-link" target="_blank">Visual Studio Code</a>:

![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)

* in <a href="https://www.jetbrains.com/pycharm/" class="external-link" target="_blank">PyCharm</a>:

![editor support](https://fastapi.tiangolo.com/img/pycharm-completion.png)

You will get completion in code you might even consider impossible before. As for example, the `price` key inside a JSON body (that could have been nested) that comes from a request.

No more typing the wrong key names, coming back and forth between docs, or scrolling up and down to find if you finally used `username` or `user_name`.

### Short

It has sensible **defaults** for everything, with optional configurations everywhere. All the parameters can be fine-tuned to do what you need and to define the API you need.

But by default, it all **"just works"**.

### Validation

* Validation for most (or all?) Python **data types**, including:
    * JSON objects (`dict`).
    * JSON array (`list`) defining item types.
    * String (`str`) fields, defining min and max lengths.
    * Numbers (`int`, `float`) with min and max values, etc.

* Validation for more exotic types, like:
    * URL.
    * Email.
    * UUID.
    * ...and others.

All the validation is handled by the well-established and robust **Pydantic**.

### Security and authentication

Security and authentication integrated. Without any compromise with databases or data models.

All the security schemes defined in OpenAPI, including:

* HTTP Basic.
* **OAuth2** (also with **JWT tokens**). Check the tutorial on [OAuth2 with JWT](tutorial/security/oauth2-jwt.md){.internal-link target=_blank}.
* API keys in:
    * Headers.
    * Query parameters.
    * Cookies, etc.

Plus all the security features from Starlette (including **session cookies**).

All built as reusable tools and components that are easy to integrate with your systems, data stores, relational and NoSQL databases, etc.

### Dependency Injection

FastAPI includes an extremely easy to use, but extremely powerful <abbr title='also known as "components", "resources", "services", "providers"'><strong>Dependency Injection</strong></abbr> system.

* Even dependencies can have dependencies, creating a hierarchy or **"graph" of dependencies**.
* All **automatically handled** by the framework.
* All the dependencies can require data from requests and **augment the path operation** constraints and automatic documentation.
* **Automatic validation** even for *path operation* parameters defined in dependencies.
* Support for complex user authentication systems, **database connections**, etc.
* **No compromise** with databases, frontends, etc. But easy integration with all of them.

### Unlimited "plug-ins"

Or in other way, no need for them, import and use the code you need.

Any integration is designed to be so simple to use (with dependencies) that you can create a "plug-in" for your application in 2 lines of code using the same structure and syntax used for your *path operations*.

### Tested

* 100% <abbr title="The amount of code that is automatically tested">test coverage</abbr>.
* 100% <abbr title="Python type annotations, with this your editor and external tools can give you better support">type annotated</abbr> code base.
* Used in production applications.

## Starlette features

**FastAPI** is fully compatible with (and based on) <a href="https://www.starlette.io/" class="external-link" target="_blank"><strong>Starlette</strong></a>. So, any additional Starlette code you have, will also work.

`FastAPI` is actually a sub-class of `Starlette`. So, if you already know or use Starlette, most of the functionality will work the same way.

With **FastAPI** you get all of **Starlette**'s features (as FastAPI is just Starlette on steroids):

* Seriously impressive performance. It is <a href="https://github.com/encode/starlette#performance" class="external-link" target="_blank">one of the fastest Python frameworks available, on par with **NodeJS** and **Go**</a>.
* **WebSocket** support.
* In-process background tasks.
* Startup and shutdown events.
* Test client built on HTTPX.
* **CORS**, GZip, Static Files, Streaming responses.
* **Session and Cookie** support.
* 100% test coverage.
* 100% type annotated codebase.

## Pydantic features

**FastAPI** is fully compatible with (and based on) <a href="https://docs.pydantic.dev/" class="external-link" target="_blank"><strong>Pydantic</strong></a>. So, any additional Pydantic code you have, will also work.

Including external libraries also based on Pydantic, as <abbr title="Object-Relational Mapper">ORM</abbr>s, <abbr title="Object-Document Mapper">ODM</abbr>s for databases.

This also means that in many cases you can pass the same object you get from a request **directly to the database**, as everything is validated automatically.

The same applies the other way around, in many cases you can just pass the object you get from the database **directly to the client**.

With **FastAPI** you get all of **Pydantic**'s features (as FastAPI is based on Pydantic for all the data handling):

* **No brainfuck**:
    * No new schema definition micro-language to learn.
    * If you know Python types you know how to use Pydantic.
* Plays nicely with your **<abbr title="Integrated Development Environment, similar to a code editor">IDE</abbr>/<abbr title="A program that checks for code errors">linter</abbr>/brain**:
    * Because pydantic data structures are just instances of classes you define; auto-completion, linting, mypy and your intuition should all work properly with your validated data.
* Validate **complex structures**:
    * Use of hierarchical Pydantic models, Python `typing`’s `List` and `Dict`, etc.
    * And validators allow complex data schemas to be clearly and easily defined, checked and documented as JSON Schema.
    * You can have deeply **nested JSON** objects and have them all validated and annotated.
* **Extensible**:
    * Pydantic allows custom data types to be defined or you can extend validation with methods on a model decorated with the validator decorator.
* 100% test coverage.


================================================
File: /docs/en/docs/help-fastapi.md
================================================
# Help FastAPI - Get Help

Do you like **FastAPI**?

Would you like to help FastAPI, other users, and the author?

Or would you like to get help with **FastAPI**?

There are very simple ways to help (several involve just one or two clicks).

And there are several ways to get help too.

## Subscribe to the newsletter

You can subscribe to the (infrequent) [**FastAPI and friends** newsletter](newsletter.md){.internal-link target=_blank} to stay updated about:

* News about FastAPI and friends 🚀
* Guides 📝
* Features ✨
* Breaking changes 🚨
* Tips and tricks ✅

## Follow FastAPI on Twitter

<a href="https://twitter.com/fastapi" class="external-link" target="_blank">Follow @fastapi on **Twitter**</a> to get the latest news about **FastAPI**. 🐦

## Star **FastAPI** in GitHub

You can "star" FastAPI in GitHub (clicking the star button at the top right): <a href="https://github.com/fastapi/fastapi" class="external-link" target="_blank">https://github.com/fastapi/fastapi</a>. ⭐️

By adding a star, other users will be able to find it more easily and see that it has been already useful for others.

## Watch the GitHub repository for releases

You can "watch" FastAPI in GitHub (clicking the "watch" button at the top right): <a href="https://github.com/fastapi/fastapi" class="external-link" target="_blank">https://github.com/fastapi/fastapi</a>. 👀

There you can select "Releases only".

By doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of **FastAPI** with bug fixes and new features.

## Connect with the author

You can connect with <a href="https://tiangolo.com" class="external-link" target="_blank">me (Sebastián Ramírez / `tiangolo`)</a>, the author.

You can:

* <a href="https://github.com/tiangolo" class="external-link" target="_blank">Follow me on **GitHub**</a>.
    * See other Open Source projects I have created that could help you.
    * Follow me to see when I create a new Open Source project.
* <a href="https://twitter.com/tiangolo" class="external-link" target="_blank">Follow me on **Twitter**</a> or <a href="https://fosstodon.org/@tiangolo" class="external-link" target="_blank">Mastodon</a>.
    * Tell me how you use FastAPI (I love to hear that).
    * Hear when I make announcements or release new tools.
    * You can also <a href="https://twitter.com/fastapi" class="external-link" target="_blank">follow @fastapi on Twitter</a> (a separate account).
* <a href="https://www.linkedin.com/in/tiangolo/" class="external-link" target="_blank">Follow me on **LinkedIn**</a>.
    * Hear when I make announcements or release new tools (although I use Twitter more often 🤷‍♂).
* Read what I write (or follow me) on <a href="https://dev.to/tiangolo" class="external-link" target="_blank">**Dev.to**</a> or <a href="https://medium.com/@tiangolo" class="external-link" target="_blank">**Medium**</a>.
    * Read other ideas, articles, and read about tools I have created.
    * Follow me to read when I publish something new.

## Tweet about **FastAPI**

<a href="https://twitter.com/compose/tweet?text=I'm loving @fastapi because... https://github.com/fastapi/fastapi" class="external-link" target="_blank">Tweet about **FastAPI**</a> and let me and others know why you like it. 🎉

I love to hear about how **FastAPI** is being used, what you have liked in it, in which project/company are you using it, etc.

## Vote for FastAPI

* <a href="https://www.slant.co/options/34241/~fastapi-review" class="external-link" target="_blank">Vote for **FastAPI** in Slant</a>.
* <a href="https://alternativeto.net/software/fastapi/about/" class="external-link" target="_blank">Vote for **FastAPI** in AlternativeTo</a>.
* <a href="https://stackshare.io/pypi-fastapi" class="external-link" target="_blank">Say you use **FastAPI** on StackShare</a>.

## Help others with questions in GitHub

You can try and help others with their questions in:

* <a href="https://github.com/fastapi/fastapi/discussions/categories/questions?discussions_q=category%3AQuestions+is%3Aunanswered" class="external-link" target="_blank">GitHub Discussions</a>
* <a href="https://github.com/fastapi/fastapi/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aquestion+-label%3Aanswered+" class="external-link" target="_blank">GitHub Issues</a>

In many cases you might already know the answer for those questions. 🤓

If you are helping a lot of people with their questions, you will become an official [FastAPI Expert](fastapi-people.md#fastapi-experts){.internal-link target=_blank}. 🎉

Just remember, the most important point is: try to be kind. People come with their frustrations and in many cases don't ask in the best way, but try as best as you can to be kind. 🤗

The idea is for the **FastAPI** community to be kind and welcoming. At the same time, don't accept bullying or disrespectful behavior towards others. We have to take care of each other.

---

Here's how to help others with questions (in discussions or issues):

### Understand the question

* Check if you can understand what is the **purpose** and use case of the person asking.

* Then check if the question (the vast majority are questions) is **clear**.

* In many cases the question asked is about an imaginary solution from the user, but there might be a **better** one. If you can understand the problem and use case better, you might be able to suggest a better **alternative solution**.

* If you can't understand the question, ask for more **details**.

### Reproduce the problem

For most of the cases and most of the questions there's something related to the person's **original code**.

In many cases they will only copy a fragment of the code, but that's not enough to **reproduce the problem**.

* You can ask them to provide a <a href="https://stackoverflow.com/help/minimal-reproducible-example" class="external-link" target="_blank">minimal, reproducible, example</a>, that you can **copy-paste** and run locally to see the same error or behavior they are seeing, or to understand their use case better.

* If you are feeling too generous, you can try to **create an example** like that yourself, just based on the description of the problem. Just keep in mind that this might take a lot of time and it might be better to ask them to clarify the problem first.

### Suggest solutions

* After being able to understand the question, you can give them a possible **answer**.

* In many cases, it's better to understand their **underlying problem or use case**, because there might be a better way to solve it than what they are trying to do.

### Ask to close

If they reply, there's a high chance you would have solved their problem, congrats, **you're a hero**! 🦸

* Now, if that solved their problem, you can ask them to:

    * In GitHub Discussions: mark the comment as the **answer**.
    * In GitHub Issues: **close** the issue.

## Watch the GitHub repository

You can "watch" FastAPI in GitHub (clicking the "watch" button at the top right): <a href="https://github.com/fastapi/fastapi" class="external-link" target="_blank">https://github.com/fastapi/fastapi</a>. 👀

If you select "Watching" instead of "Releases only" you will receive notifications when someone creates a new issue or question. You can also specify that you only want to be notified about new issues, or discussions, or PRs, etc.

Then you can try and help them solve those questions.

## Ask Questions

You can <a href="https://github.com/fastapi/fastapi/discussions/new?category=questions" class="external-link" target="_blank">create a new question</a> in the GitHub repository, for example to:

* Ask a **question** or ask about a **problem**.
* Suggest a new **feature**.

**Note**: if you do it, then I'm going to ask you to also help others. 😉

## Review Pull Requests

You can help me review pull requests from others.

Again, please try your best to be kind. 🤗

---

Here's what to keep in mind and how to review a pull request:

### Understand the problem

* First, make sure you **understand the problem** that the pull request is trying to solve. It might have a longer discussion in a GitHub Discussion or issue.

* There's also a good chance that the pull request is not actually needed because the problem can be solved in a **different way**. Then you can suggest or ask about that.

### Don't worry about style

* Don't worry too much about things like commit message styles, I will squash and merge customizing the commit manually.

* Also don't worry about style rules, there are already automatized tools checking that.

And if there's any other style or consistency need, I'll ask directly for that, or I'll add commits on top with the needed changes.

### Check the code

* Check and read the code, see if it makes sense, **run it locally** and see if it actually solves the problem.

* Then **comment** saying that you did that, that's how I will know you really checked it.

/// info

Unfortunately, I can't simply trust PRs that just have several approvals.

Several times it has happened that there are PRs with 3, 5 or more approvals, probably because the description is appealing, but when I check the PRs, they are actually broken, have a bug, or don't solve the problem they claim to solve. 😅

So, it's really important that you actually read and run the code, and let me know in the comments that you did. 🤓

///

* If the PR can be simplified in a way, you can ask for that, but there's no need to be too picky, there might be a lot of subjective points of view (and I will have my own as well 🙈), so it's better if you can focus on the fundamental things.

### Tests

* Help me check that the PR has **tests**.

* Check that the tests **fail** before the PR. 🚨

* Then check that the tests **pass** after the PR. ✅

* Many PRs don't have tests, you can **remind** them to add tests, or you can even **suggest** some tests yourself. That's one of the things that consume most time and you can help a lot with that.

* Then also comment what you tried, that way I'll know that you checked it. 🤓

## Create a Pull Request

You can [contribute](contributing.md){.internal-link target=_blank} to the source code with Pull Requests, for example:

* To fix a typo you found on the documentation.
* To share an article, video, or podcast you created or found about FastAPI by <a href="https://github.com/fastapi/fastapi/edit/master/docs/en/data/external_links.yml" class="external-link" target="_blank">editing this file</a>.
    * Make sure you add your link to the start of the corresponding section.
* To help [translate the documentation](contributing.md#translations){.internal-link target=_blank} to your language.
    * You can also help to review the translations created by others.
* To propose new documentation sections.
* To fix an existing issue/bug.
    * Make sure to add tests.
* To add a new feature.
    * Make sure to add tests.
    * Make sure to add documentation if it's relevant.

## Help Maintain FastAPI

Help me maintain **FastAPI**! 🤓

There's a lot of work to do, and for most of it, **YOU** can do it.

The main tasks that you can do right now are:

* [Help others with questions in GitHub](#help-others-with-questions-in-github){.internal-link target=_blank} (see the section above).
* [Review Pull Requests](#review-pull-requests){.internal-link target=_blank} (see the section above).

Those two tasks are what **consume time the most**. That's the main work of maintaining FastAPI.

If you can help me with that, **you are helping me maintain FastAPI** and making sure it keeps **advancing faster and better**. 🚀

## Join the chat

Join the 👥 <a href="https://discord.gg/VQjSZaeJmf" class="external-link" target="_blank">Discord chat server</a> 👥 and hang out with others in the FastAPI community.

/// tip

For questions, ask them in <a href="https://github.com/fastapi/fastapi/discussions/new?category=questions" class="external-link" target="_blank">GitHub Discussions</a>, there's a much better chance you will receive help by the [FastAPI Experts](fastapi-people.md#fastapi-experts){.internal-link target=_blank}.

Use the chat only for other general conversations.

///

### Don't use the chat for questions

Keep in mind that as chats allow more "free conversation", it's easy to ask questions that are too general and more difficult to answer, so, you might not receive answers.

In GitHub, the template will guide you to write the right question so that you can more easily get a good answer, or even solve the problem yourself even before asking. And in GitHub I can make sure I always answer everything, even if it takes some time. I can't personally do that with the chat systems. 😅

Conversations in the chat systems are also not as easily searchable as in GitHub, so questions and answers might get lost in the conversation. And only the ones in GitHub count to become a [FastAPI Expert](fastapi-people.md#fastapi-experts){.internal-link target=_blank}, so you will most probably receive more attention in GitHub.

On the other side, there are thousands of users in the chat systems, so there's a high chance you'll find someone to talk to there, almost all the time. 😄

## Sponsor the author

You can also financially support the author (me) through <a href="https://github.com/sponsors/tiangolo" class="external-link" target="_blank">GitHub sponsors</a>.

There you could buy me a coffee ☕️ to say thanks. 😄

And you can also become a Silver or Gold sponsor for FastAPI. 🏅🎉

## Sponsor the tools that power FastAPI

As you have seen in the documentation, FastAPI stands on the shoulders of giants, Starlette and Pydantic.

You can also sponsor:

* <a href="https://github.com/sponsors/samuelcolvin" class="external-link" target="_blank">Samuel Colvin (Pydantic)</a>
* <a href="https://github.com/sponsors/encode" class="external-link" target="_blank">Encode (Starlette, Uvicorn)</a>

---

Thanks! 🚀


================================================
File: /docs/en/docs/history-design-future.md
================================================
# History, Design and Future

Some time ago, <a href="https://github.com/fastapi/fastapi/issues/3#issuecomment-454956920" class="external-link" target="_blank">a **FastAPI** user asked</a>:

> What’s the history of this project? It seems to have come from nowhere to awesome in a few weeks [...]

Here's a little bit of that history.

## Alternatives

I have been creating APIs with complex requirements for several years (Machine Learning, distributed systems, asynchronous jobs, NoSQL databases, etc), leading several teams of developers.

As part of that, I needed to investigate, test and use many alternatives.

The history of **FastAPI** is in great part the history of its predecessors.

As said in the section [Alternatives](alternatives.md){.internal-link target=_blank}:

<blockquote markdown="1">

**FastAPI** wouldn't exist if not for the previous work of others.

There have been many tools created before that have helped inspire its creation.

I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by **FastAPI** using many different frameworks, plug-ins, and tools.

But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).

</blockquote>

## Investigation

By using all the previous alternatives I had the chance to learn from all of them, take ideas, and combine them in the best way I could find for myself and the teams of developers I have worked with.

For example, it was clear that ideally it should be based on standard Python type hints.

Also, the best approach was to use already existing standards.

So, before even starting to code **FastAPI**, I spent several months studying the specs for OpenAPI, JSON Schema, OAuth2, etc. Understanding their relationship, overlap, and differences.

## Design

Then I spent some time designing the developer "API" I wanted to have as a user (as a developer using FastAPI).

I tested several ideas in the most popular Python editors: PyCharm, VS Code, Jedi based editors.

By the last <a href="https://www.jetbrains.com/research/python-developers-survey-2018/#development-tools" class="external-link" target="_blank">Python Developer Survey</a>, that covers about 80% of the users.

It means that **FastAPI** was specifically tested with the editors used by 80% of the Python developers. And as most of the other editors tend to work similarly, all its benefits should work for virtually all editors.

That way I could find the best ways to reduce code duplication as much as possible, to have completion everywhere, type and error checks, etc.

All in a way that provided the best development experience for all the developers.

## Requirements

After testing several alternatives, I decided that I was going to use <a href="https://docs.pydantic.dev/" class="external-link" target="_blank">**Pydantic**</a> for its advantages.

Then I contributed to it, to make it fully compliant with JSON Schema, to support different ways to define constraint declarations, and to improve editor support (type checks, autocompletion) based on the tests in several editors.

During the development, I also contributed to <a href="https://www.starlette.io/" class="external-link" target="_blank">**Starlette**</a>, the other key requirement.

## Development

By the time I started creating **FastAPI** itself, most of the pieces were already in place, the design was defined, the requirements and tools were ready, and the knowledge about the standards and specifications was clear and fresh.

## Future

By this point, it's already clear that **FastAPI** with its ideas is being useful for many people.

It is being chosen over previous alternatives for suiting many use cases better.

Many developers and teams already depend on **FastAPI** for their projects (including me and my team).

But still, there are many improvements and features to come.

**FastAPI** has a great future ahead.

And [your help](help-fastapi.md){.internal-link target=_blank} is greatly appreciated.


================================================
File: /docs/en/docs/index.md
================================================
# FastAPI

<style>
.md-content .md-typeset h1 { display: none; }
</style>

<p align="center">
  <a href="https://fastapi.tiangolo.com"><img src="https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png" alt="FastAPI"></a>
</p>
<p align="center">
    <em>FastAPI framework, high performance, easy to learn, fast to code, ready for production</em>
</p>
<p align="center">
<a href="https://github.com/fastapi/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster" target="_blank">
    <img src="https://github.com/fastapi/fastapi/workflows/Test/badge.svg?event=push&branch=master" alt="Test">
</a>
<a href="https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/fastapi" target="_blank">
    <img src="https://coverage-badge.samuelcolvin.workers.dev/fastapi/fastapi.svg" alt="Coverage">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package" alt="Package version">
</a>
<a href="https://pypi.org/project/fastapi" target="_blank">
    <img src="https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058" alt="Supported Python versions">
</a>
</p>

---

**Documentation**: <a href="https://fastapi.tiangolo.com" target="_blank">https://fastapi.tiangolo.com</a>

**Source Code**: <a href="https://github.com/fastapi/fastapi" target="_blank">https://github.com/fastapi/fastapi</a>

---

FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints.

The key features are:

* **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). [One of the fastest Python frameworks available](#performance).
* **Fast to code**: Increase the speed to develop features by about 200% to 300%. *
* **Fewer bugs**: Reduce about 40% of human (developer) induced errors. *
* **Intuitive**: Great editor support. <abbr title="also known as auto-complete, autocompletion, IntelliSense">Completion</abbr> everywhere. Less time debugging.
* **Easy**: Designed to be easy to use and learn. Less time reading docs.
* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.
* **Robust**: Get production-ready code. With automatic interactive documentation.
* **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href="https://github.com/OAI/OpenAPI-Specification" class="external-link" target="_blank">OpenAPI</a> (previously known as Swagger) and <a href="https://json-schema.org/" class="external-link" target="_blank">JSON Schema</a>.

<small>* estimation based on tests on an internal development team, building production applications.</small>

## Sponsors

<!-- sponsors -->

{% if sponsors %}
{% for sponsor in sponsors.gold -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor -%}
{%- for sponsor in sponsors.silver -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

<!-- /sponsors -->

<a href="https://fastapi.tiangolo.com/fastapi-people/#sponsors" class="external-link" target="_blank">Other sponsors</a>

## Opinions

"_[...] I'm using **FastAPI** a ton these days. [...] I'm actually planning to use it for all of my team's **ML services at Microsoft**. Some of them are getting integrated into the core **Windows** product and some **Office** products._"

<div style="text-align: right; margin-right: 10%;">Kabir Khan - <strong>Microsoft</strong> <a href="https://github.com/fastapi/fastapi/pull/26" target="_blank"><small>(ref)</small></a></div>

---

"_We adopted the **FastAPI** library to spawn a **REST** server that can be queried to obtain **predictions**. [for Ludwig]_"

<div style="text-align: right; margin-right: 10%;">Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - <strong>Uber</strong> <a href="https://eng.uber.com/ludwig-v0-2/" target="_blank"><small>(ref)</small></a></div>

---

"_**Netflix** is pleased to announce the open-source release of our **crisis management** orchestration framework: **Dispatch**! [built with **FastAPI**]_"

<div style="text-align: right; margin-right: 10%;">Kevin Glisson, Marc Vilanova, Forest Monsen - <strong>Netflix</strong> <a href="https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072" target="_blank"><small>(ref)</small></a></div>

---

"_I’m over the moon excited about **FastAPI**. It’s so fun!_"

<div style="text-align: right; margin-right: 10%;">Brian Okken - <strong><a href="https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855" target="_blank">Python Bytes</a> podcast host</strong> <a href="https://twitter.com/brianokken/status/1112220079972728832" target="_blank"><small>(ref)</small></a></div>

---

"_Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted **Hug** to be - it's really inspiring to see someone build that._"

<div style="text-align: right; margin-right: 10%;">Timothy Crosley - <strong><a href="https://github.com/hugapi/hug" target="_blank">Hug</a> creator</strong> <a href="https://news.ycombinator.com/item?id=19455465" target="_blank"><small>(ref)</small></a></div>

---

"_If you're looking to learn one **modern framework** for building REST APIs, check out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_"

"_We've switched over to **FastAPI** for our **APIs** [...] I think you'll like it [...]_"

<div style="text-align: right; margin-right: 10%;">Ines Montani - Matthew Honnibal - <strong><a href="https://explosion.ai" target="_blank">Explosion AI</a> founders - <a href="https://spacy.io" target="_blank">spaCy</a> creators</strong> <a href="https://twitter.com/_inesmontani/status/1144173225322143744" target="_blank"><small>(ref)</small></a> - <a href="https://twitter.com/honnibal/status/1144031421859655680" target="_blank"><small>(ref)</small></a></div>

---

"_If anyone is looking to build a production Python API, I would highly recommend **FastAPI**. It is **beautifully designed**, **simple to use** and **highly scalable**, it has become a **key component** in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer._"

<div style="text-align: right; margin-right: 10%;">Deon Pillsbury - <strong>Cisco</strong> <a href="https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/" target="_blank"><small>(ref)</small></a></div>

---

## **Typer**, the FastAPI of CLIs

<a href="https://typer.tiangolo.com" target="_blank"><img src="https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg" style="width: 20%;"></a>

If you are building a <abbr title="Command Line Interface">CLI</abbr> app to be used in the terminal instead of a web API, check out <a href="https://typer.tiangolo.com/" class="external-link" target="_blank">**Typer**</a>.

**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI of CLIs**. ⌨️ 🚀

## Requirements

FastAPI stands on the shoulders of giants:

* <a href="https://www.starlette.io/" class="external-link" target="_blank">Starlette</a> for the web parts.
* <a href="https://docs.pydantic.dev/" class="external-link" target="_blank">Pydantic</a> for the data parts.

## Installation

Create and activate a <a href="https://fastapi.tiangolo.com/virtual-environments/" class="external-link" target="_blank">virtual environment</a> and then install FastAPI:

<div class="termy">

```console
$ pip install "fastapi[standard]"

---> 100%
```

</div>

**Note**: Make sure you put `"fastapi[standard]"` in quotes to ensure it works in all terminals.

## Example

### Create it

* Create a file `main.py` with:

```Python
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

<details markdown="1">
<summary>Or use <code>async def</code>...</summary>

If your code uses `async` / `await`, use `async def`:

```Python hl_lines="9  14"
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

**Note**:

If you don't know, check the _"In a hurry?"_ section about <a href="https://fastapi.tiangolo.com/async/#in-a-hurry" target="_blank">`async` and `await` in the docs</a>.

</details>

### Run it

Run the server with:

<div class="termy">

```console
$ fastapi dev main.py

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

</div>

<details markdown="1">
<summary>About the command <code>fastapi dev main.py</code>...</summary>

The command `fastapi dev` reads your `main.py` file, detects the **FastAPI** app in it, and starts a server using <a href="https://www.uvicorn.org" class="external-link" target="_blank">Uvicorn</a>.

By default, `fastapi dev` will start with auto-reload enabled for local development.

You can read more about it in the <a href="https://fastapi.tiangolo.com/fastapi-cli/" target="_blank">FastAPI CLI docs</a>.

</details>

### Check it

Open your browser at <a href="http://127.0.0.1:8000/items/5?q=somequery" class="external-link" target="_blank">http://127.0.0.1:8000/items/5?q=somequery</a>.

You will see the JSON response as:

```JSON
{"item_id": 5, "q": "somequery"}
```

You already created an API that:

* Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.
* Both _paths_ take `GET` <em>operations</em> (also known as HTTP _methods_).
* The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.
* The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.

### Interactive API docs

Now go to <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

You will see the automatic interactive API documentation (provided by <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a>):

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)

### Alternative API docs

And now, go to <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a>.

You will see the alternative automatic documentation (provided by <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a>):

![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)

## Example upgrade

Now modify the file `main.py` to receive a body from a `PUT` request.

Declare the body using standard Python types, thanks to Pydantic.

```Python hl_lines="4  9-12  25-27"
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

The `fastapi dev` server should reload automatically.

### Interactive API docs upgrade

Now go to <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

* The interactive API documentation will be automatically updated, including the new body:

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)

* Click on the button "Try it out", it allows you to fill the parameters and directly interact with the API:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)

* Then click on the "Execute" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:

![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)

### Alternative API docs upgrade

And now, go to <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a>.

* The alternative documentation will also reflect the new query parameter and body:

![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)

### Recap

In summary, you declare **once** the types of parameters, body, etc. as function parameters.

You do that with standard modern Python types.

You don't have to learn a new syntax, the methods or classes of a specific library, etc.

Just standard **Python**.

For example, for an `int`:

```Python
item_id: int
```

or for a more complex `Item` model:

```Python
item: Item
```

...and with that single declaration you get:

* Editor support, including:
    * Completion.
    * Type checks.
* Validation of data:
    * Automatic and clear errors when the data is invalid.
    * Validation even for deeply nested JSON objects.
* <abbr title="also known as: serialization, parsing, marshalling">Conversion</abbr> of input data: coming from the network to Python data and types. Reading from:
    * JSON.
    * Path parameters.
    * Query parameters.
    * Cookies.
    * Headers.
    * Forms.
    * Files.
* <abbr title="also known as: serialization, parsing, marshalling">Conversion</abbr> of output data: converting from Python data and types to network data (as JSON):
    * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).
    * `datetime` objects.
    * `UUID` objects.
    * Database models.
    * ...and many more.
* Automatic interactive API documentation, including 2 alternative user interfaces:
    * Swagger UI.
    * ReDoc.

---

Coming back to the previous code example, **FastAPI** will:

* Validate that there is an `item_id` in the path for `GET` and `PUT` requests.
* Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.
    * If it is not, the client will see a useful, clear error.
* Check if there is an optional query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.
    * As the `q` parameter is declared with `= None`, it is optional.
    * Without the `None` it would be required (as is the body in the case with `PUT`).
* For `PUT` requests to `/items/{item_id}`, read the body as JSON:
    * Check that it has a required attribute `name` that should be a `str`.
    * Check that it has a required attribute `price` that has to be a `float`.
    * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.
    * All this would also work for deeply nested JSON objects.
* Convert from and to JSON automatically.
* Document everything with OpenAPI, that can be used by:
    * Interactive documentation systems.
    * Automatic client code generation systems, for many languages.
* Provide 2 interactive documentation web interfaces directly.

---

We just scratched the surface, but you already get the idea of how it all works.

Try changing the line with:

```Python
    return {"item_name": item.name, "item_id": item_id}
```

...from:

```Python
        ... "item_name": item.name ...
```

...to:

```Python
        ... "item_price": item.price ...
```

...and see how your editor will auto-complete the attributes and know their types:

![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)

For a more complete example including more features, see the <a href="https://fastapi.tiangolo.com/tutorial/">Tutorial - User Guide</a>.

**Spoiler alert**: the tutorial - user guide includes:

* Declaration of **parameters** from other different places as: **headers**, **cookies**, **form fields** and **files**.
* How to set **validation constraints** as `maximum_length` or `regex`.
* A very powerful and easy to use **<abbr title="also known as components, resources, providers, services, injectables">Dependency Injection</abbr>** system.
* Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.
* More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).
* **GraphQL** integration with <a href="https://strawberry.rocks" class="external-link" target="_blank">Strawberry</a> and other libraries.
* Many extra features (thanks to Starlette) as:
    * **WebSockets**
    * extremely easy tests based on HTTPX and `pytest`
    * **CORS**
    * **Cookie Sessions**
    * ...and more.

## Performance

Independent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as <a href="https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7" class="external-link" target="_blank">one of the fastest Python frameworks available</a>, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)

To understand more about it, see the section <a href="https://fastapi.tiangolo.com/benchmarks/" class="internal-link" target="_blank">Benchmarks</a>.

## Dependencies

FastAPI depends on Pydantic and Starlette.

### `standard` Dependencies

When you install FastAPI with `pip install "fastapi[standard]"` it comes with the `standard` group of optional dependencies:

Used by Pydantic:

* <a href="https://github.com/JoshData/python-email-validator" target="_blank"><code>email-validator</code></a> - for email validation.

Used by Starlette:

* <a href="https://www.python-httpx.org" target="_blank"><code>httpx</code></a> - Required if you want to use the `TestClient`.
* <a href="https://jinja.palletsprojects.com" target="_blank"><code>jinja2</code></a> - Required if you want to use the default template configuration.
* <a href="https://github.com/Kludex/python-multipart" target="_blank"><code>python-multipart</code></a> - Required if you want to support form <abbr title="converting the string that comes from an HTTP request into Python data">"parsing"</abbr>, with `request.form()`.

Used by FastAPI / Starlette:

* <a href="https://www.uvicorn.org" target="_blank"><code>uvicorn</code></a> - for the server that loads and serves your application. This includes `uvicorn[standard]`, which includes some dependencies (e.g. `uvloop`) needed for high performance serving.
* `fastapi-cli` - to provide the `fastapi` command.

### Without `standard` Dependencies

If you don't want to include the `standard` optional dependencies, you can install with `pip install fastapi` instead of `pip install "fastapi[standard]"`.

### Additional Optional Dependencies

There are some additional dependencies you might want to install.

Additional optional Pydantic dependencies:

* <a href="https://docs.pydantic.dev/latest/usage/pydantic_settings/" target="_blank"><code>pydantic-settings</code></a> - for settings management.
* <a href="https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/" target="_blank"><code>pydantic-extra-types</code></a> - for extra types to be used with Pydantic.

Additional optional FastAPI dependencies:

* <a href="https://github.com/ijl/orjson" target="_blank"><code>orjson</code></a> - Required if you want to use `ORJSONResponse`.
* <a href="https://github.com/esnme/ultrajson" target="_blank"><code>ujson</code></a> - Required if you want to use `UJSONResponse`.

## License

This project is licensed under the terms of the MIT license.


================================================
File: /docs/en/docs/management-tasks.md
================================================
# Repository Management Tasks

These are the tasks that can be performed to manage the FastAPI repository by [team members](./fastapi-people.md#team){.internal-link target=_blank}.

/// tip

This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. 😉

///

...so, you are a [team member of FastAPI](./fastapi-people.md#team){.internal-link target=_blank}? Wow, you are so cool! 😎

You can help with everything on [Help FastAPI - Get Help](./help-fastapi.md){.internal-link target=_blank} the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.

Here are the general instructions for the tasks you can perform.

Thanks a lot for your help. 🙇

## Be Nice

First of all, be nice. 😊

You probably are super nice if you were added to the team, but it's worth mentioning it. 🤓

### When Things are Difficult

When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.

Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.

It's difficult to convey emotion in text, use emojis to help. 😅

In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.

Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.

Try to be as specific and objective as possible, avoid generalizations.

For conversations that are more difficult, for example to reject a PR, you can ask me (@tiangolo) to handle it directly.

## Edit PR Titles

* Edit the PR title to start with an emoji from <a href="https://gitmoji.dev/" class="external-link" target="_blank">gitmoji</a>.
    * Use the emoji character, not the GitHub code. So, use `🐛` instead of `:bug:`. This is so that it shows up correctly outside of GitHub, for example in the release notes.
    * For translations use the `🌐` emoji ("globe with meridians").
* Start the title with a verb. For example `Add`, `Refactor`, `Fix`, etc. This way the title will say the action that the PR does. Like `Add support for teleporting`, instead of `Teleporting wasn't working, so this PR fixes it`.
* Edit the text of the PR title to start in "imperative", like giving an order. So, instead of `Adding support for teleporting` use `Add support for teleporting`.
* Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example `Add support for teleporting` instead of `Create TeleportAdapter class`.
* Do not finish the title with a period (`.`).
* When the PR is for a translation, start with the `🌐` and then `Add {language} translation for` and then the translated file path. For example:

```Markdown
🌐 Add Spanish translation for `docs/es/docs/teleporting.md`
```

Once the PR is merged, a GitHub Action (<a href="https://github.com/tiangolo/latest-changes" class="external-link" target="_blank">latest-changes</a>) will use the PR title to update the latest changes automatically.

So, having a nice PR title will not only look nice in GitHub, but also in the release notes. 📝

## Add Labels to PRs

The same GitHub Action <a href="https://github.com/tiangolo/latest-changes" class="external-link" target="_blank">latest-changes</a> uses one label in the PR to decide the section in the release notes to put this PR in.

Make sure you use a supported label from the <a href="https://github.com/tiangolo/latest-changes#using-labels" class="external-link" target="_blank">latest-changes list of labels</a>:

* `breaking`: Breaking Changes
    * Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.
* `security`: Security Fixes
    * This is for security fixes, like vulnerabilities. It would almost never be used.
* `feature`: Features
    * New features, adding support for things that didn't exist before.
* `bug`: Fixes
    * Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.
* `refactor`: Refactors
    * This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.
* `upgrade`: Upgrades
    * This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in `pyproject.toml`. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in `requirements.txt` files or GitHub Action versions should be marked as `internal`, not `upgrade`.
* `docs`: Docs
    * Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.
    * You can normally quickly detect it by going to the "Files changed" tab in the PR and checking if the updated file(s) starts with `docs/en/docs`. The original version of the docs is always in English, so in `docs/en/docs`.
* `lang-all`: Translations
    * Use this for translations. You can normally quickly detect it by going to the "Files changed" tab in the PR and checking if the updated file(s) starts with `docs/{some lang}/docs` but not `docs/en/docs`. For example, `docs/es/docs`.
* `internal`: Internal
    * Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.

/// tip

Some tools like Dependabot, will add some labels, like `dependencies`, but have in mind that this label is not used by the `latest-changes` GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.

///

## Add Labels to Translation PRs

When there's a PR for a translation, apart from adding the `lang-all` label, also add a label for the language.

There will be a label for each language using the language code, like `lang-{lang code}`, for example, `lang-es` for Spanish, `lang-fr` for French, etc.

* Add the specific language label.
* Add the label `awaiting-review`.

The label `awaiting-review` is special, only used for translations. A GitHub Action will detect it, then it will read the language label, and it will update the GitHub Discussions managing the translations for that language to notify people that there's a new translation to review.

Once a native speaker comes, reviews the PR, and approves it, the GitHub Action will come and remove the `awaiting-review` label, and add the `approved-1` label.

This way, we can notice when there are new translations ready, because they have the `approved-1` label.

## Merge Translation PRs

For Spanish, as I'm a native speaker and it's a language close to me, I will give it a final review myself and in most cases tweak the PR a bit before merging it.

For the other languages, confirm that:

* The title is correct following the instructions above.
* It has the labels `lang-all` and `lang-{lang code}`.
* The PR changes only one Markdown file adding a translation.
    * Or in some cases, at most two files, if they are small, for the same language, and people reviewed them.
    * If it's the first translation for that language, it will have additional `mkdocs.yml` files, for those cases follow the instructions below.
* The PR doesn't add any additional or extraneous files.
* The translation seems to have a similar structure as the original English file.
* The translation doesn't seem to change the original content, for example with obvious additional documentation sections.
* The translation doesn't use different Markdown structures, for example adding HTML tags when the original didn't have them.
* The "admonition" sections, like `tip`, `info`, etc. are not changed or translated. For example:

```
/// tip

This is a tip.

///

```

looks like this:

/// tip

This is a tip.

///

...it could be translated as:

```
/// tip

Esto es un consejo.

///

```

...but needs to keep the exact `tip` keyword. If it was translated to `consejo`, like:

```
/// consejo

Esto es un consejo.

///

```

it would change the style to the default one, it would look like:

/// consejo

Esto es un consejo.

///

Those don't have to be translated, but if they are, they need to be written as:

```
/// tip | consejo

Esto es un consejo.

///

```

Which looks like:

/// tip | consejo

Esto es un consejo.

///

## First Translation PR

When there's a first translation for a language, it will have a `docs/{lang code}/docs/index.md` translated file and a `docs/{lang code}/mkdocs.yml`.

For example, for Bosnian, it would be:

* `docs/bs/docs/index.md`
* `docs/bs/mkdocs.yml`

The `mkdocs.yml` file will have only the following content:

```YAML
INHERIT: ../en/mkdocs.yml
```

The language code would normally be in the <a href="https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes" class="external-link" target="_blank">ISO 639-1 list of language codes</a>.

In any case, the language code should be in the file <a href="https://github.com/fastapi/fastapi/blob/master/docs/language_names.yml" class="external-link" target="_blank">docs/language_names.yml</a>.

There won't be yet a label for the language code, for example, if it was Bosnian, there wouldn't be a `lang-bs`. Before creating the label and adding it to the PR, create the GitHub Discussion:

* Go to the <a href="https://github.com/fastapi/fastapi/discussions/categories/translations" class="external-link" target="_blank">Translations GitHub Discussions</a>
* Create a new discussion with the title `Bosnian Translations` (or the language name in English)
* A description of:

```Markdown
## Bosnian translations

This is the issue to track translations of the docs to Bosnian. 🚀

Here are the [PRs to review with the label `lang-bs`](https://github.com/fastapi/fastapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). 🤓
```

Update "Bosnian" with the new language.

And update the search link to point to the new language label that will be created, like `lang-bs`.

Create and add the label to that new Discussion just created, like `lang-bs`.

Then go back to the PR, and add the label, like `lang-bs`, and `lang-all` and `awaiting-review`.

Now the GitHub action will automatically detect the label `lang-bs` and will post in that Discussion that this PR is waiting to be reviewed.

## Review PRs

If a PR doesn't explain what it does or why, ask for more information.

A PR should have a specific use case that it is solving.

* If the PR is for a feature, it should have docs.
    * Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.
* The docs should include a source example file, not write Python directly in Markdown.
* If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.
* There should be tests testing the source example.
* Before the PR is applied, the new tests should fail.
* After applying the PR, the new tests should pass.
* Coverage should stay at 100%.
* If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.
* Feel free to comment in the PR to ask for more information, to suggest changes, etc.
* Once you think the PR is ready, move it in the internal GitHub project for me to review it.

## FastAPI People PRs

Every month, a GitHub Action updates the FastAPI People data. Those PRs look like this one: <a href="https://github.com/fastapi/fastapi/pull/11669" class="external-link" target="_blank">👥 Update FastAPI People</a>.

If the tests are passing, you can merge it right away.

## External Links PRs

When people add external links they edit this file <a href="https://github.com/fastapi/fastapi/blob/master/docs/en/data/external_links.yml" class="external-link" target="_blank">external_links.yml</a>.

* Make sure the new link is in the correct category (e.g. "Podcasts") and language (e.g. "Japanese").
* A new link should be at the top of its list.
* The link URL should work (it should not return a 404).
* The content of the link should be about FastAPI.
* The new addition should have these fields:
    * `author`: The name of the author.
    * `link`: The URL with the content.
    * `title`: The title of the link (the title of the article, podcast, etc).

After checking all these things and ensuring the PR has the right labels, you can merge it.

## Dependabot PRs

Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.

* If the PR is for a direct dependency, so, Dependabot is modifying `pyproject.toml`, **don't merge it**. 😱 Let me check it first. There's a good chance that some additional tweaks or updates are needed.
* If the PR updates one of the internal dependencies, for example it's modifying `requirements.txt` files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. 😎

## Mark GitHub Discussions Answers

When a question in GitHub Discussions has been answered, mark the answer by clicking "Mark as answer".

You can filter discussions by <a href="https://github.com/tiangolo/fastapi/discussions/categories/questions?discussions_q=category:Questions+is:open+is:unanswered" class="external-link" target="_blank">`Questions` that are `Unanswered`</a>.


================================================
File: /docs/en/docs/management.md
================================================
# Repository Management

Here's a short description of how the FastAPI repository is managed and maintained.

## Owner

I, <a href="https://github.com/tiangolo" target="_blank">@tiangolo</a>, am the creator and owner of the FastAPI repository. 🤓

I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the <a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life" class="external-link" target="_blank"><abbr title="Benevolent Dictator For Life">BDFL</abbr></a>. 😅

## Team

There's a team of people that help manage and maintain the project. 😎

They have different levels of permissions and [specific instructions](./management-tasks.md){.internal-link target=_blank}.

Some of the tasks they can perform include:

* Adding labels to PRs.
* Editing PR titles.
* Adding commits on top of PRs to tweak them.
* Mark answers in GitHub Discussions questions, etc.
* Merge some specific types of PRs.

You can see the current team members in [FastAPI People - Team](./fastapi-people.md#team){.internal-link target=_blank}.

Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.

## FastAPI Experts

The people that help others the most in GitHub Discussions can become [**FastAPI Experts**](./fastapi-people.md#fastapi-experts){.internal-link target=_blank}.

This is normally the best way to contribute to the project.

## External Contributions

External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. 🙇‍♂️

There are many ways to [help maintain FastAPI](./help-fastapi.md#help-maintain-fastapi){.internal-link target=_blank}.


================================================
File: /docs/en/docs/newsletter.md
================================================
# FastAPI and friends newsletter

<iframe data-w-type="embedded" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://xr4n4.mjt.lu/wgt/xr4n4/hj5/form?c=40a44fa4" width="100%" style="height: 800px;"></iframe>

<script type="text/javascript" src="https://app.mailjet.com/pas-nc-embedded-v1.js"></script>


================================================
File: /docs/en/docs/project-generation.md
================================================
# Full Stack FastAPI Template

Templates, while typically come with a specific setup, are designed to be flexible and customizable. This allows you to modify and adapt them to your project's requirements, making them an excellent starting point. 🏁

You can use this template to get started, as it includes a lot of the initial set up, security, database and some API endpoints already done for you.

GitHub Repository: <a href="https://github.com/tiangolo/full-stack-fastapi-template" class="external-link" target="_blank">Full Stack FastAPI Template</a>

## Full Stack FastAPI Template - Technology Stack and Features

- ⚡ [**FastAPI**](https://fastapi.tiangolo.com) for the Python backend API.
    - 🧰 [SQLModel](https://sqlmodel.tiangolo.com) for the Python SQL database interactions (ORM).
    - 🔍 [Pydantic](https://docs.pydantic.dev), used by FastAPI, for the data validation and settings management.
    - 💾 [PostgreSQL](https://www.postgresql.org) as the SQL database.
- 🚀 [React](https://react.dev) for the frontend.
    - 💃 Using TypeScript, hooks, [Vite](https://vitejs.dev), and other parts of a modern frontend stack.
    - 🎨 [Chakra UI](https://chakra-ui.com) for the frontend components.
    - 🤖 An automatically generated frontend client.
    - 🧪 [Playwright](https://playwright.dev) for End-to-End testing.
    - 🦇 Dark mode support.
- 🐋 [Docker Compose](https://www.docker.com) for development and production.
- 🔒 Secure password hashing by default.
- 🔑 JWT token authentication.
- 📫 Email based password recovery.
- ✅ Tests with [Pytest](https://pytest.org).
- 📞 [Traefik](https://traefik.io) as a reverse proxy / load balancer.
- 🚢 Deployment instructions using Docker Compose, including how to set up a frontend Traefik proxy to handle automatic HTTPS certificates.
- 🏭 CI (continuous integration) and CD (continuous deployment) based on GitHub Actions.


================================================
File: /docs/en/docs/python-types.md
================================================
# Python Types Intro

Python has support for optional "type hints" (also called "type annotations").

These **"type hints"** or annotations are a special syntax that allow declaring the <abbr title="for example: str, int, float, bool">type</abbr> of a variable.

By declaring types for your variables, editors and tools can give you better support.

This is just a **quick tutorial / refresher** about Python type hints. It covers only the minimum necessary to use them with **FastAPI**... which is actually very little.

**FastAPI** is all based on these type hints, they give it many advantages and benefits.

But even if you never use **FastAPI**, you would benefit from learning a bit about them.

/// note

If you are a Python expert, and you already know everything about type hints, skip to the next chapter.

///

## Motivation

Let's start with a simple example:

{* ../../docs_src/python_types/tutorial001.py *}

Calling this program outputs:

```
John Doe
```

The function does the following:

* Takes a `first_name` and `last_name`.
* Converts the first letter of each one to upper case with `title()`.
* <abbr title="Puts them together, as one. With the contents of one after the other.">Concatenates</abbr> them with a space in the middle.

{* ../../docs_src/python_types/tutorial001.py hl[2] *}

### Edit it

It's a very simple program.

But now imagine that you were writing it from scratch.

At some point you would have started the definition of the function, you had the parameters ready...

But then you have to call "that method that converts the first letter to upper case".

Was it `upper`? Was it `uppercase`? `first_uppercase`? `capitalize`?

Then, you try with the old programmer's friend, editor autocompletion.

You type the first parameter of the function, `first_name`, then a dot (`.`) and then hit `Ctrl+Space` to trigger the completion.

But, sadly, you get nothing useful:

<img src="/img/python-types/image01.png">

### Add types

Let's modify a single line from the previous version.

We will change exactly this fragment, the parameters of the function, from:

```Python
    first_name, last_name
```

to:

```Python
    first_name: str, last_name: str
```

That's it.

Those are the "type hints":

{* ../../docs_src/python_types/tutorial002.py hl[1] *}

That is not the same as declaring default values like would be with:

```Python
    first_name="john", last_name="doe"
```

It's a different thing.

We are using colons (`:`), not equals (`=`).

And adding type hints normally doesn't change what happens from what would happen without them.

But now, imagine you are again in the middle of creating that function, but with type hints.

At the same point, you try to trigger the autocomplete with `Ctrl+Space` and you see:

<img src="/img/python-types/image02.png">

With that, you can scroll, seeing the options, until you find the one that "rings a bell":

<img src="/img/python-types/image03.png">

## More motivation

Check this function, it already has type hints:

{* ../../docs_src/python_types/tutorial003.py hl[1] *}

Because the editor knows the types of the variables, you don't only get completion, you also get error checks:

<img src="/img/python-types/image04.png">

Now you know that you have to fix it, convert `age` to a string with `str(age)`:

{* ../../docs_src/python_types/tutorial004.py hl[2] *}

## Declaring types

You just saw the main place to declare type hints. As function parameters.

This is also the main place you would use them with **FastAPI**.

### Simple types

You can declare all the standard Python types, not only `str`.

You can use, for example:

* `int`
* `float`
* `bool`
* `bytes`

{* ../../docs_src/python_types/tutorial005.py hl[1] *}

### Generic types with type parameters

There are some data structures that can contain other values, like `dict`, `list`, `set` and `tuple`. And the internal values can have their own type too.

These types that have internal types are called "**generic**" types. And it's possible to declare them, even with their internal types.

To declare those types and the internal types, you can use the standard Python module `typing`. It exists specifically to support these type hints.

#### Newer versions of Python

The syntax using `typing` is **compatible** with all versions, from Python 3.6 to the latest ones, including Python 3.9, Python 3.10, etc.

As Python advances, **newer versions** come with improved support for these type annotations and in many cases you won't even need to import and use the `typing` module to declare the type annotations.

If you can choose a more recent version of Python for your project, you will be able to take advantage of that extra simplicity.

In all the docs there are examples compatible with each version of Python (when there's a difference).

For example "**Python 3.6+**" means it's compatible with Python 3.6 or above (including 3.7, 3.8, 3.9, 3.10, etc). And "**Python 3.9+**" means it's compatible with Python 3.9 or above (including 3.10, etc).

If you can use the **latest versions of Python**, use the examples for the latest version, those will have the **best and simplest syntax**, for example, "**Python 3.10+**".

#### List

For example, let's define a variable to be a `list` of `str`.

//// tab | Python 3.9+

Declare the variable, with the same colon (`:`) syntax.

As the type, put `list`.

As the list is a type that contains some internal types, you put them in square brackets:

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial006_py39.py!}
```

////

//// tab | Python 3.8+

From `typing`, import `List` (with a capital `L`):

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial006.py!}
```

Declare the variable, with the same colon (`:`) syntax.

As the type, put the `List` that you imported from `typing`.

As the list is a type that contains some internal types, you put them in square brackets:

```Python hl_lines="4"
{!> ../../docs_src/python_types/tutorial006.py!}
```

////

/// info

Those internal types in the square brackets are called "type parameters".

In this case, `str` is the type parameter passed to `List` (or `list` in Python 3.9 and above).

///

That means: "the variable `items` is a `list`, and each of the items in this list is a `str`".

/// tip

If you use Python 3.9 or above, you don't have to import `List` from `typing`, you can use the same regular `list` type instead.

///

By doing that, your editor can provide support even while processing items from the list:

<img src="/img/python-types/image05.png">

Without types, that's almost impossible to achieve.

Notice that the variable `item` is one of the elements in the list `items`.

And still, the editor knows it is a `str`, and provides support for that.

#### Tuple and Set

You would do the same to declare `tuple`s and `set`s:

//// tab | Python 3.9+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial007_py39.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial007.py!}
```

////

This means:

* The variable `items_t` is a `tuple` with 3 items, an `int`, another `int`, and a `str`.
* The variable `items_s` is a `set`, and each of its items is of type `bytes`.

#### Dict

To define a `dict`, you pass 2 type parameters, separated by commas.

The first type parameter is for the keys of the `dict`.

The second type parameter is for the values of the `dict`:

//// tab | Python 3.9+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial008_py39.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial008.py!}
```

////

This means:

* The variable `prices` is a `dict`:
    * The keys of this `dict` are of type `str` (let's say, the name of each item).
    * The values of this `dict` are of type `float` (let's say, the price of each item).

#### Union

You can declare that a variable can be any of **several types**, for example, an `int` or a `str`.

In Python 3.6 and above (including Python 3.10) you can use the `Union` type from `typing` and put inside the square brackets the possible types to accept.

In Python 3.10 there's also a **new syntax** where you can put the possible types separated by a <abbr title='also called "bitwise or operator", but that meaning is not relevant here'>vertical bar (`|`)</abbr>.

//// tab | Python 3.10+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial008b_py310.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial008b.py!}
```

////

In both cases this means that `item` could be an `int` or a `str`.

#### Possibly `None`

You can declare that a value could have a type, like `str`, but that it could also be `None`.

In Python 3.6 and above (including Python 3.10) you can declare it by importing and using `Optional` from the `typing` module.

```Python hl_lines="1  4"
{!../../docs_src/python_types/tutorial009.py!}
```

Using `Optional[str]` instead of just `str` will let the editor help you detect errors where you could be assuming that a value is always a `str`, when it could actually be `None` too.

`Optional[Something]` is actually a shortcut for `Union[Something, None]`, they are equivalent.

This also means that in Python 3.10, you can use `Something | None`:

//// tab | Python 3.10+

```Python hl_lines="1"
{!> ../../docs_src/python_types/tutorial009_py310.py!}
```

////

//// tab | Python 3.8+

```Python hl_lines="1  4"
{!> ../../docs_src/python_types/tutorial009.py!}
```
