Lo importante a recordar es que **el primer *par√°metro de tipo*** que pasas a `Annotated` es el **tipo real**. El resto es solo metadata para otras herramientas.

Por ahora, solo necesitas saber que `Annotated` existe, y que es Python est√°ndar. üòé

Luego ver√°s lo **poderoso** que puede ser.

/// tip | Consejo

El hecho de que esto sea **Python est√°ndar** significa que seguir√°s obteniendo la **mejor experiencia de desarrollador posible** en tu editor, con las herramientas que usas para analizar y refactorizar tu c√≥digo, etc. ‚ú®

Y tambi√©n que tu c√≥digo ser√° muy compatible con muchas otras herramientas y paquetes de Python. üöÄ

///

## Anotaciones de tipos en **FastAPI**

**FastAPI** aprovecha estas anotaciones de tipos para hacer varias cosas.

Con **FastAPI** declaras par√°metros con anotaciones de tipos y obtienes:

* **Soporte del editor**.
* **Chequeo de tipos**.

...y **FastAPI** usa las mismas declaraciones para:

* **Definir requerimientos**: de par√°metros de path de la request, par√°metros de query, headers, bodies, dependencias, etc.
* **Convertir datos**: de la request al tipo requerido.
* **Validar datos**: provenientes de cada request:
    * Generando **errores autom√°ticos** devueltos al cliente cuando los datos son inv√°lidos.
* **Documentar** la API usando OpenAPI:
    * Que luego es usada por las interfaces de documentaci√≥n interactiva autom√°tica.

Todo esto puede sonar abstracto. No te preocupes. Ver√°s todo esto en acci√≥n en el [Tutorial - Gu√≠a del Usuario](tutorial/index.md){.internal-link target=_blank}.

Lo importante es que al usar tipos est√°ndar de Python, en un solo lugar (en lugar de agregar m√°s clases, decoradores, etc.), **FastAPI** har√° gran parte del trabajo por ti.

/// info | Informaci√≥n

Si ya revisaste todo el tutorial y volviste para ver m√°s sobre tipos, un buen recurso es <a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html" class="external-link" target="_blank">la "cheat sheet" de `mypy`</a>.

///


================================================
File: /docs/es/docs/virtual-environments.md
================================================
# Entornos Virtuales

Cuando trabajas en proyectos de Python probablemente deber√≠as usar un **entorno virtual** (o un mecanismo similar) para aislar los paquetes que instalas para cada proyecto.

/// info | Informaci√≥n

Si ya sabes sobre entornos virtuales, c√≥mo crearlos y usarlos, podr√≠as querer saltar esta secci√≥n. ü§ì

///

/// tip | Consejo

Un **entorno virtual** es diferente de una **variable de entorno**.

Una **variable de entorno** es una variable en el sistema que puede ser usada por programas.

Un **entorno virtual** es un directorio con algunos archivos en √©l.

///

/// info | Informaci√≥n

Esta p√°gina te ense√±ar√° c√≥mo usar **entornos virtuales** y c√≥mo funcionan.

Si est√°s listo para adoptar una **herramienta que gestiona todo** por ti (incluyendo la instalaci√≥n de Python), prueba <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">uv</a>.

///

## Crea un Proyecto

Primero, crea un directorio para tu proyecto.

Lo que normalmente hago es crear un directorio llamado `code` dentro de mi directorio de usuario.

Y dentro de eso creo un directorio por proyecto.

<div class="termy">

```console
// Ve al directorio principal
$ cd
// Crea un directorio para todos tus proyectos de c√≥digo
$ mkdir code
// Entra en ese directorio de c√≥digo
$ cd code
// Crea un directorio para este proyecto
$ mkdir awesome-project
// Entra en ese directorio del proyecto
$ cd awesome-project
```

</div>

## Crea un Entorno Virtual

Cuando empiezas a trabajar en un proyecto de Python **por primera vez**, crea un entorno virtual **<abbr title="hay otras opciones, esto es solo una gu√≠a sencilla">dentro de tu proyecto</abbr>**.

/// tip | Consejo

Solo necesitas hacer esto **una vez por proyecto**, no cada vez que trabajas.

///

//// tab | `venv`

Para crear un entorno virtual, puedes usar el m√≥dulo `venv` que viene con Python.

<div class="termy">

```console
$ python -m venv .venv
```

</div>

/// details | Qu√© significa ese comando

* `python`: usa el programa llamado `python`
* `-m`: llama a un m√≥dulo como un script, indicaremos cu√°l m√≥dulo a continuaci√≥n
* `venv`: usa el m√≥dulo llamado `venv` que normalmente viene instalado con Python
* `.venv`: crea el entorno virtual en el nuevo directorio `.venv`

///

////

//// tab | `uv`

Si tienes instalado <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">`uv`</a>, puedes usarlo para crear un entorno virtual.

<div class="termy">

```console
$ uv venv
```

</div>

/// tip | Consejo

Por defecto, `uv` crear√° un entorno virtual en un directorio llamado `.venv`.

Pero podr√≠as personalizarlo pasando un argumento adicional con el nombre del directorio.

///

////

Ese comando crea un nuevo entorno virtual en un directorio llamado `.venv`.

/// details | `.venv` u otro nombre

Podr√≠as crear el entorno virtual en un directorio diferente, pero hay una convenci√≥n de llamarlo `.venv`.

///

## Activa el Entorno Virtual

Activa el nuevo entorno virtual para que cualquier comando de Python que ejecutes o paquete que instales lo utilicen.

/// tip | Consejo

Haz esto **cada vez** que inicies una **nueva sesi√≥n de terminal** para trabajar en el proyecto.

///

//// tab | Linux, macOS

<div class="termy">

```console
$ source .venv/bin/activate
```

</div>

////

//// tab | Windows PowerShell

<div class="termy">

```console
$ .venv\Scripts\Activate.ps1
```

</div>

////

//// tab | Windows Bash

O si usas Bash para Windows (por ejemplo, <a href="https://gitforwindows.org/" class="external-link" target="_blank">Git Bash</a>):

<div class="termy">

```console
$ source .venv/Scripts/activate
```

</div>

////

/// tip | Consejo

Cada vez que instales un **nuevo paquete** en ese entorno, **activa** el entorno de nuevo.

Esto asegura que si usas un programa de **terminal (<abbr title="command line interface">CLI</abbr>)** instalado por ese paquete, uses el de tu entorno virtual y no cualquier otro que podr√≠a estar instalado globalmente, probablemente con una versi√≥n diferente a la que necesitas.

///

## Verifica que el Entorno Virtual est√© Activo

Verifica que el entorno virtual est√© activo (el comando anterior funcion√≥).

/// tip | Consejo

Esto es **opcional**, pero es una buena forma de **revisar** que todo est√° funcionando como se esperaba y est√°s usando el entorno virtual que pretendes.

///

//// tab | Linux, macOS, Windows Bash

<div class="termy">

```console
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

</div>

Si muestra el binario de `python` en `.venv/bin/python`, dentro de tu proyecto (en este caso `awesome-project`), entonces funcion√≥. üéâ

////

//// tab | Windows PowerShell

<div class="termy">

```console
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

</div>

Si muestra el binario de `python` en `.venv\Scripts\python`, dentro de tu proyecto (en este caso `awesome-project`), entonces funcion√≥. üéâ

////

## Actualiza `pip`

/// tip | Consejo

Si usas <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">`uv`</a> usar√≠as eso para instalar cosas en lugar de `pip`, por lo que no necesitas actualizar `pip`. üòé

///

Si est√°s usando `pip` para instalar paquetes (viene por defecto con Python), deber√≠as **actualizarlo** a la √∫ltima versi√≥n.

Muchos errores ex√≥ticos al instalar un paquete se resuelven simplemente actualizando `pip` primero.

/// tip | Consejo

Normalmente har√≠as esto **una vez**, justo despu√©s de crear el entorno virtual.

///

Aseg√∫rate de que el entorno virtual est√© activo (con el comando anterior) y luego ejecuta:

<div class="termy">

```console
$ python -m pip install --upgrade pip

---> 100%
```

</div>

## A√±ade `.gitignore`

Si est√°s usando **Git** (deber√≠as), a√±ade un archivo `.gitignore` para excluir todo en tu `.venv` de Git.

/// tip | Consejo

Si usaste <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">`uv`</a> para crear el entorno virtual, ya lo hizo por ti, puedes saltarte este paso. üòé

///

/// tip | Consejo

Haz esto **una vez**, justo despu√©s de crear el entorno virtual.

///

<div class="termy">

```console
$ echo "*" > .venv/.gitignore
```

</div>

/// details | Qu√© significa ese comando

* `echo "*"`: "imprimir√°" el texto `*` en el terminal (la siguiente parte cambia eso un poco)
* `>`: cualquier cosa impresa en el terminal por el comando a la izquierda de `>` no deber√≠a imprimirse, sino escribirse en el archivo que va a la derecha de `>`
* `.gitignore`: el nombre del archivo donde deber√≠a escribirse el texto

Y `*` para Git significa "todo". As√≠ que, ignorar√° todo en el directorio `.venv`.

Ese comando crear√° un archivo `.gitignore` con el contenido:

```gitignore
*
```

///

## Instala Paquetes

Despu√©s de activar el entorno, puedes instalar paquetes en √©l.

/// tip | Consejo

Haz esto **una vez** al instalar o actualizar los paquetes que necesita tu proyecto.

Si necesitas actualizar una versi√≥n o agregar un nuevo paquete, **har√≠as esto de nuevo**.

///

### Instala Paquetes Directamente

Si tienes prisa y no quieres usar un archivo para declarar los requisitos de paquetes de tu proyecto, puedes instalarlos directamente.

/// tip | Consejo

Es una (muy) buena idea poner los paquetes y las versiones que necesita tu programa en un archivo (por ejemplo, `requirements.txt` o `pyproject.toml`).

///

//// tab | `pip`

<div class="termy">

```console
$ pip install "fastapi[standard]"

---> 100%
```

</div>

////

//// tab | `uv`

Si tienes <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">`uv`</a>:

<div class="termy">

```console
$ uv pip install "fastapi[standard]"
---> 100%
```

</div>

////

### Instala desde `requirements.txt`

Si tienes un `requirements.txt`, ahora puedes usarlo para instalar sus paquetes.

//// tab | `pip`

<div class="termy">

```console
$ pip install -r requirements.txt
---> 100%
```

</div>

////

//// tab | `uv`

Si tienes <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">`uv`</a>:

<div class="termy">

```console
$ uv pip install -r requirements.txt
---> 100%
```

</div>

////

/// details | `requirements.txt`

Un `requirements.txt` con algunos paquetes podr√≠a verse as√≠:

```requirements.txt
fastapi[standard]==0.113.0
pydantic==2.8.0
```

///

## Ejecuta Tu Programa

Despu√©s de activar el entorno virtual, puedes ejecutar tu programa, y usar√° el Python dentro de tu entorno virtual con los paquetes que instalaste all√≠.

<div class="termy">

```console
$ python main.py

Hello World
```

</div>

## Configura Tu Editor

Probablemente usar√≠as un editor, aseg√∫rate de configurarlo para que use el mismo entorno virtual que creaste (probablemente lo autodetectar√°) para que puedas obtener autocompletado y errores en l√≠nea.

Por ejemplo:

* <a href="https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment" class="external-link" target="_blank">VS Code</a>
* <a href="https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html" class="external-link" target="_blank">PyCharm</a>

/// tip | Consejo

Normalmente solo tendr√≠as que hacer esto **una vez**, cuando crees el entorno virtual.

///

## Desactiva el Entorno Virtual

Una vez que hayas terminado de trabajar en tu proyecto, puedes **desactivar** el entorno virtual.

<div class="termy">

```console
$ deactivate
```

</div>

De esta manera, cuando ejecutes `python` no intentar√° ejecutarse desde ese entorno virtual con los paquetes instalados all√≠.

## Listo para Trabajar

Ahora est√°s listo para empezar a trabajar en tu proyecto.

/// tip | Consejo

¬øQuieres entender todo lo anterior?

Contin√∫a leyendo. üëáü§ì

///

## Por qu√© Entornos Virtuales

Para trabajar con FastAPI necesitas instalar <a href="https://www.python.org/" class="external-link" target="_blank">Python</a>.

Despu√©s de eso, necesitar√≠as **instalar** FastAPI y cualquier otro **paquete** que desees usar.

Para instalar paquetes normalmente usar√≠as el comando `pip` que viene con Python (o alternativas similares).

Sin embargo, si solo usas `pip` directamente, los paquetes se instalar√≠an en tu **entorno global de Python** (la instalaci√≥n global de Python).

### El Problema

Entonces, ¬øcu√°l es el problema de instalar paquetes en el entorno global de Python?

En alg√∫n momento, probablemente terminar√°s escribiendo muchos programas diferentes que dependen de **diferentes paquetes**. Y algunos de estos proyectos en los que trabajas depender√°n de **diferentes versiones** del mismo paquete. üò±

Por ejemplo, podr√≠as crear un proyecto llamado `philosophers-stone`, este programa depende de otro paquete llamado **`harry`, usando la versi√≥n `1`**. As√≠ que, necesitas instalar `harry`.

```mermaid
flowchart LR
    stone(philosophers-stone) -->|requires| harry-1[harry v1]
```

Luego, en alg√∫n momento despu√©s, creas otro proyecto llamado `prisoner-of-azkaban`, y este proyecto tambi√©n depende de `harry`, pero este proyecto necesita **`harry` versi√≥n `3`**.

```mermaid
flowchart LR
    azkaban(prisoner-of-azkaban) --> |requires| harry-3[harry v3]
```

Pero ahora el problema es, si instalas los paquetes globalmente (en el entorno global) en lugar de en un **entorno virtual local**, tendr√°s que elegir qu√© versi√≥n de `harry` instalar.

Si deseas ejecutar `philosophers-stone` necesitar√°s primero instalar `harry` versi√≥n `1`, por ejemplo con:

<div class="termy">

```console
$ pip install "harry==1"
```

</div>

Y entonces terminar√≠as con `harry` versi√≥n `1` instalada en tu entorno global de Python.

```mermaid
flowchart LR
    subgraph global[global env]
        harry-1[harry v1]
    end
    subgraph stone-project[philosophers-stone project]
        stone(philosophers-stone) -->|requires| harry-1
    end
```

Pero luego si deseas ejecutar `prisoner-of-azkaban`, necesitar√°s desinstalar `harry` versi√≥n `1` e instalar `harry` versi√≥n `3` (o simplemente instalar la versi√≥n `3` autom√°ticamente desinstalar√≠a la versi√≥n `1`).

<div class="termy">

```console
$ pip install "harry==3"
```

</div>

Y entonces terminar√≠as con `harry` versi√≥n `3` instalada en tu entorno global de Python.

Y si intentas ejecutar `philosophers-stone` de nuevo, hay una posibilidad de que **no funcione** porque necesita `harry` versi√≥n `1`.

```mermaid
flowchart LR
    subgraph global[global env]
        harry-1[<strike>harry v1</strike>]
        style harry-1 fill:#ccc,stroke-dasharray: 5 5
        harry-3[harry v3]
    end
    subgraph stone-project[philosophers-stone project]
        stone(philosophers-stone) -.-x|‚õîÔ∏è| harry-1
    end
    subgraph azkaban-project[prisoner-of-azkaban project]
        azkaban(prisoner-of-azkaban) --> |requires| harry-3
    end
```

/// tip | Consejo

Es muy com√∫n en los paquetes de Python intentar lo mejor para **evitar romper cambios** en **nuevas versiones**, pero es mejor estar seguro e instalar nuevas versiones intencionalmente y cuando puedas ejecutar las pruebas para verificar que todo est√° funcionando correctamente.

///

Ahora, imagina eso con **muchos** otros **paquetes** de los que dependen todos tus **proyectos**. Eso es muy dif√≠cil de manejar. Y probablemente terminar√≠as ejecutando algunos proyectos con algunas **versiones incompatibles** de los paquetes, y sin saber por qu√© algo no est√° funcionando.

Adem√°s, dependiendo de tu sistema operativo (por ejemplo, Linux, Windows, macOS), podr√≠a haber venido con Python ya instalado. Y en ese caso probablemente ten√≠a algunos paquetes preinstalados con algunas versiones espec√≠ficas **necesitadas por tu sistema**. Si instalas paquetes en el entorno global de Python, podr√≠as terminar **rompiendo** algunos de los programas que vinieron con tu sistema operativo.

## D√≥nde se Instalan los Paquetes

Cuando instalas Python, crea algunos directorios con algunos archivos en tu computadora.

Algunos de estos directorios son los encargados de tener todos los paquetes que instalas.

Cuando ejecutas:

<div class="termy">

```console
// No ejecutes esto ahora, solo es un ejemplo ü§ì
$ pip install "fastapi[standard]"
---> 100%
```

</div>

Eso descargar√° un archivo comprimido con el c√≥digo de FastAPI, normalmente desde <a href="https://pypi.org/project/fastapi/" class="external-link" target="_blank">PyPI</a>.

Tambi√©n **descargar√°** archivos para otros paquetes de los que depende FastAPI.

Luego, **extraer√°** todos esos archivos y los pondr√° en un directorio en tu computadora.

Por defecto, pondr√° esos archivos descargados y extra√≠dos en el directorio que viene con tu instalaci√≥n de Python, eso es el **entorno global**.

## Qu√© son los Entornos Virtuales

La soluci√≥n a los problemas de tener todos los paquetes en el entorno global es usar un **entorno virtual para cada proyecto** en el que trabajas.

Un entorno virtual es un **directorio**, muy similar al global, donde puedes instalar los paquetes para un proyecto.

De esta manera, cada proyecto tendr√° su propio entorno virtual (directorio `.venv`) con sus propios paquetes.

```mermaid
flowchart TB
    subgraph stone-project[philosophers-stone project]
        stone(philosophers-stone) --->|requires| harry-1
        subgraph venv1[.venv]
            harry-1[harry v1]
        end
    end
    subgraph azkaban-project[prisoner-of-azkaban project]
        azkaban(prisoner-of-azkaban) --->|requires| harry-3
        subgraph venv2[.venv]
            harry-3[harry v3]
        end
    end
    stone-project ~~~ azkaban-project
```

## Qu√© Significa Activar un Entorno Virtual

Cuando activas un entorno virtual, por ejemplo con:

//// tab | Linux, macOS

<div class="termy">

```console
$ source .venv/bin/activate
```

</div>

////

//// tab | Windows PowerShell

<div class="termy">

```console
$ .venv\Scripts\Activate.ps1
```

</div>

////

//// tab | Windows Bash

O si usas Bash para Windows (por ejemplo, <a href="https://gitforwindows.org/" class="external-link" target="_blank">Git Bash</a>):

<div class="termy">

```console
$ source .venv/Scripts/activate
```

</div>

////

Ese comando crear√° o modificar√° algunas [variables de entorno](environment-variables.md){.internal-link target=_blank} que estar√°n disponibles para los siguientes comandos.

Una de esas variables es la variable `PATH`.

/// tip | Consejo

Puedes aprender m√°s sobre la variable de entorno `PATH` en la secci√≥n [Variables de Entorno](environment-variables.md#path-environment-variable){.internal-link target=_blank}.

///

Activar un entorno virtual agrega su path `.venv/bin` (en Linux y macOS) o `.venv\Scripts` (en Windows) a la variable de entorno `PATH`.

Digamos que antes de activar el entorno, la variable `PATH` se ve√≠a as√≠:

//// tab | Linux, macOS

```plaintext
/usr/bin:/bin:/usr/sbin:/sbin
```

Eso significa que el sistema buscar√≠a programas en:

* `/usr/bin`
* `/bin`
* `/usr/sbin`
* `/sbin`

////

//// tab | Windows

```plaintext
C:\Windows\System32
```

Eso significa que el sistema buscar√≠a programas en:

* `C:\Windows\System32`

////

Despu√©s de activar el entorno virtual, la variable `PATH` se ver√≠a algo as√≠:

//// tab | Linux, macOS

```plaintext
/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

Eso significa que el sistema ahora comenzar√° a buscar primero los programas en:

```plaintext
/home/user/code/awesome-project/.venv/bin
```

antes de buscar en los otros directorios.

As√≠ que, cuando escribas `python` en el terminal, el sistema encontrar√° el programa Python en

```plaintext
/home/user/code/awesome-project/.venv/bin/python
```

y utilizar√° ese.

////

//// tab | Windows

```plaintext
C:\Users\user\code\awesome-project\.venv\Scripts;C:\Windows\System32
```

Eso significa que el sistema ahora comenzar√° a buscar primero los programas en:

```plaintext
C:\Users\user\code\awesome-project\.venv\Scripts
```

antes de buscar en los otros directorios.

As√≠ que, cuando escribas `python` en el terminal, el sistema encontrar√° el programa Python en

```plaintext
C:\Users\user\code\awesome-project\.venv\Scripts\python
```

y utilizar√° ese.

////

Un detalle importante es que pondr√° el path del entorno virtual al **comienzo** de la variable `PATH`. El sistema lo encontrar√° **antes** que cualquier otro Python disponible. De esta manera, cuando ejecutes `python`, utilizar√° el Python **del entorno virtual** en lugar de cualquier otro `python` (por ejemplo, un `python` de un entorno global).

Activar un entorno virtual tambi√©n cambia un par de otras cosas, pero esta es una de las cosas m√°s importantes que hace.

## Verificando un Entorno Virtual

Cuando revisas si un entorno virtual est√° activo, por ejemplo con:

//// tab | Linux, macOS, Windows Bash

<div class="termy">

```console
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

</div>

////

//// tab | Windows PowerShell

<div class="termy">

```console
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

</div>

////

Eso significa que el programa `python` que se utilizar√° es el que est√° **en el entorno virtual**.

Usas `which` en Linux y macOS y `Get-Command` en Windows PowerShell.

La forma en que funciona ese comando es que ir√° y revisar√° la variable de entorno `PATH`, pasando por **cada path en orden**, buscando el programa llamado `python`. Una vez que lo encuentre, te **mostrar√° el path** a ese programa.

La parte m√°s importante es que cuando llamas a `python`, ese es el exacto "`python`" que ser√° ejecutado.

As√≠ que, puedes confirmar si est√°s en el entorno virtual correcto.

/// tip | Consejo

Es f√°cil activar un entorno virtual, obtener un Python, y luego **ir a otro proyecto**.

Y el segundo proyecto **no funcionar√≠a** porque est√°s usando el **Python incorrecto**, de un entorno virtual para otro proyecto.

Es √∫til poder revisar qu√© `python` se est√° usando. ü§ì

///

## Por qu√© Desactivar un Entorno Virtual

Por ejemplo, podr√≠as estar trabajando en un proyecto `philosophers-stone`, **activar ese entorno virtual**, instalar paquetes y trabajar con ese entorno.

Y luego quieres trabajar en **otro proyecto** `prisoner-of-azkaban`.

Vas a ese proyecto:

<div class="termy">

```console
$ cd ~/code/prisoner-of-azkaban
```

</div>

Si no desactivas el entorno virtual para `philosophers-stone`, cuando ejecutes `python` en el terminal, intentar√° usar el Python de `philosophers-stone`.

<div class="termy">

```console
$ cd ~/code/prisoner-of-azkaban

$ python main.py

// Error importando sirius, no est√° instalado üò±
Traceback (most recent call last):
    File "main.py", line 1, in <module>
        import sirius
```

</div>

Pero si desactivas el entorno virtual y activas el nuevo para `prisoner-of-askaban` entonces cuando ejecutes `python` utilizar√° el Python del entorno virtual en `prisoner-of-azkaban`.

<div class="termy">

```console
$ cd ~/code/prisoner-of-azkaban

// No necesitas estar en el directorio antiguo para desactivar, puedes hacerlo donde sea que est√©s, incluso despu√©s de ir al otro proyecto üòé
$ deactivate

// Activa el entorno virtual en prisoner-of-azkaban/.venv üöÄ
$ source .venv/bin/activate

// Ahora cuando ejecutes python, encontrar√° el paquete sirius instalado en este entorno virtual ‚ú®
$ python main.py

I solemnly swear üê∫
```

</div>

## Alternativas

Esta es una gu√≠a simple para comenzar y ense√±arte c√≥mo funciona todo **por debajo**.

Hay muchas **alternativas** para gestionar entornos virtuales, dependencias de paquetes (requisitos), proyectos.

Una vez que est√©s listo y quieras usar una herramienta para **gestionar todo el proyecto**, dependencias de paquetes, entornos virtuales, etc. Te sugerir√≠a probar <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">uv</a>.

`uv` puede hacer muchas cosas, puede:

* **Instalar Python** por ti, incluyendo diferentes versiones
* Gestionar el **entorno virtual** para tus proyectos
* Instalar **paquetes**
* Gestionar **dependencias y versiones** de paquetes para tu proyecto
* Asegurarse de que tengas un conjunto **exacto** de paquetes y versiones para instalar, incluidas sus dependencias, para que puedas estar seguro de que puedes ejecutar tu proyecto en producci√≥n exactamente igual que en tu computadora mientras desarrollas, esto se llama **locking**
* Y muchas otras cosas

## Conclusi√≥n

Si le√≠ste y comprendiste todo esto, ahora **sabes mucho m√°s** sobre entornos virtuales que muchos desarrolladores por ah√≠. ü§ì

Conocer estos detalles probablemente te ser√° √∫til en el futuro cuando est√©s depurando algo que parece complejo, pero sabr√°s **c√≥mo funciona todo por debajo**. üòé


================================================
File: /docs/es/docs/about/index.md
================================================
# Acerca de

Acerca de FastAPI, su dise√±o, inspiraci√≥n y m√°s. ü§ì


================================================
File: /docs/es/docs/advanced/additional-responses.md
================================================
# Responses Adicionales en OpenAPI

/// warning | Advertencia

Este es un tema bastante avanzado.

Si est√°s comenzando con **FastAPI**, puede que no lo necesites.

///

Puedes declarar responses adicionales, con c√≥digos de estado adicionales, media types, descripciones, etc.

Esos responses adicionales se incluir√°n en el esquema de OpenAPI, por lo que tambi√©n aparecer√°n en la documentaci√≥n de la API.

Pero para esos responses adicionales tienes que asegurarte de devolver un `Response` como `JSONResponse` directamente, con tu c√≥digo de estado y contenido.

## Response Adicional con `model`

Puedes pasar a tus *decoradores de path operation* un par√°metro `responses`.

Recibe un `dict`: las claves son los c√≥digos de estado para cada response (como `200`), y los valores son otros `dict`s con la informaci√≥n para cada uno de ellos.

Cada uno de esos `dict`s de response puede tener una clave `model`, conteniendo un modelo de Pydantic, as√≠ como `response_model`.

**FastAPI** tomar√° ese modelo, generar√° su JSON Schema y lo incluir√° en el lugar correcto en OpenAPI.

Por ejemplo, para declarar otro response con un c√≥digo de estado `404` y un modelo Pydantic `Message`, puedes escribir:

{* ../../docs_src/additional_responses/tutorial001.py hl[18,22] *}

/// note | Nota

Ten en cuenta que debes devolver el `JSONResponse` directamente.

///

/// info | Informaci√≥n

La clave `model` no es parte de OpenAPI.

**FastAPI** tomar√° el modelo de Pydantic de all√≠, generar√° el JSON Schema y lo colocar√° en el lugar correcto.

El lugar correcto es:

* En la clave `content`, que tiene como valor otro objeto JSON (`dict`) que contiene:
  * Una clave con el media type, por ejemplo, `application/json`, que contiene como valor otro objeto JSON, que contiene:
    * Una clave `schema`, que tiene como valor el JSON Schema del modelo, aqu√≠ es el lugar correcto.
        * **FastAPI** agrega una referencia aqu√≠ a los JSON Schemas globales en otro lugar de tu OpenAPI en lugar de incluirlo directamente. De este modo, otras aplicaciones y clientes pueden usar esos JSON Schemas directamente, proporcionar mejores herramientas de generaci√≥n de c√≥digo, etc.

///

Los responses generadas en el OpenAPI para esta *path operation* ser√°n:

```JSON hl_lines="3-12"
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

Los esquemas se referencian a otro lugar dentro del esquema de OpenAPI:

```JSON hl_lines="4-16"
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

## Media types adicionales para el response principal

Puedes usar este mismo par√°metro `responses` para agregar diferentes media type para el mismo response principal.

Por ejemplo, puedes agregar un media type adicional de `image/png`, declarando que tu *path operation* puede devolver un objeto JSON (con media type `application/json`) o una imagen PNG:

{* ../../docs_src/additional_responses/tutorial002.py hl[19:24,28] *}

/// note | Nota

Nota que debes devolver la imagen usando un `FileResponse` directamente.

///

/// info | Informaci√≥n

A menos que especifiques un media type diferente expl√≠citamente en tu par√°metro `responses`, FastAPI asumir√° que el response tiene el mismo media type que la clase de response principal (por defecto `application/json`).

Pero si has especificado una clase de response personalizada con `None` como su media type, FastAPI usar√° `application/json` para cualquier response adicional que tenga un modelo asociado.

///

## Combinando informaci√≥n

Tambi√©n puedes combinar informaci√≥n de response de m√∫ltiples lugares, incluyendo los par√°metros `response_model`, `status_code`, y `responses`.

Puedes declarar un `response_model`, usando el c√≥digo de estado predeterminado `200` (o uno personalizado si lo necesitas), y luego declarar informaci√≥n adicional para ese mismo response en `responses`, directamente en el esquema de OpenAPI.

**FastAPI** manter√° la informaci√≥n adicional de `responses` y la combinar√° con el JSON Schema de tu modelo.

Por ejemplo, puedes declarar un response con un c√≥digo de estado `404` que usa un modelo Pydantic y tiene una `description` personalizada.

Y un response con un c√≥digo de estado `200` que usa tu `response_model`, pero incluye un `example` personalizado:

{* ../../docs_src/additional_responses/tutorial003.py hl[20:31] *}

Todo se combinar√° e incluir√° en tu OpenAPI, y se mostrar√° en la documentaci√≥n de la API:

<img src="/img/tutorial/additional-responses/image01.png">

## Combina responses predefinidos y personalizados

Es posible que desees tener algunos responses predefinidos que se apliquen a muchas *path operations*, pero que quieras combinarlos con responses personalizados necesarios por cada *path operation*.

Para esos casos, puedes usar la t√©cnica de Python de "desempaquetar" un `dict` con `**dict_to_unpack`:

```Python
old_dict = {
    "old key": "old value",
    "second old key": "second old value",
}
new_dict = {**old_dict, "new key": "new value"}
```

Aqu√≠, `new_dict` contendr√° todos los pares clave-valor de `old_dict` m√°s el nuevo par clave-valor:

```Python
{
    "old key": "old value",
    "second old key": "second old value",
    "new key": "new value",
}
```

Puedes usar esa t√©cnica para reutilizar algunos responses predefinidos en tus *path operations* y combinarlos con otros personalizados adicionales.

Por ejemplo:

{* ../../docs_src/additional_responses/tutorial004.py hl[13:17,26] *}

## M√°s informaci√≥n sobre responses OpenAPI

Para ver exactamente qu√© puedes incluir en los responses, puedes revisar estas secciones en la especificaci√≥n OpenAPI:

* <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#responses-object" class="external-link" target="_blank">Objeto de Responses de OpenAPI</a>, incluye el `Response Object`.
* <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#response-object" class="external-link" target="_blank">Objeto de Response de OpenAPI</a>, puedes incluir cualquier cosa de esto directamente en cada response dentro de tu par√°metro `responses`. Incluyendo `description`, `headers`, `content` (dentro de este es que declaras diferentes media types y JSON Schemas), y `links`.


================================================
File: /docs/es/docs/advanced/additional-status-codes.md
================================================
# C√≥digos de Estado Adicionales

Por defecto, **FastAPI** devolver√° los responses usando un `JSONResponse`, colocando el contenido que devuelves desde tu *path operation* dentro de ese `JSONResponse`.

Usar√° el c√≥digo de estado por defecto o el que configures en tu *path operation*.

## C√≥digos de estado adicionales

Si quieres devolver c√≥digos de estado adicionales aparte del principal, puedes hacerlo devolviendo un `Response` directamente, como un `JSONResponse`, y configurando el c√≥digo de estado adicional directamente.

Por ejemplo, supongamos que quieres tener una *path operation* que permita actualizar elementos, y devuelva c√≥digos de estado HTTP de 200 "OK" cuando sea exitoso.

Pero tambi√©n quieres que acepte nuevos elementos. Y cuando los elementos no exist√≠an antes, los crea y devuelve un c√≥digo de estado HTTP de 201 "Created".

Para lograr eso, importa `JSONResponse`, y devuelve tu contenido all√≠ directamente, configurando el `status_code` que deseas:

{* ../../docs_src/additional_status_codes/tutorial001_an_py310.py hl[4,25] *}

/// warning | Advertencia

Cuando devuelves un `Response` directamente, como en el ejemplo anterior, se devuelve directamente.

No se serializar√° con un modelo, etc.

Aseg√∫rate de que tenga los datos que deseas que tenga y que los valores sean JSON v√°lidos (si est√°s usando `JSONResponse`).

///

/// note | Detalles T√©cnicos

Tambi√©n podr√≠as usar `from starlette.responses import JSONResponse`.

**FastAPI** proporciona los mismos `starlette.responses` que `fastapi.responses` solo como una conveniencia para ti, el desarrollador. Pero la mayor√≠a de los responses disponibles provienen directamente de Starlette. Lo mismo con `status`.

///

## OpenAPI y documentaci√≥n de API

Si devuelves c√≥digos de estado adicionales y responses directamente, no se incluir√°n en el esquema de OpenAPI (la documentaci√≥n de la API), porque FastAPI no tiene una forma de saber de antemano qu√© vas a devolver.

Pero puedes documentarlo en tu c√≥digo, usando: [Responses Adicionales](additional-responses.md){.internal-link target=_blank}.


================================================
File: /docs/es/docs/advanced/advanced-dependencies.md
================================================
# Dependencias Avanzadas

## Dependencias con par√°metros

Todas las dependencias que hemos visto son una funci√≥n o clase fija.

Pero podr√≠a haber casos en los que quieras poder establecer par√°metros en la dependencia, sin tener que declarar muchas funciones o clases diferentes.

Imaginemos que queremos tener una dependencia que revise si el par√°metro de query `q` contiene alg√∫n contenido fijo.

Pero queremos poder parametrizar ese contenido fijo.

## Una *instance* "callable"

En Python hay una forma de hacer que una instance de una clase sea un "callable".

No la clase en s√≠ (que ya es un callable), sino una instance de esa clase.

Para hacer eso, declaramos un m√©todo `__call__`:

{* ../../docs_src/dependencies/tutorial011_an_py39.py hl[12] *}

En este caso, este `__call__` es lo que **FastAPI** usar√° para comprobar par√°metros adicionales y sub-dependencias, y es lo que llamar√° para pasar un valor al par√°metro en tu *path operation function* m√°s adelante.

## Parametrizar la instance

Y ahora, podemos usar `__init__` para declarar los par√°metros de la instance que podemos usar para "parametrizar" la dependencia:

{* ../../docs_src/dependencies/tutorial011_an_py39.py hl[9] *}

En este caso, **FastAPI** nunca tocar√° ni se preocupar√° por `__init__`, lo usaremos directamente en nuestro c√≥digo.

## Crear una instance

Podr√≠amos crear una instance de esta clase con:

{* ../../docs_src/dependencies/tutorial011_an_py39.py hl[18] *}

Y de esa manera podemos "parametrizar" nuestra dependencia, que ahora tiene `"bar"` dentro de ella, como el atributo `checker.fixed_content`.

## Usar la instance como una dependencia

Luego, podr√≠amos usar este `checker` en un `Depends(checker)`, en lugar de `Depends(FixedContentQueryChecker)`, porque la dependencia es la instance, `checker`, no la clase en s√≠.

Y al resolver la dependencia, **FastAPI** llamar√° a este `checker` as√≠:

```Python
checker(q="somequery")
```

...y pasar√° lo que eso retorne como el valor de la dependencia en nuestra *path operation function* como el par√°metro `fixed_content_included`:

{* ../../docs_src/dependencies/tutorial011_an_py39.py hl[22] *}

/// tip | Consejo

Todo esto podr√≠a parecer complicado. Y puede que no est√© muy claro c√≥mo es √∫til a√∫n.

Estos ejemplos son intencionalmente simples, pero muestran c√≥mo funciona todo.

En los cap√≠tulos sobre seguridad, hay funciones utilitarias que se implementan de esta misma manera.

Si entendiste todo esto, ya sabes c√≥mo funcionan por debajo esas herramientas de utilidad para seguridad.

///


================================================
File: /docs/es/docs/advanced/async-tests.md
================================================
# Tests As√≠ncronos

Ya has visto c√≥mo probar tus aplicaciones de **FastAPI** usando el `TestClient` proporcionado. Hasta ahora, solo has visto c√≥mo escribir tests sincr√≥nicos, sin usar funciones `async`.

Poder usar funciones as√≠ncronas en tus tests puede ser √∫til, por ejemplo, cuando consultas tu base de datos de forma as√≠ncrona. Imagina que quieres probar el env√≠o de requests a tu aplicaci√≥n FastAPI y luego verificar que tu backend escribi√≥ exitosamente los datos correctos en la base de datos, mientras usas un paquete de base de datos as√≠ncrono.

Veamos c√≥mo podemos hacer que esto funcione.

## pytest.mark.anyio

Si queremos llamar funciones as√≠ncronas en nuestros tests, nuestras funciones de test tienen que ser as√≠ncronas. AnyIO proporciona un plugin √∫til para esto, que nos permite especificar que algunas funciones de test deben ser llamadas de manera as√≠ncrona.

## HTTPX

Incluso si tu aplicaci√≥n de **FastAPI** usa funciones `def` normales en lugar de `async def`, sigue siendo una aplicaci√≥n `async` por debajo.

El `TestClient` hace algo de magia interna para llamar a la aplicaci√≥n FastAPI as√≠ncrona en tus funciones de test `def` normales, usando pytest est√°ndar. Pero esa magia ya no funciona cuando lo usamos dentro de funciones as√≠ncronas. Al ejecutar nuestros tests de manera as√≠ncrona, ya no podemos usar el `TestClient` dentro de nuestras funciones de test.

El `TestClient` est√° basado en <a href="https://www.python-httpx.org" class="external-link" target="_blank">HTTPX</a>, y afortunadamente, podemos usarlo directamente para probar la API.

## Ejemplo

Para un ejemplo simple, consideremos una estructura de archivos similar a la descrita en [Aplicaciones M√°s Grandes](../tutorial/bigger-applications.md){.internal-link target=_blank} y [Testing](../tutorial/testing.md){.internal-link target=_blank}:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ test_main.py
```

El archivo `main.py` tendr√≠a:

{* ../../docs_src/async_tests/main.py *}

El archivo `test_main.py` tendr√≠a los tests para `main.py`, podr√≠a verse as√≠ ahora:

{* ../../docs_src/async_tests/test_main.py *}

## Ejec√∫talo

Puedes ejecutar tus tests como de costumbre v√≠a:

<div class="termy">

```console
$ pytest

---> 100%
```

</div>

## En Detalle

El marcador `@pytest.mark.anyio` le dice a pytest que esta funci√≥n de test debe ser llamada as√≠ncronamente:

{* ../../docs_src/async_tests/test_main.py hl[7] *}

/// tip | Consejo

Note que la funci√≥n de test ahora es `async def` en lugar de solo `def` como antes al usar el `TestClient`.

///

Luego podemos crear un `AsyncClient` con la app y enviar requests as√≠ncronos a ella, usando `await`.

{* ../../docs_src/async_tests/test_main.py hl[9:12] *}

Esto es equivalente a:

```Python
response = client.get('/')
```

...que us√°bamos para hacer nuestros requests con el `TestClient`.

/// tip | Consejo

Nota que estamos usando async/await con el nuevo `AsyncClient`: el request es as√≠ncrono.

///

/// warning | Advertencia

Si tu aplicaci√≥n depende de eventos de lifespan, el `AsyncClient` no activar√° estos eventos. Para asegurarte de que se activen, usa `LifespanManager` de <a href="https://github.com/florimondmanca/asgi-lifespan#usage" class="external-link" target="_blank">florimondmanca/asgi-lifespan</a>.

///

## Otras Llamadas a Funciones As√≠ncronas

Al ser la funci√≥n de test as√≠ncrona, ahora tambi√©n puedes llamar (y `await`) otras funciones `async` adem√°s de enviar requests a tu aplicaci√≥n FastAPI en tus tests, exactamente como las llamar√≠as en cualquier otro lugar de tu c√≥digo.

/// tip | Consejo

Si encuentras un `RuntimeError: Task attached to a different loop` al integrar llamadas a funciones as√≠ncronas en tus tests (por ejemplo, cuando usas <a href="https://stackoverflow.com/questions/41584243/runtimeerror-task-attached-to-a-different-loop" class="external-link" target="_blank">MotorClient de MongoDB</a>), recuerda crear instances de objetos que necesiten un loop de eventos solo dentro de funciones async, por ejemplo, en un callback `'@app.on_event("startup")`.

///


================================================
File: /docs/es/docs/advanced/behind-a-proxy.md
================================================
# Detr√°s de un Proxy

En algunas situaciones, podr√≠as necesitar usar un **proxy** como Traefik o Nginx con una configuraci√≥n que a√±ade un prefijo de path extra que no es visto por tu aplicaci√≥n.

En estos casos, puedes usar `root_path` para configurar tu aplicaci√≥n.

El `root_path` es un mecanismo proporcionado por la especificaci√≥n ASGI (en la que est√° construido FastAPI, a trav√©s de Starlette).

El `root_path` se usa para manejar estos casos espec√≠ficos.

Y tambi√©n se usa internamente al montar subaplicaciones.

## Proxy con un prefijo de path eliminado

Tener un proxy con un prefijo de path eliminado, en este caso, significa que podr√≠as declarar un path en `/app` en tu c√≥digo, pero luego a√±ades una capa encima (el proxy) que situar√≠a tu aplicaci√≥n **FastAPI** bajo un path como `/api/v1`.

En este caso, el path original `/app` realmente ser√≠a servido en `/api/v1/app`.

Aunque todo tu c√≥digo est√© escrito asumiendo que solo existe `/app`.

{* ../../docs_src/behind_a_proxy/tutorial001.py hl[6] *}

Y el proxy estar√≠a **"eliminando"** el **prefijo del path** sobre la marcha antes de transmitir el request al servidor de aplicaciones (probablemente Uvicorn a trav√©s de FastAPI CLI), manteniendo a tu aplicaci√≥n convencida de que est√° siendo servida en `/app`, as√≠ que no tienes que actualizar todo tu c√≥digo para incluir el prefijo `/api/v1`.

Hasta aqu√≠, todo funcionar√≠a normalmente.

Pero luego, cuando abres la UI integrada de los docs (el frontend), esperar√≠a obtener el esquema de OpenAPI en `/openapi.json`, en lugar de `/api/v1/openapi.json`.

Entonces, el frontend (que se ejecuta en el navegador) tratar√≠a de alcanzar `/openapi.json` y no podr√≠a obtener el esquema de OpenAPI.

Porque tenemos un proxy con un prefijo de path de `/api/v1` para nuestra aplicaci√≥n, el frontend necesita obtener el esquema de OpenAPI en `/api/v1/openapi.json`.

```mermaid
graph LR

browser("Navegador")
proxy["Proxy en http://0.0.0.0:9999/api/v1/app"]
server["Servidor en http://127.0.0.1:8000/app"]

browser --> proxy
proxy --> server
```

/// tip | Consejo

La IP `0.0.0.0` se usa com√∫nmente para indicar que el programa escucha en todas las IPs disponibles en esa m√°quina/servidor.

///

La UI de los docs tambi√©n necesitar√≠a el esquema de OpenAPI para declarar que este API `servidor` se encuentra en `/api/v1` (detr√°s del proxy). Por ejemplo:

```JSON hl_lines="4-8"
{
    "openapi": "3.1.0",
    // M√°s cosas aqu√≠
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
            // M√°s cosas aqu√≠
    }
}
```

En este ejemplo, el "Proxy" podr√≠a ser algo como **Traefik**. Y el servidor ser√≠a algo como FastAPI CLI con **Uvicorn**, ejecutando tu aplicaci√≥n de FastAPI.

### Proporcionando el `root_path`

Para lograr esto, puedes usar la opci√≥n de l√≠nea de comandos `--root-path` como:

<div class="termy">

```console
$ fastapi run main.py --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Si usas Hypercorn, tambi√©n tiene la opci√≥n `--root-path`.

/// note | Detalles T√©cnicos

La especificaci√≥n ASGI define un `root_path` para este caso de uso.

Y la opci√≥n de l√≠nea de comandos `--root-path` proporciona ese `root_path`.

///

### Revisar el `root_path` actual

Puedes obtener el `root_path` actual utilizado por tu aplicaci√≥n para cada request, es parte del diccionario `scope` (que es parte de la especificaci√≥n ASGI).

Aqu√≠ lo estamos incluyendo en el mensaje solo con fines de demostraci√≥n.

{* ../../docs_src/behind_a_proxy/tutorial001.py hl[8] *}

Luego, si inicias Uvicorn con:

<div class="termy">

```console
$ fastapi run main.py --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

El response ser√≠a algo como:

```JSON
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

### Configurar el `root_path` en la app de FastAPI

Alternativamente, si no tienes una forma de proporcionar una opci√≥n de l√≠nea de comandos como `--root-path` o su equivalente, puedes configurar el par√°metro `root_path` al crear tu app de FastAPI:

{* ../../docs_src/behind_a_proxy/tutorial002.py hl[3] *}

Pasar el `root_path` a `FastAPI` ser√≠a el equivalente a pasar la opci√≥n de l√≠nea de comandos `--root-path` a Uvicorn o Hypercorn.

### Acerca de `root_path`

Ten en cuenta que el servidor (Uvicorn) no usar√° ese `root_path` para nada, a excepci√≥n de pas√°rselo a la app.

Pero si vas con tu navegador a <a href="http://127.0.0.1:8000" class="external-link" target="_blank">http://127.0.0.1:8000/app</a> ver√°s el response normal:

```JSON
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

As√≠ que no se esperar√° que sea accedido en `http://127.0.0.1:8000/api/v1/app`.

Uvicorn esperar√° que el proxy acceda a Uvicorn en `http://127.0.0.1:8000/app`, y luego ser√° responsabilidad del proxy a√±adir el prefijo extra `/api/v1` encima.

## Sobre proxies con un prefijo de path eliminado

Ten en cuenta que un proxy con prefijo de path eliminado es solo una de las formas de configurarlo.

Probablemente en muchos casos, el valor predeterminado ser√° que el proxy no tenga un prefijo de path eliminado.

En un caso as√≠ (sin un prefijo de path eliminado), el proxy escuchar√≠a algo como `https://myawesomeapp.com`, y luego si el navegador va a `https://myawesomeapp.com/api/v1/app` y tu servidor (por ejemplo, Uvicorn) escucha en `http://127.0.0.1:8000`, el proxy (sin un prefijo de path eliminado) acceder√≠a a Uvicorn en el mismo path: `http://127.0.0.1:8000/api/v1/app`.

## Probando localmente con Traefik

Puedes ejecutar f√°cilmente el experimento localmente con un prefijo de path eliminado usando <a href="https://docs.traefik.io/" class="external-link" target="_blank">Traefik</a>.

<a href="https://github.com/containous/traefik/releases" class="external-link" target="_blank">Descarga Traefik</a>, es un archivo binario √∫nico, puedes extraer el archivo comprimido y ejecutarlo directamente desde la terminal.

Luego crea un archivo `traefik.toml` con:

```TOML hl_lines="3"
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

Esto le dice a Traefik que escuche en el puerto 9999 y que use otro archivo `routes.toml`.

/// tip | Consejo

Estamos utilizando el puerto 9999 en lugar del puerto HTTP est√°ndar 80 para que no tengas que ejecutarlo con privilegios de administrador (`sudo`).

///

Ahora crea ese otro archivo `routes.toml`:

```TOML hl_lines="5  12  20"
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

Este archivo configura Traefik para usar el prefijo de path `/api/v1`.

Y luego Traefik redireccionar√° sus requests a tu Uvicorn ejecut√°ndose en `http://127.0.0.1:8000`.

Ahora inicia Traefik:

<div class="termy">

```console
$ ./traefik --configFile=traefik.toml

INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml
```

</div>

Y ahora inicia tu app, utilizando la opci√≥n `--root-path`:

<div class="termy">

```console
$ fastapi run main.py --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

### Revisa los responses

Ahora, si vas a la URL con el puerto para Uvicorn: <a href="http://127.0.0.1:8000/app" class="external-link" target="_blank">http://127.0.0.1:8000/app</a>, ver√°s el response normal:

```JSON
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

/// tip | Consejo

Nota que incluso aunque est√©s accediendo en `http://127.0.0.1:8000/app`, muestra el `root_path` de `/api/v1`, tomado de la opci√≥n `--root-path`.

///

Y ahora abre la URL con el puerto para Traefik, incluyendo el prefijo de path: <a href="http://127.0.0.1:9999/api/v1/app" class="external-link" target="_blank">http://127.0.0.1:9999/api/v1/app</a>.

Obtenemos el mismo response:

```JSON
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

pero esta vez en la URL con el prefijo de path proporcionado por el proxy: `/api/v1`.

Por supuesto, la idea aqu√≠ es que todos accedan a la app a trav√©s del proxy, as√≠ que la versi√≥n con el prefijo de path `/api/v1` es la "correcta".

Y la versi√≥n sin el prefijo de path (`http://127.0.0.1:8000/app`), proporcionada directamente por Uvicorn, ser√≠a exclusivamente para que el _proxy_ (Traefik) la acceda.

Eso demuestra c√≥mo el Proxy (Traefik) usa el prefijo de path y c√≥mo el servidor (Uvicorn) usa el `root_path` de la opci√≥n `--root-path`.

### Revisa la UI de los docs

Pero aqu√≠ est√° la parte divertida. ‚ú®

La forma "oficial" de acceder a la app ser√≠a a trav√©s del proxy con el prefijo de path que definimos. As√≠ que, como esperar√≠amos, si intentas usar la UI de los docs servida por Uvicorn directamente, sin el prefijo de path en la URL, no funcionar√°, porque espera ser accedida a trav√©s del proxy.

Puedes verificarlo en <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>:

<img src="/img/tutorial/behind-a-proxy/image01.png">

Pero si accedemos a la UI de los docs en la URL "oficial" usando el proxy con puerto `9999`, en `/api/v1/docs`, ¬°funciona correctamente! üéâ

Puedes verificarlo en <a href="http://127.0.0.1:9999/api/v1/docs" class="external-link" target="_blank">http://127.0.0.1:9999/api/v1/docs</a>:

<img src="/img/tutorial/behind-a-proxy/image02.png">

Justo como quer√≠amos. ‚úîÔ∏è

Esto es porque FastAPI usa este `root_path` para crear el `server` por defecto en OpenAPI con la URL proporcionada por `root_path`.

## Servidores adicionales

/// warning | Advertencia

Este es un caso de uso m√°s avanzado. Si√©ntete libre de omitirlo.

///

Por defecto, **FastAPI** crear√° un `server` en el esquema de OpenAPI con la URL para el `root_path`.

Pero tambi√©n puedes proporcionar otros `servers` alternativos, por ejemplo, si deseas que *la misma* UI de los docs interact√∫e con un entorno de pruebas y de producci√≥n.

Si pasas una lista personalizada de `servers` y hay un `root_path` (porque tu API existe detr√°s de un proxy), **FastAPI** insertar√° un "server" con este `root_path` al comienzo de la lista.

Por ejemplo:

{* ../../docs_src/behind_a_proxy/tutorial003.py hl[4:7] *}

Generar√° un esquema de OpenAPI como:

```JSON hl_lines="5-7"
{
    "openapi": "3.1.0",
    // M√°s cosas aqu√≠
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Entorno de pruebas"
        },
        {
            "url": "https://prod.example.com",
            "description": "Entorno de producci√≥n"
        }
    ],
    "paths": {
            // M√°s cosas aqu√≠
    }
}
```

/// tip | Consejo

Observa el server auto-generado con un valor `url` de `/api/v1`, tomado del `root_path`.

///

En la UI de los docs en <a href="http://127.0.0.1:9999/api/v1/docs" class="external-link" target="_blank">http://127.0.0.1:9999/api/v1/docs</a> se ver√≠a como:

<img src="/img/tutorial/behind-a-proxy/image03.png">

/// tip | Consejo

La UI de los docs interactuar√° con el server que selecciones.

///

### Desactivar el server autom√°tico de `root_path`

Si no quieres que **FastAPI** incluya un server autom√°tico usando el `root_path`, puedes usar el par√°metro `root_path_in_servers=False`:

{* ../../docs_src/behind_a_proxy/tutorial004.py hl[9] *}

y entonces no lo incluir√° en el esquema de OpenAPI.

## Montando una sub-aplicaci√≥n

Si necesitas montar una sub-aplicaci√≥n (como se describe en [Aplicaciones secundarias - Monturas](sub-applications.md){.internal-link target=_blank}) mientras usas un proxy con `root_path`, puedes hacerlo normalmente, como esperar√≠as.

FastAPI usar√° internamente el `root_path` de manera inteligente, as√≠ que simplemente funcionar√°. ‚ú®


================================================
File: /docs/es/docs/advanced/custom-response.md
================================================
# Response Personalizado - HTML, Stream, Archivo, otros

Por defecto, **FastAPI** devolver√° los responses usando `JSONResponse`.

Puedes sobrescribirlo devolviendo un `Response` directamente como se ve en [Devolver una Response directamente](response-directly.md){.internal-link target=_blank}.

Pero si devuelves un `Response` directamente (o cualquier subclase, como `JSONResponse`), los datos no se convertir√°n autom√°ticamente (incluso si declaras un `response_model`), y la documentaci√≥n no se generar√° autom√°ticamente (por ejemplo, incluyendo el "media type" espec√≠fico, en el HTTP header `Content-Type` como parte del OpenAPI generado).

Pero tambi√©n puedes declarar el `Response` que quieres usar (por ejemplo, cualquier subclase de `Response`), en el *path operation decorator* usando el par√°metro `response_class`.

Los contenidos que devuelvas desde tu *path operation function* se colocar√°n dentro de esa `Response`.

Y si ese `Response` tiene un media type JSON (`application/json`), como es el caso con `JSONResponse` y `UJSONResponse`, los datos que devuelvas se convertir√°n autom√°ticamente (y ser√°n filtrados) con cualquier `response_model` de Pydantic que hayas declarado en el *path operation decorator*.

/// note | Nota

Si usas una clase de response sin media type, FastAPI esperar√° que tu response no tenga contenido, por lo que no documentar√° el formato del response en su OpenAPI generado.

///

## Usa `ORJSONResponse`

Por ejemplo, si est√°s exprimendo el rendimiento, puedes instalar y usar <a href="https://github.com/ijl/orjson" class="external-link" target="_blank">`orjson`</a> y establecer el response como `ORJSONResponse`.

Importa la clase `Response` (sub-clase) que quieras usar y decl√°rala en el *path operation decorator*.

Para responses grandes, devolver una `Response` directamente es mucho m√°s r√°pido que devolver un diccionario.

Esto se debe a que, por defecto, FastAPI inspeccionar√° cada elemento dentro y se asegurar√° de que sea serializable como JSON, usando el mismo [Codificador Compatible con JSON](../tutorial/encoder.md){.internal-link target=_blank} explicado en el tutorial. Esto es lo que te permite devolver **objetos arbitrarios**, por ejemplo, modelos de bases de datos.

Pero si est√°s seguro de que el contenido que est√°s devolviendo es **serializable con JSON**, puedes pasarlo directamente a la clase de response y evitar la sobrecarga extra que FastAPI tendr√≠a al pasar tu contenido de retorno a trav√©s de `jsonable_encoder` antes de pasarlo a la clase de response.

{* ../../docs_src/custom_response/tutorial001b.py hl[2,7] *}

/// info | Informaci√≥n

El par√°metro `response_class` tambi√©n se utilizar√° para definir el "media type" del response.

En este caso, el HTTP header `Content-Type` se establecer√° en `application/json`.

Y se documentar√° as√≠ en OpenAPI.

///

/// tip | Consejo

El `ORJSONResponse` solo est√° disponible en FastAPI, no en Starlette.

///

## Response HTML

Para devolver un response con HTML directamente desde **FastAPI**, usa `HTMLResponse`.

* Importa `HTMLResponse`.
* Pasa `HTMLResponse` como par√°metro `response_class` de tu *path operation decorator*.

{* ../../docs_src/custom_response/tutorial002.py hl[2,7] *}

/// info | Informaci√≥n

El par√°metro `response_class` tambi√©n se utilizar√° para definir el "media type" del response.

En este caso, el HTTP header `Content-Type` se establecer√° en `text/html`.

Y se documentar√° as√≠ en OpenAPI.

///

### Devuelve una `Response`

Como se ve en [Devolver una Response directamente](response-directly.md){.internal-link target=_blank}, tambi√©n puedes sobrescribir el response directamente en tu *path operation*, devolvi√©ndolo.

El mismo ejemplo de arriba, devolviendo una `HTMLResponse`, podr√≠a verse as√≠:

{* ../../docs_src/custom_response/tutorial003.py hl[2,7,19] *}

/// warning | Advertencia

Una `Response` devuelta directamente por tu *path operation function* no se documentar√° en OpenAPI (por ejemplo, el `Content-Type` no se documentar√°) y no ser√° visible en la documentaci√≥n interactiva autom√°tica.

///

/// info | Informaci√≥n

Por supuesto, el `Content-Type` header real, el c√≥digo de estado, etc., provendr√°n del objeto `Response` que devolviste.

///

### Documenta en OpenAPI y sobrescribe `Response`

Si quieres sobrescribir el response desde dentro de la funci√≥n pero al mismo tiempo documentar el "media type" en OpenAPI, puedes usar el par√°metro `response_class` Y devolver un objeto `Response`.

El `response_class` solo se usar√° para documentar el OpenAPI *path operation*, pero tu `Response` se usar√° tal cual.

#### Devuelve un `HTMLResponse` directamente

Por ejemplo, podr√≠a ser algo as√≠:

{* ../../docs_src/custom_response/tutorial004.py hl[7,21,23] *}

En este ejemplo, la funci√≥n `generate_html_response()` ya genera y devuelve una `Response` en lugar de devolver el HTML en un `str`.

Al devolver el resultado de llamar a `generate_html_response()`, ya est√°s devolviendo una `Response` que sobrescribir√° el comportamiento predeterminado de **FastAPI**.

Pero como pasaste `HTMLResponse` en el `response_class` tambi√©n, **FastAPI** sabr√° c√≥mo documentarlo en OpenAPI y la documentaci√≥n interactiva como HTML con `text/html`:

<img src="/img/tutorial/custom-response/image01.png">

## Responses disponibles

Aqu√≠ hay algunos de los responses disponibles.

Ten en cuenta que puedes usar `Response` para devolver cualquier otra cosa, o incluso crear una sub-clase personalizada.

/// note | Nota T√©cnica

Tambi√©n podr√≠as usar `from starlette.responses import HTMLResponse`.

**FastAPI** proporciona los mismos `starlette.responses` como `fastapi.responses` solo como una conveniencia para ti, el desarrollador. Pero la mayor√≠a de los responses disponibles vienen directamente de Starlette.

///

### `Response`

La clase principal `Response`, todos los otros responses heredan de ella.

Puedes devolverla directamente.

Acepta los siguientes par√°metros:

* `content` - Un `str` o `bytes`.
* `status_code` - Un c√≥digo de estado HTTP `int`.
* `headers` - Un `dict` de strings.
* `media_type` - Un `str` que da el media type. Por ejemplo, `"text/html"`.

FastAPI (de hecho Starlette) incluir√° autom√°ticamente un header Content-Length. Tambi√©n incluir√° un header Content-Type, basado en el `media_type` y a√±adiendo un conjunto de caracteres para tipos de texto.

{* ../../docs_src/response_directly/tutorial002.py hl[1,18] *}

### `HTMLResponse`

Toma alg√∫n texto o bytes y devuelve un response HTML, como le√≠ste arriba.

### `PlainTextResponse`

Toma alg√∫n texto o bytes y devuelve un response de texto plano.

{* ../../docs_src/custom_response/tutorial005.py hl[2,7,9] *}

### `JSONResponse`

Toma algunos datos y devuelve un response codificado como `application/json`.

Este es el response predeterminado usado en **FastAPI**, como le√≠ste arriba.

### `ORJSONResponse`

Un response JSON r√°pido alternativo usando <a href="https://github.com/ijl/orjson" class="external-link" target="_blank">`orjson`</a>, como le√≠ste arriba.

/// info | Informaci√≥n

Esto requiere instalar `orjson`, por ejemplo, con `pip install orjson`.

///

### `UJSONResponse`

Un response JSON alternativo usando <a href="https://github.com/ultrajson/ultrajson" class="external-link" target="_blank">`ujson`</a>.

/// info | Informaci√≥n

Esto requiere instalar `ujson`, por ejemplo, con `pip install ujson`.

///

/// warning | Advertencia

`ujson` es menos cuidadoso que la implementaci√≥n integrada de Python en c√≥mo maneja algunos casos extremos.

///

{* ../../docs_src/custom_response/tutorial001.py hl[2,7] *}

/// tip | Consejo

Es posible que `ORJSONResponse` sea una alternativa m√°s r√°pida.

///

### `RedirectResponse`

Devuelve una redirecci√≥n HTTP. Usa un c√≥digo de estado 307 (Redirecci√≥n Temporal) por defecto.

Puedes devolver un `RedirectResponse` directamente:

{* ../../docs_src/custom_response/tutorial006.py hl[2,9] *}

---

O puedes usarlo en el par√°metro `response_class`:

{* ../../docs_src/custom_response/tutorial006b.py hl[2,7,9] *}

Si haces eso, entonces puedes devolver la URL directamente desde tu *path operation function*.

En este caso, el `status_code` utilizado ser√° el predeterminado para `RedirectResponse`, que es `307`.

---

Tambi√©n puedes usar el par√°metro `status_code` combinado con el par√°metro `response_class`:

{* ../../docs_src/custom_response/tutorial006c.py hl[2,7,9] *}

### `StreamingResponse`

Toma un generador `async` o un generador/iterador normal y transmite el cuerpo del response.

{* ../../docs_src/custom_response/tutorial007.py hl[2,14] *}

#### Usando `StreamingResponse` con objetos similares a archivos

Si tienes un objeto similar a un archivo (por ejemplo, el objeto devuelto por `open()`), puedes crear una funci√≥n generadora para iterar sobre ese objeto similar a un archivo.

De esa manera, no tienes que leerlo todo primero en memoria, y puedes pasar esa funci√≥n generadora al `StreamingResponse`, y devolverlo.

Esto incluye muchos paquetes para interactuar con almacenamiento en la nube, procesamiento de video y otros.

{* ../../docs_src/custom_response/tutorial008.py hl[2,10:12,14] *}

1. Esta es la funci√≥n generadora. Es una "funci√≥n generadora" porque contiene declaraciones `yield` dentro.
2. Al usar un bloque `with`, nos aseguramos de que el objeto similar a un archivo se cierre despu√©s de que la funci√≥n generadora termine. As√≠, despu√©s de que termina de enviar el response.
3. Este `yield from` le dice a la funci√≥n que itere sobre esa cosa llamada `file_like`. Y luego, para cada parte iterada, yield esa parte como proveniente de esta funci√≥n generadora (`iterfile`).

    Entonces, es una funci√≥n generadora que transfiere el trabajo de "generar" a algo m√°s internamente.

    Al hacerlo de esta manera, podemos ponerlo en un bloque `with`, y de esa manera, asegurarnos de que el objeto similar a un archivo se cierre despu√©s de finalizar.

/// tip | Consejo

Nota que aqu√≠ como estamos usando `open()` est√°ndar que no admite `async` y `await`, declaramos el path operation con `def` normal.

///

### `FileResponse`

Transmite un archivo asincr√≥nicamente como response.

Toma un conjunto diferente de argumentos para crear un instance que los otros tipos de response:

* `path` - La path del archivo para el archivo a transmitir.
* `headers` - Cualquier header personalizado para incluir, como un diccionario.
* `media_type` - Un string que da el media type. Si no se establece, se usar√° el nombre de archivo o la path para inferir un media type.
* `filename` - Si se establece, se incluir√° en el response `Content-Disposition`.

Los responses de archivos incluir√°n los headers apropiados `Content-Length`, `Last-Modified` y `ETag`.

{* ../../docs_src/custom_response/tutorial009.py hl[2,10] *}

Tambi√©n puedes usar el par√°metro `response_class`:

{* ../../docs_src/custom_response/tutorial009b.py hl[2,8,10] *}

En este caso, puedes devolver la path del archivo directamente desde tu *path operation* function.

## Clase de response personalizada

Puedes crear tu propia clase de response personalizada, heredando de `Response` y us√°ndola.

Por ejemplo, digamos que quieres usar <a href="https://github.com/ijl/orjson" class="external-link" target="_blank">`orjson`</a>, pero con algunas configuraciones personalizadas no utilizadas en la clase `ORJSONResponse` incluida.

Digamos que quieres que devuelva JSON con sangr√≠a y formato, por lo que quieres usar la opci√≥n de orjson `orjson.OPT_INDENT_2`.

Podr√≠as crear un `CustomORJSONResponse`. Lo principal que tienes que hacer es crear un m√©todo `Response.render(content)` que devuelva el contenido como `bytes`:

{* ../../docs_src/custom_response/tutorial009c.py hl[9:14,17] *}

Ahora en lugar de devolver:

```json
{"message": "Hello World"}
```

...este response devolver√°:

```json
{
  "message": "Hello World"
}
```

Por supuesto, probablemente encontrar√°s formas mucho mejores de aprovechar esto que formatear JSON. üòâ

## Clase de response predeterminada

Al crear una instance de la clase **FastAPI** o un `APIRouter`, puedes especificar qu√© clase de response usar por defecto.

El par√°metro que define esto es `default_response_class`.

En el ejemplo a continuaci√≥n, **FastAPI** usar√° `ORJSONResponse` por defecto, en todas las *path operations*, en lugar de `JSONResponse`.

{* ../../docs_src/custom_response/tutorial010.py hl[2,4] *}

/// tip | Consejo

Todav√≠a puedes sobrescribir `response_class` en *path operations* como antes.

///

## Documentaci√≥n adicional

Tambi√©n puedes declarar el media type y muchos otros detalles en OpenAPI usando `responses`: [Responses Adicionales en OpenAPI](additional-responses.md){.internal-link target=_blank}.


================================================
File: /docs/es/docs/advanced/dataclasses.md
================================================
# Usando Dataclasses

FastAPI est√° construido sobre **Pydantic**, y te he estado mostrando c√≥mo usar modelos de Pydantic para declarar requests y responses.

Pero FastAPI tambi√©n soporta el uso de <a href="https://docs.python.org/3/library/dataclasses.html" class="external-link" target="_blank">`dataclasses`</a> de la misma manera:

{* ../../docs_src/dataclasses/tutorial001.py hl[1,7:12,19:20] *}

Esto sigue siendo soportado gracias a **Pydantic**, ya que tiene <a href="https://docs.pydantic.dev/latest/concepts/dataclasses/#use-of-stdlib-dataclasses-with-basemodel" class="external-link" target="_blank">soporte interno para `dataclasses`</a>.

As√≠ que, incluso con el c√≥digo anterior que no usa Pydantic expl√≠citamente, FastAPI est√° usando Pydantic para convertir esos dataclasses est√°ndar en su propia versi√≥n de dataclasses de Pydantic.

Y por supuesto, soporta lo mismo:

* validaci√≥n de datos
* serializaci√≥n de datos
* documentaci√≥n de datos, etc.

Esto funciona de la misma manera que con los modelos de Pydantic. Y en realidad se logra de la misma manera internamente, utilizando Pydantic.

/// info | Informaci√≥n

Ten en cuenta que los dataclasses no pueden hacer todo lo que los modelos de Pydantic pueden hacer.

As√≠ que, podr√≠as necesitar seguir usando modelos de Pydantic.

Pero si tienes un mont√≥n de dataclasses por ah√≠, este es un buen truco para usarlos para potenciar una API web usando FastAPI. ü§ì

///

## Dataclasses en `response_model`

Tambi√©n puedes usar `dataclasses` en el par√°metro `response_model`:

{* ../../docs_src/dataclasses/tutorial002.py hl[1,7:13,19] *}

El dataclass ser√° autom√°ticamente convertido a un dataclass de Pydantic.

De esta manera, su esquema aparecer√° en la interfaz de usuario de la documentaci√≥n de la API:

<img src="/img/tutorial/dataclasses/image01.png">

## Dataclasses en Estructuras de Datos Anidadas

Tambi√©n puedes combinar `dataclasses` con otras anotaciones de tipos para crear estructuras de datos anidadas.

En algunos casos, todav√≠a podr√≠as tener que usar la versi√≥n de `dataclasses` de Pydantic. Por ejemplo, si tienes errores con la documentaci√≥n de la API generada autom√°ticamente.

En ese caso, simplemente puedes intercambiar los `dataclasses` est√°ndar con `pydantic.dataclasses`, que es un reemplazo directo:

{* ../../docs_src/dataclasses/tutorial003.py hl[1,5,8:11,14:17,23:25,28] *}

1. Todav√≠a importamos `field` de los `dataclasses` est√°ndar.

2. `pydantic.dataclasses` es un reemplazo directo para `dataclasses`.

3. El dataclass `Author` incluye una lista de dataclasses `Item`.

4. El dataclass `Author` se usa como el par√°metro `response_model`.

5. Puedes usar otras anotaciones de tipos est√°ndar con dataclasses como el request body.

    En este caso, es una lista de dataclasses `Item`.

6. Aqu√≠ estamos regresando un diccionario que contiene `items`, que es una lista de dataclasses.

    FastAPI todav√≠a es capaz de <abbr title="converting the data to a format that can be transmitted">serializar</abbr> los datos a JSON.

7. Aqu√≠ el `response_model` est√° usando una anotaci√≥n de tipo de una lista de dataclasses `Author`.

    Nuevamente, puedes combinar `dataclasses` con anotaciones de tipos est√°ndar.

8. Nota que esta *path operation function* usa `def` regular en lugar de `async def`.

    Como siempre, en FastAPI puedes combinar `def` y `async def` seg√∫n sea necesario.

    Si necesitas un repaso sobre cu√°ndo usar cu√°l, revisa la secci√≥n _"¬øCon prisa?"_ en la documentaci√≥n sobre [`async` y `await`](../async.md#in-a-hurry){.internal-link target=_blank}.

9. Esta *path operation function* no est√° devolviendo dataclasses (aunque podr√≠a), sino una lista de diccionarios con datos internos.

    FastAPI usar√° el par√°metro `response_model` (que incluye dataclasses) para convertir el response.

Puedes combinar `dataclasses` con otras anotaciones de tipos en muchas combinaciones diferentes para formar estructuras de datos complejas.

Revisa las anotaciones en el c√≥digo arriba para ver m√°s detalles espec√≠ficos.

## Aprende M√°s

Tambi√©n puedes combinar `dataclasses` con otros modelos de Pydantic, heredar de ellos, incluirlos en tus propios modelos, etc.

Para saber m√°s, revisa la <a href="https://docs.pydantic.dev/latest/concepts/dataclasses/" class="external-link" target="_blank">documentaci√≥n de Pydantic sobre dataclasses</a>.

## Versi√≥n

Esto est√° disponible desde la versi√≥n `0.67.0` de FastAPI. üîñ


================================================
File: /docs/es/docs/advanced/events.md
================================================
# Eventos de Lifespan

Puedes definir l√≥gica (c√≥digo) que deber√≠a ser ejecutada antes de que la aplicaci√≥n **inicie**. Esto significa que este c√≥digo ser√° ejecutado **una vez**, **antes** de que la aplicaci√≥n **comience a recibir requests**.

De la misma manera, puedes definir l√≥gica (c√≥digo) que deber√≠a ser ejecutada cuando la aplicaci√≥n est√© **cerr√°ndose**. En este caso, este c√≥digo ser√° ejecutado **una vez**, **despu√©s** de haber manejado posiblemente **muchos requests**.

Debido a que este c√≥digo se ejecuta antes de que la aplicaci√≥n **comience** a tomar requests, y justo despu√©s de que **termine** de manejarlos, cubre todo el **lifespan** de la aplicaci√≥n (la palabra "lifespan" ser√° importante en un momento üòâ).

Esto puede ser muy √∫til para configurar **recursos** que necesitas usar para toda la app, y que son **compartidos** entre requests, y/o que necesitas **limpiar** despu√©s. Por ejemplo, un pool de conexiones a una base de datos, o cargando un modelo de machine learning compartido.

## Caso de Uso

Empecemos con un ejemplo de **caso de uso** y luego veamos c√≥mo resolverlo con esto.

Imaginemos que tienes algunos **modelos de machine learning** que quieres usar para manejar requests. ü§ñ

Los mismos modelos son compartidos entre requests, por lo que no es un modelo por request, o uno por usuario o algo similar.

Imaginemos que cargar el modelo puede **tomar bastante tiempo**, porque tiene que leer muchos **datos del disco**. Entonces no quieres hacerlo para cada request.

Podr√≠as cargarlo en el nivel superior del m√≥dulo/archivo, pero eso tambi√©n significar√≠a que **cargar√≠a el modelo** incluso si solo est√°s ejecutando una simple prueba automatizada, entonces esa prueba ser√≠a **lenta** porque tendr√≠a que esperar a que el modelo se cargue antes de poder ejecutar una parte independiente del c√≥digo.

Eso es lo que resolveremos, vamos a cargar el modelo antes de que los requests sean manejados, pero solo justo antes de que la aplicaci√≥n comience a recibir requests, no mientras el c√≥digo se est√° cargando.

## Lifespan

Puedes definir esta l√≥gica de *startup* y *shutdown* usando el par√°metro `lifespan` de la app de `FastAPI`, y un "context manager" (te mostrar√© lo que es en un momento).

Comencemos con un ejemplo y luego ve√°moslo en detalle.

Creamos una funci√≥n as√≠ncrona `lifespan()` con `yield` as√≠:

{* ../../docs_src/events/tutorial003.py hl[16,19] *}

Aqu√≠ estamos simulando la operaci√≥n costosa de *startup* de cargar el modelo poniendo la funci√≥n del (falso) modelo en el diccionario con modelos de machine learning antes del `yield`. Este c√≥digo ser√° ejecutado **antes** de que la aplicaci√≥n **comience a tomar requests**, durante el *startup*.

Y luego, justo despu√©s del `yield`, quitaremos el modelo de memoria. Este c√≥digo ser√° ejecutado **despu√©s** de que la aplicaci√≥n **termine de manejar requests**, justo antes del *shutdown*. Esto podr√≠a, por ejemplo, liberar recursos como la memoria o una GPU.

/// tip | Consejo

El `shutdown` ocurrir√≠a cuando est√°s **deteniendo** la aplicaci√≥n.

Quiz√°s necesites iniciar una nueva versi√≥n, o simplemente te cansaste de ejecutarla. ü§∑

///

### Funci√≥n de Lifespan

Lo primero que hay que notar es que estamos definiendo una funci√≥n as√≠ncrona con `yield`. Esto es muy similar a las Dependencias con `yield`.

{* ../../docs_src/events/tutorial003.py hl[14:19] *}

La primera parte de la funci√≥n, antes del `yield`, ser√° ejecutada **antes** de que la aplicaci√≥n comience.

Y la parte despu√©s del `yield` ser√° ejecutada **despu√©s** de que la aplicaci√≥n haya terminado.

### Async Context Manager

Si revisas, la funci√≥n est√° decorada con un `@asynccontextmanager`.

Eso convierte a la funci√≥n en algo llamado un "**async context manager**".

{* ../../docs_src/events/tutorial003.py hl[1,13] *}

Un **context manager** en Python es algo que puedes usar en una declaraci√≥n `with`, por ejemplo, `open()` puede ser usado como un context manager:

```Python
with open("file.txt") as file:
    file.read()
```

En versiones recientes de Python, tambi√©n hay un **async context manager**. Lo usar√≠as con `async with`:

```Python
async with lifespan(app):
    await do_stuff()
```

Cuando creas un context manager o un async context manager como arriba, lo que hace es que, antes de entrar al bloque `with`, ejecutar√° el c√≥digo antes del `yield`, y al salir del bloque `with`, ejecutar√° el c√≥digo despu√©s del `yield`.

En nuestro ejemplo de c√≥digo arriba, no lo usamos directamente, pero se lo pasamos a FastAPI para que lo use.

El par√°metro `lifespan` de la app de `FastAPI` toma un **async context manager**, por lo que podemos pasar nuestro nuevo `lifespan` async context manager a √©l.

{* ../../docs_src/events/tutorial003.py hl[22] *}

## Eventos Alternativos (obsoleto)

/// warning | Advertencia

La forma recomendada de manejar el *startup* y el *shutdown* es usando el par√°metro `lifespan` de la app de `FastAPI` como se describi√≥ arriba. Si proporcionas un par√°metro `lifespan`, los manejadores de eventos `startup` y `shutdown` ya no ser√°n llamados. Es solo `lifespan` o solo los eventos, no ambos.

Probablemente puedas saltarte esta parte.

///

Hay una forma alternativa de definir esta l√≥gica para ser ejecutada durante el *startup* y durante el *shutdown*.

Puedes definir manejadores de eventos (funciones) que necesitan ser ejecutadas antes de que la aplicaci√≥n se inicie, o cuando la aplicaci√≥n se est√° cerrando.

Estas funciones pueden ser declaradas con `async def` o `def` normal.

### Evento `startup`

Para a√±adir una funci√≥n que deber√≠a ejecutarse antes de que la aplicaci√≥n inicie, decl√°rala con el evento `"startup"`:

{* ../../docs_src/events/tutorial001.py hl[8] *}

En este caso, la funci√≥n manejadora del evento `startup` inicializar√° los √≠tems de la "base de datos" (solo un `dict`) con algunos valores.

Puedes a√±adir m√°s de un manejador de eventos.

Y tu aplicaci√≥n no comenzar√° a recibir requests hasta que todos los manejadores de eventos `startup` hayan completado.

### Evento `shutdown`

Para a√±adir una funci√≥n que deber√≠a ejecutarse cuando la aplicaci√≥n se est√© cerrando, decl√°rala con el evento `"shutdown"`:

{* ../../docs_src/events/tutorial002.py hl[6] *}

Aqu√≠, la funci√≥n manejadora del evento `shutdown` escribir√° una l√≠nea de texto `"Application shutdown"` a un archivo `log.txt`.

/// info | Informaci√≥n

En la funci√≥n `open()`, el `mode="a"` significa "a√±adir", por lo tanto, la l√≠nea ser√° a√±adida despu√©s de lo que sea que est√© en ese archivo, sin sobrescribir el contenido anterior.

///

/// tip | Consejo

Nota que en este caso estamos usando una funci√≥n est√°ndar de Python `open()` que interact√∫a con un archivo.

Entonces, involucra I/O (entrada/salida), que requiere "esperar" para que las cosas se escriban en el disco.

Pero `open()` no usa `async` y `await`.

Por eso, declaramos la funci√≥n manejadora del evento con `def` est√°ndar en vez de `async def`.

///

### `startup` y `shutdown` juntos

Hay una gran posibilidad de que la l√≥gica para tu *startup* y *shutdown* est√© conectada, podr√≠as querer iniciar algo y luego finalizarlo, adquirir un recurso y luego liberarlo, etc.

Hacer eso en funciones separadas que no comparten l√≥gica o variables juntas es m√°s dif√≠cil ya que necesitar√≠as almacenar valores en variables globales o trucos similares.

Debido a eso, ahora se recomienda en su lugar usar el `lifespan` como se explic√≥ arriba.

## Detalles T√©cnicos

Solo un detalle t√©cnico para los nerds curiosos. ü§ì

Por debajo, en la especificaci√≥n t√©cnica ASGI, esto es parte del <a href="https://asgi.readthedocs.io/en/latest/specs/lifespan.html" class="external-link" target="_blank">Protocolo de Lifespan</a>, y define eventos llamados `startup` y `shutdown`.

/// info | Informaci√≥n

Puedes leer m√°s sobre los manejadores `lifespan` de Starlette en <a href="https://www.starlette.io/lifespan/" class="external-link" target="_blank">la documentaci√≥n de `Lifespan` de Starlette</a>.

Incluyendo c√≥mo manejar el estado de lifespan que puede ser usado en otras √°reas de tu c√≥digo.

///

## Sub Aplicaciones

üö® Ten en cuenta que estos eventos de lifespan (startup y shutdown) solo ser√°n ejecutados para la aplicaci√≥n principal, no para [Sub Aplicaciones - Mounts](sub-applications.md){.internal-link target=_blank}.


================================================
File: /docs/es/docs/advanced/generate-clients.md
================================================
# Genera Clientes

Como **FastAPI** est√° basado en la especificaci√≥n OpenAPI, obtienes compatibilidad autom√°tica con muchas herramientas, incluyendo la documentaci√≥n autom√°tica de la API (proporcionada por Swagger UI).

Una ventaja particular que no es necesariamente obvia es que puedes **generar clientes** (a veces llamados <abbr title="Software Development Kits">**SDKs**</abbr> ) para tu API, para muchos **lenguajes de programaci√≥n** diferentes.

## Generadores de Clientes OpenAPI

Hay muchas herramientas para generar clientes desde **OpenAPI**.

Una herramienta com√∫n es <a href="https://openapi-generator.tech/" class="external-link" target="_blank">OpenAPI Generator</a>.

Si est√°s construyendo un **frontend**, una alternativa muy interesante es <a href="https://github.com/hey-api/openapi-ts" class="external-link" target="_blank">openapi-ts</a>.

## Generadores de Clientes y SDKs - Sponsor

Tambi√©n hay algunos generadores de Clientes y SDKs **respaldados por empresas** basados en OpenAPI (FastAPI), en algunos casos pueden ofrecerte **funcionalidades adicionales** adem√°s de SDKs/clientes generados de alta calidad.

Algunos de ellos tambi√©n ‚ú® [**sponsorean FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ‚ú®, esto asegura el **desarrollo** continuo y saludable de FastAPI y su **ecosistema**.

Y muestra su verdadero compromiso con FastAPI y su **comunidad** (t√∫), ya que no solo quieren proporcionarte un **buen servicio** sino tambi√©n asegurarse de que tengas un **buen y saludable framework**, FastAPI. üôá

Por ejemplo, podr√≠as querer probar:

* <a href="https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship" class="external-link" target="_blank">Speakeasy</a>
* <a href="https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral" class="external-link" target="_blank">Stainless</a>
* <a href="https://developers.liblab.com/tutorials/sdk-for-fastapi/?utm_source=fastapi" class="external-link" target="_blank">liblab</a>

Tambi√©n hay varias otras empresas que ofrecen servicios similares que puedes buscar y encontrar en l√≠nea. ü§ì

## Genera un Cliente Frontend en TypeScript

Empecemos con una aplicaci√≥n simple de FastAPI:

{* ../../docs_src/generate_clients/tutorial001_py39.py hl[7:9,12:13,16:17,21] *}

Nota que las *path operations* definen los modelos que usan para el payload de la petici√≥n y el payload del response, usando los modelos `Item` y `ResponseMessage`.

### Documentaci√≥n de la API

Si vas a la documentaci√≥n de la API, ver√°s que tiene los **esquemas** para los datos que se enviar√°n en las peticiones y se recibir√°n en los responses:

<img src="/img/tutorial/generate-clients/image01.png">

Puedes ver esos esquemas porque fueron declarados con los modelos en la aplicaci√≥n.

Esa informaci√≥n est√° disponible en el **JSON Schema** de OpenAPI de la aplicaci√≥n, y luego se muestra en la documentaci√≥n de la API (por Swagger UI).

Y esa misma informaci√≥n de los modelos que est√° incluida en OpenAPI es lo que puede usarse para **generar el c√≥digo del cliente**.

### Genera un Cliente en TypeScript

Ahora que tenemos la aplicaci√≥n con los modelos, podemos generar el c√≥digo del cliente para el frontend.

#### Instalar `openapi-ts`

Puedes instalar `openapi-ts` en tu c√≥digo de frontend con:

<div class="termy">

```console
$ npm install @hey-api/openapi-ts --save-dev

---> 100%
```

</div>

#### Generar el C√≥digo del Cliente

Para generar el c√≥digo del cliente puedes usar la aplicaci√≥n de l√≠nea de comandos `openapi-ts` que ahora estar√≠a instalada.

Como est√° instalada en el proyecto local, probablemente no podr√≠as llamar a ese comando directamente, pero podr√≠as ponerlo en tu archivo `package.json`.

Podr√≠a verse como esto:

```JSON  hl_lines="7"
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

Despu√©s de tener ese script de NPM `generate-client` all√≠, puedes ejecutarlo con:

<div class="termy">

```console
$ npm run generate-client

frontend-app@1.0.0 generate-client /home/user/code/frontend-app
> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios
```

</div>

Ese comando generar√° c√≥digo en `./src/client` y usar√° `axios` (el paquete HTTP de frontend) internamente.

### Prueba el C√≥digo del Cliente

Ahora puedes importar y usar el c√≥digo del cliente, podr√≠a verse as√≠, nota que tienes autocompletado para los m√©todos:

<img src="/img/tutorial/generate-clients/image02.png">

Tambi√©n obtendr√°s autocompletado para el payload a enviar:

<img src="/img/tutorial/generate-clients/image03.png">

/// tip | Consejo

Nota el autocompletado para `name` y `price`, que fue definido en la aplicaci√≥n de FastAPI, en el modelo `Item`.

///

Tendr√°s errores en l√≠nea para los datos que env√≠es:

<img src="/img/tutorial/generate-clients/image04.png">

El objeto de response tambi√©n tendr√° autocompletado:

<img src="/img/tutorial/generate-clients/image05.png">

## App de FastAPI con Tags

En muchos casos tu aplicaci√≥n de FastAPI ser√° m√°s grande, y probablemente usar√°s tags para separar diferentes grupos de *path operations*.

Por ejemplo, podr√≠as tener una secci√≥n para **items** y otra secci√≥n para **usuarios**, y podr√≠an estar separadas por tags:

{* ../../docs_src/generate_clients/tutorial002_py39.py hl[21,26,34] *}

### Genera un Cliente TypeScript con Tags

Si generas un cliente para una aplicaci√≥n de FastAPI usando tags, normalmente tambi√©n separar√° el c√≥digo del cliente bas√°ndose en los tags.

De esta manera podr√°s tener las cosas ordenadas y agrupadas correctamente para el c√≥digo del cliente:

<img src="/img/tutorial/generate-clients/image06.png">

En este caso tienes:

* `ItemsService`
* `UsersService`

### Nombres de los M√©todos del Cliente

Ahora mismo los nombres de los m√©todos generados como `createItemItemsPost` no se ven muy limpios:

```TypeScript
ItemsService.createItemItemsPost({name: "Plumbus", price: 5})
```

...eso es porque el generador del cliente usa el **operation ID** interno de OpenAPI para cada *path operation*.

OpenAPI requiere que cada operation ID sea √∫nico a trav√©s de todas las *path operations*, por lo que FastAPI usa el **nombre de la funci√≥n**, el **path**, y el **m√©todo/operaci√≥n HTTP** para generar ese operation ID, porque de esa manera puede asegurarse de que los operation IDs sean √∫nicos.

Pero te mostrar√© c√≥mo mejorar eso a continuaci√≥n. ü§ì

## Operation IDs Personalizados y Mejores Nombres de M√©todos

Puedes **modificar** la forma en que estos operation IDs son **generados** para hacerlos m√°s simples y tener **nombres de m√©todos m√°s simples** en los clientes.

En este caso tendr√°s que asegurarte de que cada operation ID sea **√∫nico** de alguna otra manera.

Por ejemplo, podr√≠as asegurarte de que cada *path operation* tenga un tag, y luego generar el operation ID basado en el **tag** y el nombre de la *path operation* **name** (el nombre de la funci√≥n).

### Funci√≥n Personalizada para Generar ID √önico

FastAPI usa un **ID √∫nico** para cada *path operation*, se usa para el **operation ID** y tambi√©n para los nombres de cualquier modelo personalizado necesario, para requests o responses.

Puedes personalizar esa funci√≥n. Toma un `APIRoute` y retorna un string.

Por ejemplo, aqu√≠ est√° usando el primer tag (probablemente tendr√°s solo un tag) y el nombre de la *path operation* (el nombre de la funci√≥n).

Puedes entonces pasar esa funci√≥n personalizada a **FastAPI** como el par√°metro `generate_unique_id_function`:

{* ../../docs_src/generate_clients/tutorial003_py39.py hl[6:7,10] *}

### Generar un Cliente TypeScript con Operation IDs Personalizados

Ahora si generas el cliente de nuevo, ver√°s que tiene los nombres de m√©todos mejorados:

<img src="/img/tutorial/generate-clients/image07.png">

Como ves, los nombres de m√©todos ahora tienen el tag y luego el nombre de la funci√≥n, ahora no incluyen informaci√≥n del path de la URL y la operaci√≥n HTTP.

### Preprocesa la Especificaci√≥n OpenAPI para el Generador de Clientes

El c√≥digo generado a√∫n tiene algo de **informaci√≥n duplicada**.

Ya sabemos que este m√©todo est√° relacionado con los **items** porque esa palabra est√° en el `ItemsService` (tomado del tag), pero a√∫n tenemos el nombre del tag prefijado en el nombre del m√©todo tambi√©n. üòï

Probablemente a√∫n querremos mantenerlo para OpenAPI en general, ya que eso asegurar√° que los operation IDs sean **√∫nicos**.

Pero para el cliente generado podr√≠amos **modificar** los operation IDs de OpenAPI justo antes de generar los clientes, solo para hacer esos nombres de m√©todos m√°s bonitos y **limpios**.

Podr√≠amos descargar el JSON de OpenAPI a un archivo `openapi.json` y luego podr√≠amos **remover ese tag prefijado** con un script como este:

{* ../../docs_src/generate_clients/tutorial004.py *}

//// tab | Node.js

```Javascript
{!> ../../docs_src/generate_clients/tutorial004.js!}
```

////

Con eso, los operation IDs ser√≠an renombrados de cosas como `items-get_items` a solo `get_items`, de esa manera el generador del cliente puede generar nombres de m√©todos m√°s simples.

### Generar un Cliente TypeScript con el OpenAPI Preprocesado

Ahora como el resultado final est√° en un archivo `openapi.json`, modificar√≠as el `package.json` para usar ese archivo local, por ejemplo:

```JSON  hl_lines="7"
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

Despu√©s de generar el nuevo cliente, ahora tendr√≠as nombres de m√©todos **limpios**, con todo el **autocompletado**, **errores en l√≠nea**, etc:

<img src="/img/tutorial/generate-clients/image08.png">

## Beneficios

Cuando usas los clientes generados autom√°ticamente obtendr√°s **autocompletado** para:

* M√©todos.
* Payloads de peticiones en el cuerpo, par√°metros de query, etc.
* Payloads de responses.

Tambi√©n tendr√°s **errores en l√≠nea** para todo.

Y cada vez que actualices el c√≥digo del backend, y **regeneres** el frontend, tendr√°s las nuevas *path operations* disponibles como m√©todos, las antiguas eliminadas, y cualquier otro cambio se reflejar√° en el c√≥digo generado. ü§ì

Esto tambi√©n significa que si algo cambi√≥ ser√° **reflejado** autom√°ticamente en el c√≥digo del cliente. Y si haces **build** del cliente, te dar√° error si tienes alg√∫n **desajuste** en los datos utilizados.

As√≠ que, **detectar√°s muchos errores** muy temprano en el ciclo de desarrollo en lugar de tener que esperar a que los errores se muestren a tus usuarios finales en producci√≥n para luego intentar depurar d√≥nde est√° el problema. ‚ú®


================================================
File: /docs/es/docs/advanced/index.md
================================================
# Gu√≠a avanzada del usuario

## Funcionalidades adicionales

El [Tutorial - Gu√≠a del usuario](../tutorial/index.md){.internal-link target=_blank} principal deber√≠a ser suficiente para darte un recorrido por todas las funcionalidades principales de **FastAPI**.

En las siguientes secciones ver√°s otras opciones, configuraciones y funcionalidades adicionales.

/// tip | Consejo

Las siguientes secciones **no son necesariamente "avanzadas"**.

Y es posible que para tu caso de uso, la soluci√≥n est√© en una de ellas.

///

## Lee primero el Tutorial

A√∫n podr√≠as usar la mayor√≠a de las funcionalidades en **FastAPI** con el conocimiento del [Tutorial - Gu√≠a del usuario](../tutorial/index.md){.internal-link target=_blank} principal.

Y las siguientes secciones asumen que ya lo le√≠ste y que conoces esas ideas principales.

## Cursos externos

Aunque el [Tutorial - Gu√≠a del usuario](../tutorial/index.md){.internal-link target=_blank} y esta **Gu√≠a avanzada del usuario** est√°n escritos como un tutorial guiado (como un libro) y deber√≠an ser suficientes para que **aprendas FastAPI**, podr√≠as querer complementarlo con cursos adicionales.

O podr√≠a ser que simplemente prefieras tomar otros cursos porque se adaptan mejor a tu estilo de aprendizaje.

Algunos proveedores de cursos ‚ú® [**sponsorean FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ‚ú®, esto asegura el desarrollo continuo y saludable de FastAPI y su **ecosistema**.

Y muestra su verdadero compromiso con FastAPI y su **comunidad** (t√∫), ya que no solo quieren brindarte una **buena experiencia de aprendizaje** sino que tambi√©n quieren asegurarse de que tengas un **buen y saludable framework**, FastAPI. üôá

Podr√≠as querer probar sus cursos:

* <a href="https://training.talkpython.fm/fastapi-courses" class="external-link" target="_blank">Talk Python Training</a>
* <a href="https://testdriven.io/courses/tdd-fastapi/" class="external-link" target="_blank">Desarrollo guiado por pruebas</a>


================================================
File: /docs/es/docs/advanced/middleware.md
================================================
# Middleware Avanzado

En el tutorial principal le√≠ste c√≥mo agregar [Middleware Personalizado](../tutorial/middleware.md){.internal-link target=_blank} a tu aplicaci√≥n.

Y luego tambi√©n le√≠ste c√≥mo manejar [CORS con el `CORSMiddleware`](../tutorial/cors.md){.internal-link target=_blank}.

En esta secci√≥n veremos c√≥mo usar otros middlewares.

## Agregando middlewares ASGI

Como **FastAPI** est√° basado en Starlette e implementa la especificaci√≥n <abbr title="Asynchronous Server Gateway Interface">ASGI</abbr>, puedes usar cualquier middleware ASGI.

Un middleware no tiene que estar hecho para FastAPI o Starlette para funcionar, siempre que siga la especificaci√≥n ASGI.

En general, los middlewares ASGI son clases que esperan recibir una aplicaci√≥n ASGI como primer argumento.

Entonces, en la documentaci√≥n de middlewares ASGI de terceros probablemente te indicar√°n que hagas algo como:

```Python
from unicorn import UnicornMiddleware

app = SomeASGIApp()

new_app = UnicornMiddleware(app, some_config="rainbow")
```

Pero FastAPI (en realidad Starlette) proporciona una forma m√°s simple de hacerlo que asegura que los middlewares internos manejen errores del servidor y los controladores de excepciones personalizadas funcionen correctamente.

Para eso, usas `app.add_middleware()` (como en el ejemplo para CORS).

```Python
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

`app.add_middleware()` recibe una clase de middleware como primer argumento y cualquier argumento adicional que se le quiera pasar al middleware.

## Middlewares integrados

**FastAPI** incluye varios middlewares para casos de uso com√∫n, veremos a continuaci√≥n c√≥mo usarlos.

/// note | Detalles T√©cnicos

Para los pr√≥ximos ejemplos, tambi√©n podr√≠as usar `from starlette.middleware.something import SomethingMiddleware`.

**FastAPI** proporciona varios middlewares en `fastapi.middleware` solo como una conveniencia para ti, el desarrollador. Pero la mayor√≠a de los middlewares disponibles provienen directamente de Starlette.

///

## `HTTPSRedirectMiddleware`

Impone que todas las requests entrantes deben ser `https` o `wss`.

Cualquier request entrante a `http` o `ws` ser√° redirigida al esquema seguro.

{* ../../docs_src/advanced_middleware/tutorial001.py hl[2,6] *}

## `TrustedHostMiddleware`

Impone que todas las requests entrantes tengan correctamente configurado el header `Host`, para proteger contra ataques de HTTP Host Header.

{* ../../docs_src/advanced_middleware/tutorial002.py hl[2,6:8] *}

Se soportan los siguientes argumentos:

* `allowed_hosts` - Una list de nombres de dominio que deber√≠an ser permitidos como nombres de host. Se soportan dominios comod√≠n como `*.example.com` para hacer coincidir subdominios. Para permitir cualquier nombre de host, usa `allowed_hosts=["*"]` u omite el middleware.

Si una request entrante no se valida correctamente, se enviar√° un response `400`.

## `GZipMiddleware`

Maneja responses GZip para cualquier request que incluya `"gzip"` en el header `Accept-Encoding`.

El middleware manejar√° tanto responses est√°ndar como en streaming.

{* ../../docs_src/advanced_middleware/tutorial003.py hl[2,6] *}

Se soportan los siguientes argumentos:

* `minimum_size` - No comprimir con GZip responses que sean m√°s peque√±as que este tama√±o m√≠nimo en bytes. Por defecto es `500`.
* `compresslevel` - Usado durante la compresi√≥n GZip. Es un entero que var√≠a de 1 a 9. Por defecto es `9`. Un valor m√°s bajo resulta en una compresi√≥n m√°s r√°pida pero archivos m√°s grandes, mientras que un valor m√°s alto resulta en una compresi√≥n m√°s lenta pero archivos m√°s peque√±os.

## Otros middlewares

Hay muchos otros middlewares ASGI.

Por ejemplo:

* <a href="https://github.com/encode/uvicorn/blob/master/uvicorn/middleware/proxy_headers.py" class="external-link" target="_blank">`ProxyHeadersMiddleware` de Uvicorn</a>
* <a href="https://github.com/florimondmanca/msgpack-asgi" class="external-link" target="_blank">MessagePack</a>

Para ver otros middlewares disponibles, revisa <a href="https://www.starlette.io/middleware/" class="external-link" target="_blank">la documentaci√≥n de Middleware de Starlette</a> y la <a href="https://github.com/florimondmanca/awesome-asgi" class="external-link" target="_blank">Lista ASGI Awesome</a>.


================================================
File: /docs/es/docs/advanced/openapi-callbacks.md
================================================
# OpenAPI Callbacks

Podr√≠as crear una API con una *path operation* que podr√≠a desencadenar un request a una *API externa* creada por alguien m√°s (probablemente el mismo desarrollador que estar√≠a *usando* tu API).

El proceso que ocurre cuando tu aplicaci√≥n API llama a la *API externa* se llama un "callback". Porque el software que escribi√≥ el desarrollador externo env√≠a un request a tu API y luego tu API *responde*, enviando un request a una *API externa* (que probablemente fue creada por el mismo desarrollador).

En este caso, podr√≠as querer documentar c√≥mo esa API externa *deber√≠a* verse. Qu√© *path operation* deber√≠a tener, qu√© cuerpo deber√≠a esperar, qu√© response deber√≠a devolver, etc.

## Una aplicaci√≥n con callbacks

Veamos todo esto con un ejemplo.

Imagina que desarrollas una aplicaci√≥n que permite crear facturas.

Estas facturas tendr√°n un `id`, `title` (opcional), `customer`, y `total`.

El usuario de tu API (un desarrollador externo) crear√° una factura en tu API con un request POST.

Luego tu API (imaginemos):

* Enviar√° la factura a alg√∫n cliente del desarrollador externo.
* Recoger√° el dinero.
* Enviar√° una notificaci√≥n de vuelta al usuario de la API (el desarrollador externo).
    * Esto se har√° enviando un request POST (desde *tu API*) a alguna *API externa* proporcionada por ese desarrollador externo (este es el "callback").

## La aplicaci√≥n normal de **FastAPI**

Primero veamos c√≥mo ser√≠a la aplicaci√≥n API normal antes de agregar el callback.

Tendr√° una *path operation* que recibir√° un cuerpo `Invoice`, y un par√°metro de query `callback_url` que contendr√° la URL para el callback.

Esta parte es bastante normal, probablemente ya est√©s familiarizado con la mayor parte del c√≥digo:

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[9:13,36:53] *}

/// tip | Consejo

El par√°metro de query `callback_url` utiliza un tipo <a href="https://docs.pydantic.dev/latest/api/networks/" class="external-link" target="_blank">Url</a> de Pydantic.

///

Lo √∫nico nuevo es el `callbacks=invoices_callback_router.routes` como un argumento para el *decorador de path operation*. Veremos qu√© es eso a continuaci√≥n.

## Documentar el callback

El c√≥digo real del callback depender√° mucho de tu propia aplicaci√≥n API.

Y probablemente variar√° mucho de una aplicaci√≥n a otra.

Podr√≠a ser solo una o dos l√≠neas de c√≥digo, como:

```Python
callback_url = "https://example.com/api/v1/invoices/events/"
httpx.post(callback_url, json={"description": "Invoice paid", "paid": True})
```

Pero posiblemente la parte m√°s importante del callback es asegurarse de que el usuario de tu API (el desarrollador externo) implemente la *API externa* correctamente, de acuerdo con los datos que *tu API* va a enviar en el request body del callback, etc.

Entonces, lo que haremos a continuaci√≥n es agregar el c√≥digo para documentar c√≥mo deber√≠a verse esa *API externa* para recibir el callback de *tu API*.

Esa documentaci√≥n aparecer√° en la Swagger UI en `/docs` en tu API, y permitir√° a los desarrolladores externos saber c√≥mo construir la *API externa*.

Este ejemplo no implementa el callback en s√≠ (eso podr√≠a ser solo una l√≠nea de c√≥digo), solo la parte de documentaci√≥n.

/// tip | Consejo

El callback real es solo un request HTTP.

Cuando implementes el callback t√∫ mismo, podr√≠as usar algo como <a href="https://www.python-httpx.org" class="external-link" target="_blank">HTTPX</a> o <a href="https://requests.readthedocs.io/" class="external-link" target="_blank">Requests</a>.

///

## Escribir el c√≥digo de documentaci√≥n del callback

Este c√≥digo no se ejecutar√° en tu aplicaci√≥n, solo lo necesitamos para *documentar* c√≥mo deber√≠a verse esa *API externa*.

Pero, ya sabes c√≥mo crear f√°cilmente documentaci√≥n autom√°tica para una API con **FastAPI**.

As√≠ que vamos a usar ese mismo conocimiento para documentar c√≥mo deber√≠a verse la *API externa*... creando la(s) *path operation(s)* que la API externa deber√≠a implementar (las que tu API va a llamar).

/// tip | Consejo

Cuando escribas el c√≥digo para documentar un callback, podr√≠a ser √∫til imaginar que eres ese *desarrollador externo*. Y que actualmente est√°s implementando la *API externa*, no *tu API*.

Adoptar temporalmente este punto de vista (del *desarrollador externo*) puede ayudarte a sentir que es m√°s obvio d√≥nde poner los par√°metros, el modelo de Pydantic para el body, para el response, etc. para esa *API externa*.

///

### Crear un `APIRouter` de callback

Primero crea un nuevo `APIRouter` que contendr√° uno o m√°s callbacks.

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[3,25] *}

### Crear la *path operation* del callback

Para crear la *path operation* del callback utiliza el mismo `APIRouter` que creaste anteriormente.

Deber√≠a verse como una *path operation* normal de FastAPI:

* Probablemente deber√≠a tener una declaraci√≥n del body que deber√≠a recibir, por ejemplo `body: InvoiceEvent`.
* Y tambi√©n podr√≠a tener una declaraci√≥n del response que deber√≠a devolver, por ejemplo `response_model=InvoiceEventReceived`.

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[16:18,21:22,28:32] *}

Hay 2 diferencias principales respecto a una *path operation* normal:

* No necesita tener ning√∫n c√≥digo real, porque tu aplicaci√≥n nunca llamar√° a este c√≥digo. Solo se usa para documentar la *API externa*. As√≠ que, la funci√≥n podr√≠a simplemente tener `pass`.
* El *path* puede contener una <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#key-expression" class="external-link" target="_blank">expresi√≥n OpenAPI 3</a> (ver m√°s abajo) donde puede usar variables con par√°metros y partes del request original enviado a *tu API*.

### La expresi√≥n del path del callback

El *path* del callback puede tener una <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#key-expression" class="external-link" target="_blank">expresi√≥n OpenAPI 3</a> que puede contener partes del request original enviado a *tu API*.

En este caso, es el `str`:

```Python
"{$callback_url}/invoices/{$request.body.id}"
```

Entonces, si el usuario de tu API (el desarrollador externo) env√≠a un request a *tu API* a:

```
https://yourapi.com/invoices/?callback_url=https://www.external.org/events
```

con un JSON body de:

```JSON
{
    "id": "2expen51ve",
    "customer": "Mr. Richie Rich",
    "total": "9999"
}
```

luego *tu API* procesar√° la factura, y en alg√∫n momento despu√©s, enviar√° un request de callback al `callback_url` (la *API externa*):

```
https://www.external.org/events/invoices/2expen51ve
```

con un JSON body que contiene algo como:

```JSON
{
    "description": "Payment celebration",
    "paid": true
}
```

y esperar√≠a un response de esa *API externa* con un JSON body como:

```JSON
{
    "ok": true
}
```

/// tip | Consejo

Observa c√≥mo la URL del callback utilizada contiene la URL recibida como par√°metro de query en `callback_url` (`https://www.external.org/events`) y tambi√©n el `id` de la factura desde dentro del JSON body (`2expen51ve`).

///

### Agregar el router de callback

En este punto tienes las *path operation(s)* del callback necesarias (las que el *desarrollador externo* deber√≠a implementar en la *API externa*) en el router de callback que creaste antes.

Ahora usa el par√°metro `callbacks` en el *decorador de path operation de tu API* para pasar el atributo `.routes` (que en realidad es solo un `list` de rutas/*path operations*) de ese router de callback:

{* ../../docs_src/openapi_callbacks/tutorial001.py hl[35] *}

/// tip | Consejo

Observa que no est√°s pasando el router en s√≠ (`invoices_callback_router`) a `callback=`, sino el atributo `.routes`, como en `invoices_callback_router.routes`.

///

### Revisa la documentaci√≥n

Ahora puedes iniciar tu aplicaci√≥n e ir a <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Ver√°s tu documentaci√≥n incluyendo una secci√≥n de "Callbacks" para tu *path operation* que muestra c√≥mo deber√≠a verse la *API externa*:

<img src="/img/tutorial/openapi-callbacks/image01.png">


================================================
File: /docs/es/docs/advanced/openapi-webhooks.md
================================================
# Webhooks de OpenAPI

Hay casos donde quieres decirle a los **usuarios** de tu API que tu aplicaci√≥n podr√≠a llamar a *su* aplicaci√≥n (enviando una request) con algunos datos, normalmente para **notificar** de alg√∫n tipo de **evento**.

Esto significa que en lugar del proceso normal de tus usuarios enviando requests a tu API, es **tu API** (o tu aplicaci√≥n) la que podr√≠a **enviar requests a su sistema** (a su API, su aplicaci√≥n).

Esto normalmente se llama un **webhook**.

## Pasos de los webhooks

El proceso normalmente es que **t√∫ defines** en tu c√≥digo cu√°l es el mensaje que enviar√°s, el **body de la request**.

Tambi√©n defines de alguna manera en qu√© **momentos** tu aplicaci√≥n enviar√° esas requests o eventos.

Y **tus usuarios** definen de alguna manera (por ejemplo en un panel web en alg√∫n lugar) el **URL** donde tu aplicaci√≥n deber√≠a enviar esas requests.

Toda la **l√≥gica** sobre c√≥mo registrar los URLs para webhooks y el c√≥digo para realmente enviar esas requests depende de ti. Lo escribes como quieras en **tu propio c√≥digo**.

## Documentando webhooks con **FastAPI** y OpenAPI

Con **FastAPI**, usando OpenAPI, puedes definir los nombres de estos webhooks, los tipos de operaciones HTTP que tu aplicaci√≥n puede enviar (por ejemplo, `POST`, `PUT`, etc.) y los **bodies** de las requests que tu aplicaci√≥n enviar√≠a.

Esto puede hacer mucho m√°s f√°cil para tus usuarios **implementar sus APIs** para recibir tus requests de **webhook**, incluso podr√≠an ser capaces de autogenerar algo de su propio c√≥digo de API.

/// info | Informaci√≥n

Los webhooks est√°n disponibles en OpenAPI 3.1.0 y superiores, soportados por FastAPI `0.99.0` y superiores.

///

## Una aplicaci√≥n con webhooks

Cuando creas una aplicaci√≥n de **FastAPI**, hay un atributo `webhooks` que puedes usar para definir *webhooks*, de la misma manera que definir√≠as *path operations*, por ejemplo con `@app.webhooks.post()`.

{* ../../docs_src/openapi_webhooks/tutorial001.py hl[9:13,36:53] *}

Los webhooks que defines terminar√°n en el esquema de **OpenAPI** y en la interfaz autom√°tica de **documentaci√≥n**.

/// info | Informaci√≥n

El objeto `app.webhooks` es en realidad solo un `APIRouter`, el mismo tipo que usar√≠as al estructurar tu aplicaci√≥n con m√∫ltiples archivos.

///

Nota que con los webhooks en realidad no est√°s declarando un *path* (como `/items/`), el texto que pasas all√≠ es solo un **identificador** del webhook (el nombre del evento), por ejemplo en `@app.webhooks.post("new-subscription")`, el nombre del webhook es `new-subscription`.

Esto es porque se espera que **tus usuarios** definan el actual **URL path** donde quieren recibir la request del webhook de alguna otra manera (por ejemplo, un panel web).

### Revisa la documentaci√≥n

Ahora puedes iniciar tu app e ir a <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Ver√°s que tu documentaci√≥n tiene las *path operations* normales y ahora tambi√©n algunos **webhooks**:

<img src="/img/tutorial/openapi-webhooks/image01.png">


================================================
File: /docs/es/docs/advanced/path-operation-advanced-configuration.md
================================================
# Configuraci√≥n Avanzada de Path Operation

## operationId de OpenAPI

/// warning | Advertencia

Si no eres un "experto" en OpenAPI, probablemente no necesites esto.

///

Puedes establecer el `operationId` de OpenAPI para ser usado en tu *path operation* con el par√°metro `operation_id`.

Tienes que asegurarte de que sea √∫nico para cada operaci√≥n.

{* ../../docs_src/path_operation_advanced_configuration/tutorial001.py hl[6] *}

### Usar el nombre de la *funci√≥n de path operation* como el operationId

Si quieres usar los nombres de las funciones de tus APIs como `operationId`s, puedes iterar sobre todas ellas y sobrescribir el `operation_id` de cada *path operation* usando su `APIRoute.name`.

Deber√≠as hacerlo despu√©s de agregar todas tus *path operations*.

{* ../../docs_src/path_operation_advanced_configuration/tutorial002.py hl[2, 12:21, 24] *}

/// tip | Consejo

Si llamas manualmente a `app.openapi()`, deber√≠as actualizar los `operationId`s antes de eso.

///

/// warning | Advertencia

Si haces esto, tienes que asegurarte de que cada una de tus *funciones de path operation* tenga un nombre √∫nico.

Incluso si est√°n en diferentes m√≥dulos (archivos de Python).

///

## Excluir de OpenAPI

Para excluir una *path operation* del esquema OpenAPI generado (y por lo tanto, de los sistemas de documentaci√≥n autom√°tica), utiliza el par√°metro `include_in_schema` y config√∫ralo en `False`:

{* ../../docs_src/path_operation_advanced_configuration/tutorial003.py hl[6] *}

## Descripci√≥n avanzada desde el docstring

Puedes limitar las l√≠neas usadas del docstring de una *funci√≥n de path operation* para OpenAPI.

A√±adir un `\f` (un car√°cter de separaci√≥n de p√°gina escapado) hace que **FastAPI** trunque la salida usada para OpenAPI en este punto.

No aparecer√° en la documentaci√≥n, pero otras herramientas (como Sphinx) podr√°n usar el resto.

{* ../../docs_src/path_operation_advanced_configuration/tutorial004.py hl[19:29] *}

## Responses Adicionales

Probablemente has visto c√≥mo declarar el `response_model` y el `status_code` para una *path operation*.

Eso define los metadatos sobre el response principal de una *path operation*.

Tambi√©n puedes declarar responses adicionales con sus modelos, c√≥digos de estado, etc.

Hay un cap√≠tulo entero en la documentaci√≥n sobre ello, puedes leerlo en [Responses Adicionales en OpenAPI](additional-responses.md){.internal-link target=_blank}.

## OpenAPI Extra

Cuando declaras una *path operation* en tu aplicaci√≥n, **FastAPI** genera autom√°ticamente los metadatos relevantes sobre esa *path operation* para incluirlos en el esquema de OpenAPI.

/// note | Nota

En la especificaci√≥n de OpenAPI se llama el <a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#operation-object" class="external-link" target="_blank">Objeto de Operaci√≥n</a>.

///

Tiene toda la informaci√≥n sobre la *path operation* y se usa para generar la documentaci√≥n autom√°tica.

Incluye los `tags`, `parameters`, `requestBody`, `responses`, etc.

Este esquema de OpenAPI espec√≠fico de *path operation* normalmente se genera autom√°ticamente por **FastAPI**, pero tambi√©n puedes extenderlo.

/// tip | Consejo

Este es un punto de extensi√≥n de bajo nivel.

Si solo necesitas declarar responses adicionales, una forma m√°s conveniente de hacerlo es con [Responses Adicionales en OpenAPI](additional-responses.md){.internal-link target=_blank}.

///

Puedes extender el esquema de OpenAPI para una *path operation* usando el par√°metro `openapi_extra`.

### Extensiones de OpenAPI

Este `openapi_extra` puede ser √∫til, por ejemplo, para declarar [Extensiones de OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specificationExtensions):

{* ../../docs_src/path_operation_advanced_configuration/tutorial005.py hl[6] *}

Si abres la documentaci√≥n autom√°tica de la API, tu extensi√≥n aparecer√° en la parte inferior de la *path operation* espec√≠fica.

<img src="/img/tutorial/path-operation-advanced-configuration/image01.png">

Y si ves el OpenAPI resultante (en `/openapi.json` en tu API), ver√°s tu extensi√≥n como parte de la *path operation* espec√≠fica tambi√©n:

```JSON hl_lines="22"
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "summary": "Read Items",
                "operationId": "read_items_items__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "x-aperture-labs-portal": "blue"
            }
        }
    }
}
```

### Esquema de *path operation* personalizada de OpenAPI

El diccionario en `openapi_extra` se combinar√° profundamente con el esquema de OpenAPI generado autom√°ticamente para la *path operation*.

Por lo tanto, podr√≠as a√±adir datos adicionales al esquema generado autom√°ticamente.

Por ejemplo, podr√≠as decidir leer y validar el request con tu propio c√≥digo, sin usar las funcionalidades autom√°ticas de FastAPI con Pydantic, pero a√∫n podr√≠as querer definir el request en el esquema de OpenAPI.

Podr√≠as hacer eso con `openapi_extra`:

{* ../../docs_src/path_operation_advanced_configuration/tutorial006.py hl[19:36, 39:40] *}

En este ejemplo, no declaramos ning√∫n modelo Pydantic. De hecho, el cuerpo del request ni siquiera se <abbr title="converted from some plain format, like bytes, into Python objects">parse</abbr> como JSON, se lee directamente como `bytes`, y la funci√≥n `magic_data_reader()` ser√≠a la encargada de parsearlo de alguna manera.

Sin embargo, podemos declarar el esquema esperado para el cuerpo del request.

### Tipo de contenido personalizado de OpenAPI

Usando este mismo truco, podr√≠as usar un modelo Pydantic para definir el esquema JSON que luego se incluye en la secci√≥n personalizada del esquema OpenAPI para la *path operation*.

Y podr√≠as hacer esto incluso si el tipo de datos en el request no es JSON.

Por ejemplo, en esta aplicaci√≥n no usamos la funcionalidad integrada de FastAPI para extraer el esquema JSON de los modelos Pydantic ni la validaci√≥n autom√°tica para JSON. De hecho, estamos declarando el tipo de contenido del request como YAML, no JSON:

//// tab | Pydantic v2

{* ../../docs_src/path_operation_advanced_configuration/tutorial007.py hl[17:22, 24] *}

////

//// tab | Pydantic v1

{* ../../docs_src/path_operation_advanced_configuration/tutorial007_pv1.py hl[17:22, 24] *}

////

/// info | Informaci√≥n

En la versi√≥n 1 de Pydantic el m√©todo para obtener el esquema JSON para un modelo se llamaba `Item.schema()`, en la versi√≥n 2 de Pydantic, el m√©todo se llama `Item.model_json_schema()`.

///

Sin embargo, aunque no estamos usando la funcionalidad integrada por defecto, a√∫n estamos usando un modelo Pydantic para generar manualmente el esquema JSON para los datos que queremos recibir en YAML.

Luego usamos el request directamente, y extraemos el cuerpo como `bytes`. Esto significa que FastAPI ni siquiera intentar√° parsear la carga √∫til del request como JSON.

Y luego en nuestro c√≥digo, parseamos ese contenido YAML directamente, y nuevamente estamos usando el mismo modelo Pydantic para validar el contenido YAML:

//// tab | Pydantic v2

{* ../../docs_src/path_operation_advanced_configuration/tutorial007.py hl[26:33] *}

////

//// tab | Pydantic v1

{* ../../docs_src/path_operation_advanced_configuration/tutorial007_pv1.py hl[26:33] *}

////

/// info | Informaci√≥n

En la versi√≥n 1 de Pydantic el m√©todo para parsear y validar un objeto era `Item.parse_obj()`, en la versi√≥n 2 de Pydantic, el m√©todo se llama `Item.model_validate()`.

///

/// tip | Consejo

Aqu√≠ reutilizamos el mismo modelo Pydantic.

Pero de la misma manera, podr√≠amos haberlo validado de alguna otra forma.

///


================================================
File: /docs/es/docs/advanced/response-change-status-code.md
================================================
# Response - Cambiar C√≥digo de Estado

Probablemente le√≠ste antes que puedes establecer un [C√≥digo de Estado de Response](../tutorial/response-status-code.md){.internal-link target=_blank} por defecto.

Pero en algunos casos necesitas devolver un c√≥digo de estado diferente al predeterminado.

## Caso de uso

Por ejemplo, imagina que quieres devolver un c√≥digo de estado HTTP de "OK" `200` por defecto.

Pero si los datos no existieran, quieres crearlos y devolver un c√≥digo de estado HTTP de "CREATED" `201`.

Pero todav√≠a quieres poder filtrar y convertir los datos que devuelves con un `response_model`.

Para esos casos, puedes usar un par√°metro `Response`.

## Usa un par√°metro `Response`

Puedes declarar un par√°metro de tipo `Response` en tu *funci√≥n de path operation* (como puedes hacer para cookies y headers).

Y luego puedes establecer el `status_code` en ese objeto de response *temporal*.

{* ../../docs_src/response_change_status_code/tutorial001.py hl[1,9,12] *}

Y luego puedes devolver cualquier objeto que necesites, como lo har√≠as normalmente (un `dict`, un modelo de base de datos, etc.).

Y si declaraste un `response_model`, todav√≠a se utilizar√° para filtrar y convertir el objeto que devolviste.

**FastAPI** usar√° ese response *temporal* para extraer el c√≥digo de estado (tambi√©n cookies y headers), y los pondr√° en el response final que contiene el valor que devolviste, filtrado por cualquier `response_model`.

Tambi√©n puedes declarar el par√°metro `Response` en dependencias y establecer el c√≥digo de estado en ellas. Pero ten en cuenta que el √∫ltimo establecido prevalecer√°.


================================================
File: /docs/es/docs/advanced/response-cookies.md
================================================
# Cookies de Response

## Usar un par√°metro `Response`

Puedes declarar un par√°metro de tipo `Response` en tu *path operation function*.

Y luego puedes establecer cookies en ese objeto de response *temporal*.

{* ../../docs_src/response_cookies/tutorial002.py hl[1, 8:9] *}

Y entonces puedes devolver cualquier objeto que necesites, como normalmente lo har√≠as (un `dict`, un modelo de base de datos, etc).

Y si declaraste un `response_model`, todav√≠a se utilizar√° para filtrar y convertir el objeto que devolviste.

**FastAPI** utilizar√° ese response *temporal* para extraer las cookies (tambi√©n los headers y el c√≥digo de estado), y las pondr√° en el response final que contiene el valor que devolviste, filtrado por cualquier `response_model`.

Tambi√©n puedes declarar el par√°metro `Response` en las dependencias, y establecer cookies (y headers) en ellas.

## Devolver una `Response` directamente

Tambi√©n puedes crear cookies al devolver una `Response` directamente en tu c√≥digo.

Para hacer eso, puedes crear un response como se describe en [Devolver un Response Directamente](response-directly.md){.internal-link target=_blank}.

Luego establece Cookies en ella, y luego devu√©lvela:

{* ../../docs_src/response_cookies/tutorial001.py hl[10:12] *}

/// tip | Consejo

Ten en cuenta que si devuelves un response directamente en lugar de usar el par√°metro `Response`, FastAPI lo devolver√° directamente.

As√≠ que tendr√°s que asegurarte de que tus datos son del tipo correcto. Por ejemplo, que sea compatible con JSON, si est√°s devolviendo un `JSONResponse`.

Y tambi√©n que no est√©s enviando ning√∫n dato que deber√≠a haber sido filtrado por un `response_model`.

///

### M√°s informaci√≥n

/// note | Detalles T√©cnicos

Tambi√©n podr√≠as usar `from starlette.responses import Response` o `from starlette.responses import JSONResponse`.

**FastAPI** proporciona los mismos `starlette.responses` como `fastapi.responses` solo como una conveniencia para ti, el desarrollador. Pero la mayor√≠a de los responses disponibles vienen directamente de Starlette.

Y como el `Response` se puede usar frecuentemente para establecer headers y cookies, **FastAPI** tambi√©n lo proporciona en `fastapi.Response`.

///

Para ver todos los par√°metros y opciones disponibles, revisa la <a href="https://www.starlette.io/responses/#set-cookie" class="external-link" target="_blank">documentaci√≥n en Starlette</a>.


================================================
File: /docs/es/docs/advanced/response-directly.md
================================================
# Devolver una Response Directamente

Cuando creas una *path operation* en **FastAPI**, normalmente puedes devolver cualquier dato desde ella: un `dict`, una `list`, un modelo de Pydantic, un modelo de base de datos, etc.

Por defecto, **FastAPI** convertir√≠a autom√°ticamente ese valor de retorno a JSON usando el `jsonable_encoder` explicado en [JSON Compatible Encoder](../tutorial/encoder.md){.internal-link target=_blank}.

Luego, detr√°s de escena, pondr√≠a esos datos compatibles con JSON (por ejemplo, un `dict`) dentro de un `JSONResponse` que se usar√≠a para enviar el response al cliente.

Pero puedes devolver un `JSONResponse` directamente desde tus *path operations*.

Esto podr√≠a ser √∫til, por ejemplo, para devolver headers o cookies personalizados.

## Devolver una `Response`

De hecho, puedes devolver cualquier `Response` o cualquier subclase de ella.

/// tip | Consejo

`JSONResponse` en s√≠ misma es una subclase de `Response`.

///

Y cuando devuelves una `Response`, **FastAPI** la pasar√° directamente.

No har√° ninguna conversi√≥n de datos con los modelos de Pydantic, no convertir√° los contenidos a ning√∫n tipo, etc.

Esto te da mucha flexibilidad. Puedes devolver cualquier tipo de datos, sobrescribir cualquier declaraci√≥n o validaci√≥n de datos, etc.

## Usar el `jsonable_encoder` en una `Response`

Como **FastAPI** no realiza cambios en una `Response` que devuelves, tienes que asegurarte de que sus contenidos est√©n listos para ello.

Por ejemplo, no puedes poner un modelo de Pydantic en un `JSONResponse` sin primero convertirlo a un `dict` con todos los tipos de datos (como `datetime`, `UUID`, etc.) convertidos a tipos compatibles con JSON.

Para esos casos, puedes usar el `jsonable_encoder` para convertir tus datos antes de pasarlos a un response:

{* ../../docs_src/response_directly/tutorial001.py hl[6:7,21:22] *}

/// note | Nota

Tambi√©n podr√≠as usar `from starlette.responses import JSONResponse`.

**FastAPI** proporciona los mismos `starlette.responses` como `fastapi.responses` solo como una conveniencia para ti, el desarrollador. Pero la mayor√≠a de los responses disponibles vienen directamente de Starlette.

///

## Devolver una `Response` personalizada

El ejemplo anterior muestra todas las partes que necesitas, pero a√∫n no es muy √∫til, ya que podr√≠as haber devuelto el `item` directamente, y **FastAPI** lo colocar√≠a en un `JSONResponse` por ti, convirti√©ndolo a un `dict`, etc. Todo eso por defecto.

Ahora, veamos c√≥mo podr√≠as usar eso para devolver un response personalizado.

Digamos que quieres devolver un response en <a href="https://en.wikipedia.org/wiki/XML" class="external-link" target="_blank">XML</a>.

Podr√≠as poner tu contenido XML en un string, poner eso en un `Response`, y devolverlo:

{* ../../docs_src/response_directly/tutorial002.py hl[1,18] *}

## Notas

Cuando devuelves una `Response` directamente, sus datos no son validados, convertidos (serializados), ni documentados autom√°ticamente.

Pero a√∫n puedes documentarlo como se describe en [Additional Responses in OpenAPI](additional-responses.md){.internal-link target=_blank}.

Puedes ver en secciones posteriores c√≥mo usar/declarar estas `Response`s personalizadas mientras todav√≠a tienes conversi√≥n autom√°tica de datos, documentaci√≥n, etc.


================================================
File: /docs/es/docs/advanced/response-headers.md
================================================
# Response Headers

## Usa un par√°metro `Response`

Puedes declarar un par√°metro de tipo `Response` en tu *funci√≥n de path operation* (como puedes hacer para cookies).

Y luego puedes establecer headers en ese objeto de response *temporal*.

{* ../../docs_src/response_headers/tutorial002.py hl[1, 7:8] *}

Y luego puedes devolver cualquier objeto que necesites, como har√≠as normalmente (un `dict`, un modelo de base de datos, etc).

Y si declaraste un `response_model`, a√∫n se usar√° para filtrar y convertir el objeto que devolviste.

**FastAPI** usar√° ese response *temporal* para extraer los headers (tambi√©n cookies y el c√≥digo de estado), y los pondr√° en el response final que contiene el valor que devolviste, filtrado por cualquier `response_model`.

Tambi√©n puedes declarar el par√°metro `Response` en dependencias y establecer headers (y cookies) en ellas.

## Retorna una `Response` directamente

Tambi√©n puedes agregar headers cuando devuelves un `Response` directamente.

Crea un response como se describe en [Retorna un Response Directamente](response-directly.md){.internal-link target=_blank} y pasa los headers como un par√°metro adicional:

{* ../../docs_src/response_headers/tutorial001.py hl[10:12] *}

/// note | Detalles T√©cnicos

Tambi√©n podr√≠as usar `from starlette.responses import Response` o `from starlette.responses import JSONResponse`.

**FastAPI** proporciona las mismas `starlette.responses` como `fastapi.responses` solo por conveniencia para ti, el desarrollador. Pero la mayor√≠a de los responses disponibles provienen directamente de Starlette.

Y como el `Response` se puede usar frecuentemente para establecer headers y cookies, **FastAPI** tambi√©n lo proporciona en `fastapi.Response`.

///

## Headers Personalizados

Ten en cuenta que los headers propietarios personalizados se pueden agregar <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" class="external-link" target="_blank">usando el prefijo 'X-'</a>.

Pero si tienes headers personalizados que quieres que un cliente en un navegador pueda ver, necesitas agregarlos a tus configuraciones de CORS (leer m√°s en [CORS (Cross-Origin Resource Sharing)](../tutorial/cors.md){.internal-link target=_blank}), usando el par√°metro `expose_headers` documentado en <a href="https://www.starlette.io/middleware/#corsmiddleware" class="external-link" target="_blank">la documentaci√≥n CORS de Starlette</a>.


================================================
File: /docs/es/docs/advanced/settings.md
================================================
# Configuraciones y Variables de Entorno

En muchos casos, tu aplicaci√≥n podr√≠a necesitar algunas configuraciones o ajustes externos, por ejemplo, claves secretas, credenciales de base de datos, credenciales para servicios de correo electr√≥nico, etc.

La mayor√≠a de estas configuraciones son variables (pueden cambiar), como las URLs de bases de datos. Y muchas podr√≠an ser sensibles, como los secretos.

Por esta raz√≥n, es com√∫n proporcionarlas en variables de entorno que son le√≠das por la aplicaci√≥n.

/// tip | Consejo

Para entender las variables de entorno, puedes leer [Variables de Entorno](../environment-variables.md){.internal-link target=_blank}.

///

## Tipos y validaci√≥n

Estas variables de entorno solo pueden manejar strings de texto, ya que son externas a Python y tienen que ser compatibles con otros programas y el resto del sistema (e incluso con diferentes sistemas operativos, como Linux, Windows, macOS).

Eso significa que cualquier valor le√≠do en Python desde una variable de entorno ser√° un `str`, y cualquier conversi√≥n a un tipo diferente o cualquier validaci√≥n tiene que hacerse en c√≥digo.

## Pydantic `Settings`

Afortunadamente, Pydantic proporciona una gran utilidad para manejar estas configuraciones provenientes de variables de entorno con <a href="https://docs.pydantic.dev/latest/concepts/pydantic_settings/" class="external-link" target="_blank">Pydantic: Settings management</a>.

### Instalar `pydantic-settings`

Primero, aseg√∫rate de crear tu [entorno virtual](../virtual-environments.md){.internal-link target=_blank}, act√≠valo y luego instala el paquete `pydantic-settings`:

<div class="termy">

```console
$ pip install pydantic-settings
---> 100%
```

</div>

Tambi√©n viene incluido cuando instalas los extras `all` con:

<div class="termy">

```console
$ pip install "fastapi[all]"
---> 100%
```

</div>

/// info | Informaci√≥n

En Pydantic v1 ven√≠a incluido con el paquete principal. Ahora se distribuye como este paquete independiente para que puedas elegir si instalarlo o no si no necesitas esa funcionalidad.

///

### Crear el objeto `Settings`

Importa `BaseSettings` de Pydantic y crea una sub-clase, muy similar a un modelo de Pydantic.

De la misma forma que con los modelos de Pydantic, declaras atributos de clase con anotaciones de tipos, y posiblemente, valores por defecto.

Puedes usar todas las mismas funcionalidades de validaci√≥n y herramientas que usas para los modelos de Pydantic, como diferentes tipos de datos y validaciones adicionales con `Field()`.

//// tab | Pydantic v2

{* ../../docs_src/settings/tutorial001.py hl[2,5:8,11] *}

////

//// tab | Pydantic v1

/// info | Informaci√≥n

En Pydantic v1 importar√≠as `BaseSettings` directamente desde `pydantic` en lugar de desde `pydantic_settings`.

///

{* ../../docs_src/settings/tutorial001_pv1.py hl[2,5:8,11] *}

////

/// tip | Consejo

Si quieres algo r√°pido para copiar y pegar, no uses este ejemplo, usa el √∫ltimo m√°s abajo.

///

Luego, cuando creas una instance de esa clase `Settings` (en este caso, en el objeto `settings`), Pydantic leer√° las variables de entorno de una manera indiferente a may√∫sculas y min√∫sculas, por lo que una variable en may√∫sculas `APP_NAME` a√∫n ser√° le√≠da para el atributo `app_name`.

Luego convertir√° y validar√° los datos. As√≠ que, cuando uses ese objeto `settings`, tendr√°s datos de los tipos que declaraste (por ejemplo, `items_per_user` ser√° un `int`).

### Usar el `settings`

Luego puedes usar el nuevo objeto `settings` en tu aplicaci√≥n:

{* ../../docs_src/settings/tutorial001.py hl[18:20] *}

### Ejecutar el servidor

Luego, ejecutar√≠as el servidor pasando las configuraciones como variables de entorno, por ejemplo, podr√≠as establecer un `ADMIN_EMAIL` y `APP_NAME` con:

<div class="termy">

```console
$ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" fastapi run main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

/// tip | Consejo

Para establecer m√∫ltiples variables de entorno para un solo comando, simplemente sep√°ralas con un espacio y ponlas todas antes del comando.

///

Y luego la configuraci√≥n `admin_email` se establecer√≠a en `"deadpool@example.com"`.

El `app_name` ser√≠a `"ChimichangApp"`.

Y el `items_per_user` mantendr√≠a su valor por defecto de `50`.

## Configuraciones en otro m√≥dulo

Podr√≠as poner esas configuraciones en otro archivo de m√≥dulo como viste en [Aplicaciones M√°s Grandes - M√∫ltiples Archivos](../tutorial/bigger-applications.md){.internal-link target=_blank}.

Por ejemplo, podr√≠as tener un archivo `config.py` con:

{* ../../docs_src/settings/app01/config.py *}

Y luego usarlo en un archivo `main.py`:

{* ../../docs_src/settings/app01/main.py hl[3,11:13] *}

/// tip | Consejo

Tambi√©n necesitar√≠as un archivo `__init__.py` como viste en [Aplicaciones M√°s Grandes - M√∫ltiples Archivos](../tutorial/bigger-applications.md){.internal-link target=_blank}.

///

## Configuraciones en una dependencia

En algunas ocasiones podr√≠a ser √∫til proporcionar las configuraciones desde una dependencia, en lugar de tener un objeto global con `settings` que se use en todas partes.

Esto podr√≠a ser especialmente √∫til durante las pruebas, ya que es muy f√°cil sobrescribir una dependencia con tus propias configuraciones personalizadas.

### El archivo de configuraci√≥n

Proveniente del ejemplo anterior, tu archivo `config.py` podr√≠a verse como:

{* ../../docs_src/settings/app02/config.py hl[10] *}

Nota que ahora no creamos una instance por defecto `settings = Settings()`.

### El archivo principal de la app

Ahora creamos una dependencia que devuelve un nuevo `config.Settings()`.

{* ../../docs_src/settings/app02_an_py39/main.py hl[6,12:13] *}

/// tip | Consejo

Hablaremos del `@lru_cache` en un momento.

Por ahora puedes asumir que `get_settings()` es una funci√≥n normal.

///

Y luego podemos requerirlo desde la *path operation function* como una dependencia y usarlo donde lo necesitemos.

{* ../../docs_src/settings/app02_an_py39/main.py hl[17,19:21] *}

### Configuraciones y pruebas

Luego ser√≠a muy f√°cil proporcionar un objeto de configuraciones diferente durante las pruebas al sobrescribir una dependencia para `get_settings`:

{* ../../docs_src/settings/app02/test_main.py hl[9:10,13,21] *}

En la dependencia sobreescrita establecemos un nuevo valor para el `admin_email` al crear el nuevo objeto `Settings`, y luego devolvemos ese nuevo objeto.

Luego podemos probar que se est√° usando.

## Leer un archivo `.env`

Si tienes muchas configuraciones que posiblemente cambien mucho, tal vez en diferentes entornos, podr√≠a ser √∫til ponerlos en un archivo y luego leerlos desde all√≠ como si fueran variables de entorno.

Esta pr√°ctica es lo suficientemente com√∫n que tiene un nombre, estas variables de entorno generalmente se colocan en un archivo `.env`, y el archivo se llama un "dotenv".

/// tip | Consejo

Un archivo que comienza con un punto (`.`) es un archivo oculto en sistemas tipo Unix, como Linux y macOS.

Pero un archivo dotenv realmente no tiene que tener ese nombre exacto.

///

Pydantic tiene soporte para leer desde estos tipos de archivos usando un paquete externo. Puedes leer m√°s en <a href="https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dotenv-env-support" class="external-link" target="_blank">Pydantic Settings: Dotenv (.env) support</a>.

/// tip | Consejo

Para que esto funcione, necesitas `pip install python-dotenv`.

///

### El archivo `.env`

Podr√≠as tener un archivo `.env` con:

```bash
ADMIN_EMAIL="deadpool@example.com"
APP_NAME="ChimichangApp"
```

### Leer configuraciones desde `.env`

Y luego actualizar tu `config.py` con:

//// tab | Pydantic v2

{* ../../docs_src/settings/app03_an/config.py hl[9] *}

/// tip | Consejo

El atributo `model_config` se usa solo para configuraci√≥n de Pydantic. Puedes leer m√°s en <a href="https://docs.pydantic.dev/latest/concepts/config/" class="external-link" target="_blank">Pydantic: Concepts: Configuration</a>.

///

////

//// tab | Pydantic v1

{* ../../docs_src/settings/app03_an/config_pv1.py hl[9:10] *}

/// tip | Consejo

La clase `Config` se usa solo para configuraci√≥n de Pydantic. Puedes leer m√°s en <a href="https://docs.pydantic.dev/1.10/usage/model_config/" class="external-link" target="_blank">Pydantic Model Config</a>.

///

////

/// info | Informaci√≥n

En la versi√≥n 1 de Pydantic la configuraci√≥n se hac√≠a en una clase interna `Config`, en la versi√≥n 2 de Pydantic se hace en un atributo `model_config`. Este atributo toma un `dict`, y para obtener autocompletado y errores en l√≠nea, puedes importar y usar `SettingsConfigDict` para definir ese `dict`.

///

Aqu√≠ definimos la configuraci√≥n `env_file` dentro de tu clase Pydantic `Settings`, y establecemos el valor en el nombre del archivo con el archivo dotenv que queremos usar.

### Creando el `Settings` solo una vez con `lru_cache`

Leer un archivo desde el disco es normalmente una operaci√≥n costosa (lenta), por lo que probablemente quieras hacerlo solo una vez y luego reutilizar el mismo objeto de configuraciones, en lugar de leerlo para cada request.

Pero cada vez que hacemos:

```Python
Settings()
```

se crear√≠a un nuevo objeto `Settings`, y al crearse leer√≠a el archivo `.env` nuevamente.

Si la funci√≥n de dependencia fuera simplemente as√≠:

```Python
def get_settings():
    return Settings()
```

crear√≠amos ese objeto para cada request, y estar√≠amos leyendo el archivo `.env` para cada request. ‚ö†Ô∏è

Pero como estamos usando el decorador `@lru_cache` encima, el objeto `Settings` se crear√° solo una vez, la primera vez que se llame. ‚úîÔ∏è

{* ../../docs_src/settings/app03_an_py39/main.py hl[1,11] *}

Entonces, para cualquier llamada subsiguiente de `get_settings()` en las dependencias de los pr√≥ximos requests, en lugar de ejecutar el c√≥digo interno de `get_settings()` y crear un nuevo objeto `Settings`, devolver√° el mismo objeto que fue devuelto en la primera llamada, una y otra vez.

#### Detalles T√©cnicos de `lru_cache`

`@lru_cache` modifica la funci√≥n que decora para devolver el mismo valor que se devolvi√≥ la primera vez, en lugar de calcularlo nuevamente, ejecutando el c√≥digo de la funci√≥n cada vez.

As√≠ que la funci√≥n debajo se ejecutar√° una vez por cada combinaci√≥n de argumentos. Y luego, los valores devueltos por cada una de esas combinaciones de argumentos se utilizar√°n una y otra vez cada vez que la funci√≥n sea llamada con exactamente la misma combinaci√≥n de argumentos.

Por ejemplo, si tienes una funci√≥n:

```Python
@lru_cache
def say_hi(name: str, salutation: str = "Ms."):
    return f"Hello {salutation} {name}"
```

tu programa podr√≠a ejecutarse as√≠:

```mermaid
sequenceDiagram

participant code as C√≥digo
participant function as say_hi()
participant execute as Ejecutar funci√≥n

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Camila")
        function ->> execute: ejecutar c√≥digo de la funci√≥n
        execute ->> code: devolver el resultado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: devolver resultado almacenado
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick")
        function ->> execute: ejecutar c√≥digo de la funci√≥n
        execute ->> code: devolver el resultado
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick", salutation="Mr.")
        function ->> execute: ejecutar c√≥digo de la funci√≥n
        execute ->> code: devolver el resultado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Rick")
        function ->> code: devolver resultado almacenado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: devolver resultado almacenado
    end
```

En el caso de nuestra dependencia `get_settings()`, la funci√≥n ni siquiera toma argumentos, por lo que siempre devolver√° el mismo valor.

De esa manera, se comporta casi como si fuera solo una variable global. Pero como usa una funci√≥n de dependencia, entonces podemos sobrescribirla f√°cilmente para las pruebas.

`@lru_cache` es parte de `functools`, que es parte del library est√°ndar de Python, puedes leer m√°s sobre √©l en las <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" class="external-link" target="_blank">docs de Python para `@lru_cache`</a>.

## Resumen

Puedes usar Pydantic Settings para manejar las configuraciones o ajustes de tu aplicaci√≥n, con todo el poder de los modelos de Pydantic.

* Al usar una dependencia, puedes simplificar las pruebas.
* Puedes usar archivos `.env` con √©l.
* Usar `@lru_cache` te permite evitar leer el archivo dotenv una y otra vez para cada request, mientras te permite sobrescribirlo durante las pruebas.


================================================
File: /docs/es/docs/advanced/sub-applications.md
================================================
# Sub Aplicaciones - Mounts

Si necesitas tener dos aplicaciones de **FastAPI** independientes, cada una con su propio OpenAPI independiente y su propia interfaz de docs, puedes tener una aplicaci√≥n principal y "montar" una (o m√°s) sub-aplicaci√≥n(es).

## Montar una aplicaci√≥n **FastAPI**

"Montar" significa a√±adir una aplicaci√≥n completamente "independiente" en un path espec√≠fico, que luego se encarga de manejar todo bajo ese path, con las _path operations_ declaradas en esa sub-aplicaci√≥n.

### Aplicaci√≥n de nivel superior

Primero, crea la aplicaci√≥n principal de nivel superior de **FastAPI**, y sus *path operations*:

{* ../../docs_src/sub_applications/tutorial001.py hl[3, 6:8] *}

### Sub-aplicaci√≥n

Luego, crea tu sub-aplicaci√≥n, y sus *path operations*.

Esta sub-aplicaci√≥n es solo otra aplicaci√≥n est√°ndar de FastAPI, pero es la que se "montar√°":

{* ../../docs_src/sub_applications/tutorial001.py hl[11, 14:16] *}

### Montar la sub-aplicaci√≥n

En tu aplicaci√≥n de nivel superior, `app`, monta la sub-aplicaci√≥n, `subapi`.

En este caso, se montar√° en el path `/subapi`:

{* ../../docs_src/sub_applications/tutorial001.py hl[11, 19] *}

### Revisa la documentaci√≥n autom√°tica de la API

Ahora, ejecuta el comando `fastapi` con tu archivo:

<div class="termy">

```console
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Y abre la documentaci√≥n en <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>.

Ver√°s la documentaci√≥n autom√°tica de la API para la aplicaci√≥n principal, incluyendo solo sus propias _path operations_:

<img src="/img/tutorial/sub-applications/image01.png">

Y luego, abre la documentaci√≥n para la sub-aplicaci√≥n, en <a href="http://127.0.0.1:8000/subapi/docs" class="external-link" target="_blank">http://127.0.0.1:8000/subapi/docs</a>.

Ver√°s la documentaci√≥n autom√°tica de la API para la sub-aplicaci√≥n, incluyendo solo sus propias _path operations_, todas bajo el prefijo correcto del sub-path `/subapi`:

<img src="/img/tutorial/sub-applications/image02.png">

Si intentas interactuar con cualquiera de las dos interfaces de usuario, funcionar√°n correctamente, porque el navegador podr√° comunicarse con cada aplicaci√≥n o sub-aplicaci√≥n espec√≠fica.

### Detalles T√©cnicos: `root_path`

Cuando montas una sub-aplicaci√≥n como se describe arriba, FastAPI se encargar√° de comunicar el path de montaje para la sub-aplicaci√≥n usando un mecanismo de la especificaci√≥n ASGI llamado `root_path`.

De esa manera, la sub-aplicaci√≥n sabr√° usar ese prefijo de path para la interfaz de documentaci√≥n.

Y la sub-aplicaci√≥n tambi√©n podr√≠a tener sus propias sub-aplicaciones montadas y todo funcionar√≠a correctamente, porque FastAPI maneja todos estos `root_path`s autom√°ticamente.

Aprender√°s m√°s sobre el `root_path` y c√≥mo usarlo expl√≠citamente en la secci√≥n sobre [Detr√°s de un Proxy](behind-a-proxy.md){.internal-link target=_blank}.


================================================
File: /docs/es/docs/advanced/templates.md
================================================
# Plantillas

Puedes usar cualquier motor de plantillas que desees con **FastAPI**.

Una elecci√≥n com√∫n es Jinja2, el mismo que usa Flask y otras herramientas.

Hay utilidades para configurarlo f√°cilmente que puedes usar directamente en tu aplicaci√≥n de **FastAPI** (proporcionadas por Starlette).

## Instalar dependencias

Aseg√∫rate de crear un [entorno virtual](../virtual-environments.md){.internal-link target=_blank}, activarlo e instalar `jinja2`:

<div class="termy">

```console
$ pip install jinja2

---> 100%
```

</div>

## Usando `Jinja2Templates`

* Importa `Jinja2Templates`.
* Crea un objeto `templates` que puedas reutilizar m√°s tarde.
* Declara un par√°metro `Request` en la *path operation* que devolver√° una plantilla.
* Usa los `templates` que creaste para renderizar y devolver un `TemplateResponse`, pasa el nombre de la plantilla, el objeto de request, y un diccionario "context" con pares clave-valor que se usar√°n dentro de la plantilla Jinja2.

{* ../../docs_src/templates/tutorial001.py hl[4,11,15:18] *}

/// note | Nota

Antes de FastAPI 0.108.0, Starlette 0.29.0, el `name` era el primer par√°metro.

Adem√°s, antes de eso, en versiones anteriores, el objeto `request` se pasaba como parte de los pares clave-valor en el contexto para Jinja2.

///

/// tip | Consejo

Al declarar `response_class=HTMLResponse`, la interfaz de usuario de la documentaci√≥n podr√° saber que el response ser√° HTML.

///

/// note | Nota T√©cnica

Tambi√©n podr√≠as usar `from starlette.templating import Jinja2Templates`.

**FastAPI** proporciona el mismo `starlette.templating` como `fastapi.templating`, solo como una conveniencia para ti, el desarrollador. Pero la mayor√≠a de los responses disponibles vienen directamente de Starlette. Lo mismo con `Request` y `StaticFiles`.

///

## Escribiendo plantillas

Luego puedes escribir una plantilla en `templates/item.html` con, por ejemplo:

```jinja hl_lines="7"
{!../../docs_src/templates/templates/item.html!}
```

### Valores de Contexto de la Plantilla

En el HTML que contiene:

{% raw %}

```jinja
Item ID: {{ id }}
```

{% endraw %}

...mostrar√° el `id` tomado del `dict` de "contexto" que pasaste:

```Python
{"id": id}
```

Por ejemplo, con un ID de `42`, esto se renderizar√≠a como:

```html
Item ID: 42
```

### Argumentos de la Plantilla `url_for`

Tambi√©n puedes usar `url_for()` dentro de la plantilla, toma como argumentos los mismos que usar√≠a tu *path operation function*.

Entonces, la secci√≥n con:

{% raw %}

```jinja
<a href="{{ url_for('read_item', id=id) }}">
```

{% endraw %}

...generar√° un enlace hacia la misma URL que manejar√≠a la *path operation function* `read_item(id=id)`.

Por ejemplo, con un ID de `42`, esto se renderizar√≠a como:

```html
<a href="/items/42">
```

## Plantillas y archivos est√°ticos

Tambi√©n puedes usar `url_for()` dentro de la plantilla, y usarlo, por ejemplo, con los `StaticFiles` que montaste con el `name="static"`.

```jinja hl_lines="4"
{!../../docs_src/templates/templates/item.html!}
```

En este ejemplo, enlazar√≠a a un archivo CSS en `static/styles.css` con:

```CSS hl_lines="4"
{!../../docs_src/templates/static/styles.css!}
```

Y porque est√°s usando `StaticFiles`, ese archivo CSS ser√≠a servido autom√°ticamente por tu aplicaci√≥n de **FastAPI** en la URL `/static/styles.css`.

## M√°s detalles

Para m√°s detalles, incluyendo c√≥mo testear plantillas, revisa <a href="https://www.starlette.io/templates/" class="external-link" target="_blank">la documentaci√≥n de Starlette sobre plantillas</a>.


================================================
File: /docs/es/docs/advanced/testing-dependencies.md
================================================
# Probando Dependencias con Overrides

## Sobrescribir dependencias durante las pruebas

Hay algunos escenarios donde podr√≠as querer sobrescribir una dependencia durante las pruebas.

No quieres que la dependencia original se ejecute (ni ninguna de las sub-dependencias que pueda tener).

En cambio, quieres proporcionar una dependencia diferente que se usar√° solo durante las pruebas (posiblemente solo algunas pruebas espec√≠ficas), y que proporcionar√° un valor que pueda ser usado donde se us√≥ el valor de la dependencia original.

### Casos de uso: servicio externo

Un ejemplo podr√≠a ser que tienes un proveedor de autenticaci√≥n externo al que necesitas llamar.

Le env√≠as un token y te devuelve un usuario autenticado.

Este proveedor podr√≠a estar cobr√°ndote por cada request, y llamarlo podr√≠a tomar m√°s tiempo adicional que si tuvieras un usuario de prueba fijo para los tests.

Probablemente quieras probar el proveedor externo una vez, pero no necesariamente llamarlo para cada test que se realice.

En este caso, puedes sobrescribir la dependencia que llama a ese proveedor y usar una dependencia personalizada que devuelva un usuario de prueba, solo para tus tests.

### Usa el atributo `app.dependency_overrides`

Para estos casos, tu aplicaci√≥n **FastAPI** tiene un atributo `app.dependency_overrides`, es un simple `dict`.

Para sobrescribir una dependencia para las pruebas, colocas como clave la dependencia original (una funci√≥n), y como valor, tu dependencia para sobreescribir (otra funci√≥n).

Y entonces **FastAPI** llamar√° a esa dependencia para sobreescribir en lugar de la dependencia original.

{* ../../docs_src/dependency_testing/tutorial001_an_py310.py hl[26:27,30] *}

/// tip | Consejo

Puedes sobreescribir una dependencia utilizada en cualquier lugar de tu aplicaci√≥n **FastAPI**.

La dependencia original podr√≠a ser utilizada en una *path operation function*, un *path operation decorator* (cuando no usas el valor de retorno), una llamada a `.include_router()`, etc.

FastAPI todav√≠a podr√° sobrescribirla.

///

Entonces puedes restablecer las dependencias sobreescritas configurando `app.dependency_overrides` para que sea un `dict` vac√≠o:

```Python
app.dependency_overrides = {}
```

/// tip | Consejo

Si quieres sobrescribir una dependencia solo durante algunos tests, puedes establecer la sobrescritura al inicio del test (dentro de la funci√≥n del test) y restablecerla al final (al final de la funci√≥n del test).

///


================================================
File: /docs/es/docs/advanced/testing-events.md
================================================
# Testing Events: startup - shutdown

Cuando necesitas que tus manejadores de eventos (`startup` y `shutdown`) se ejecuten en tus tests, puedes usar el `TestClient` con un statement `with`:

{* ../../docs_src/app_testing/tutorial003.py hl[9:12,20:24] *}


================================================
File: /docs/es/docs/advanced/testing-websockets.md
================================================
# Probando WebSockets

Puedes usar el mismo `TestClient` para probar WebSockets.

Para esto, usas el `TestClient` en un statement `with`, conect√°ndote al WebSocket:

{* ../../docs_src/app_testing/tutorial002.py hl[27:31] *}

/// note | Nota

Para m√°s detalles, revisa la documentaci√≥n de Starlette sobre <a href="https://www.starlette.io/testclient/#testing-websocket-sessions" class="external-link" target="_blank">probando sesiones WebSocket</a>.

///


================================================
File: /docs/es/docs/advanced/using-request-directly.md
================================================
# Usar el Request Directamente

Hasta ahora, has estado declarando las partes del request que necesitas con sus tipos.

Tomando datos de:

* El path como par√°metros.
* Headers.
* Cookies.
* etc.

Y al hacerlo, **FastAPI** est√° validando esos datos, convirti√©ndolos y generando documentaci√≥n para tu API autom√°ticamente.

Pero hay situaciones donde podr√≠as necesitar acceder al objeto `Request` directamente.

## Detalles sobre el objeto `Request`

Como **FastAPI** es en realidad **Starlette** por debajo, con una capa de varias herramientas encima, puedes usar el objeto <a href="https://www.starlette.io/requests/" class="external-link" target="_blank">`Request`</a> de Starlette directamente cuando lo necesites.

Tambi√©n significa que si obtienes datos del objeto `Request` directamente (por ejemplo, leyendo el cuerpo) no ser√°n validados, convertidos o documentados (con OpenAPI, para la interfaz autom√°tica de usuario de la API) por FastAPI.

Aunque cualquier otro par√°metro declarado normalmente (por ejemplo, el cuerpo con un modelo de Pydantic) seguir√≠a siendo validado, convertido, anotado, etc.

Pero hay casos espec√≠ficos donde es √∫til obtener el objeto `Request`.

## Usa el objeto `Request` directamente

Imaginemos que quieres obtener la direcci√≥n IP/host del cliente dentro de tu *path operation function*.

Para eso necesitas acceder al request directamente.

{* ../../docs_src/using_request_directly/tutorial001.py hl[1,7:8] *}

Al declarar un par√°metro de *path operation function* con el tipo siendo `Request`, **FastAPI** sabr√° pasar el `Request` en ese par√°metro.

/// tip | Consejo

Nota que en este caso, estamos declarando un par√°metro de path adem√°s del par√°metro del request.

As√≠ que, el par√°metro de path ser√° extra√≠do, validado, convertido al tipo especificado y anotado con OpenAPI.

De la misma manera, puedes declarar cualquier otro par√°metro como normalmente, y adicionalmente, obtener tambi√©n el `Request`.

///

## Documentaci√≥n de `Request`

Puedes leer m√°s detalles sobre el <a href="https://www.starlette.io/requests/" class="external-link" target="_blank">objeto `Request` en el sitio de documentaci√≥n oficial de Starlette</a>.

/// note | Detalles T√©cnicos

Podr√≠as tambi√©n usar `from starlette.requests import Request`.

**FastAPI** lo proporciona directamente solo como conveniencia para ti, el desarrollador. Pero viene directamente de Starlette.

///


================================================
File: /docs/es/docs/advanced/websockets.md
================================================
# WebSockets

Puedes usar <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" class="external-link" target="_blank">WebSockets</a> con **FastAPI**.

## Instalar `WebSockets`

Aseg√∫rate de crear un [entorno virtual](../virtual-environments.md){.internal-link target=_blank}, activarlo e instalar `websockets`:

<div class="termy">

```console
$ pip install websockets

---> 100%
```

</div>

## Cliente WebSockets

### En producci√≥n

En tu sistema de producci√≥n, probablemente tengas un frontend creado con un framework moderno como React, Vue.js o Angular.

Y para comunicarte usando WebSockets con tu backend probablemente usar√≠as las utilidades de tu frontend.

O podr√≠as tener una aplicaci√≥n m√≥vil nativa que se comunica con tu backend de WebSocket directamente, en c√≥digo nativo.

O podr√≠as tener alguna otra forma de comunicarte con el endpoint de WebSocket.

---

Pero para este ejemplo, usaremos un documento HTML muy simple con algo de JavaScript, todo dentro de un string largo.

Esto, por supuesto, no es lo ideal y no lo usar√≠as para producci√≥n.

En producci√≥n tendr√≠as una de las opciones anteriores.

Pero es la forma m√°s sencilla de enfocarse en el lado del servidor de WebSockets y tener un ejemplo funcional:

{* ../../docs_src/websockets/tutorial001.py hl[2,6:38,41:43] *}

## Crear un `websocket`

En tu aplicaci√≥n de **FastAPI**, crea un `websocket`:

{* ../../docs_src/websockets/tutorial001.py hl[1,46:47] *}

/// note | Detalles T√©cnicos

Tambi√©n podr√≠as usar `from starlette.websockets import WebSocket`.

**FastAPI** proporciona el mismo `WebSocket` directamente solo como una conveniencia para ti, el desarrollador. Pero viene directamente de Starlette.

///

## Esperar mensajes y enviar mensajes

En tu ruta de WebSocket puedes `await` para recibir mensajes y enviar mensajes.

{* ../../docs_src/websockets/tutorial001.py hl[48:52] *}

Puedes recibir y enviar datos binarios, de texto y JSON.

## Pru√©balo

Si tu archivo se llama `main.py`, ejecuta tu aplicaci√≥n con:

<div class="termy">

```console
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Abre tu navegador en <a href="http://127.0.0.1:8000" class="external-link" target="_blank">http://127.0.0.1:8000</a>.

Ver√°s una p√°gina simple como:

<img src="/img/tutorial/websockets/image01.png">

Puedes escribir mensajes en el cuadro de entrada y enviarlos:

<img src="/img/tutorial/websockets/image02.png">

Y tu aplicaci√≥n **FastAPI** con WebSockets responder√° de vuelta:

<img src="/img/tutorial/websockets/image03.png">

Puedes enviar (y recibir) muchos mensajes:

<img src="/img/tutorial/websockets/image04.png">

Y todos usar√°n la misma conexi√≥n WebSocket.

## Usando `Depends` y otros

En endpoints de WebSocket puedes importar desde `fastapi` y usar:

* `Depends`
* `Security`
* `Cookie`
* `Header`
* `Path`
* `Query`

Funcionan de la misma manera que para otros endpoints de FastAPI/*path operations*:

{* ../../docs_src/websockets/tutorial002_an_py310.py hl[68:69,82] *}

/// info | Informaci√≥n

Como esto es un WebSocket no tiene mucho sentido lanzar un `HTTPException`, en su lugar lanzamos un `WebSocketException`.

Puedes usar un c√≥digo de cierre de los <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1" class="external-link" target="_blank">c√≥digos v√°lidos definidos en la especificaci√≥n</a>.

///

### Prueba los WebSockets con dependencias

Si tu archivo se llama `main.py`, ejecuta tu aplicaci√≥n con:

<div class="termy">

```console
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Abre tu navegador en <a href="http://127.0.0.1:8000" class="external-link" target="_blank">http://127.0.0.1:8000</a>.

Ah√≠ puedes establecer:

* El "ID del √çtem", usado en el path.
* El "Token" usado como un par√°metro query.

/// tip | Consejo

Nota que el query `token` ser√° manejado por una dependencia.

///

Con eso puedes conectar el WebSocket y luego enviar y recibir mensajes:

<img src="/img/tutorial/websockets/image05.png">

## Manejar desconexiones y m√∫ltiples clientes

Cuando una conexi√≥n de WebSocket se cierra, el `await websocket.receive_text()` lanzar√° una excepci√≥n `WebSocketDisconnect`, que puedes capturar y manejar como en este ejemplo.

{* ../../docs_src/websockets/tutorial003_py39.py hl[79:81] *}

Para probarlo:

* Abre la aplicaci√≥n con varias pesta√±as del navegador.
* Escribe mensajes desde ellas.
* Luego cierra una de las pesta√±as.

Eso lanzar√° la excepci√≥n `WebSocketDisconnect`, y todos los otros clientes recibir√°n un mensaje como:

```
Client #1596980209979 left the chat
```

/// tip | Consejo

La aplicaci√≥n anterior es un ejemplo m√≠nimo y simple para demostrar c√≥mo manejar y transmitir mensajes a varias conexiones WebSocket.

Pero ten en cuenta que, como todo se maneja en memoria, en una sola lista, solo funcionar√° mientras el proceso est√© en ejecuci√≥n, y solo funcionar√° con un solo proceso.

Si necesitas algo f√°cil de integrar con FastAPI pero que sea m√°s robusto, soportado por Redis, PostgreSQL u otros, revisa <a href="https://github.com/encode/broadcaster" class="external-link" target="_blank">encode/broadcaster</a>.

///

## M√°s informaci√≥n

Para aprender m√°s sobre las opciones, revisa la documentaci√≥n de Starlette para:

* <a href="https://www.starlette.io/websockets/" class="external-link" target="_blank">La clase `WebSocket`</a>.
* <a href="https://www.starlette.io/endpoints/#websocketendpoint" class="external-link" target="_blank">Manejo de WebSocket basado en clases</a>.


================================================
File: /docs/es/docs/advanced/wsgi.md
================================================
# Incluyendo WSGI - Flask, Django, otros

Puedes montar aplicaciones WSGI como viste con [Sub Aplicaciones - Mounts](sub-applications.md){.internal-link target=_blank}, [Detr√°s de un Proxy](behind-a-proxy.md){.internal-link target=_blank}.

Para eso, puedes usar `WSGIMiddleware` y usarlo para envolver tu aplicaci√≥n WSGI, por ejemplo, Flask, Django, etc.

## Usando `WSGIMiddleware`

Necesitas importar `WSGIMiddleware`.

Luego envuelve la aplicaci√≥n WSGI (p. ej., Flask) con el middleware.

Y luego m√≥ntala bajo un path.

{* ../../docs_src/wsgi/tutorial001.py hl[2:3,3] *}

## Revisa

Ahora, cada request bajo el path `/v1/` ser√° manejado por la aplicaci√≥n Flask.

Y el resto ser√° manejado por **FastAPI**.

Si lo ejecutas y vas a <a href="http://localhost:8000/v1/" class="external-link" target="_blank">http://localhost:8000/v1/</a> ver√°s el response de Flask:

```txt
Hello, World from Flask!
```

Y si vas a <a href="http://localhost:8000/v2" class="external-link" target="_blank">http://localhost:8000/v2</a> ver√°s el response de FastAPI:

```JSON
{
    "message": "Hello World"
}
```


================================================
File: /docs/es/docs/advanced/security/http-basic-auth.md
================================================
# HTTP Basic Auth

Para los casos m√°s simples, puedes usar HTTP Basic Auth.

En HTTP Basic Auth, la aplicaci√≥n espera un header que contiene un nombre de usuario y una contrase√±a.

Si no lo recibe, devuelve un error HTTP 401 "Unauthorized".

Y devuelve un header `WWW-Authenticate` con un valor de `Basic`, y un par√°metro `realm` opcional.

Eso le dice al navegador que muestre el prompt integrado para un nombre de usuario y contrase√±a.

Luego, cuando escribes ese nombre de usuario y contrase√±a, el navegador los env√≠a autom√°ticamente en el header.

## Simple HTTP Basic Auth

* Importa `HTTPBasic` y `HTTPBasicCredentials`.
* Crea un "esquema de `security`" usando `HTTPBasic`.
* Usa ese `security` con una dependencia en tu *path operation*.
* Devuelve un objeto de tipo `HTTPBasicCredentials`:
  * Contiene el `username` y `password` enviados.

{* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}

Cuando intentas abrir la URL por primera vez (o haces clic en el bot√≥n "Execute" en la documentaci√≥n) el navegador te pedir√° tu nombre de usuario y contrase√±a:

<img src="/img/tutorial/security/image12.png">

## Revisa el nombre de usuario

Aqu√≠ hay un ejemplo m√°s completo.

Usa una dependencia para comprobar si el nombre de usuario y la contrase√±a son correctos.

Para esto, usa el m√≥dulo est√°ndar de Python <a href="https://docs.python.org/3/library/secrets.html" class="external-link" target="_blank">`secrets`</a> para verificar el nombre de usuario y la contrase√±a.

`secrets.compare_digest()` necesita tomar `bytes` o un `str` que solo contenga caracteres ASCII (los car√°cteres en ingl√©s), esto significa que no funcionar√≠a con caracteres como `√°`, como en `Sebasti√°n`.

Para manejar eso, primero convertimos el `username` y `password` a `bytes` codific√°ndolos con UTF-8.

Luego podemos usar `secrets.compare_digest()` para asegurar que `credentials.username` es `"stanleyjobson"`, y que `credentials.password` es `"swordfish"`.

{* ../../docs_src/security/tutorial007_an_py39.py hl[1,12:24] *}

Esto ser√≠a similar a:

```Python
if not (credentials.username == "stanleyjobson") or not (credentials.password == "swordfish"):
    # Return some error
    ...
```

Pero al usar `secrets.compare_digest()` ser√° seguro contra un tipo de ataques llamados "timing attacks".

### Timing Attacks

¬øPero qu√© es un "timing attack"?

Imaginemos que algunos atacantes est√°n tratando de adivinar el nombre de usuario y la contrase√±a.

Y env√≠an un request con un nombre de usuario `johndoe` y una contrase√±a `love123`.

Entonces el c√≥digo de Python en tu aplicaci√≥n equivaldr√≠a a algo como:

```Python
if "johndoe" == "stanleyjobson" and "love123" == "swordfish":
    ...
```

Pero justo en el momento en que Python compara la primera `j` en `johndoe` con la primera `s` en `stanleyjobson`, devolver√° `False`, porque ya sabe que esas dos strings no son iguales, pensando que "no hay necesidad de gastar m√°s computaci√≥n comparando el resto de las letras". Y tu aplicaci√≥n dir√° "Nombre de usuario o contrase√±a incorrectos".

Pero luego los atacantes prueban con el nombre de usuario `stanleyjobsox` y contrase√±a `love123`.

Y el c√≥digo de tu aplicaci√≥n hace algo as√≠ como:

```Python
if "stanleyjobsox" == "stanleyjobson" and "love123" == "swordfish":
    ...
```

Python tendr√° que comparar todo `stanleyjobso` en ambos `stanleyjobsox` y `stanleyjobson` antes de darse cuenta de que ambas strings no son las mismas. As√≠ que tomar√° algunos microsegundos extra para responder "Nombre de usuario o contrase√±a incorrectos".

#### El tiempo de respuesta ayuda a los atacantes

En ese punto, al notar que el servidor tard√≥ algunos microsegundos m√°s en enviar el response "Nombre de usuario o contrase√±a incorrectos", los atacantes sabr√°n que acertaron en _algo_, algunas de las letras iniciales eran correctas.

Y luego pueden intentar de nuevo sabiendo que probablemente es algo m√°s similar a `stanleyjobsox` que a `johndoe`.

#### Un ataque "profesional"

Por supuesto, los atacantes no intentar√≠an todo esto a mano, escribir√≠an un programa para hacerlo, posiblemente con miles o millones de pruebas por segundo. Y obtendr√≠an solo una letra correcta adicional a la vez.

Pero haciendo eso, en algunos minutos u horas, los atacantes habr√≠an adivinado el nombre de usuario y la contrase√±a correctos, con la "ayuda" de nuestra aplicaci√≥n, solo usando el tiempo tomado para responder.

#### Arr√©glalo con `secrets.compare_digest()`

Pero en nuestro c√≥digo estamos usando realmente `secrets.compare_digest()`.

En resumen, tomar√° el mismo tiempo comparar `stanleyjobsox` con `stanleyjobson` que comparar `johndoe` con `stanleyjobson`. Y lo mismo para la contrase√±a.

De esa manera, usando `secrets.compare_digest()` en el c√≥digo de tu aplicaci√≥n, ser√° seguro contra todo este rango de ataques de seguridad.

### Devuelve el error

Despu√©s de detectar que las credenciales son incorrectas, regresa un `HTTPException` con un c√≥digo de estado 401 (el mismo que se devuelve cuando no se proporcionan credenciales) y agrega el header `WWW-Authenticate` para que el navegador muestre el prompt de inicio de sesi√≥n nuevamente:

{* ../../docs_src/security/tutorial007_an_py39.py hl[26:30] *}


================================================
File: /docs/es/docs/advanced/security/index.md
================================================
# Seguridad Avanzada

## Funcionalidades Adicionales

Hay algunas funcionalidades extra para manejar la seguridad aparte de las cubiertas en el [Tutorial - Gu√≠a del Usuario: Seguridad](../../tutorial/security/index.md){.internal-link target=_blank}.

/// tip | Consejo

Las siguientes secciones **no son necesariamente "avanzadas"**.

Y es posible que para tu caso de uso, la soluci√≥n est√© en una de ellas.

///

## Lee primero el Tutorial

Las siguientes secciones asumen que ya le√≠ste el [Tutorial - Gu√≠a del Usuario: Seguridad](../../tutorial/security/index.md){.internal-link target=_blank}.

Todas est√°n basadas en los mismos conceptos, pero permiten algunas funcionalidades adicionales.


================================================
File: /docs/es/docs/advanced/security/oauth2-scopes.md
================================================
# Scopes de OAuth2

Puedes usar scopes de OAuth2 directamente con **FastAPI**, est√°n integrados para funcionar de manera fluida.

Esto te permitir√≠a tener un sistema de permisos m√°s detallado, siguiendo el est√°ndar de OAuth2, integrado en tu aplicaci√≥n OpenAPI (y la documentaci√≥n de la API).

OAuth2 con scopes es el mecanismo usado por muchos grandes proveedores de autenticaci√≥n, como Facebook, Google, GitHub, Microsoft, Twitter, etc. Lo usan para proporcionar permisos espec√≠ficos a usuarios y aplicaciones.

Cada vez que te "logueas con" Facebook, Google, GitHub, Microsoft, Twitter, esa aplicaci√≥n est√° usando OAuth2 con scopes.

En esta secci√≥n ver√°s c√≥mo manejar autenticaci√≥n y autorizaci√≥n con el mismo OAuth2 con scopes en tu aplicaci√≥n de **FastAPI**.

/// warning | Advertencia

Esta es una secci√≥n m√°s o menos avanzada. Si est√°s comenzando, puedes saltarla.

No necesariamente necesitas scopes de OAuth2, y puedes manejar autenticaci√≥n y autorizaci√≥n como quieras.

Pero OAuth2 con scopes se puede integrar muy bien en tu API (con OpenAPI) y en la documentaci√≥n de tu API.

No obstante, t√∫ a√∫n impones esos scopes, o cualquier otro requisito de seguridad/autorizaci√≥n, como necesites, en tu c√≥digo.

En muchos casos, OAuth2 con scopes puede ser un exceso.

Pero si sabes que lo necesitas, o tienes curiosidad, sigue leyendo.

///

## Scopes de OAuth2 y OpenAPI

La especificaci√≥n de OAuth2 define "scopes" como una lista de strings separados por espacios.

El contenido de cada uno de estos strings puede tener cualquier formato, pero no debe contener espacios.

Estos scopes representan "permisos".

En OpenAPI (por ejemplo, en la documentaci√≥n de la API), puedes definir "esquemas de seguridad".

Cuando uno de estos esquemas de seguridad usa OAuth2, tambi√©n puedes declarar y usar scopes.

Cada "scope" es solo un string (sin espacios).

Normalmente se utilizan para declarar permisos de seguridad espec√≠ficos, por ejemplo:

* `users:read` o `users:write` son ejemplos comunes.
* `instagram_basic` es usado por Facebook / Instagram.
* `https://www.googleapis.com/auth/drive` es usado por Google.

/// info | Informaci√≥n

En OAuth2 un "scope" es solo un string que declara un permiso espec√≠fico requerido.

No importa si tiene otros caracteres como `:` o si es una URL.

Esos detalles son espec√≠ficos de la implementaci√≥n.

Para OAuth2 son solo strings.

///

## Vista global

Primero, echemos un vistazo r√°pido a las partes que cambian desde los ejemplos en el **Tutorial - User Guide** principal para [OAuth2 con Password (y hashing), Bearer con tokens JWT](../../tutorial/security/oauth2-jwt.md){.internal-link target=_blank}. Ahora usando scopes de OAuth2:

{* ../../docs_src/security/tutorial005_an_py310.py hl[5,9,13,47,65,106,108:116,122:125,129:135,140,156] *}

Ahora revisemos esos cambios paso a paso.

## Esquema de seguridad OAuth2

El primer cambio es que ahora estamos declarando el esquema de seguridad OAuth2 con dos scopes disponibles, `me` y `items`.

El par√°metro `scopes` recibe un `dict` con cada scope como clave y la descripci√≥n como valor:

{* ../../docs_src/security/tutorial005_an_py310.py hl[63:66] *}

Como ahora estamos declarando esos scopes, aparecer√°n en la documentaci√≥n de la API cuando inicies sesi√≥n/autorices.

Y podr√°s seleccionar cu√°les scopes quieres dar de acceso: `me` y `items`.

Este es el mismo mecanismo utilizado cuando das permisos al iniciar sesi√≥n con Facebook, Google, GitHub, etc:

<img src="/img/tutorial/security/image11.png">

## Token JWT con scopes

Ahora, modifica la *path operation* del token para devolver los scopes solicitados.

Todav√≠a estamos usando el mismo `OAuth2PasswordRequestForm`. Incluye una propiedad `scopes` con una `list` de `str`, con cada scope que recibi√≥ en el request.

Y devolvemos los scopes como parte del token JWT.

/// danger | Peligro

Para simplificar, aqu√≠ solo estamos a√±adiendo los scopes recibidos directamente al token.

Pero en tu aplicaci√≥n, por seguridad, deber√≠as asegurarte de a√±adir solo los scopes que el usuario realmente puede tener, o los que has predefinido.

///

{* ../../docs_src/security/tutorial005_an_py310.py hl[156] *}

## Declarar scopes en *path operations* y dependencias

Ahora declaramos que la *path operation* para `/users/me/items/` requiere el scope `items`.

Para esto, importamos y usamos `Security` de `fastapi`.

Puedes usar `Security` para declarar dependencias (igual que `Depends`), pero `Security` tambi√©n recibe un par√°metro `scopes` con una lista de scopes (strings).

En este caso, pasamos una funci√≥n de dependencia `get_current_active_user` a `Security` (de la misma manera que har√≠amos con `Depends`).

Pero tambi√©n pasamos una `list` de scopes, en este caso con solo un scope: `items` (podr√≠a tener m√°s).

Y la funci√≥n de dependencia `get_current_active_user` tambi√©n puede declarar sub-dependencias, no solo con `Depends` sino tambi√©n con `Security`. Declarando su propia funci√≥n de sub-dependencia (`get_current_user`), y m√°s requisitos de scope.

En este caso, requiere el scope `me` (podr√≠a requerir m√°s de un scope).

/// note | Nota

No necesariamente necesitas a√±adir diferentes scopes en diferentes lugares.

Lo estamos haciendo aqu√≠ para demostrar c√≥mo **FastAPI** maneja scopes declarados en diferentes niveles.

///

{* ../../docs_src/security/tutorial005_an_py310.py hl[5,140,171] *}

/// info | Informaci√≥n T√©cnica

`Security` es en realidad una subclase de `Depends`, y tiene solo un par√°metro extra que veremos m√°s adelante.

Pero al usar `Security` en lugar de `Depends`, **FastAPI** sabr√° que puede declarar scopes de seguridad, usarlos internamente y documentar la API con OpenAPI.

Pero cuando importas `Query`, `Path`, `Depends`, `Security` y otros de `fastapi`, en realidad son funciones que devuelven clases especiales.

///

## Usar `SecurityScopes`

Ahora actualiza la dependencia `get_current_user`.

Esta es la que usan las dependencias anteriores.

Aqu√≠ es donde estamos usando el mismo esquema de OAuth2 que creamos antes, declar√°ndolo como una dependencia: `oauth2_scheme`.

Porque esta funci√≥n de dependencia no tiene ning√∫n requisito de scope en s√≠, podemos usar `Depends` con `oauth2_scheme`, no tenemos que usar `Security` cuando no necesitamos especificar scopes de seguridad.

Tambi√©n declaramos un par√°metro especial de tipo `SecurityScopes`, importado de `fastapi.security`.

Esta clase `SecurityScopes` es similar a `Request` (`Request` se us√≥ para obtener el objeto request directamente).

{* ../../docs_src/security/tutorial005_an_py310.py hl[9,106] *}

## Usar los `scopes`

El par√°metro `security_scopes` ser√° del tipo `SecurityScopes`.

Tendr√° una propiedad `scopes` con una lista que contiene todos los scopes requeridos por s√≠ mismo y por todas las dependencias que lo usan como sub-dependencia. Eso significa, todos los "dependientes"... esto podr√≠a sonar confuso, se explica de nuevo m√°s abajo.

El objeto `security_scopes` (de la clase `SecurityScopes`) tambi√©n proporciona un atributo `scope_str` con un √∫nico string, que contiene esos scopes separados por espacios (lo vamos a usar).

Creamos una `HTTPException` que podemos reutilizar (`raise`) m√°s tarde en varios puntos.

En esta excepci√≥n, incluimos los scopes requeridos (si los hay) como un string separado por espacios (usando `scope_str`). Ponemos ese string que contiene los scopes en el header `WWW-Authenticate` (esto es parte de la especificaci√≥n).

{* ../../docs_src/security/tutorial005_an_py310.py hl[106,108:116] *}

## Verificar el `username` y la forma de los datos

Verificamos que obtenemos un `username`, y extraemos los scopes.

Y luego validamos esos datos con el modelo de Pydantic (capturando la excepci√≥n `ValidationError`), y si obtenemos un error leyendo el token JWT o validando los datos con Pydantic, lanzamos la `HTTPException` que creamos antes.

Para eso, actualizamos el modelo de Pydantic `TokenData` con una nueva propiedad `scopes`.

Al validar los datos con Pydantic podemos asegurarnos de que tenemos, por ejemplo, exactamente una `list` de `str` con los scopes y un `str` con el `username`.

En lugar de, por ejemplo, un `dict`, o algo m√°s, ya que podr√≠a romper la aplicaci√≥n en alg√∫n punto posterior, haci√©ndolo un riesgo de seguridad.

Tambi√©n verificamos que tenemos un usuario con ese username, y si no, lanzamos esa misma excepci√≥n que creamos antes.

{* ../../docs_src/security/tutorial005_an_py310.py hl[47,117:128] *}

## Verificar los `scopes`

Ahora verificamos que todos los scopes requeridos, por esta dependencia y todos los dependientes (incluyendo *path operations*), est√©n incluidos en los scopes proporcionados en el token recibido, de lo contrario, lanzamos una `HTTPException`.

Para esto, usamos `security_scopes.scopes`, que contiene una `list` con todos estos scopes como `str`.

{* ../../docs_src/security/tutorial005_an_py310.py hl[129:135] *}

## √Årbol de dependencias y scopes

Revisemos de nuevo este √°rbol de dependencias y los scopes.

Como la dependencia `get_current_active_user` tiene como sub-dependencia a `get_current_user`, el scope `"me"` declarado en `get_current_active_user` se incluir√° en la lista de scopes requeridos en el `security_scopes.scopes` pasado a `get_current_user`.

La *path operation* en s√≠ tambi√©n declara un scope, `"items"`, por lo que esto tambi√©n estar√° en la lista de `security_scopes.scopes` pasado a `get_current_user`.

As√≠ es como se ve la jerarqu√≠a de dependencias y scopes:

* La *path operation* `read_own_items` tiene:
    * Scopes requeridos `["items"]` con la dependencia:
    * `get_current_active_user`:
        * La funci√≥n de dependencia `get_current_active_user` tiene:
            * Scopes requeridos `["me"]` con la dependencia:
            * `get_current_user`:
                * La funci√≥n de dependencia `get_current_user` tiene:
                    * No requiere scopes por s√≠ misma.
                    * Una dependencia usando `oauth2_scheme`.
                    * Un par√°metro `security_scopes` de tipo `SecurityScopes`:
                        * Este par√°metro `security_scopes` tiene una propiedad `scopes` con una `list` que contiene todos estos scopes declarados arriba, por lo que:
                            * `security_scopes.scopes` contendr√° `["me", "items"]` para la *path operation* `read_own_items`.
                            * `security_scopes.scopes` contendr√° `["me"]` para la *path operation* `read_users_me`, porque est√° declarado en la dependencia `get_current_active_user`.
                            * `security_scopes.scopes` contendr√° `[]` (nada) para la *path operation* `read_system_status`, porque no declar√≥ ning√∫n `Security` con `scopes`, y su dependencia, `get_current_user`, tampoco declara ning√∫n `scopes`.

/// tip | Consejo

Lo importante y "m√°gico" aqu√≠ es que `get_current_user` tendr√° una lista diferente de `scopes` para verificar para cada *path operation*.

Todo depende de los `scopes` declarados en cada *path operation* y cada dependencia en el √°rbol de dependencias para esa *path operation* espec√≠fica.

///

## M√°s detalles sobre `SecurityScopes`

Puedes usar `SecurityScopes` en cualquier punto, y en m√∫ltiples lugares, no tiene que ser en la dependencia "ra√≠z".

Siempre tendr√° los scopes de seguridad declarados en las dependencias `Security` actuales y todos los dependientes para **esa espec√≠fica** *path operation* y **ese espec√≠fico** √°rbol de dependencias.

Debido a que `SecurityScopes` tendr√° todos los scopes declarados por dependientes, puedes usarlo para verificar que un token tiene los scopes requeridos en una funci√≥n de dependencia central, y luego declarar diferentes requisitos de scope en diferentes *path operations*.

Ser√°n verificados independientemente para cada *path operation*.

## Revisa

Si abres la documentaci√≥n de la API, puedes autenticarte y especificar qu√© scopes deseas autorizar.

<img src="/img/tutorial/security/image11.png">

Si no seleccionas ning√∫n scope, estar√°s "autenticado", pero cuando intentes acceder a `/users/me/` o `/users/me/items/` obtendr√°s un error diciendo que no tienes suficientes permisos. A√∫n podr√°s acceder a `/status/`.

Y si seleccionas el scope `me` pero no el scope `items`, podr√°s acceder a `/users/me/` pero no a `/users/me/items/`.

Eso es lo que pasar√≠a a una aplicaci√≥n de terceros que intentara acceder a una de estas *path operations* con un token proporcionado por un usuario, dependiendo de cu√°ntos permisos el usuario otorg√≥ a la aplicaci√≥n.

## Acerca de las integraciones de terceros

En este ejemplo estamos usando el flujo de OAuth2 "password".

Esto es apropiado cuando estamos iniciando sesi√≥n en nuestra propia aplicaci√≥n, probablemente con nuestro propio frontend.

Porque podemos confiar en ella para recibir el `username` y `password`, ya que la controlamos.

Pero si est√°s construyendo una aplicaci√≥n OAuth2 a la que otros se conectar√≠an (es decir, si est√°s construyendo un proveedor de autenticaci√≥n equivalente a Facebook, Google, GitHub, etc.) deber√≠as usar uno de los otros flujos.

El m√°s com√∫n es el flujo impl√≠cito.

El m√°s seguro es el flujo de c√≥digo, pero es m√°s complejo de implementar ya que requiere m√°s pasos. Como es m√°s complejo, muchos proveedores terminan sugiriendo el flujo impl√≠cito.

/// note | Nota

Es com√∫n que cada proveedor de autenticaci√≥n nombre sus flujos de una manera diferente, para hacerlos parte de su marca.

Pero al final, est√°n implementando el mismo est√°ndar OAuth2.

///

**FastAPI** incluye utilidades para todos estos flujos de autenticaci√≥n OAuth2 en `fastapi.security.oauth2`.

## `Security` en `dependencies` del decorador

De la misma manera que puedes definir una `list` de `Depends` en el par√°metro `dependencies` del decorador (como se explica en [Dependencias en decoradores de path operation](../../tutorial/dependencies/dependencies-in-path-operation-decorators.md){.internal-link target=_blank}), tambi√©n podr√≠as usar `Security` con `scopes` all√≠.


================================================
File: /docs/es/docs/deployment/cloud.md
================================================
# Despliega FastAPI en Proveedores de Nube

Puedes usar pr√°cticamente **cualquier proveedor de nube** para desplegar tu aplicaci√≥n FastAPI.

En la mayor√≠a de los casos, los principales proveedores de nube tienen gu√≠as para desplegar FastAPI con ellos.

## Proveedores de Nube - Sponsors

Algunos proveedores de nube ‚ú® [**son sponsors de FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ‚ú®, esto asegura el desarrollo **continuado** y **saludable** de FastAPI y su **ecosistema**.

Y muestra su verdadero compromiso con FastAPI y su **comunidad** (t√∫), ya que no solo quieren proporcionarte un **buen servicio**, sino tambi√©n asegurarse de que tengas un **framework bueno y saludable**, FastAPI. üôá

Podr√≠as querer probar sus servicios y seguir sus gu√≠as:

* <a href="https://docs.platform.sh/languages/python.html?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023" class="external-link" target="_blank">Platform.sh</a>
* <a href="https://docs.porter.run/language-specific-guides/fastapi" class="external-link" target="_blank">Porter</a>
* <a href="https://www.withcoherence.com/?utm_medium=advertising&utm_source=fastapi&utm_campaign=website" class="external-link" target="_blank">Coherence</a>
* <a href="https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi" class="external-link" target="_blank">Render</a>


================================================
File: /docs/es/docs/deployment/concepts.md
================================================
# Conceptos de Implementaci√≥n

Cuando implementas una aplicaci√≥n **FastAPI**, o en realidad, cualquier tipo de API web, hay varios conceptos que probablemente te importen, y al entenderlos, puedes encontrar la **forma m√°s adecuada** de **implementar tu aplicaci√≥n**.

Algunos de los conceptos importantes son:

* Seguridad - HTTPS
* Ejecuci√≥n al iniciar
* Reinicios
* Replicaci√≥n (la cantidad de procesos en ejecuci√≥n)
* Memoria
* Pasos previos antes de iniciar

Veremos c√≥mo afectan estas **implementaciones**.

Al final, el objetivo principal es poder **servir a tus clientes de API** de una manera que sea **segura**, para **evitar interrupciones**, y usar los **recursos de c√≥mputo** (por ejemplo, servidores remotos/m√°quinas virtuales) de la manera m√°s eficiente posible. üöÄ

Te contar√© un poquito m√°s sobre estos **conceptos** aqu√≠, y eso, con suerte, te dar√° la **intuici√≥n** que necesitar√≠as para decidir c√≥mo implementar tu API en diferentes entornos, posiblemente incluso en aquellos **futuros** que a√∫n no existen.

Al considerar estos conceptos, podr√°s **evaluar y dise√±ar** la mejor manera de implementar **tus propias APIs**.

En los pr√≥ximos cap√≠tulos, te dar√© m√°s **recetas concretas** para implementar aplicaciones de FastAPI.

Pero por ahora, revisemos estas importantes **ideas conceptuales**. Estos conceptos tambi√©n se aplican a cualquier otro tipo de API web. üí°

## Seguridad - HTTPS

En el [cap√≠tulo anterior sobre HTTPS](https.md){.internal-link target=_blank} aprendimos sobre c√≥mo HTTPS proporciona cifrado para tu API.

Tambi√©n vimos que HTTPS es normalmente proporcionado por un componente **externo** a tu servidor de aplicaciones, un **Proxy de Terminaci√≥n TLS**.

Y debe haber algo encargado de **renovar los certificados HTTPS**, podr√≠a ser el mismo componente o algo diferente.

### Herramientas de Ejemplo para HTTPS

Algunas de las herramientas que podr√≠as usar como Proxy de Terminaci√≥n TLS son:

* Traefik
    * Maneja autom√°ticamente las renovaciones de certificados ‚ú®
* Caddy
    * Maneja autom√°ticamente las renovaciones de certificados ‚ú®
* Nginx
    * Con un componente externo como Certbot para las renovaciones de certificados
* HAProxy
    * Con un componente externo como Certbot para las renovaciones de certificados
* Kubernetes con un Controlador de Ingress como Nginx
    * Con un componente externo como cert-manager para las renovaciones de certificados
* Manejado internamente por un proveedor de nube como parte de sus servicios (lee abajo üëá)

Otra opci√≥n es que podr√≠as usar un **servicio de nube** que haga m√°s del trabajo, incluyendo configurar HTTPS. Podr√≠a tener algunas restricciones o cobrarte m√°s, etc. Pero en ese caso, no tendr√≠as que configurar un Proxy de Terminaci√≥n TLS t√∫ mismo.

Te mostrar√© algunos ejemplos concretos en los pr√≥ximos cap√≠tulos.

---

Luego, los siguientes conceptos a considerar son todos acerca del programa que ejecuta tu API real (por ejemplo, Uvicorn).

## Programa y Proceso

Hablaremos mucho sobre el "**proceso**" en ejecuci√≥n, as√≠ que es √∫til tener claridad sobre lo que significa y cu√°l es la diferencia con la palabra "**programa**".

### Qu√© es un Programa

La palabra **programa** se usa com√∫nmente para describir muchas cosas:

* El **c√≥digo** que escribes, los **archivos Python**.
* El **archivo** que puede ser **ejecutado** por el sistema operativo, por ejemplo: `python`, `python.exe` o `uvicorn`.
* Un programa espec√≠fico mientras est√° siendo **ejecutado** en el sistema operativo, usando la CPU y almacenando cosas en la memoria. Esto tambi√©n se llama **proceso**.

### Qu√© es un Proceso

La palabra **proceso** se usa normalmente de una manera m√°s espec√≠fica, refiri√©ndose solo a lo que est√° ejecut√°ndose en el sistema operativo (como en el √∫ltimo punto anterior):

* Un programa espec√≠fico mientras est√° siendo **ejecutado** en el sistema operativo.
    * Esto no se refiere al archivo, ni al c√≥digo, se refiere **espec√≠ficamente** a lo que est√° siendo **ejecutado** y gestionado por el sistema operativo.
* Cualquier programa, cualquier c√≥digo, **solo puede hacer cosas** cuando est√° siendo **ejecutado**. As√≠ que, cuando hay un **proceso en ejecuci√≥n**.
* El proceso puede ser **terminado** (o "matado") por ti, o por el sistema operativo. En ese punto, deja de ejecutarse/ser ejecutado, y ya no puede **hacer cosas**.
* Cada aplicaci√≥n que tienes en ejecuci√≥n en tu computadora tiene alg√∫n proceso detr√°s, cada programa en ejecuci√≥n, cada ventana, etc. Y normalmente hay muchos procesos ejecut√°ndose **al mismo tiempo** mientras una computadora est√° encendida.
* Puede haber **m√∫ltiples procesos** del **mismo programa** ejecut√°ndose al mismo tiempo.

Si revisas el "administrador de tareas" o "monitor del sistema" (o herramientas similares) en tu sistema operativo, podr√°s ver muchos de esos procesos en ejecuci√≥n.

Y, por ejemplo, probablemente ver√°s que hay m√∫ltiples procesos ejecutando el mismo programa del navegador (Firefox, Chrome, Edge, etc.). Normalmente ejecutan un proceso por pesta√±a, adem√°s de algunos otros procesos extra.

<img class="shadow" src="/img/deployment/concepts/image01.png">

---

Ahora que conocemos la diferencia entre los t√©rminos **proceso** y **programa**, sigamos hablando sobre implementaciones.

## Ejecuci√≥n al Iniciar

En la mayor√≠a de los casos, cuando creas una API web, quieres que est√© **siempre en ejecuci√≥n**, ininterrumpida, para que tus clientes puedan acceder a ella en cualquier momento. Esto, por supuesto, a menos que tengas una raz√≥n espec√≠fica para que se ejecute solo en ciertas situaciones, pero la mayor√≠a de las veces quieres que est√© constantemente en ejecuci√≥n y **disponible**.

### En un Servidor Remoto

Cuando configuras un servidor remoto (un servidor en la nube, una m√°quina virtual, etc.) lo m√°s sencillo que puedes hacer es usar `fastapi run` (que utiliza Uvicorn) o algo similar, manualmente, de la misma manera que lo haces al desarrollar localmente.

Y funcionar√° y ser√° √∫til **durante el desarrollo**.

Pero si pierdes la conexi√≥n con el servidor, el **proceso en ejecuci√≥n** probablemente morir√°.

Y si el servidor se reinicia (por ejemplo, despu√©s de actualizaciones o migraciones del proveedor de la nube) probablemente **no lo notar√°s**. Y debido a eso, ni siquiera sabr√°s que tienes que reiniciar el proceso manualmente. As√≠, tu API simplemente quedar√° muerta. üò±

### Ejecutar Autom√°ticamente al Iniciar

En general, probablemente querr√°s que el programa del servidor (por ejemplo, Uvicorn) se inicie autom√°ticamente al arrancar el servidor, y sin necesidad de ninguna **intervenci√≥n humana**, para tener siempre un proceso en ejecuci√≥n con tu API (por ejemplo, Uvicorn ejecutando tu aplicaci√≥n FastAPI).

### Programa Separado

Para lograr esto, normalmente tendr√°s un **programa separado** que se asegurar√° de que tu aplicaci√≥n se ejecute al iniciarse. Y en muchos casos, tambi√©n se asegurar√° de que otros componentes o aplicaciones se ejecuten, por ejemplo, una base de datos.

### Herramientas de Ejemplo para Ejecutar al Iniciar

Algunos ejemplos de las herramientas que pueden hacer este trabajo son:

* Docker
* Kubernetes
* Docker Compose
* Docker en Modo Swarm
* Systemd
* Supervisor
* Manejado internamente por un proveedor de nube como parte de sus servicios
* Otros...

Te dar√© m√°s ejemplos concretos en los pr√≥ximos cap√≠tulos.

## Reinicios

De manera similar a asegurarte de que tu aplicaci√≥n se ejecute al iniciar, probablemente tambi√©n quieras asegurarte de que se **reinicie** despu√©s de fallos.

### Cometemos Errores

Nosotros, como humanos, cometemos **errores**, todo el tiempo. El software casi *siempre* tiene **bugs** ocultos en diferentes lugares. üêõ

Y nosotros, como desarrolladores, seguimos mejorando el c√≥digo a medida que encontramos esos bugs y a medida que implementamos nuevas funcionalidades (posiblemente agregando nuevos bugs tambi√©n üòÖ).

### Errores Peque√±os Manejados Autom√°ticamente

Al construir APIs web con FastAPI, si hay un error en nuestro c√≥digo, FastAPI normalmente lo contiene a la solicitud √∫nica que desencaden√≥ el error. üõ°

El cliente obtendr√° un **500 Internal Server Error** para esa solicitud, pero la aplicaci√≥n continuar√° funcionando para las siguientes solicitudes en lugar de simplemente colapsar por completo.

### Errores Mayores - Colapsos

Sin embargo, puede haber casos en los que escribamos alg√∫n c√≥digo que **colapse toda la aplicaci√≥n** haciendo que Uvicorn y Python colapsen. üí•

Y a√∫n as√≠, probablemente no querr√≠as que la aplicaci√≥n quede muerta porque hubo un error en un lugar, probablemente querr√°s que **siga ejecut√°ndose** al menos para las *path operations* que no est√©n rotas.

### Reiniciar Despu√©s del Colapso

Pero en esos casos con errores realmente malos que colapsan el **proceso en ejecuci√≥n**, querr√≠as un componente externo encargado de **reiniciar** el proceso, al menos un par de veces...

/// tip | Consejo

...Aunque si la aplicaci√≥n completa **colapsa inmediatamente**, probablemente no tenga sentido seguir reinici√°ndola eternamente. Pero en esos casos, probablemente lo notar√°s durante el desarrollo, o al menos justo despu√©s de la implementaci√≥n.

As√≠ que enfoqu√©monos en los casos principales, donde podr√≠a colapsar por completo en algunos casos particulares **en el futuro**, y a√∫n as√≠ tenga sentido reiniciarla.

///

Probablemente querr√≠as que la cosa encargada de reiniciar tu aplicaci√≥n sea un **componente externo**, porque para ese punto, la misma aplicaci√≥n con Uvicorn y Python ya colaps√≥, as√≠ que no hay nada en el mismo c√≥digo de la misma aplicaci√≥n que pueda hacer algo al respecto.

### Herramientas de Ejemplo para Reiniciar Autom√°ticamente

En la mayor√≠a de los casos, la misma herramienta que se utiliza para **ejecutar el programa al iniciar** tambi√©n se utiliza para manejar reinicios autom√°ticos.

Por ejemplo, esto podr√≠a ser manejado por:

* Docker
* Kubernetes
* Docker Compose
* Docker en Modo Swarm
* Systemd
* Supervisor
* Manejado internamente por un proveedor de nube como parte de sus servicios
* Otros...

## Replicaci√≥n - Procesos y Memoria

Con una aplicaci√≥n FastAPI, usando un programa servidor como el comando `fastapi` que ejecuta Uvicorn, ejecutarlo una vez en **un proceso** puede servir a m√∫ltiples clientes concurrentemente.

Pero en muchos casos, querr√°s ejecutar varios worker processes al mismo tiempo.

### M√∫ltiples Procesos - Workers

Si tienes m√°s clientes de los que un solo proceso puede manejar (por ejemplo, si la m√°quina virtual no es muy grande) y tienes **m√∫ltiples n√∫cleos** en la CPU del servidor, entonces podr√≠as tener **m√∫ltiples procesos** ejecutando la misma aplicaci√≥n al mismo tiempo, y distribuir todas las requests entre ellos.

Cuando ejecutas **m√∫ltiples procesos** del mismo programa de API, com√∫nmente se les llama **workers**.

### Worker Processes y Puertos

Recuerda de la documentaci√≥n [Sobre HTTPS](https.md){.internal-link target=_blank} que solo un proceso puede estar escuchando en una combinaci√≥n de puerto y direcci√≥n IP en un servidor.

Esto sigue siendo cierto.

As√≠ que, para poder tener **m√∫ltiples procesos** al mismo tiempo, tiene que haber un **solo proceso escuchando en un puerto** que luego transmita la comunicaci√≥n a cada worker process de alguna forma.

### Memoria por Proceso

Ahora, cuando el programa carga cosas en memoria, por ejemplo, un modelo de machine learning en una variable, o el contenido de un archivo grande en una variable, todo eso **consume un poco de la memoria (RAM)** del servidor.

Y m√∫ltiples procesos normalmente **no comparten ninguna memoria**. Esto significa que cada proceso en ejecuci√≥n tiene sus propias cosas, variables y memoria. Y si est√°s consumiendo una gran cantidad de memoria en tu c√≥digo, **cada proceso** consumir√° una cantidad equivalente de memoria.

### Memoria del Servidor

Por ejemplo, si tu c√≥digo carga un modelo de Machine Learning con **1 GB de tama√±o**, cuando ejecutas un proceso con tu API, consumir√° al menos 1 GB de RAM. Y si inicias **4 procesos** (4 workers), cada uno consumir√° 1 GB de RAM. As√≠ que, en total, tu API consumir√° **4 GB de RAM**.

Y si tu servidor remoto o m√°quina virtual solo tiene 3 GB de RAM, intentar cargar m√°s de 4 GB de RAM causar√° problemas. üö®

### M√∫ltiples Procesos - Un Ejemplo

En este ejemplo, hay un **Proceso Administrador** que inicia y controla dos **Worker Processes**.

Este Proceso Administrador probablemente ser√≠a el que escuche en el **puerto** en la IP. Y transmitir√° toda la comunicaci√≥n a los worker processes.

Esos worker processes ser√≠an los que ejecutan tu aplicaci√≥n, realizar√≠an los c√°lculos principales para recibir un **request** y devolver un **response**, y cargar√≠an cualquier cosa que pongas en variables en RAM.

<img src="/img/deployment/concepts/process-ram.svg">

Y por supuesto, la misma m√°quina probablemente tendr√≠a **otros procesos** ejecut√°ndose tambi√©n, aparte de tu aplicaci√≥n.

Un detalle interesante es que el porcentaje de **CPU utilizado** por cada proceso puede **variar** mucho con el tiempo, pero la **memoria (RAM)** normalmente permanece m√°s o menos **estable**.

Si tienes una API que hace una cantidad comparable de c√°lculos cada vez y tienes muchos clientes, entonces la **utilizaci√≥n de CPU** probablemente *tambi√©n sea estable* (en lugar de constantemente subir y bajar r√°pidamente).

### Ejemplos de Herramientas y Estrategias de Replicaci√≥n

Puede haber varios enfoques para lograr esto, y te contar√© m√°s sobre estrategias espec√≠ficas en los pr√≥ximos cap√≠tulos, por ejemplo, al hablar sobre Docker y contenedores.

La principal restricci√≥n a considerar es que tiene que haber un **componente √∫nico** manejando el **puerto** en la **IP p√∫blica**. Y luego debe tener una forma de **transmitir** la comunicaci√≥n a los **procesos/workers** replicados.

Aqu√≠ hay algunas combinaciones y estrategias posibles:

* **Uvicorn** con `--workers`
    * Un administrador de procesos de Uvicorn **escuchar√≠a** en la **IP** y **puerto**, y iniciar√≠a **m√∫ltiples worker processes de Uvicorn**.
* **Kubernetes** y otros sistemas de **contenedor distribuidos**
    * Algo en la capa de **Kubernetes** escuchar√≠a en la **IP** y **puerto**. La replicaci√≥n ser√≠a al tener **m√∫ltiples contenedores**, cada uno con **un proceso de Uvicorn** ejecut√°ndose.
* **Servicios en la Nube** que manejan esto por ti
    * El servicio en la nube probablemente **manejar√° la replicaci√≥n por ti**. Posiblemente te permitir√≠a definir **un proceso para ejecutar**, o una **imagen de contenedor** para usar, en cualquier caso, lo m√°s probable es que ser√≠a **un solo proceso de Uvicorn**, y el servicio en la nube se encargar√≠a de replicarlo.

/// tip | Consejo

No te preocupes si algunos de estos elementos sobre **contenedores**, Docker, o Kubernetes no tienen mucho sentido todav√≠a.

Te contar√© m√°s sobre im√°genes de contenedores, Docker, Kubernetes, etc. en un cap√≠tulo futuro: [FastAPI en Contenedores - Docker](docker.md){.internal-link target=_blank}.

///

## Pasos Previos Antes de Iniciar

Hay muchos casos en los que quieres realizar algunos pasos **antes de iniciar** tu aplicaci√≥n.

Por ejemplo, podr√≠as querer ejecutar **migraciones de base de datos**.

Pero en la mayor√≠a de los casos, querr√°s realizar estos pasos solo **una vez**.

As√≠ que, querr√°s tener un **√∫nico proceso** para realizar esos **pasos previos**, antes de iniciar la aplicaci√≥n.

Y tendr√°s que asegurarte de que sea un √∫nico proceso ejecutando esos pasos previos incluso si despu√©s, inicias **m√∫ltiples procesos** (m√∫ltiples workers) para la propia aplicaci√≥n. Si esos pasos fueran ejecutados por **m√∫ltiples procesos**, **duplicar√≠an** el trabajo al ejecutarlo en **paralelo**, y si los pasos fueran algo delicado como una migraci√≥n de base de datos, podr√≠an causar conflictos entre s√≠.

Por supuesto, hay algunos casos en los que no hay problema en ejecutar los pasos previos m√∫ltiples veces, en ese caso, es mucho m√°s f√°cil de manejar.

/// tip | Consejo

Tambi√©n, ten en cuenta que dependiendo de tu configuraci√≥n, en algunos casos **quiz√°s ni siquiera necesites realizar pasos previos** antes de iniciar tu aplicaci√≥n.

En ese caso, no tendr√≠as que preocuparte por nada de esto. ü§∑

///

### Ejemplos de Estrategias para Pasos Previos

Esto **depender√° mucho** de la forma en que **implementar√°s tu sistema**, y probablemente estar√° conectado con la forma en que inicias programas, manejas reinicios, etc.

Aqu√≠ hay algunas ideas posibles:

* Un "Contenedor de Inicio" en Kubernetes que se ejecuta antes de tu contenedor de aplicaci√≥n
* Un script de bash que ejecuta los pasos previos y luego inicia tu aplicaci√≥n
    * A√∫n necesitar√≠as una forma de iniciar/reiniciar *ese* script de bash, detectar errores, etc.

/// tip | Consejo

Te dar√© m√°s ejemplos concretos para hacer esto con contenedores en un cap√≠tulo futuro: [FastAPI en Contenedores - Docker](docker.md){.internal-link target=_blank}.

///

## Utilizaci√≥n de Recursos

Tu(s) servidor(es) es(son) un **recurso** que puedes consumir o **utilizar**, con tus programas, el tiempo de c√≥mputo en las CPUs y la memoria RAM disponible.

¬øCu√°nto de los recursos del sistema quieres consumir/utilizar? Podr√≠a ser f√°cil pensar "no mucho", pero en realidad, probablemente querr√°s consumir **lo m√°s posible sin colapsar**.

Si est√°s pagando por 3 servidores pero solo est√°s usando un poquito de su RAM y CPU, probablemente est√©s **desperdiciando dinero** üí∏, y probablemente **desperdiciando la energ√≠a el√©ctrica del servidor** üåé, etc.

En ese caso, podr√≠a ser mejor tener solo 2 servidores y usar un mayor porcentaje de sus recursos (CPU, memoria, disco, ancho de banda de red, etc.).

Por otro lado, si tienes 2 servidores y est√°s usando **100% de su CPU y RAM**, en alg√∫n momento un proceso pedir√° m√°s memoria y el servidor tendr√° que usar el disco como "memoria" (lo cual puede ser miles de veces m√°s lento), o incluso **colapsar**. O un proceso podr√≠a necesitar hacer alg√∫n c√°lculo y tendr√≠a que esperar hasta que la CPU est√© libre de nuevo.

En este caso, ser√≠a mejor obtener **un servidor extra** y ejecutar algunos procesos en √©l para que todos tengan **suficiente RAM y tiempo de CPU**.

Tambi√©n existe la posibilidad de que, por alguna raz√≥n, tengas un **pico** de uso de tu API. Tal vez se volvi√≥ viral, o tal vez otros servicios o bots comienzan a usarla. Y podr√≠as querer tener recursos extra para estar a salvo en esos casos.

Podr√≠as establecer un **n√∫mero arbitrario** para alcanzar, por ejemplo, algo **entre 50% a 90%** de utilizaci√≥n de recursos. El punto es que esas son probablemente las principales cosas que querr√°s medir y usar para ajustar tus implementaciones.

Puedes usar herramientas simples como `htop` para ver la CPU y RAM utilizadas en tu servidor o la cantidad utilizada por cada proceso. O puedes usar herramientas de monitoreo m√°s complejas, que pueden estar distribuidas a trav√©s de servidores, etc.

## Resumen

Has estado leyendo aqu√≠ algunos de los conceptos principales que probablemente necesitar√°s tener en mente al decidir c√≥mo implementar tu aplicaci√≥n:

* Seguridad - HTTPS
* Ejecuci√≥n al iniciar
* Reinicios
* Replicaci√≥n (la cantidad de procesos en ejecuci√≥n)
* Memoria
* Pasos previos antes de iniciar

Comprender estas ideas y c√≥mo aplicarlas deber√≠a darte la intuici√≥n necesaria para tomar decisiones al configurar y ajustar tus implementaciones. ü§ì

En las pr√≥ximas secciones, te dar√© ejemplos m√°s concretos de posibles estrategias que puedes seguir. üöÄ


================================================
File: /docs/es/docs/deployment/docker.md
================================================
# FastAPI en Contenedores - Docker

Al desplegar aplicaciones de FastAPI, un enfoque com√∫n es construir una **imagen de contenedor de Linux**. Normalmente se realiza usando <a href="https://www.docker.com/" class="external-link" target="_blank">**Docker**</a>. Luego puedes desplegar esa imagen de contenedor de varias formas.

Usar contenedores de Linux tiene varias ventajas, incluyendo **seguridad**, **replicabilidad**, **simplicidad**, y otras.

/// tip | Consejo

¬øTienes prisa y ya conoces esto? Salta al [`Dockerfile` m√°s abajo üëá](#build-a-docker-image-for-fastapi).

///

<details>
<summary>Vista previa del Dockerfile üëÄ</summary>

```Dockerfile
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]

# Si est√°s detr√°s de un proxy como Nginx o Traefik a√±ade --proxy-headers
# CMD ["fastapi", "run", "app/main.py", "--port", "80", "--proxy-headers"]
```

</details>

## Qu√© es un Contenedor

Los contenedores (principalmente contenedores de Linux) son una forma muy **ligera** de empaquetar aplicaciones incluyendo todas sus dependencias y archivos necesarios, manteni√©ndolos aislados de otros contenedores (otras aplicaciones o componentes) en el mismo sistema.

Los contenedores de Linux se ejecutan utilizando el mismo n√∫cleo de Linux del host (m√°quina, m√°quina virtual, servidor en la nube, etc.). Esto significa que son muy ligeros (en comparaci√≥n con las m√°quinas virtuales completas que emulan un sistema operativo completo).

De esta forma, los contenedores consumen **pocos recursos**, una cantidad comparable a ejecutar los procesos directamente (una m√°quina virtual consumir√≠a mucho m√°s).

Los contenedores tambi√©n tienen sus propios procesos de ejecuci√≥n **aislados** (normalmente solo un proceso), sistema de archivos y red, simplificando el despliegue, la seguridad, el desarrollo, etc.

## Qu√© es una Imagen de Contenedor

Un **contenedor** se ejecuta desde una **imagen de contenedor**.

Una imagen de contenedor es una versi√≥n **est√°tica** de todos los archivos, variables de entorno y el comando/programa por defecto que deber√≠a estar presente en un contenedor. **Est√°tico** aqu√≠ significa que la imagen de contenedor **no se est√° ejecutando**, no est√° siendo ejecutada, son solo los archivos empaquetados y los metadatos.

En contraste con una "**imagen de contenedor**" que son los contenidos est√°ticos almacenados, un "**contenedor**" normalmente se refiere a la instance en ejecuci√≥n, lo que est√° siendo **ejecutado**.

Cuando el **contenedor** se inicia y est√° en funcionamiento (iniciado a partir de una **imagen de contenedor**), puede crear o cambiar archivos, variables de entorno, etc. Esos cambios existir√°n solo en ese contenedor, pero no persistir√°n en la imagen de contenedor subyacente (no se guardar√°n en disco).

Una imagen de contenedor es comparable al archivo de **programa** y sus contenidos, por ejemplo, `python` y alg√∫n archivo `main.py`.

Y el **contenedor** en s√≠ (en contraste con la **imagen de contenedor**) es la instance real en ejecuci√≥n de la imagen, comparable a un **proceso**. De hecho, un contenedor solo se est√° ejecutando cuando tiene un **proceso en ejecuci√≥n** (y normalmente es solo un proceso). El contenedor se detiene cuando no hay un proceso en ejecuci√≥n en √©l.

## Im√°genes de Contenedor

Docker ha sido una de las herramientas principales para crear y gestionar **im√°genes de contenedor** y **contenedores**.

Y hay un <a href="https://hub.docker.com/" class="external-link" target="_blank">Docker Hub</a> p√∫blico con **im√°genes de contenedores oficiales** pre-hechas para muchas herramientas, entornos, bases de datos y aplicaciones.

Por ejemplo, hay una <a href="https://hub.docker.com/_/python" class="external-link" target="_blank">Imagen de Python</a> oficial.

Y hay muchas otras im√°genes para diferentes cosas como bases de datos, por ejemplo para:

* <a href="https://hub.docker.com/_/postgres" class="external-link" target="_blank">PostgreSQL</a>
* <a href="https://hub.docker.com/_/mysql" class="external-link" target="_blank">MySQL</a>
* <a href="https://hub.docker.com/_/mongo" class="external-link" target="_blank">MongoDB</a>
* <a href="https://hub.docker.com/_/redis" class="external-link" target="_blank">Redis</a>, etc.

Usando una imagen de contenedor pre-hecha es muy f√°cil **combinar** y utilizar diferentes herramientas. Por ejemplo, para probar una nueva base de datos. En la mayor√≠a de los casos, puedes usar las **im√°genes oficiales**, y simplemente configurarlas con variables de entorno.

De esta manera, en muchos casos puedes aprender sobre contenedores y Docker y reutilizar ese conocimiento con muchas herramientas y componentes diferentes.

As√≠, ejecutar√≠as **m√∫ltiples contenedores** con diferentes cosas, como una base de datos, una aplicaci√≥n de Python, un servidor web con una aplicaci√≥n frontend en React, y conectarlos entre s√≠ a trav√©s de su red interna.

Todos los sistemas de gesti√≥n de contenedores (como Docker o Kubernetes) tienen estas caracter√≠sticas de redes integradas en ellos.

## Contenedores y Procesos

Una **imagen de contenedor** normalmente incluye en sus metadatos el programa o comando por defecto que deber√≠a ser ejecutado cuando el **contenedor** se inicie y los par√°metros que deben pasar a ese programa. Muy similar a lo que ser√≠a si estuviera en la l√≠nea de comandos.

Cuando un **contenedor** se inicia, ejecutar√° ese comando/programa (aunque puedes sobrescribirlo y hacer que ejecute un comando/programa diferente).

Un contenedor est√° en ejecuci√≥n mientras el **proceso principal** (comando o programa) est√© en ejecuci√≥n.

Un contenedor normalmente tiene un **proceso √∫nico**, pero tambi√©n es posible iniciar subprocesos desde el proceso principal, y de esa manera tendr√°s **m√∫ltiples procesos** en el mismo contenedor.

Pero no es posible tener un contenedor en ejecuci√≥n sin **al menos un proceso en ejecuci√≥n**. Si el proceso principal se detiene, el contenedor se detiene.

## Construir una Imagen de Docker para FastAPI

¬°Bien, construyamos algo ahora! üöÄ

Te mostrar√© c√≥mo construir una **imagen de Docker** para FastAPI **desde cero**, basada en la imagen **oficial de Python**.

Esto es lo que querr√≠as hacer en **la mayor√≠a de los casos**, por ejemplo:

* Usando **Kubernetes** o herramientas similares
* Al ejecutar en un **Raspberry Pi**
* Usando un servicio en la nube que ejecutar√≠a una imagen de contenedor por ti, etc.

### Requisitos del Paquete

Normalmente tendr√≠as los **requisitos del paquete** para tu aplicaci√≥n en alg√∫n archivo.

Depender√≠a principalmente de la herramienta que uses para **instalar** esos requisitos.

La forma m√°s com√∫n de hacerlo es tener un archivo `requirements.txt` con los nombres de los paquetes y sus versiones, uno por l√≠nea.

Por supuesto, usar√≠as las mismas ideas que le√≠ste en [Acerca de las versiones de FastAPI](versions.md){.internal-link target=_blank} para establecer los rangos de versiones.

Por ejemplo, tu `requirements.txt` podr√≠a verse as√≠:

```
fastapi[standard]>=0.113.0,<0.114.0
pydantic>=2.7.0,<3.0.0
```

Y normalmente instalar√≠as esas dependencias de los paquetes con `pip`, por ejemplo:

<div class="termy">

```console
$ pip install -r requirements.txt
---> 100%
Successfully installed fastapi pydantic
```

</div>

/// info | Informaci√≥n

Existen otros formatos y herramientas para definir e instalar dependencias de paquetes.

///

### Crear el C√≥digo de **FastAPI**

* Crea un directorio `app` y entra en √©l.
* Crea un archivo vac√≠o `__init__.py`.
* Crea un archivo `main.py` con:

```Python
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

### Dockerfile

Ahora, en el mismo directorio del proyecto, crea un archivo `Dockerfile` con:

```{ .dockerfile .annotate }
# (1)!
FROM python:3.9

# (2)!
WORKDIR /code

# (3)!
COPY ./requirements.txt /code/requirements.txt

# (4)!
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)!
COPY ./app /code/app

# (6)!
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

1. Comenzar desde la imagen base oficial de Python.

2. Establecer el directorio de trabajo actual a `/code`.

    Aqu√≠ es donde pondremos el archivo `requirements.txt` y el directorio `app`.

3. Copiar el archivo con los requisitos al directorio `/code`.

    Copiar **solo** el archivo con los requisitos primero, no el resto del c√≥digo.

    Como este archivo **no cambia a menudo**, Docker lo detectar√° y usar√° la **cach√©** para este paso, habilitando la cach√© para el siguiente paso tambi√©n.

4. Instalar las dependencias de los paquetes en el archivo de requisitos.

    La opci√≥n `--no-cache-dir` le dice a `pip` que no guarde los paquetes descargados localmente, ya que eso solo ser√≠a si `pip` fuese a ejecutarse de nuevo para instalar los mismos paquetes, pero ese no es el caso al trabajar con contenedores.

    /// note | Nota

    El `--no-cache-dir` est√° relacionado solo con `pip`, no tiene nada que ver con Docker o contenedores.

    ///

    La opci√≥n `--upgrade` le dice a `pip` que actualice los paquetes si ya est√°n instalados.

    Debido a que el paso anterior de copiar el archivo podr√≠a ser detectado por la **cach√© de Docker**, este paso tambi√©n **usar√° la cach√© de Docker** cuando est√© disponible.

    Usar la cach√© en este paso te **ahorrar√°** mucho **tiempo** al construir la imagen una y otra vez durante el desarrollo, en lugar de **descargar e instalar** todas las dependencias **cada vez**.

5. Copiar el directorio `./app` dentro del directorio `/code`.

    Como esto contiene todo el c√≥digo, que es lo que **cambia con m√°s frecuencia**, la **cach√© de Docker** no se utilizar√° para este u otros **pasos siguientes** f√°cilmente.

    As√≠ que es importante poner esto **cerca del final** del `Dockerfile`, para optimizar los tiempos de construcci√≥n de la imagen del contenedor.

6. Establecer el **comando** para usar `fastapi run`, que utiliza Uvicorn debajo.

    `CMD` toma una lista de cadenas, cada una de estas cadenas es lo que escribir√≠as en la l√≠nea de comandos separado por espacios.

    Este comando se ejecutar√° desde el **directorio de trabajo actual**, el mismo directorio `/code` que estableciste antes con `WORKDIR /code`.

/// tip | Consejo

Revisa qu√© hace cada l√≠nea haciendo clic en cada n√∫mero en la burbuja del c√≥digo. üëÜ

///

/// warning | Advertencia

Aseg√∫rate de **siempre** usar la **forma exec** de la instrucci√≥n `CMD`, como se explica a continuaci√≥n.

///

#### Usar `CMD` - Forma Exec

La instrucci√≥n Docker <a href="https://docs.docker.com/reference/dockerfile/#cmd" class="external-link" target="_blank">`CMD`</a> se puede escribir usando dos formas:

‚úÖ **Forma Exec**:

```Dockerfile
# ‚úÖ Haz esto
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

‚õîÔ∏è **Forma Shell**:

```Dockerfile
# ‚õîÔ∏è No hagas esto
CMD fastapi run app/main.py --port 80
```

Aseg√∫rate de siempre usar la **forma exec** para garantizar que FastAPI pueda cerrarse de manera adecuada y que [los eventos de lifespan](../advanced/events.md){.internal-link target=_blank} sean disparados.

Puedes leer m√°s sobre esto en las <a href="https://docs.docker.com/reference/dockerfile/#shell-and-exec-form" class="external-link" target="_blank">documentaci√≥n de Docker para formas de shell y exec</a>.

Esto puede ser bastante notorio al usar `docker compose`. Consulta esta secci√≥n de preguntas frecuentes de Docker Compose para m√°s detalles t√©cnicos: <a href="https://docs.docker.com/compose/faq/#why-do-my-services-take-10-seconds-to-recreate-or-stop" class="external-link" target="_blank">¬øPor qu√© mis servicios tardan 10 segundos en recrearse o detenerse?</a>.

#### Estructura de Directorios

Ahora deber√≠as tener una estructura de directorios como:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ Dockerfile
‚îî‚îÄ‚îÄ requirements.txt
```

#### Detr√°s de un Proxy de Terminaci√≥n TLS

Si est√°s ejecutando tu contenedor detr√°s de un Proxy de Terminaci√≥n TLS (load balancer) como Nginx o Traefik, a√±ade la opci√≥n `--proxy-headers`, esto le dir√° a Uvicorn (a trav√©s de la CLI de FastAPI) que conf√≠e en los headers enviados por ese proxy indicando que la aplicaci√≥n se est√° ejecutando detr√°s de HTTPS, etc.

```Dockerfile
CMD ["fastapi", "run", "app/main.py", "--proxy-headers", "--port", "80"]
```

#### Cache de Docker

Hay un truco importante en este `Dockerfile`, primero copiamos **el archivo con las dependencias solo**, no el resto del c√≥digo. D√©jame decirte por qu√© es as√≠.

```Dockerfile
COPY ./requirements.txt /code/requirements.txt
```

Docker y otras herramientas **construyen** estas im√°genes de contenedor **incrementalmente**, a√±adiendo **una capa sobre la otra**, empezando desde la parte superior del `Dockerfile` y a√±adiendo cualquier archivo creado por cada una de las instrucciones del `Dockerfile`.

Docker y herramientas similares tambi√©n usan una **cach√© interna** al construir la imagen, si un archivo no ha cambiado desde la √∫ltima vez que se construy√≥ la imagen del contenedor, entonces reutilizar√° la misma capa creada la √∫ltima vez, en lugar de copiar el archivo de nuevo y crear una nueva capa desde cero.

Solo evitar copiar archivos no mejora necesariamente las cosas mucho, pero porque se us√≥ la cach√© para ese paso, puede **usar la cach√© para el siguiente paso**. Por ejemplo, podr√≠a usar la cach√© para la instrucci√≥n que instala las dependencias con:

```Dockerfile
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

El archivo con los requisitos de los paquetes **no cambiar√° con frecuencia**. As√≠ que, al copiar solo ese archivo, Docker podr√° **usar la cach√©** para ese paso.

Y luego, Docker podr√° **usar la cach√© para el siguiente paso** que descarga e instala esas dependencias. Y aqu√≠ es donde **ahorramos mucho tiempo**. ‚ú® ...y evitamos el aburrimiento de esperar. üò™üòÜ

Descargar e instalar las dependencias de los paquetes **podr√≠a llevar minutos**, pero usando la **cach√©** tomar√≠a **segundos** como m√°ximo.

Y como estar√≠as construyendo la imagen del contenedor una y otra vez durante el desarrollo para comprobar que los cambios en tu c√≥digo funcionan, hay una gran cantidad de tiempo acumulado que te ahorrar√≠as.

Luego, cerca del final del `Dockerfile`, copiamos todo el c√≥digo. Como esto es lo que **cambia con m√°s frecuencia**, lo ponemos cerca del final, porque casi siempre, cualquier cosa despu√©s de este paso no podr√° usar la cach√©.

```Dockerfile
COPY ./app /code/app
```

### Construir la Imagen de Docker

Ahora que todos los archivos est√°n en su lugar, vamos a construir la imagen del contenedor.

* Ve al directorio del proyecto (donde est√° tu `Dockerfile`, conteniendo tu directorio `app`).
* Construye tu imagen de FastAPI:

<div class="termy">

```console
$ docker build -t myimage .

---> 100%
```

</div>

/// tip | Consejo

F√≠jate en el `.` al final, es equivalente a `./`, le indica a Docker el directorio a usar para construir la imagen del contenedor.

En este caso, es el mismo directorio actual (`.`).

///

### Iniciar el Contenedor Docker

* Ejecuta un contenedor basado en tu imagen:

<div class="termy">

```console
$ docker run -d --name mycontainer -p 80:80 myimage
```

</div>

## Rev√≠salo

Deber√≠as poder revisarlo en la URL de tu contenedor de Docker, por ejemplo: <a href="http://192.168.99.100/items/5?q=somequery" class="external-link" target="_blank">http://192.168.99.100/items/5?q=somequery</a> o <a href="http://127.0.0.1/items/5?q=somequery" class="external-link" target="_blank">http://127.0.0.1/items/5?q=somequery</a> (o equivalente, usando tu host de Docker).

Ver√°s algo como:

```JSON
{"item_id": 5, "q": "somequery"}
```

## Documentaci√≥n Interactiva de la API

Ahora puedes ir a <a href="http://192.168.99.100/docs" class="external-link" target="_blank">http://192.168.99.100/docs</a> o <a href="http://127.0.0.1/docs" class="external-link" target="_blank">http://127.0.0.1/docs</a> (o equivalente, usando tu host de Docker).

Ver√°s la documentaci√≥n interactiva autom√°tica de la API (proporcionada por <a href="https://github.com/swagger-api/swagger-ui" class="external-link" target="_blank">Swagger UI</a>):

![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)

## Documentaci√≥n Alternativa de la API

Y tambi√©n puedes ir a <a href="http://192.168.99.100/redoc" class="external-link" target="_blank">http://192.168.99.100/redoc</a> o <a href="http://127.0.0.1/redoc" class="external-link" target="_blank">http://127.0.0.1/redoc</a> (o equivalente, usando tu host de Docker).

Ver√°s la documentaci√≥n alternativa autom√°tica (proporcionada por <a href="https://github.com/Rebilly/ReDoc" class="external-link" target="_blank">ReDoc</a>):

![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)

## Construir una Imagen de Docker con un FastAPI de Un Solo Archivo

Si tu FastAPI es un solo archivo, por ejemplo, `main.py` sin un directorio `./app`, tu estructura de archivos podr√≠a verse as√≠:

```
.
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ requirements.txt
```

Entonces solo tendr√≠as que cambiar las rutas correspondientes para copiar el archivo dentro del `Dockerfile`:

```{ .dockerfile .annotate hl_lines="10  13" }
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)!
COPY ./main.py /code/

# (2)!
CMD ["fastapi", "run", "main.py", "--port", "80"]
```

1. Copia el archivo `main.py` directamente al directorio `/code` (sin ning√∫n directorio `./app`).

2. Usa `fastapi run` para servir tu aplicaci√≥n en el archivo √∫nico `main.py`.

Cuando pasas el archivo a `fastapi run`, detectar√° autom√°ticamente que es un archivo √∫nico y no parte de un paquete y sabr√° c√≥mo importarlo y servir tu aplicaci√≥n FastAPI. üòé

## Conceptos de Despliegue

Hablemos nuevamente de algunos de los mismos [Conceptos de Despliegue](concepts.md){.internal-link target=_blank} en t√©rminos de contenedores.

Los contenedores son principalmente una herramienta para simplificar el proceso de **construcci√≥n y despliegue** de una aplicaci√≥n, pero no imponen un enfoque particular para manejar estos **conceptos de despliegue**, y hay varias estrategias posibles.

La **buena noticia** es que con cada estrategia diferente hay una forma de cubrir todos los conceptos de despliegue. üéâ

Revisemos estos **conceptos de despliegue** en t√©rminos de contenedores:

* HTTPS
* Ejecutar en el inicio
* Reinicios
* Replicaci√≥n (el n√∫mero de procesos en ejecuci√≥n)
* Memoria
* Pasos previos antes de comenzar

## HTTPS

Si nos enfocamos solo en la **imagen de contenedor** para una aplicaci√≥n FastAPI (y luego el **contenedor** en ejecuci√≥n), HTTPS normalmente ser√≠a manejado **externamente** por otra herramienta.

Podr√≠a ser otro contenedor, por ejemplo, con <a href="https://traefik.io/" class="external-link" target="_blank">Traefik</a>, manejando **HTTPS** y la adquisici√≥n **autom√°tica** de **certificados**.

/// tip | Consejo

Traefik tiene integraciones con Docker, Kubernetes, y otros, por lo que es muy f√°cil configurar y configurar HTTPS para tus contenedores con √©l.

///

Alternativamente, HTTPS podr√≠a ser manejado por un proveedor de la nube como uno de sus servicios (mientras que la aplicaci√≥n a√∫n se ejecuta en un contenedor).

## Ejecutar en el Inicio y Reinicios

Normalmente hay otra herramienta encargada de **iniciar y ejecutar** tu contenedor.

Podr√≠a ser **Docker** directamente, **Docker Compose**, **Kubernetes**, un **servicio en la nube**, etc.

En la mayor√≠a (o todas) de las casos, hay una opci√≥n sencilla para habilitar la ejecuci√≥n del contenedor al inicio y habilitar los reinicios en caso de fallos. Por ejemplo, en Docker, es la opci√≥n de l√≠nea de comandos `--restart`.

Sin usar contenedores, hacer que las aplicaciones se ejecuten al inicio y con reinicios puede ser engorroso y dif√≠cil. Pero al **trabajar con contenedores** en la mayor√≠a de los casos, esa funcionalidad se incluye por defecto. ‚ú®

## Replicaci√≥n - N√∫mero de Procesos

Si tienes un <abbr title="Un grupo de m√°quinas que est√°n configuradas para estar conectadas y trabajar juntas de alguna manera.">cluster</abbr> de m√°quinas con **Kubernetes**, Docker Swarm Mode, Nomad, u otro sistema complejo similar para gestionar contenedores distribuidos en varias m√°quinas, entonces probablemente querr√°s manejar la **replicaci√≥n** a nivel de **cluster** en lugar de usar un **gestor de procesos** (como Uvicorn con workers) en cada contenedor.

Uno de esos sistemas de gesti√≥n de contenedores distribuidos como Kubernetes normalmente tiene alguna forma integrada de manejar la **replicaci√≥n de contenedores** mientras a√∫n soporta el **load balancing** para las requests entrantes. Todo a nivel de **cluster**.

En esos casos, probablemente desear√≠as construir una **imagen de Docker desde cero** como se [explica arriba](#dockerfile), instalando tus dependencias, y ejecutando **un solo proceso de Uvicorn** en lugar de usar m√∫ltiples workers de Uvicorn.

### Load Balancer

Al usar contenedores, normalmente tendr√≠as alg√∫n componente **escuchando en el puerto principal**. Podr√≠a posiblemente ser otro contenedor que es tambi√©n un **Proxy de Terminaci√≥n TLS** para manejar **HTTPS** o alguna herramienta similar.

Como este componente tomar√≠a la **carga** de las requests y las distribuir√≠a entre los workers de una manera (esperablemente) **balanceada**, tambi√©n se le llama com√∫nmente **Load Balancer**.

/// tip | Consejo

El mismo componente **Proxy de Terminaci√≥n TLS** usado para HTTPS probablemente tambi√©n ser√≠a un **Load Balancer**.

///

Y al trabajar con contenedores, el mismo sistema que usas para iniciarlos y gestionarlos ya tendr√≠a herramientas internas para transmitir la **comunicaci√≥n en red** (e.g., requests HTTP) desde ese **load balancer** (que tambi√©n podr√≠a ser un **Proxy de Terminaci√≥n TLS**) a los contenedores con tu aplicaci√≥n.

### Un Load Balancer - M√∫ltiples Contenedores Worker

Al trabajar con **Kubernetes** u otros sistemas de gesti√≥n de contenedores distribuidos similares, usar sus mecanismos de red internos permitir√≠a que el √∫nico **load balancer** que est√° escuchando en el **puerto** principal transmita la comunicaci√≥n (requests) a posiblemente **m√∫ltiples contenedores** ejecutando tu aplicaci√≥n.

Cada uno de estos contenedores ejecutando tu aplicaci√≥n normalmente tendr√≠a **solo un proceso** (e.g., un proceso Uvicorn ejecutando tu aplicaci√≥n FastAPI). Todos ser√≠an **contenedores id√©nticos**, ejecutando lo mismo, pero cada uno con su propio proceso, memoria, etc. De esa forma, aprovechar√≠as la **paralelizaci√≥n** en **diferentes n√∫cleos** de la CPU, o incluso en **diferentes m√°quinas**.

Y el sistema de contenedores distribuido con el **load balancer** **distribuir√≠a las requests** a cada uno de los contenedores **replicados** que ejecutan tu aplicaci√≥n **en turnos**. As√≠, cada request podr√≠a ser manejado por uno de los m√∫ltiples **contenedores replicados** ejecutando tu aplicaci√≥n.

Y normalmente este **load balancer** podr√≠a manejar requests que vayan a *otras* aplicaciones en tu cluster (p. ej., a un dominio diferente, o bajo un prefijo de ruta de URL diferente), y transmitir√≠a esa comunicaci√≥n a los contenedores correctos para *esa otra* aplicaci√≥n ejecut√°ndose en tu cluster.

### Un Proceso por Contenedor

En este tipo de escenario, probablemente querr√≠as tener **un solo proceso (Uvicorn) por contenedor**, ya que ya estar√≠as manejando la replicaci√≥n a nivel de cluster.

As√≠ que, en este caso, **no** querr√≠as tener m√∫ltiples workers en el contenedor, por ejemplo, con la opci√≥n de l√≠nea de comandos `--workers`. Querr√≠as tener solo un **proceso Uvicorn por contenedor** (pero probablemente m√∫ltiples contenedores).

Tener otro gestor de procesos dentro del contenedor (como ser√≠a con m√∫ltiples workers) solo a√±adir√≠a **complejidad innecesaria** que probablemente ya est√©s manejando con tu sistema de cluster.

### Contenedores con M√∫ltiples Procesos y Casos Especiales

Por supuesto, hay **casos especiales** donde podr√≠as querer tener **un contenedor** con varios **worker processes de Uvicorn** dentro.

En esos casos, puedes usar la opci√≥n de l√≠nea de comandos `--workers` para establecer el n√∫mero de workers que deseas ejecutar:

```{ .dockerfile .annotate }
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

# (1)!
CMD ["fastapi", "run", "app/main.py", "--port", "80", "--workers", "4"]
```

1. Aqu√≠ usamos la opci√≥n de l√≠nea de comandos `--workers` para establecer el n√∫mero de workers a 4.

Aqu√≠ hay algunos ejemplos de cu√°ndo eso podr√≠a tener sentido:

#### Una Aplicaci√≥n Simple

Podr√≠as querer un gestor de procesos en el contenedor si tu aplicaci√≥n es **lo suficientemente simple** que pueda ejecutarse en un **servidor √∫nico**, no un cluster.

#### Docker Compose

Podr√≠as estar desplegando en un **servidor √∫nico** (no un cluster) con **Docker Compose**, por lo que no tendr√≠as una forma f√°cil de gestionar la replicaci√≥n de contenedores (con Docker Compose) mientras se preserva la red compartida y el **load balancing**.

Entonces podr√≠as querer tener **un solo contenedor** con un **gestor de procesos** iniciando **varios worker processes** dentro.

---

El punto principal es que, **ninguna** de estas son **reglas escritas en piedra** que debas seguir a ciegas. Puedes usar estas ideas para **evaluar tu propio caso de uso** y decidir cu√°l es el mejor enfoque para tu sistema, verificando c√≥mo gestionar los conceptos de:

* Seguridad - HTTPS
* Ejecutar en el inicio
* Reinicios
* Replicaci√≥n (el n√∫mero de procesos en ejecuci√≥n)
* Memoria
* Pasos previos antes de comenzar

## Memoria

Si ejecutas **un solo proceso por contenedor**, tendr√°s una cantidad de memoria m√°s o menos bien definida, estable y limitada consumida por cada uno de esos contenedores (m√°s de uno si est√°n replicados).

Y luego puedes establecer esos mismos l√≠mites de memoria y requisitos en tus configuraciones para tu sistema de gesti√≥n de contenedores (por ejemplo, en **Kubernetes**). De esa manera, podr√° **replicar los contenedores** en las **m√°quinas disponibles** teniendo en cuenta la cantidad de memoria necesaria por ellos, y la cantidad disponible en las m√°quinas en el cluster.

Si tu aplicaci√≥n es **simple**, probablemente esto **no ser√° un problema**, y puede que no necesites especificar l√≠mites de memoria estrictos. Pero si est√°s **usando mucha memoria** (por ejemplo, con modelos de **Machine Learning**), deber√≠as verificar cu√°nta memoria est√°s consumiendo y ajustar el **n√∫mero de contenedores** que se ejecutan en **cada m√°quina** (y tal vez agregar m√°s m√°quinas a tu cluster).

Si ejecutas **m√∫ltiples procesos por contenedor**, tendr√°s que asegurarte de que el n√∫mero de procesos iniciados no **consuma m√°s memoria** de la que est√° disponible.

## Pasos Previos Antes de Comenzar y Contenedores

Si est√°s usando contenedores (por ejemplo, Docker, Kubernetes), entonces hay dos enfoques principales que puedes usar.

### M√∫ltiples Contenedores

Si tienes **m√∫ltiples contenedores**, probablemente cada uno ejecutando un **proceso √∫nico** (por ejemplo, en un cluster de **Kubernetes**), entonces probablemente querr√≠as tener un **contenedor separado** realizando el trabajo de los **pasos previos** en un solo contenedor, ejecutando un solo proceso, **antes** de ejecutar los contenedores worker replicados.

/// info | Informaci√≥n

Si est√°s usando Kubernetes, probablemente ser√≠a un <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/" class="external-link" target="_blank">Contenedor de Inicializaci√≥n</a>.

///

Si en tu caso de uso no hay problema en ejecutar esos pasos previos **m√∫ltiples veces en paralelo** (por ejemplo, si no est√°s ejecutando migraciones de base de datos, sino simplemente verificando si la base de datos est√° lista), entonces tambi√©n podr√≠as simplemente ponerlos en cada contenedor justo antes de iniciar el proceso principal.

### Un Contenedor √önico

Si tienes una configuraci√≥n simple, con un **contenedor √∫nico** que luego inicia m√∫ltiples **worker processes** (o tambi√©n solo un proceso), entonces podr√≠as ejecutar esos pasos previos en el mismo contenedor, justo antes de iniciar el proceso con la aplicaci√≥n.

### Imagen Base de Docker

Sol√≠a haber una imagen official de Docker de FastAPI: <a href="https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker" class="external-link" target="_blank">tiangolo/uvicorn-gunicorn-fastapi</a>. Pero ahora est√° obsoleta. ‚õîÔ∏è

Probablemente **no** deber√≠as usar esta imagen base de Docker (o cualquier otra similar).

Si est√°s usando **Kubernetes** (u otros) y ya est√°s configurando la **replicaci√≥n** a nivel de cluster, con m√∫ltiples **contenedores**. En esos casos, es mejor que **construyas una imagen desde cero** como se describe arriba: [Construir una Imagen de Docker para FastAPI](#build-a-docker-image-for-fastapi).

Y si necesitas tener m√∫ltiples workers, puedes simplemente utilizar la opci√≥n de l√≠nea de comandos `--workers`.

/// note | Detalles T√©cnicos

La imagen de Docker se cre√≥ cuando Uvicorn no soportaba gestionar y reiniciar workers muertos, por lo que era necesario usar Gunicorn con Uvicorn, lo que a√±ad√≠a bastante complejidad, solo para que Gunicorn gestionara y reiniciara los worker processes de Uvicorn.

Pero ahora que Uvicorn (y el comando `fastapi`) soportan el uso de `--workers`, no hay raz√≥n para utilizar una imagen base de Docker en lugar de construir la tuya propia (es pr√°cticamente la misma cantidad de c√≥digo üòÖ).

///

## Desplegar la Imagen del Contenedor

Despu√©s de tener una Imagen de Contenedor (Docker) hay varias maneras de desplegarla.

Por ejemplo:

* Con **Docker Compose** en un servidor √∫nico
* Con un cluster de **Kubernetes**
* Con un cluster de Docker Swarm Mode
* Con otra herramienta como Nomad
* Con un servicio en la nube que tome tu imagen de contenedor y la despliegue

## Imagen de Docker con `uv`

Si est√°s usando <a href="https://github.com/astral-sh/uv" class="external-link" target="_blank">uv</a> para instalar y gestionar tu proyecto, puedes seguir su <a href="https://docs.astral.sh/uv/guides/integration/docker/" class="external-link" target="_blank">gu√≠a de Docker de uv</a>.

## Resumen

Usando sistemas de contenedores (por ejemplo, con **Docker** y **Kubernetes**) se vuelve bastante sencillo manejar todos los **conceptos de despliegue**:

* HTTPS
* Ejecutar en el inicio
* Reinicios
* Replicaci√≥n (el n√∫mero de procesos en ejecuci√≥n)
* Memoria
* Pasos previos antes de comenzar

En la mayor√≠a de los casos, probablemente no querr√°s usar ninguna imagen base, y en su lugar **construir una imagen de contenedor desde cero** basada en la imagen oficial de Docker de Python.

Teniendo en cuenta el **orden** de las instrucciones en el `Dockerfile` y la **cach√© de Docker** puedes **minimizar los tiempos de construcci√≥n**, para maximizar tu productividad (y evitar el aburrimiento). üòé


================================================
File: /docs/es/docs/deployment/https.md
================================================
# Sobre HTTPS

Es f√°cil asumir que HTTPS es algo que simplemente est√° "activado" o no.

Pero es mucho m√°s complejo que eso.

/// tip | Consejo

Si tienes prisa o no te importa, contin√∫a con las siguientes secciones para ver instrucciones paso a paso para configurar todo con diferentes t√©cnicas.

///

Para **aprender los conceptos b√°sicos de HTTPS**, desde una perspectiva de consumidor, revisa <a href="https://howhttps.works/" class="external-link" target="_blank">https://howhttps.works/</a>.

Ahora, desde una **perspectiva de desarrollador**, aqu√≠ hay varias cosas a tener en cuenta al pensar en HTTPS:

* Para HTTPS, **el servidor** necesita **tener "certificados"** generados por un **tercero**.
    * Esos certificados en realidad son **adquiridos** del tercero, no "generados".
* Los certificados tienen una **vida √∫til**.
    * Ellos **expiran**.
    * Y luego necesitan ser **renovados**, **adquiridos nuevamente** del tercero.
* La encriptaci√≥n de la conexi√≥n ocurre a nivel de **TCP**.
    * Esa es una capa **debajo de HTTP**.
    * Por lo tanto, el manejo de **certificados y encriptaci√≥n** se realiza **antes de HTTP**.
* **TCP no sabe acerca de "dominios"**. Solo sobre direcciones IP.
    * La informaci√≥n sobre el **dominio espec√≠fico** solicitado va en los **datos HTTP**.
* Los **certificados HTTPS** "certifican" un **cierto dominio**, pero el protocolo y la encriptaci√≥n ocurren a nivel de TCP, **antes de saber** con cu√°l dominio se est√° tratando.
* **Por defecto**, eso significar√≠a que solo puedes tener **un certificado HTTPS por direcci√≥n IP**.
    * No importa cu√°n grande sea tu servidor o qu√© tan peque√±a pueda ser cada aplicaci√≥n que tengas en √©l.
    * Sin embargo, hay una **soluci√≥n** para esto.
* Hay una **extensi√≥n** para el protocolo **TLS** (el que maneja la encriptaci√≥n a nivel de TCP, antes de HTTP) llamada **<a href="https://en.wikipedia.org/wiki/Server_Name_Indication" class="external-link" target="_blank"><abbr title="Server Name Indication">SNI</abbr></a>**.
    * Esta extensi√≥n SNI permite que un solo servidor (con una **sola direcci√≥n IP**) tenga **varios certificados HTTPS** y sirva **m√∫ltiples dominios/aplicaciones HTTPS**.
    * Para que esto funcione, un componente (programa) **√∫nico** que se ejecute en el servidor, escuchando en la **direcci√≥n IP p√∫blica**, debe tener **todos los certificados HTTPS** en el servidor.
* **Despu√©s** de obtener una conexi√≥n segura, el protocolo de comunicaci√≥n sigue siendo **HTTP**.
    * Los contenidos est√°n **encriptados**, aunque se envi√©n con el **protocolo HTTP**.

Es una pr√°ctica com√∫n tener **un programa/servidor HTTP** ejecut√°ndose en el servidor (la m√°quina, host, etc.) y **gestionando todas las partes de HTTPS**: recibiendo los **requests HTTPS encriptados**, enviando los **requests HTTP desencriptados** a la aplicaci√≥n HTTP real que se ejecuta en el mismo servidor (la aplicaci√≥n **FastAPI**, en este caso), tomando el **response HTTP** de la aplicaci√≥n, **encript√°ndolo** usando el **certificado HTTPS** adecuado y envi√°ndolo de vuelta al cliente usando **HTTPS**. Este servidor a menudo se llama un **<a href="https://en.wikipedia.org/wiki/TLS_termination_proxy" class="external-link" target="_blank">TLS Termination Proxy</a>**.

Algunas de las opciones que podr√≠as usar como un TLS Termination Proxy son:

* Traefik (que tambi√©n puede manejar la renovaci√≥n de certificados)
* Caddy (que tambi√©n puede manejar la renovaci√≥n de certificados)
* Nginx
* HAProxy

## Let's Encrypt

Antes de Let's Encrypt, estos **certificados HTTPS** eran vendidos por terceros.

El proceso para adquirir uno de estos certificados sol√≠a ser complicado, requerir bastante papeleo y los certificados eran bastante costosos.

Pero luego se cre√≥ **<a href="https://letsencrypt.org/" class="external-link" target="_blank">Let's Encrypt</a>**.

Es un proyecto de la Linux Foundation. Proporciona **certificados HTTPS de forma gratuita**, de manera automatizada. Estos certificados usan toda la seguridad criptogr√°fica est√°ndar, y tienen una corta duraci√≥n (aproximadamente 3 meses), por lo que la **seguridad es en realidad mejor** debido a su corta vida √∫til.

Los dominios son verificados de manera segura y los certificados se generan autom√°ticamente. Esto tambi√©n permite automatizar la renovaci√≥n de estos certificados.

La idea es automatizar la adquisici√≥n y renovaci√≥n de estos certificados para que puedas tener **HTTPS seguro, gratuito, para siempre**.

## HTTPS para Desarrolladores

Aqu√≠ tienes un ejemplo de c√≥mo podr√≠a ser una API HTTPS, paso a paso, prestando atenci√≥n principalmente a las ideas importantes para los desarrolladores.

### Nombre de Dominio

Probablemente todo comenzar√≠a adquiriendo un **nombre de dominio**. Luego, lo configurar√≠as en un servidor DNS (posiblemente tu mismo proveedor de la nube).

Probablemente conseguir√≠as un servidor en la nube (una m√°quina virtual) o algo similar, y tendr√≠a una **direcci√≥n IP p√∫blica** <abbr title="Que no cambia">fija</abbr>.

En el/los servidor(es) DNS configurar√≠as un registro (un "`A record`") para apuntar **tu dominio** a la **direcci√≥n IP p√∫blica de tu servidor**.

Probablemente har√≠as esto solo una vez, la primera vez, al configurar todo.

/// tip | Consejo

Esta parte del Nombre de Dominio es mucho antes de HTTPS, pero como todo depende del dominio y la direcci√≥n IP, vale la pena mencionarlo aqu√≠.

///

### DNS

Ahora centr√©monos en todas las partes realmente de HTTPS.

Primero, el navegador consultar√≠a con los **servidores DNS** cu√°l es la **IP del dominio**, en este caso, `someapp.example.com`.

Los servidores DNS le dir√≠an al navegador que use una **direcci√≥n IP** espec√≠fica. Esa ser√≠a la direcci√≥n IP p√∫blica utilizada por tu servidor, que configuraste en los servidores DNS.

<img src="/img/deployment/https/https01.svg">

### Inicio del Handshake TLS

El navegador luego se comunicar√≠a con esa direcci√≥n IP en el **puerto 443** (el puerto HTTPS).

La primera parte de la comunicaci√≥n es solo para establecer la conexi√≥n entre el cliente y el servidor y decidir las claves criptogr√°ficas que usar√°n, etc.

<img src="/img/deployment/https/https02.svg">

Esta interacci√≥n entre el cliente y el servidor para establecer la conexi√≥n TLS se llama **handshake TLS**.

### TLS con Extensi√≥n SNI

**Solo un proceso** en el servidor puede estar escuchando en un **puerto** espec√≠fico en una **direcci√≥n IP** espec√≠fica. Podr√≠a haber otros procesos escuchando en otros puertos en la misma direcci√≥n IP, pero solo uno para cada combinaci√≥n de direcci√≥n IP y puerto.

TLS (HTTPS) utiliza el puerto espec√≠fico `443` por defecto. As√≠ que ese es el puerto que necesitar√≠amos.

Como solo un proceso puede estar escuchando en este puerto, el proceso que lo har√≠a ser√≠a el **TLS Termination Proxy**.

El TLS Termination Proxy tendr√≠a acceso a uno o m√°s **certificados TLS** (certificados HTTPS).

Usando la **extensi√≥n SNI** discutida anteriormente, el TLS Termination Proxy verificar√≠a cu√°l de los certificados TLS (HTTPS) disponibles deber√≠a usar para esta conexi√≥n, usando el que coincida con el dominio esperado por el cliente.

En este caso, usar√≠a el certificado para `someapp.example.com`.

<img src="/img/deployment/https/https03.svg">

El cliente ya **conf√≠a** en la entidad que gener√≥ ese certificado TLS (en este caso Let's Encrypt, pero lo veremos m√°s adelante), por lo que puede **verificar** que el certificado sea v√°lido.

Luego, usando el certificado, el cliente y el TLS Termination Proxy **deciden c√≥mo encriptar** el resto de la **comunicaci√≥n TCP**. Esto completa la parte de **Handshake TLS**.

Despu√©s de esto, el cliente y el servidor tienen una **conexi√≥n TCP encriptada**, esto es lo que proporciona TLS. Y luego pueden usar esa conexi√≥n para iniciar la comunicaci√≥n **HTTP real**.

Y eso es lo que es **HTTPS**, es simplemente HTTP simple **dentro de una conexi√≥n TLS segura** en lugar de una conexi√≥n TCP pura (sin encriptar).

/// tip | Consejo

Ten en cuenta que la encriptaci√≥n de la comunicaci√≥n ocurre a nivel de **TCP**, no a nivel de HTTP.

///

### Request HTTPS

Ahora que el cliente y el servidor (espec√≠ficamente el navegador y el TLS Termination Proxy) tienen una **conexi√≥n TCP encriptada**, pueden iniciar la **comunicaci√≥n HTTP**.

As√≠ que, el cliente env√≠a un **request HTTPS**. Esto es simplemente un request HTTP a trav√©s de una conexi√≥n TLS encriptada.

<img src="/img/deployment/https/https04.svg">

### Desencriptar el Request

El TLS Termination Proxy usar√≠a la encriptaci√≥n acordada para **desencriptar el request**, y transmitir√≠a el **request HTTP simple (desencriptado)** al proceso que ejecuta la aplicaci√≥n (por ejemplo, un proceso con Uvicorn ejecutando la aplicaci√≥n FastAPI).

<img src="/img/deployment/https/https05.svg">

### Response HTTP

La aplicaci√≥n procesar√≠a el request y enviar√≠a un **response HTTP simple (sin encriptar)** al TLS Termination Proxy.

<img src="/img/deployment/https/https06.svg">

### Response HTTPS

El TLS Termination Proxy entonces **encriptar√≠a el response** usando la criptograf√≠a acordada antes (que comenz√≥ con el certificado para `someapp.example.com`), y lo enviar√≠a de vuelta al navegador.

Luego, el navegador verificar√≠a que el response sea v√°lido y encriptado con la clave criptogr√°fica correcta, etc. Entonces **desencriptar√≠a el response** y lo procesar√≠a.

<img src="/img/deployment/https/https07.svg">

El cliente (navegador) sabr√° que el response proviene del servidor correcto porque est√° utilizando la criptograf√≠a que acordaron usando el **certificado HTTPS** anteriormente.

### M√∫ltiples Aplicaciones

En el mismo servidor (o servidores), podr√≠an haber **m√∫ltiples aplicaciones**, por ejemplo, otros programas API o una base de datos.

Solo un proceso puede estar gestionando la IP y puerto espec√≠fica (el TLS Termination Proxy en nuestro ejemplo) pero las otras aplicaciones/procesos pueden estar ejecut√°ndose en el/los servidor(es) tambi√©n, siempre y cuando no intenten usar la misma **combinaci√≥n de IP p√∫blica y puerto**.

<img src="/img/deployment/https/https08.svg">

De esa manera, el TLS Termination Proxy podr√≠a gestionar HTTPS y certificados para **m√∫ltiples dominios**, para m√∫ltiples aplicaciones, y luego transmitir los requests a la aplicaci√≥n correcta en cada caso.

### Renovaci√≥n de Certificados

En alg√∫n momento en el futuro, cada certificado **expirar√≠a** (alrededor de 3 meses despu√©s de haberlo adquirido).

Y entonces, habr√≠a otro programa (en algunos casos es otro programa, en algunos casos podr√≠a ser el mismo TLS Termination Proxy) que hablar√≠a con Let's Encrypt y renovar√≠a el/los certificado(s).

<img src="/img/deployment/https/https.svg">

Los **certificados TLS** est√°n **asociados con un nombre de dominio**, no con una direcci√≥n IP.

Entonces, para renovar los certificados, el programa de renovaci√≥n necesita **probar** a la autoridad (Let's Encrypt) que de hecho **"posee" y controla ese dominio**.

Para hacer eso, y para acomodar diferentes necesidades de aplicaciones, hay varias formas en que puede hacerlo. Algunas formas populares son:

* **Modificar algunos registros DNS**.
    * Para esto, el programa de renovaci√≥n necesita soportar las API del proveedor de DNS, por lo que, dependiendo del proveedor de DNS que est√©s utilizando, esto podr√≠a o no ser una opci√≥n.
* **Ejecutarse como un servidor** (al menos durante el proceso de adquisici√≥n del certificado) en la direcci√≥n IP p√∫blica asociada con el dominio.
    * Como dijimos anteriormente, solo un proceso puede estar escuchando en una IP y puerto espec√≠ficos.
    * Esta es una de las razones por las que es muy √∫til cuando el mismo TLS Termination Proxy tambi√©n se encarga del proceso de renovaci√≥n del certificado.
    * De lo contrario, podr√≠as tener que detener moment√°neamente el TLS Termination Proxy, iniciar el programa de renovaci√≥n para adquirir los certificados, luego configurarlos con el TLS Termination Proxy, y luego reiniciar el TLS Termination Proxy. Esto no es ideal, ya que tus aplicaciones no estar√°n disponibles durante el tiempo que el TLS Termination Proxy est√© apagado.

Todo este proceso de renovaci√≥n, mientras a√∫n se sirve la aplicaci√≥n, es una de las principales razones por las que querr√≠as tener un **sistema separado para gestionar el HTTPS** con un TLS Termination Proxy en lugar de simplemente usar los certificados TLS con el servidor de aplicaciones directamente (por ejemplo, Uvicorn).

## Resumen

Tener **HTTPS** es muy importante y bastante **cr√≠tico** en la mayor√≠a de los casos. La mayor parte del esfuerzo que como desarrollador tienes que poner en torno a HTTPS es solo sobre **entender estos conceptos** y c√≥mo funcionan.

Pero una vez que conoces la informaci√≥n b√°sica de **HTTPS para desarrolladores** puedes combinar y configurar f√°cilmente diferentes herramientas para ayudarte a gestionar todo de una manera sencilla.

En algunos de los siguientes cap√≠tulos, te mostrar√© varios ejemplos concretos de c√≥mo configurar **HTTPS** para aplicaciones **FastAPI**. üîí


================================================
File: /docs/es/docs/deployment/index.md
================================================
# Despliegue

Desplegar una aplicaci√≥n **FastAPI** es relativamente f√°cil.

## Qu√© Significa Despliegue

**Desplegar** una aplicaci√≥n significa realizar los pasos necesarios para hacerla **disponible para los usuarios**.

Para una **API web**, normalmente implica ponerla en una **m√°quina remota**, con un **programa de servidor** que proporcione buen rendimiento, estabilidad, etc., para que tus **usuarios** puedan **acceder** a la aplicaci√≥n de manera eficiente y sin interrupciones o problemas.

Esto contrasta con las etapas de **desarrollo**, donde est√°s constantemente cambiando el c√≥digo, rompi√©ndolo y arregl√°ndolo, deteniendo y reiniciando el servidor de desarrollo, etc.

## Estrategias de Despliegue

Hay varias maneras de hacerlo dependiendo de tu caso de uso espec√≠fico y las herramientas que utilices.

Podr√≠as **desplegar un servidor** t√∫ mismo utilizando una combinaci√≥n de herramientas, podr√≠as usar un **servicio en la nube** que hace parte del trabajo por ti, u otras opciones posibles.

Te mostrar√© algunos de los conceptos principales que probablemente deber√≠as tener en cuenta al desplegar una aplicaci√≥n **FastAPI** (aunque la mayor√≠a se aplica a cualquier otro tipo de aplicaci√≥n web).

Ver√°s m√°s detalles a tener en cuenta y algunas de las t√©cnicas para hacerlo en las siguientes secciones. ‚ú®


================================================
File: /docs/es/docs/deployment/manually.md
================================================
# Ejecutar un Servidor Manualmente

## Usa el Comando `fastapi run`

En resumen, usa `fastapi run` para servir tu aplicaci√≥n FastAPI:

<div class="termy">

```console
$ <font color="#4E9A06">fastapi</font> run <u style="text-decoration-style:single">main.py</u>
<font color="#3465A4">INFO    </font> Usando path <font color="#3465A4">main.py</font>
<font color="#3465A4">INFO    </font> Path absoluto resuelto <font color="#75507B">/home/user/code/awesomeapp/</font><font color="#AD7FA8">main.py</font>
<font color="#3465A4">INFO    </font> Buscando una estructura de archivos de paquete desde directorios con archivos <font color="#3465A4">__init__.py</font>
<font color="#3465A4">INFO    </font> Importando desde <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

 ‚ï≠‚îÄ <font color="#8AE234"><b>Archivo de m√≥dulo de Python</b></font> ‚îÄ‚ïÆ
 ‚îÇ                      ‚îÇ
 ‚îÇ  üêç main.py          ‚îÇ
 ‚îÇ                      ‚îÇ
 ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

<font color="#3465A4">INFO    </font> Importando m√≥dulo <font color="#4E9A06">main</font>
<font color="#3465A4">INFO    </font> Encontrada aplicaci√≥n FastAPI importable

 ‚ï≠‚îÄ <font color="#8AE234"><b>Aplicaci√≥n FastAPI importable</b></font> ‚îÄ‚ïÆ
 ‚îÇ                          ‚îÇ
 ‚îÇ  <span style="background-color:#272822"><font color="#FF4689">from</font></span><span style="background-color:#272822"><font color="#F8F8F2"> main </font></span><span style="background-color:#272822"><font color="#FF4689">import</font></span><span style="background-color:#272822"><font color="#F8F8F2"> app</font></span><span style="background-color:#272822">  </span>  ‚îÇ
 ‚îÇ                          ‚îÇ
 ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

<font color="#3465A4">INFO    </font> Usando la cadena de import <font color="#8AE234"><b>main:app</b></font>

 <font color="#4E9A06">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CLI de FastAPI - Modo Producci√≥n ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  Sirviendo en: http://0.0.0.0:8000                    ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  Docs de API: http://0.0.0.0:8000/docs               ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  Corriendo en modo producci√≥n, para desarrollo usa:  ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  </font><font color="#8AE234"><b>fastapi dev</b></font><font color="#4E9A06">                                        ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</font>

<font color="#4E9A06">INFO</font>:     Iniciado el proceso del servidor [<font color="#06989A">2306215</font>]
<font color="#4E9A06">INFO</font>:     Esperando el inicio de la aplicaci√≥n.
<font color="#4E9A06">INFO</font>:     Inicio de la aplicaci√≥n completado.
<font color="#4E9A06">INFO</font>:     Uvicorn corriendo en <b>http://0.0.0.0:8000</b> (Presiona CTRL+C para salir)
```

</div>

Eso funcionar√≠a para la mayor√≠a de los casos. üòé

Podr√≠as usar ese comando, por ejemplo, para iniciar tu app **FastAPI** en un contenedor, en un servidor, etc.

## Servidores ASGI

Vamos a profundizar un poquito en los detalles.

FastAPI usa un est√°ndar para construir frameworks de web y servidores de Python llamado <abbr title="Asynchronous Server Gateway Interface">ASGI</abbr>. FastAPI es un framework web ASGI.

Lo principal que necesitas para ejecutar una aplicaci√≥n **FastAPI** (o cualquier otra aplicaci√≥n ASGI) en una m√°quina de servidor remota es un programa de servidor ASGI como **Uvicorn**, que es el que viene por defecto en el comando `fastapi`.

Hay varias alternativas, incluyendo:

* <a href="https://www.uvicorn.org/" class="external-link" target="_blank">Uvicorn</a>: un servidor ASGI de alto rendimiento.
* <a href="https://hypercorn.readthedocs.io/" class="external-link" target="_blank">Hypercorn</a>: un servidor ASGI compatible con HTTP/2 y Trio entre otras funcionalidades.
* <a href="https://github.com/django/daphne" class="external-link" target="_blank">Daphne</a>: el servidor ASGI construido para Django Channels.
* <a href="https://github.com/emmett-framework/granian" class="external-link" target="_blank">Granian</a>: Un servidor HTTP Rust para aplicaciones en Python.
* <a href="https://unit.nginx.org/howto/fastapi/" class="external-link" target="_blank">NGINX Unit</a>: NGINX Unit es un runtime para aplicaciones web ligero y vers√°til.

## M√°quina Servidor y Programa Servidor

Hay un peque√±o detalle sobre los nombres que hay que tener en cuenta. üí°

La palabra "**servidor**" se utiliza com√∫nmente para referirse tanto al computador remoto/en la nube (la m√°quina f√≠sica o virtual) como al programa que se est√° ejecutando en esa m√°quina (por ejemplo, Uvicorn).

Solo ten en cuenta que cuando leas "servidor" en general, podr√≠a referirse a una de esas dos cosas.

Al referirse a la m√°quina remota, es com√∫n llamarla **servidor**, pero tambi√©n **m√°quina**, **VM** (m√°quina virtual), **nodo**. Todos esos se refieren a alg√∫n tipo de m√°quina remota, generalmente con Linux, donde ejecutas programas.

## Instala el Programa del Servidor

Cuando instalas FastAPI, viene con un servidor de producci√≥n, Uvicorn, y puedes iniciarlo con el comando `fastapi run`.

Pero tambi√©n puedes instalar un servidor ASGI manualmente.

Aseg√∫rate de crear un [entorno virtual](../virtual-environments.md){.internal-link target=_blank}, act√≠valo, y luego puedes instalar la aplicaci√≥n del servidor.

Por ejemplo, para instalar Uvicorn:

<div class="termy">

```console
$ pip install "uvicorn[standard]"

---> 100%
```

</div>

Un proceso similar se aplicar√≠a a cualquier otro programa de servidor ASGI.

/// tip | Consejo

Al a√±adir `standard`, Uvicorn instalar√° y usar√° algunas dependencias adicionales recomendadas.

Eso incluye `uvloop`, el reemplazo de alto rendimiento para `asyncio`, que proporciona un gran impulso de rendimiento en concurrencia.

Cuando instalas FastAPI con algo como `pip install "fastapi[standard]"` ya obtienes `uvicorn[standard]` tambi√©n.

///

## Ejecuta el Programa del Servidor

Si instalaste un servidor ASGI manualmente, normalmente necesitar√≠as pasar una cadena de import en un formato especial para que importe tu aplicaci√≥n FastAPI:

<div class="termy">

```console
$ uvicorn main:app --host 0.0.0.0 --port 80

<span style="color: green;">INFO</span>:     Uvicorn corriendo en http://0.0.0.0:80 (Presiona CTRL+C para salir)
```

</div>

/// note | Nota

El comando `uvicorn main:app` se refiere a:

* `main`: el archivo `main.py` (el "m√≥dulo" de Python).
* `app`: el objeto creado dentro de `main.py` con la l√≠nea `app = FastAPI()`.

Es equivalente a:

```Python
from main import app
```

///

Cada programa alternativo de servidor ASGI tendr√≠a un comando similar, puedes leer m√°s en su respectiva documentaci√≥n.

/// warning | Advertencia

Uvicorn y otros servidores soportan una opci√≥n `--reload` que es √∫til durante el desarrollo.

La opci√≥n `--reload` consume muchos m√°s recursos, es m√°s inestable, etc.

Ayuda mucho durante el **desarrollo**, pero **no** deber√≠as usarla en **producci√≥n**.

///

## Conceptos de Despliegue

Estos ejemplos ejecutan el programa del servidor (por ejemplo, Uvicorn), iniciando **un solo proceso**, escuchando en todas las IPs (`0.0.0.0`) en un puerto predefinido (por ejemplo, `80`).

Esta es la idea b√°sica. Pero probablemente querr√°s encargarte de algunas cosas adicionales, como:

* Seguridad - HTTPS
* Ejecuci√≥n en el arranque
* Reinicios
* Replicaci√≥n (el n√∫mero de procesos ejecut√°ndose)
* Memoria
* Pasos previos antes de comenzar

Te contar√© m√°s sobre cada uno de estos conceptos, c√≥mo pensarlos, y algunos ejemplos concretos con estrategias para manejarlos en los pr√≥ximos cap√≠tulos. üöÄ


================================================
File: /docs/es/docs/deployment/server-workers.md
================================================
# Servidores Workers - Uvicorn con Workers

Vamos a revisar esos conceptos de despliegue de antes:

* Seguridad - HTTPS
* Ejecuci√≥n al inicio
* Reinicios
* **Replicaci√≥n (el n√∫mero de procesos en ejecuci√≥n)**
* Memoria
* Pasos previos antes de empezar

Hasta este punto, con todos los tutoriales en la documentaci√≥n, probablemente has estado ejecutando un **programa de servidor**, por ejemplo, usando el comando `fastapi`, que ejecuta Uvicorn, corriendo un **solo proceso**.

Al desplegar aplicaciones probablemente querr√°s tener algo de **replicaci√≥n de procesos** para aprovechar **m√∫ltiples n√∫cleos** y poder manejar m√°s requests.

Como viste en el cap√≠tulo anterior sobre [Conceptos de Despliegue](concepts.md){.internal-link target=_blank}, hay m√∫ltiples estrategias que puedes usar.

Aqu√≠ te mostrar√© c√≥mo usar **Uvicorn** con **worker processes** usando el comando `fastapi` o el comando `uvicorn` directamente.

/// info | Informaci√≥n

Si est√°s usando contenedores, por ejemplo con Docker o Kubernetes, te contar√© m√°s sobre eso en el pr√≥ximo cap√≠tulo: [FastAPI en Contenedores - Docker](docker.md){.internal-link target=_blank}.

En particular, cuando corras en **Kubernetes** probablemente **no** querr√°s usar workers y en cambio correr **un solo proceso de Uvicorn por contenedor**, pero te contar√© sobre eso m√°s adelante en ese cap√≠tulo.

///

## M√∫ltiples Workers

Puedes iniciar m√∫ltiples workers con la opci√≥n de l√≠nea de comando `--workers`:

//// tab | `fastapi`

Si usas el comando `fastapi`:

<div class="termy">

```console
$ <pre> <font color="#4E9A06">fastapi</font> run --workers 4 <u style="text-decoration-style:single">main.py</u>
<font color="#3465A4">INFO    </font> Using path <font color="#3465A4">main.py</font>
<font color="#3465A4">INFO    </font> Resolved absolute path <font color="#75507B">/home/user/code/awesomeapp/</font><font color="#AD7FA8">main.py</font>
<font color="#3465A4">INFO    </font> Searching for package file structure from directories with <font color="#3465A4">__init__.py</font> files
<font color="#3465A4">INFO    </font> Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

 ‚ï≠‚îÄ <font color="#8AE234"><b>Python module file</b></font> ‚îÄ‚ïÆ
 ‚îÇ                      ‚îÇ
 ‚îÇ  üêç main.py          ‚îÇ
 ‚îÇ                      ‚îÇ
 ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

<font color="#3465A4">INFO    </font> Importing module <font color="#4E9A06">main</font>
<font color="#3465A4">INFO    </font> Found importable FastAPI app

 ‚ï≠‚îÄ <font color="#8AE234"><b>Importable FastAPI app</b></font> ‚îÄ‚ïÆ
 ‚îÇ                          ‚îÇ
 ‚îÇ  <span style="background-color:#272822"><font color="#FF4689">from</font></span><span style="background-color:#272822"><font color="#F8F8F2"> main </font></span><span style="background-color:#272822"><font color="#FF4689">import</font></span><span style="background-color:#272822"><font color="#F8F8F2"> app</font></span><span style="background-color:#272822">  </span>  ‚îÇ
 ‚îÇ                          ‚îÇ
 ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

<font color="#3465A4">INFO    </font> Using import string <font color="#8AE234"><b>main:app</b></font>

 <font color="#4E9A06">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FastAPI CLI - Production mode ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  Serving at: http://0.0.0.0:8000                    ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  API docs: http://0.0.0.0:8000/docs                 ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  Running in production mode, for development use:   ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚îÇ  </font><font color="#8AE234"><b>fastapi dev</b></font><font color="#4E9A06">                                        ‚îÇ</font>
 <font color="#4E9A06">‚îÇ                                                     ‚îÇ</font>
 <font color="#4E9A06">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</font>

<font color="#4E9A06">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8000</b> (Press CTRL+C to quit)
<font color="#4E9A06">INFO</font>:     Started parent process [<font color="#34E2E2"><b>27365</b></font>]
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27368</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27369</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27370</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.
<font color="#4E9A06">INFO</font>:     Started server process [<font color="#06989A">27367</font>]
<font color="#4E9A06">INFO</font>:     Waiting for application startup.
<font color="#4E9A06">INFO</font>:     Application startup complete.
</pre>
```

</div>

////

//// tab | `uvicorn`

Si prefieres usar el comando `uvicorn` directamente:

<div class="termy">

```console
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
<font color="#A6E22E">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit)
<font color="#A6E22E">INFO</font>:     Started parent process [<font color="#A1EFE4"><b>27365</b></font>]
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27368</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27369</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27370</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27367</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
```

</div>

////

La √∫nica opci√≥n nueva aqu√≠ es `--workers` indicando a Uvicorn que inicie 4 worker processes.

Tambi√©n puedes ver que muestra el **PID** de cada proceso, `27365` para el proceso padre (este es el **gestor de procesos**) y uno para cada worker process: `27368`, `27369`, `27370`, y `27367`.

## Conceptos de Despliegue

Aqu√≠ viste c√≥mo usar m√∫ltiples **workers** para **paralelizar** la ejecuci√≥n de la aplicaci√≥n, aprovechar los **m√∫ltiples n√∫cleos** del CPU, y poder servir **m√°s requests**.

De la lista de conceptos de despliegue de antes, usar workers ayudar√≠a principalmente con la parte de **replicaci√≥n**, y un poquito con los **reinicios**, pero a√∫n necesitas encargarte de los otros:

* **Seguridad - HTTPS**
* **Ejecuci√≥n al inicio**
* ***Reinicios***
* Replicaci√≥n (el n√∫mero de procesos en ejecuci√≥n)
* **Memoria**
* **Pasos previos antes de empezar**

## Contenedores y Docker

En el pr√≥ximo cap√≠tulo sobre [FastAPI en Contenedores - Docker](docker.md){.internal-link target=_blank} te explicar√© algunas estrategias que podr√≠as usar para manejar los otros **conceptos de despliegue**.

Te mostrar√© c√≥mo **construir tu propia imagen desde cero** para ejecutar un solo proceso de Uvicorn. Es un proceso sencillo y probablemente es lo que querr√≠as hacer al usar un sistema de gesti√≥n de contenedores distribuido como **Kubernetes**.

## Resumen

Puedes usar m√∫ltiples worker processes con la opci√≥n CLI `--workers` con los comandos `fastapi` o `uvicorn` para aprovechar los **CPUs de m√∫ltiples n√∫cleos**, para ejecutar **m√∫ltiples procesos en paralelo**.

Podr√≠as usar estas herramientas e ideas si est√°s instalando **tu propio sistema de despliegue** mientras te encargas t√∫ mismo de los otros conceptos de despliegue.

Revisa el pr√≥ximo cap√≠tulo para aprender sobre **FastAPI** con contenedores (por ejemplo, Docker y Kubernetes). Ver√°s que esas herramientas tienen formas sencillas de resolver los otros **conceptos de despliegue** tambi√©n. ‚ú®


================================================
File: /docs/es/docs/deployment/versions.md
================================================
# Sobre las versiones de FastAPI

**FastAPI** ya se est√° utilizando en producci√≥n en muchas aplicaciones y sistemas. Y la cobertura de tests se mantiene al 100%. Pero su desarrollo sigue avanzando r√°pidamente.

Se a√±aden nuevas funcionalidades con frecuencia, se corrigen bugs regularmente, y el c√≥digo sigue mejorando continuamente.

Por eso las versiones actuales siguen siendo `0.x.x`, esto refleja que cada versi√≥n podr√≠a tener potencialmente cambios incompatibles. Esto sigue las convenciones de <a href="https://semver.org/" class="external-link" target="_blank">Semantic Versioning</a>.

Puedes crear aplicaciones de producci√≥n con **FastAPI** ahora mismo (y probablemente ya lo has estado haciendo desde hace alg√∫n tiempo), solo debes asegurarte de que utilizas una versi√≥n que funciona correctamente con el resto de tu c√≥digo.

## Fijar tu versi√≥n de `fastapi`

Lo primero que debes hacer es "fijar" la versi√≥n de **FastAPI** que est√°s usando a la versi√≥n espec√≠fica m√°s reciente que sabes que funciona correctamente para tu aplicaci√≥n.

Por ejemplo, digamos que est√°s utilizando la versi√≥n `0.112.0` en tu aplicaci√≥n.

Si usas un archivo `requirements.txt` podr√≠as especificar la versi√≥n con:

```txt
fastapi[standard]==0.112.0
```

eso significar√≠a que usar√≠as exactamente la versi√≥n `0.112.0`.

O tambi√©n podr√≠as fijarla con:

```txt
fastapi[standard]>=0.112.0,<0.113.0
```

eso significar√≠a que usar√≠as las versiones `0.112.0` o superiores, pero menores que `0.113.0`, por ejemplo, una versi√≥n `0.112.2` todav√≠a ser√≠a aceptada.

Si utilizas cualquier otra herramienta para gestionar tus instalaciones, como `uv`, Poetry, Pipenv, u otras, todas tienen una forma que puedes usar para definir versiones espec√≠ficas para tus paquetes.

## Versiones disponibles

Puedes ver las versiones disponibles (por ejemplo, para revisar cu√°l es la m√°s reciente) en las [Release Notes](../release-notes.md){.internal-link target=_blank}.

## Sobre las versiones

Siguiendo las convenciones del Semantic Versioning, cualquier versi√≥n por debajo de `1.0.0` podr√≠a potencialmente a√±adir cambios incompatibles.

FastAPI tambi√©n sigue la convenci√≥n de que cualquier cambio de versi√≥n "PATCH" es para correcci√≥n de bugs y cambios no incompatibles.

/// tip | Consejo

El "PATCH" es el √∫ltimo n√∫mero, por ejemplo, en `0.2.3`, la versi√≥n PATCH es `3`.

///

As√≠ que deber√≠as poder fijar a una versi√≥n como:

```txt
fastapi>=0.45.0,<0.46.0
```

Los cambios incompatibles y nuevas funcionalidades se a√±aden en versiones "MINOR".

/// tip | Consejo

El "MINOR" es el n√∫mero en el medio, por ejemplo, en `0.2.3`, la versi√≥n MINOR es `2`.

///

## Actualizando las versiones de FastAPI

Deber√≠as a√±adir tests para tu aplicaci√≥n.

Con **FastAPI** es muy f√°cil (gracias a Starlette), revisa la documentaci√≥n: [Testing](../tutorial/testing.md){.internal-link target=_blank}

Despu√©s de tener tests, puedes actualizar la versi√≥n de **FastAPI** a una m√°s reciente, y asegurarte de que todo tu c√≥digo est√° funcionando correctamente ejecutando tus tests.

Si todo est√° funcionando, o despu√©s de hacer los cambios necesarios, y todos tus tests pasan, entonces puedes fijar tu `fastapi` a esa nueva versi√≥n m√°s reciente.

## Sobre Starlette

No deber√≠as fijar la versi√≥n de `starlette`.

Diferentes versiones de **FastAPI** utilizar√°n una versi√≥n m√°s reciente espec√≠fica de Starlette.

As√≠ que, puedes simplemente dejar que **FastAPI** use la versi√≥n correcta de Starlette.

## Sobre Pydantic

Pydantic incluye los tests para **FastAPI** con sus propios tests, as√≠ que nuevas versiones de Pydantic (por encima de `1.0.0`) siempre son compatibles con FastAPI.

Puedes fijar Pydantic a cualquier versi√≥n por encima de `1.0.0` que funcione para ti.

Por ejemplo:

```txt
pydantic>=2.7.0,<3.0.0
```


================================================
File: /docs/es/docs/how-to/conditional-openapi.md
================================================
# OpenAPI Condicional

Si lo necesitaras, podr√≠as usar configuraciones y variables de entorno para configurar OpenAPI condicionalmente seg√∫n el entorno, e incluso desactivarlo por completo.

## Sobre seguridad, APIs y documentaci√≥n

Ocultar las interfaces de usuario de la documentaci√≥n en producci√≥n *no deber√≠a* ser la forma de proteger tu API.

Eso no a√±ade ninguna seguridad extra a tu API, las *path operations* seguir√°n estando disponibles donde est√°n.

Si hay una falla de seguridad en tu c√≥digo, seguir√° existiendo.

Ocultar la documentaci√≥n solo hace que sea m√°s dif√≠cil entender c√≥mo interactuar con tu API y podr√≠a dificultar m√°s depurarla en producci√≥n. Podr√≠a considerarse simplemente una forma de <a href="https://en.wikipedia.org/wiki/Security_through_obscurity" class="external-link" target="_blank">Seguridad mediante oscuridad</a>.

Si quieres asegurar tu API, hay varias cosas mejores que puedes hacer, por ejemplo:

* Aseg√∫rate de tener modelos Pydantic bien definidos para tus request bodies y responses.
* Configura los permisos y roles necesarios usando dependencias.
* Nunca guardes contrase√±as en texto plano, solo hashes de contrase√±as.
* Implementa y utiliza herramientas criptogr√°ficas bien conocidas, como Passlib y JWT tokens, etc.
* A√±ade controles de permisos m√°s detallados con OAuth2 scopes donde sea necesario.
* ...etc.

No obstante, podr√≠as tener un caso de uso muy espec√≠fico donde realmente necesites desactivar la documentaci√≥n de la API para alg√∫n entorno (por ejemplo, para producci√≥n) o dependiendo de configuraciones de variables de entorno.

## OpenAPI condicional desde configuraciones y variables de entorno

Puedes usar f√°cilmente las mismas configuraciones de Pydantic para configurar tu OpenAPI generado y las interfaces de usuario de la documentaci√≥n.

Por ejemplo:

{* ../../docs_src/conditional_openapi/tutorial001.py hl[6,11] *}

Aqu√≠ declaramos la configuraci√≥n `openapi_url` con el mismo valor predeterminado de `"/openapi.json"`.

Y luego la usamos al crear la app de `FastAPI`.

Entonces podr√≠as desactivar OpenAPI (incluyendo las UI de documentaci√≥n) configurando la variable de entorno `OPENAPI_URL` a una string vac√≠a, as√≠:

<div class="termy">

```console
$ OPENAPI_URL= uvicorn main:app

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

</div>

Luego, si vas a las URLs en `/openapi.json`, `/docs`, o `/redoc`, solo obtendr√°s un error `404 Not Found` como:

```JSON
{
    "detail": "Not Found"
}
```


================================================
File: /docs/es/docs/how-to/configure-swagger-ui.md
================================================
# Configurar Swagger UI

Puedes configurar algunos <a href="https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/" class="external-link" target="_blank">par√°metros adicionales de Swagger UI</a>.

Para configurarlos, pasa el argumento `swagger_ui_parameters` al crear el objeto de la app `FastAPI()` o a la funci√≥n `get_swagger_ui_html()`.

`swagger_ui_parameters` recibe un diccionario con las configuraciones pasadas directamente a Swagger UI.

FastAPI convierte las configuraciones a **JSON** para hacerlas compatibles con JavaScript, ya que eso es lo que Swagger UI necesita.

## Desactivar el resaltado de sintaxis

Por ejemplo, podr√≠as desactivar el resaltado de sintaxis en Swagger UI.

Sin cambiar la configuraci√≥n, el resaltado de sintaxis est√° activado por defecto:

<img src="/img/tutorial/extending-openapi/image02.png">

Pero puedes desactivarlo estableciendo `syntaxHighlight` en `False`:

{* ../../docs_src/configure_swagger_ui/tutorial001.py hl[3] *}

...y entonces Swagger UI ya no mostrar√° el resaltado de sintaxis:

<img src="/img/tutorial/extending-openapi/image03.png">

## Cambiar el tema

De la misma manera, podr√≠as configurar el tema del resaltado de sintaxis con la clave `"syntaxHighlight.theme"` (ten en cuenta que tiene un punto en el medio):

{* ../../docs_src/configure_swagger_ui/tutorial002.py hl[3] *}

Esa configuraci√≥n cambiar√≠a el tema de color del resaltado de sintaxis:

<img src="/img/tutorial/extending-openapi/image04.png">

## Cambiar los par√°metros predeterminados de Swagger UI

FastAPI incluye algunos par√°metros de configuraci√≥n predeterminados apropiados para la mayor√≠a de los casos de uso.

Incluye estas configuraciones predeterminadas:

{* ../../fastapi/openapi/docs.py ln[8:23] hl[17:23] *}

Puedes sobrescribir cualquiera de ellos estableciendo un valor diferente en el argumento `swagger_ui_parameters`.

Por ejemplo, para desactivar `deepLinking` podr√≠as pasar estas configuraciones a `swagger_ui_parameters`:

{* ../../docs_src/configure_swagger_ui/tutorial003.py hl[3] *}

## Otros par√°metros de Swagger UI

Para ver todas las dem√°s configuraciones posibles que puedes usar, lee la <a href="https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/" class="external-link" target="_blank">documentaci√≥n oficial de los par√°metros de Swagger UI</a>.

## Configuraciones solo de JavaScript

Swagger UI tambi√©n permite otras configuraciones que son objetos **solo de JavaScript** (por ejemplo, funciones de JavaScript).

FastAPI tambi√©n incluye estas configuraciones `presets` solo de JavaScript:

```JavaScript
presets: [
    SwaggerUIBundle.presets.apis,
    SwaggerUIBundle.SwaggerUIStandalonePreset
]
```

Estos son objetos de **JavaScript**, no strings, por lo que no puedes pasarlos directamente desde c√≥digo de Python.

Si necesitas usar configuraciones solo de JavaScript como esas, puedes usar uno de los m√©todos anteriores. Sobrescribe toda la *path operation* de Swagger UI y escribe manualmente cualquier JavaScript que necesites.


================================================
File: /docs/es/docs/how-to/custom-docs-ui-assets.md
================================================
# Recursos Est√°ticos Personalizados para la Docs UI (Self-Hosting)

La documentaci√≥n de la API utiliza **Swagger UI** y **ReDoc**, y cada uno de estos necesita algunos archivos JavaScript y CSS.

Por defecto, esos archivos se sirven desde un <abbr title="Content Delivery Network: Un servicio, normalmente compuesto de varios servidores, que proporciona archivos est√°ticos, como JavaScript y CSS. Se utiliza com√∫nmente para servir esos archivos desde el servidor m√°s cercano al cliente, mejorando el rendimiento.">CDN</abbr>.

Pero es posible personalizarlo, puedes establecer un CDN espec√≠fico, o servir los archivos t√∫ mismo.

## CDN Personalizado para JavaScript y CSS

Digamos que quieres usar un <abbr title="Content Delivery Network">CDN</abbr> diferente, por ejemplo, quieres usar `https://unpkg.com/`.

Esto podr√≠a ser √∫til si, por ejemplo, vives en un pa√≠s que restringe algunas URLs.

### Desactiva la documentaci√≥n autom√°tica

El primer paso es desactivar la documentaci√≥n autom√°tica, ya que por defecto, esos usan el CDN predeterminado.

Para desactivarlos, establece sus URLs en `None` cuando crees tu aplicaci√≥n de `FastAPI`:

{* ../../docs_src/custom_docs_ui/tutorial001.py hl[8] *}

### Incluye la documentaci√≥n personalizada

Ahora puedes crear las *path operations* para la documentaci√≥n personalizada.

Puedes reutilizar las funciones internas de FastAPI para crear las p√°ginas HTML para la documentaci√≥n, y pasarles los argumentos necesarios:

* `openapi_url`: la URL donde la p√°gina HTML para la documentaci√≥n puede obtener el OpenAPI esquema de tu API. Puedes usar aqu√≠ el atributo `app.openapi_url`.
* `title`: el t√≠tulo de tu API.
* `oauth2_redirect_url`: puedes usar `app.swagger_ui_oauth2_redirect_url` aqu√≠ para usar el valor predeterminado.
* `swagger_js_url`: la URL donde el HTML para tu documentaci√≥n de Swagger UI puede obtener el archivo **JavaScript**. Esta es la URL personalizada del CDN.
* `swagger_css_url`: la URL donde el HTML para tu documentaci√≥n de Swagger UI puede obtener el archivo **CSS**. Esta es la URL personalizada del CDN.

Y de manera similar para ReDoc...

{* ../../docs_src/custom_docs_ui/tutorial001.py hl[2:6,11:19,22:24,27:33] *}

/// tip | Consejo

La *path operation* para `swagger_ui_redirect` es una herramienta cuando utilizas OAuth2.

Si integras tu API con un proveedor OAuth2, podr√°s autenticarte y regresar a la documentaci√≥n de la API con las credenciales adquiridas. E interactuar con ella usando la autenticaci√≥n real de OAuth2.

Swagger UI lo manejar√° detr√°s de escena para ti, pero necesita este auxiliar de "redirecci√≥n".

///

### Crea una *path operation* para probarlo

Ahora, para poder probar que todo funciona, crea una *path operation*:

{* ../../docs_src/custom_docs_ui/tutorial001.py hl[36:38] *}

### Pru√©balo

Ahora, deber√≠as poder ir a tu documentaci√≥n en <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>, y recargar la p√°gina, cargar√° esos recursos desde el nuevo CDN.

## Self-hosting de JavaScript y CSS para la documentaci√≥n

El self-hosting de JavaScript y CSS podr√≠a ser √∫til si, por ejemplo, necesitas que tu aplicaci√≥n siga funcionando incluso offline, sin acceso a Internet, o en una red local.

Aqu√≠ ver√°s c√≥mo servir esos archivos t√∫ mismo, en la misma aplicaci√≥n de FastAPI, y configurar la documentaci√≥n para usarla.

### Estructura de archivos del proyecto

Supongamos que la estructura de archivos de tu proyecto se ve as√≠:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py
```

Ahora crea un directorio para almacenar esos archivos est√°ticos.

Tu nueva estructura de archivos podr√≠a verse as√≠:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ static/
```

### Descarga los archivos

Descarga los archivos est√°ticos necesarios para la documentaci√≥n y ponlos en ese directorio `static/`.

Probablemente puedas hacer clic derecho en cada enlace y seleccionar una opci√≥n similar a `Guardar enlace como...`.

**Swagger UI** utiliza los archivos:

* <a href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js" class="external-link" target="_blank">`swagger-ui-bundle.js`</a>
* <a href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css" class="external-link" target="_blank">`swagger-ui.css`</a>

Y **ReDoc** utiliza el archivo:

* <a href="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js" class="external-link" target="_blank">`redoc.standalone.js`</a>

Despu√©s de eso, tu estructura de archivos podr√≠a verse as√≠:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ static
    ‚îú‚îÄ‚îÄ redoc.standalone.js
    ‚îú‚îÄ‚îÄ swagger-ui-bundle.js
    ‚îî‚îÄ‚îÄ swagger-ui.css
```

### Sirve los archivos est√°ticos

* Importa `StaticFiles`.
* "Monta" una instance de `StaticFiles()` en un path espec√≠fico.

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[7,11] *}

### Prueba los archivos est√°ticos

Inicia tu aplicaci√≥n y ve a <a href="http://127.0.0.1:8000/static/redoc.standalone.js" class="external-link" target="_blank">http://127.0.0.1:8000/static/redoc.standalone.js</a>.

Deber√≠as ver un archivo JavaScript muy largo de **ReDoc**.

Podr√≠a comenzar con algo como:

```JavaScript
/*!
 * ReDoc - OpenAPI/Swagger-generated API Reference Documentation
 * -------------------------------------------------------------
 *   Version: "2.0.0-rc.18"
 *   Repo: https://github.com/Redocly/redoc
 */
!function(e,t){"object"==typeof exports&&"object"==typeof m

...
```

Eso confirma que puedes servir archivos est√°ticos desde tu aplicaci√≥n, y que colocaste los archivos est√°ticos para la documentaci√≥n en el lugar correcto.

Ahora podemos configurar la aplicaci√≥n para usar esos archivos est√°ticos para la documentaci√≥n.

### Desactiva la documentaci√≥n autom√°tica para archivos est√°ticos

Igual que cuando usas un CDN personalizado, el primer paso es desactivar la documentaci√≥n autom√°tica, ya que esos usan el CDN por defecto.

Para desactivarlos, establece sus URLs en `None` cuando crees tu aplicaci√≥n de `FastAPI`:

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[9] *}

### Incluye la documentaci√≥n personalizada para archivos est√°ticos

Y de la misma manera que con un CDN personalizado, ahora puedes crear las *path operations* para la documentaci√≥n personalizada.

Nuevamente, puedes reutilizar las funciones internas de FastAPI para crear las p√°ginas HTML para la documentaci√≥n, y pasarles los argumentos necesarios:

* `openapi_url`: la URL donde la p√°gina HTML para la documentaci√≥n puede obtener el OpenAPI esquema de tu API. Puedes usar aqu√≠ el atributo `app.openapi_url`.
* `title`: el t√≠tulo de tu API.
* `oauth2_redirect_url`: puedes usar `app.swagger_ui_oauth2_redirect_url` aqu√≠ para usar el valor predeterminado.
* `swagger_js_url`: la URL donde el HTML para tu documentaci√≥n de Swagger UI puede obtener el archivo **JavaScript**. **Este es el que tu propia aplicaci√≥n est√° sirviendo ahora**.
* `swagger_css_url`: la URL donde el HTML para tu documentaci√≥n de Swagger UI puede obtener el archivo **CSS**. **Este es el que tu propia aplicaci√≥n est√° sirviendo ahora**.

Y de manera similar para ReDoc...

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[2:6,14:22,25:27,30:36] *}

/// tip | Consejo

La *path operation* para `swagger_ui_redirect` es una herramienta cuando utilizas OAuth2.

Si integras tu API con un proveedor OAuth2, podr√°s autenticarte y regresar a la documentaci√≥n de la API con las credenciales adquiridas. Y interactuar con ella usando la autenticaci√≥n real de OAuth2.

Swagger UI lo manejar√° detr√°s de escena para ti, pero necesita este auxiliar de "redirecci√≥n".

///

### Crea una *path operation* para probar archivos est√°ticos

Ahora, para poder probar que todo funciona, crea una *path operation*:

{* ../../docs_src/custom_docs_ui/tutorial002.py hl[39:41] *}

### Prueba la UI de Archivos Est√°ticos

Ahora, deber√≠as poder desconectar tu WiFi, ir a tu documentaci√≥n en <a href="http://127.0.0.1:8000/docs" class="external-link" target="_blank">http://127.0.0.1:8000/docs</a>, y recargar la p√°gina.

E incluso sin Internet, podr√°s ver la documentaci√≥n de tu API e interactuar con ella.


================================================
File: /docs/es/docs/how-to/custom-request-and-route.md
================================================
# Clase personalizada de Request y APIRoute

En algunos casos, puede que quieras sobrescribir la l√≥gica utilizada por las clases `Request` y `APIRoute`.

En particular, esta puede ser una buena alternativa a la l√≥gica en un middleware.

Por ejemplo, si quieres leer o manipular el request body antes de que sea procesado por tu aplicaci√≥n.

/// danger | Advertencia

Esta es una funcionalidad "avanzada".

Si apenas est√°s comenzando con **FastAPI**, quiz√°s quieras saltar esta secci√≥n.

///

## Casos de uso

Algunos casos de uso incluyen:

* Convertir cuerpos de requests no-JSON a JSON (por ejemplo, <a href="https://msgpack.org/index.html" class="external-link" target="_blank">`msgpack`</a>).
* Descomprimir cuerpos de requests comprimidos con gzip.
* Registrar autom√°ticamente todos los request bodies.

## Manejo de codificaciones personalizadas de request body

Veamos c√≥mo hacer uso de una subclase personalizada de `Request` para descomprimir requests gzip.

Y una subclase de `APIRoute` para usar esa clase de request personalizada.

### Crear una clase personalizada `GzipRequest`

/// tip | Consejo

Este es un ejemplo sencillo para demostrar c√≥mo funciona. Si necesitas soporte para Gzip, puedes usar el [`GzipMiddleware`](../advanced/middleware.md#gzipmiddleware){.internal-link target=_blank} proporcionado.

///

Primero, creamos una clase `GzipRequest`, que sobrescribir√° el m√©todo `Request.body()` para descomprimir el cuerpo si hay un header apropiado.

Si no hay `gzip` en el header, no intentar√° descomprimir el cuerpo.

De esa manera, la misma clase de ruta puede manejar requests comprimidos con gzip o no comprimidos.

{* ../../docs_src/custom_request_and_route/tutorial001.py hl[8:15] *}

### Crear una clase personalizada `GzipRoute`

A continuaci√≥n, creamos una subclase personalizada de `fastapi.routing.APIRoute` que har√° uso de `GzipRequest`.

Esta vez, sobrescribir√° el m√©todo `APIRoute.get_route_handler()`.

Este m√©todo devuelve una funci√≥n. Y esa funci√≥n es la que recibir√° un request y devolver√° un response.

Aqu√≠ lo usamos para crear un `GzipRequest` a partir del request original.

{* ../../docs_src/custom_request_and_route/tutorial001.py hl[18:26] *}

/// note | Detalles t√©cnicos

Un `Request` tiene un atributo `request.scope`, que es simplemente un `dict` de Python que contiene los metadatos relacionados con el request.

Un `Request` tambi√©n tiene un `request.receive`, que es una funci√≥n para "recibir" el cuerpo del request.

El `dict` `scope` y la funci√≥n `receive` son ambos parte de la especificaci√≥n ASGI.

Y esas dos cosas, `scope` y `receive`, son lo que se necesita para crear una nueva *Request instance*.

Para aprender m√°s sobre el `Request`, revisa <a href="https://www.starlette.io/requests/" class="external-link" target="_blank">la documentaci√≥n de Starlette sobre Requests</a>.

///

La √∫nica cosa que la funci√≥n devuelta por `GzipRequest.get_route_handler` hace diferente es convertir el `Request` en un `GzipRequest`.

Haciendo esto, nuestro `GzipRequest` se encargar√° de descomprimir los datos (si es necesario) antes de pasarlos a nuestras *path operations*.

Despu√©s de eso, toda la l√≥gica de procesamiento es la misma.

Pero debido a nuestros cambios en `GzipRequest.body`, el request body se descomprimir√° autom√°ticamente cuando sea cargado por **FastAPI** si es necesario.

## Accediendo al request body en un manejador de excepciones

/// tip | Consejo

Para resolver este mismo problema, probablemente sea mucho m√°s f√°cil usar el `body` en un manejador personalizado para `RequestValidationError` ([Manejo de Errores](../tutorial/handling-errors.md#use-the-requestvalidationerror-body){.internal-link target=_blank}).

Pero este ejemplo sigue siendo v√°lido y muestra c√≥mo interactuar con los componentes internos.

///

Tambi√©n podemos usar este mismo enfoque para acceder al request body en un manejador de excepciones.

Todo lo que necesitamos hacer es manejar el request dentro de un bloque `try`/`except`:

{* ../../docs_src/custom_request_and_route/tutorial002.py hl[13,15] *}

Si ocurre una excepci√≥n, la `Request instance` a√∫n estar√° en el alcance, as√≠ que podemos leer y hacer uso del request body cuando manejamos el error:

{* ../../docs_src/custom_request_and_route/tutorial002.py hl[16:18] *}

## Clase personalizada `APIRoute` en un router

Tambi√©n puedes establecer el par√°metro `route_class` de un `APIRouter`:

{* ../../docs_src/custom_request_and_route/tutorial003.py hl[26] *}

En este ejemplo, las *path operations* bajo el `router` usar√°n la clase personalizada `TimedRoute`, y tendr√°n un header `X-Response-Time` extra en el response con el tiempo que tom√≥ generar el response:

{* ../../docs_src/custom_request_and_route/tutorial003.py hl[13:20] *}


================================================
File: /docs/es/docs/how-to/extending-openapi.md
================================================
# Extender OpenAPI

Hay algunos casos en los que podr√≠as necesitar modificar el esquema de OpenAPI generado.

En esta secci√≥n ver√°s c√≥mo hacerlo.

## El proceso normal

El proceso normal (por defecto) es el siguiente.

Una aplicaci√≥n (instance) de `FastAPI` tiene un m√©todo `.openapi()` que se espera que devuelva el esquema de OpenAPI.

Como parte de la creaci√≥n del objeto de la aplicaci√≥n, se registra una *path operation* para `/openapi.json` (o para lo que sea que configures tu `openapi_url`).

Simplemente devuelve un response JSON con el resultado del m√©todo `.openapi()` de la aplicaci√≥n.

Por defecto, lo que hace el m√©todo `.openapi()` es revisar la propiedad `.openapi_schema` para ver si tiene contenido y devolverlo.

Si no lo tiene, lo genera usando la funci√≥n de utilidad en `fastapi.openapi.utils.get_openapi`.

Y esa funci√≥n `get_openapi()` recibe como par√°metros:

* `title`: El t√≠tulo de OpenAPI, mostrado en la documentaci√≥n.
* `version`: La versi√≥n de tu API, por ejemplo `2.5.0`.
* `openapi_version`: La versi√≥n de la especificaci√≥n OpenAPI utilizada. Por defecto, la m√°s reciente: `3.1.0`.
* `summary`: Un breve resumen de la API.
* `description`: La descripci√≥n de tu API, esta puede incluir markdown y se mostrar√° en la documentaci√≥n.
* `routes`: Una list de rutas, estas son cada una de las *path operations* registradas. Se toman de `app.routes`.

/// info | Informaci√≥n

El par√°metro `summary` est√° disponible en OpenAPI 3.1.0 y versiones superiores, soportado por FastAPI 0.99.0 y superiores.

///

## Sobrescribir los valores por defecto

Usando la informaci√≥n anterior, puedes usar la misma funci√≥n de utilidad para generar el esquema de OpenAPI y sobrescribir cada parte que necesites.

Por ejemplo, vamos a a√±adir <a href="https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#x-logo" class="external-link" target="_blank">la extensi√≥n OpenAPI de ReDoc para incluir un logo personalizado</a>.

### **FastAPI** normal

Primero, escribe toda tu aplicaci√≥n **FastAPI** como normalmente:

{* ../../docs_src/extending_openapi/tutorial001.py hl[1,4,7:9] *}

### Generar el esquema de OpenAPI

Luego, usa la misma funci√≥n de utilidad para generar el esquema de OpenAPI, dentro de una funci√≥n `custom_openapi()`:

{* ../../docs_src/extending_openapi/tutorial001.py hl[2,15:21] *}

### Modificar el esquema de OpenAPI

Ahora puedes a√±adir la extensi√≥n de ReDoc, agregando un `x-logo` personalizado al "objeto" `info` en el esquema de OpenAPI:

{* ../../docs_src/extending_openapi/tutorial001.py hl[22:24] *}

### Cachear el esquema de OpenAPI

Puedes usar la propiedad `.openapi_schema` como un "cache", para almacenar tu esquema generado.

De esa forma, tu aplicaci√≥n no tendr√° que generar el esquema cada vez que un usuario abra la documentaci√≥n de tu API.

Se generar√° solo una vez, y luego se usar√° el mismo esquema cacheado para las siguientes requests.

{* ../../docs_src/extending_openapi/tutorial001.py hl[13:14,25:26] *}

### Sobrescribir el m√©todo

Ahora puedes reemplazar el m√©todo `.openapi()` por tu nueva funci√≥n.

{* ../../docs_src/extending_openapi/tutorial001.py hl[29] *}

### Revisa

Una vez que vayas a <a href="http://127.0.0.1:8000/redoc" class="external-link" target="_blank">http://127.0.0.1:8000/redoc</a> ver√°s que est√°s usando tu logo personalizado (en este ejemplo, el logo de **FastAPI**):

<img src="/img/tutorial/extending-openapi/image01.png">


================================================
File: /docs/es/docs/how-to/general.md
================================================
# General - C√≥mo Hacer - Recetas

Aqu√≠ tienes varias indicaciones hacia otros lugares en la documentaci√≥n, para preguntas generales o frecuentes.

## Filtrar Datos - Seguridad

Para asegurarte de que no devuelves m√°s datos de los que deber√≠as, lee la documentaci√≥n para [Tutorial - Modelo de Response - Tipo de Retorno](../tutorial/response-model.md){.internal-link target=_blank}.

## Etiquetas de Documentaci√≥n - OpenAPI

Para agregar etiquetas a tus *path operations*, y agruparlas en la interfaz de usuario de la documentaci√≥n, lee la documentaci√≥n para [Tutorial - Configuraciones de Path Operation - Etiquetas](../tutorial/path-operation-configuration.md#tags){.internal-link target=_blank}.

## Resumen y Descripci√≥n de Documentaci√≥n - OpenAPI

Para agregar un resumen y descripci√≥n a tus *path operations*, y mostrarlos en la interfaz de usuario de la documentaci√≥n, lee la documentaci√≥n para [Tutorial - Configuraciones de Path Operation - Resumen y Descripci√≥n](../tutorial/path-operation-configuration.md#summary-and-description){.internal-link target=_blank}.

## Documentaci√≥n de Descripci√≥n de Response - OpenAPI

Para definir la descripci√≥n del response, mostrada en la interfaz de usuario de la documentaci√≥n, lee la documentaci√≥n para [Tutorial - Configuraciones de Path Operation - Descripci√≥n del Response](../tutorial/path-operation-configuration.md#response-description){.internal-link target=_blank}.

## Documentar la Deprecaci√≥n de una *Path Operation* - OpenAPI

Para deprecar una *path operation*, y mostrarla en la interfaz de usuario de la documentaci√≥n, lee la documentaci√≥n para [Tutorial - Configuraciones de Path Operation - Deprecaci√≥n](../tutorial/path-operation-configuration.md#deprecate-a-path-operation){.internal-link target=_blank}.

## Convertir cualquier Dato a Compatible con JSON

Para convertir cualquier dato a compatible con JSON, lee la documentaci√≥n para [Tutorial - Codificador Compatible con JSON](../tutorial/encoder.md){.internal-link target=_blank}.

## Metadatos OpenAPI - Documentaci√≥n

Para agregar metadatos a tu esquema de OpenAPI, incluyendo una licencia, versi√≥n, contacto, etc, lee la documentaci√≥n para [Tutorial - Metadatos y URLs de Documentaci√≥n](../tutorial/metadata.md){.internal-link target=_blank}.

## URL Personalizada de OpenAPI

Para personalizar la URL de OpenAPI (o eliminarla), lee la documentaci√≥n para [Tutorial - Metadatos y URLs de Documentaci√≥n](../tutorial/metadata.md#openapi-url){.internal-link target=_blank}.

## URLs de Documentaci√≥n de OpenAPI

Para actualizar las URLs usadas para las interfaces de usuario de documentaci√≥n generadas autom√°ticamente, lee la documentaci√≥n para [Tutorial - Metadatos y URLs de Documentaci√≥n](../tutorial/metadata.md#docs-urls){.internal-link target=_blank}.


================================================
File: /docs/es/docs/how-to/graphql.md
================================================
# GraphQL

Como **FastAPI** se basa en el est√°ndar **ASGI**, es muy f√°cil integrar cualquier paquete de **GraphQL** que tambi√©n sea compatible con ASGI.

Puedes combinar las *path operations* normales de FastAPI con GraphQL en la misma aplicaci√≥n.

/// tip | Consejo

**GraphQL** resuelve algunos casos de uso muy espec√≠ficos.

Tiene **ventajas** y **desventajas** en comparaci√≥n con las **APIs web** comunes.

Aseg√∫rate de evaluar si los **beneficios** para tu caso de uso compensan los **inconvenientes**. ü§ì

///

## Paquetes de GraphQL

Aqu√≠ algunos de los paquetes de **GraphQL** que tienen soporte **ASGI**. Podr√≠as usarlos con **FastAPI**:

* <a href="https://strawberry.rocks/" class="external-link" target="_blank">Strawberry</a> üçì
    * Con <a href="https://strawberry.rocks/docs/integrations/fastapi" class="external-link" target="_blank">documentaci√≥n para FastAPI</a>
* <a href="https://ariadnegraphql.org/" class="external-link" target="_blank">Ariadne</a>
    * Con <a href="https://ariadnegraphql.org/docs/fastapi-integration" class="external-link" target="_blank">documentaci√≥n para FastAPI</a>
* <a href="https://tartiflette.io/" class="external-link" target="_blank">Tartiflette</a>
    * Con <a href="https://tartiflette.github.io/tartiflette-asgi/" class="external-link" target="_blank">Tartiflette ASGI</a> para proporcionar integraci√≥n con ASGI
* <a href="https://graphene-python.org/" class="external-link" target="_blank">Graphene</a>
    * Con <a href="https://github.com/ciscorn/starlette-graphene3" class="external-link" target="_blank">starlette-graphene3</a>

## GraphQL con Strawberry

Si necesitas o quieres trabajar con **GraphQL**, <a href="https://strawberry.rocks/" class="external-link" target="_blank">**Strawberry**</a> es el paquete **recomendado** ya que tiene un dise√±o muy similar al dise√±o de **FastAPI**, todo basado en **anotaciones de tipos**.

Dependiendo de tu caso de uso, podr√≠as preferir usar un paquete diferente, pero si me preguntas, probablemente te sugerir√≠a probar **Strawberry**.

Aqu√≠ tienes una peque√±a vista previa de c√≥mo podr√≠as integrar Strawberry con FastAPI:

{* ../../docs_src/graphql/tutorial001.py hl[3,22,25:26] *}

Puedes aprender m√°s sobre Strawberry en la <a href="https://strawberry.rocks/" class="external-link" target="_blank">documentaci√≥n de Strawberry</a>.

Y tambi√©n la documentaci√≥n sobre <a href="https://strawberry.rocks/docs/integrations/fastapi" class="external-link" target="_blank">Strawberry con FastAPI</a>.

## `GraphQLApp` viejo de Starlette

Las versiones anteriores de Starlette inclu√≠an una clase `GraphQLApp` para integrar con <a href="https://graphene-python.org/" class="external-link" target="_blank">Graphene</a>.

Fue deprecada de Starlette, pero si tienes c√≥digo que lo usaba, puedes f√°cilmente **migrar** a <a href="https://github.com/ciscorn/starlette-graphene3" class="external-link" target="_blank">starlette-graphene3</a>, que cubre el mismo caso de uso y tiene una **interfaz casi id√©ntica**.

/// tip | Consejo

Si necesitas GraphQL, a√∫n te recomendar√≠a revisar <a href="https://strawberry.rocks/" class="external-link" target="_blank">Strawberry</a>, ya que se basa en anotaciones de tipos en lugar de clases y tipos personalizados.

///

## Aprende M√°s

Puedes aprender m√°s sobre **GraphQL** en la <a href="https://graphql.org/" class="external-link" target="_blank">documentaci√≥n oficial de GraphQL</a>.

Tambi√©n puedes leer m√°s sobre cada uno de esos paquetes descritos arriba en sus enlaces.


================================================
File: /docs/es/docs/how-to/index.md
================================================
# How To - Recetas

Aqu√≠ ver√°s diferentes recetas o gu√≠as de "c√≥mo hacer" para **varios temas**.

La mayor√≠a de estas ideas ser√≠an m√°s o menos **independientes**, y en la mayor√≠a de los casos solo deber√≠as estudiarlas si aplican directamente a **tu proyecto**.

Si algo parece interesante y √∫til para tu proyecto, adelante y rev√≠salo, pero de lo contrario, probablemente puedas simplemente omitirlas.

/// tip | Consejo

Si quieres **aprender FastAPI** de una manera estructurada (recomendado), ve y lee el [Tutorial - User Guide](../tutorial/index.md){.internal-link target=_blank} cap√≠tulo por cap√≠tulo.

///


================================================
File: /docs/es/docs/how-to/separate-openapi-schemas.md
================================================
# Separaci√≥n de Esquemas OpenAPI para Entrada y Salida o No

Al usar **Pydantic v2**, el OpenAPI generado es un poco m√°s exacto y **correcto** que antes. üòé

De hecho, en algunos casos, incluso tendr√° **dos JSON Schemas** en OpenAPI para el mismo modelo Pydantic, para entrada y salida, dependiendo de si tienen **valores por defecto**.

Veamos c√≥mo funciona eso y c√≥mo cambiarlo si necesitas hacerlo.

## Modelos Pydantic para Entrada y Salida

Digamos que tienes un modelo Pydantic con valores por defecto, como este:

{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}

### Modelo para Entrada

Si usas este modelo como entrada, como aqu√≠:

{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:15] hl[14] *}

...entonces el campo `description` **no ser√° requerido**. Porque tiene un valor por defecto de `None`.

### Modelo de Entrada en la Documentaci√≥n

Puedes confirmar eso en la documentaci√≥n, el campo `description` no tiene un **asterisco rojo**, no est√° marcado como requerido:

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image01.png">
</div>

### Modelo para Salida

Pero si usas el mismo modelo como salida, como aqu√≠:

{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py hl[19] *}

...entonces, porque `description` tiene un valor por defecto, si **no devuelves nada** para ese campo, a√∫n tendr√° ese **valor por defecto**.

### Modelo para Datos de Response de Salida

Si interact√∫as con la documentaci√≥n y revisas el response, aunque el c√≥digo no agreg√≥ nada en uno de los campos `description`, el response JSON contiene el valor por defecto (`null`):

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image02.png">
</div>

Esto significa que **siempre tendr√° un valor**, solo que a veces el valor podr√≠a ser `None` (o `null` en JSON).

Eso significa que, los clientes que usan tu API no tienen que comprobar si el valor existe o no, pueden **asumir que el campo siempre estar√° all√≠**, pero solo que en algunos casos tendr√° el valor por defecto de `None`.

La forma de describir esto en OpenAPI es marcar ese campo como **requerido**, porque siempre estar√° all√≠.

Debido a eso, el JSON Schema para un modelo puede ser diferente dependiendo de si se usa para **entrada o salida**:

* para **entrada** el `description` **no ser√° requerido**
* para **salida** ser√° **requerido** (y posiblemente `None`, o en t√©rminos de JSON, `null`)

### Modelo para Salida en la Documentaci√≥n

Tambi√©n puedes revisar el modelo de salida en la documentaci√≥n, **ambos** `name` y `description` est√°n marcados como **requeridos** con un **asterisco rojo**:

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image03.png">
</div>

### Modelo para Entrada y Salida en la Documentaci√≥n

Y si revisas todos los esquemas disponibles (JSON Schemas) en OpenAPI, ver√°s que hay dos, uno `Item-Input` y uno `Item-Output`.

Para `Item-Input`, `description` **no es requerido**, no tiene un asterisco rojo.

Pero para `Item-Output`, `description` **es requerido**, tiene un asterisco rojo.

<div class="screenshot">
<img src="/img/tutorial/separate-openapi-schemas/image04.png">
</div>

Con esta funcionalidad de **Pydantic v2**, la documentaci√≥n de tu API es m√°s **precisa**, y si tienes clientes y SDKs autogenerados, tambi√©n ser√°n m√°s precisos, con una mejor **experiencia para desarrolladores** y consistencia. üéâ

## No Separar Esquemas

Ahora, hay algunos casos donde podr√≠as querer tener el **mismo esquema para entrada y salida**.

Probablemente el caso principal para esto es si ya tienes alg√∫n c√≥digo cliente/SDKs autogenerado y no quieres actualizar todo el c√≥digo cliente/SDKs autogenerado a√∫n, probablemente querr√°s hacerlo en alg√∫n momento, pero tal vez no ahora.

En ese caso, puedes desactivar esta funcionalidad en **FastAPI**, con el par√°metro `separate_input_output_schemas=False`.

/// info | Informaci√≥n

El soporte para `separate_input_output_schemas` fue agregado en FastAPI `0.102.0`. ü§ì

///

{* ../../docs_src/separate_openapi_schemas/tutorial002_py310.py hl[10] *}

### Mismo Esquema para Modelos de Entrada y Salida en la Documentaci√≥n

Y ahora habr√° un √∫nico esquema para entrada y salida para el modelo, solo `Item`, y tendr√° `description` como **no requerido**:

<div class="screenshot">
<img src="/img/tutorial/separate_openapi_schemas/image05.png">
</div>

Este es el mismo comportamiento que en Pydantic v1. ü§ì


================================================
File: /docs/es/docs/how-to/testing-database.md
================================================
# Probando una Base de Datos

Puedes estudiar sobre bases de datos, SQL y SQLModel en la <a href="https://sqlmodel.tiangolo.com/" class="external-link" target="_blank">documentaci√≥n de SQLModel</a>. ü§ì

Hay un mini <a href="https://sqlmodel.tiangolo.com/tutorial/fastapi/" class="external-link" target="_blank">tutorial sobre el uso de SQLModel con FastAPI</a>. ‚ú®

Ese tutorial incluye una secci√≥n sobre <a href="https://sqlmodel.tiangolo.com/tutorial/fastapi/tests/" class="external-link" target="_blank">c√≥mo probar bases de datos SQL</a>. üòé


================================================
File: /docs/es/docs/learn/index.md
================================================
# Aprende

Aqu√≠ est√°n las secciones introductorias y los tutoriales para aprender **FastAPI**.

Podr√≠as considerar esto un **libro**, un **curso**, la forma **oficial** y recomendada de aprender FastAPI. üòé


================================================
File: /docs/es/docs/resources/index.md
================================================
# Recursos

Recursos adicionales, enlaces externos, art√≠culos y m√°s. ‚úàÔ∏è


================================================
File: /docs/es/docs/tutorial/background-tasks.md
================================================
# Tareas en Segundo Plano

Puedes definir tareas en segundo plano para que se ejecuten *despu√©s* de devolver un response.

Esto es √∫til para operaciones que necesitan ocurrir despu√©s de un request, pero para las que el cliente realmente no necesita esperar a que la operaci√≥n termine antes de recibir el response.

Esto incluye, por ejemplo:

* Notificaciones por email enviadas despu√©s de realizar una acci√≥n:
  * Como conectarse a un servidor de email y enviar un email tiende a ser "lento" (varios segundos), puedes devolver el response de inmediato y enviar la notificaci√≥n por email en segundo plano.
* Procesamiento de datos:
  * Por ejemplo, supongamos que recibes un archivo que debe pasar por un proceso lento, puedes devolver un response de "Accepted" (HTTP 202) y procesar el archivo en segundo plano.

## Usando `BackgroundTasks`

Primero, importa `BackgroundTasks` y define un par√°metro en tu *path operation function* con una declaraci√≥n de tipo de `BackgroundTasks`:

{* ../../docs_src/background_tasks/tutorial001.py hl[1,13] *}

**FastAPI** crear√° el objeto de tipo `BackgroundTasks` por ti y lo pasar√° como ese par√°metro.

## Crear una funci√≥n de tarea

Crea una funci√≥n para que se ejecute como la tarea en segundo plano.

Es solo una funci√≥n est√°ndar que puede recibir par√°metros.

Puede ser una funci√≥n `async def` o una funci√≥n normal `def`, **FastAPI** sabr√° c√≥mo manejarla correctamente.

En este caso, la funci√≥n de tarea escribir√° en un archivo (simulando el env√≠o de un email).

Y como la operaci√≥n de escritura no usa `async` y `await`, definimos la funci√≥n con un `def` normal:

{* ../../docs_src/background_tasks/tutorial001.py hl[6:9] *}

## Agregar la tarea en segundo plano

Dentro de tu *path operation function*, pasa tu funci√≥n de tarea al objeto de *background tasks* con el m√©todo `.add_task()`:

{* ../../docs_src/background_tasks/tutorial001.py hl[14] *}

`.add_task()` recibe como argumentos:

* Una funci√≥n de tarea para ejecutar en segundo plano (`write_notification`).
* Cualquier secuencia de argumentos que deba pasarse a la funci√≥n de tarea en orden (`email`).
* Cualquier argumento de palabras clave que deba pasarse a la funci√≥n de tarea (`message="some notification"`).

## Inyecci√≥n de Dependencias

Usar `BackgroundTasks` tambi√©n funciona con el sistema de inyecci√≥n de dependencias, puedes declarar un par√°metro de tipo `BackgroundTasks` en varios niveles: en una *path operation function*, en una dependencia (dependable), en una sub-dependencia, etc.

**FastAPI** sabe qu√© hacer en cada caso y c√≥mo reutilizar el mismo objeto, de modo que todas las tareas en segundo plano se combinan y ejecutan en segundo plano despu√©s:

{* ../../docs_src/background_tasks/tutorial002_an_py310.py hl[13,15,22,25] *}

En este ejemplo, los mensajes se escribir√°n en el archivo `log.txt` *despu√©s* de que se env√≠e el response.

Si hay un query en el request, se escribir√° en el log en una tarea en segundo plano.

Y luego otra tarea en segundo plano generada en la *path operation function* escribir√° un mensaje usando el par√°metro de path `email`.

## Detalles T√©cnicos

La clase `BackgroundTasks` proviene directamente de <a href="https://www.starlette.io/background/" class="external-link" target="_blank">`starlette.background`</a>.

Se importa/incluye directamente en FastAPI para que puedas importarla desde `fastapi` y evitar importar accidentalmente la alternativa `BackgroundTask` (sin la `s` al final) de `starlette.background`.

Al usar solo `BackgroundTasks` (y no `BackgroundTask`), es posible usarla como un par√°metro de *path operation function* y dejar que **FastAPI** maneje el resto por ti, tal como cuando usas el objeto `Request` directamente.

Todav√≠a es posible usar `BackgroundTask` solo en FastAPI, pero debes crear el objeto en tu c√≥digo y devolver una `Response` de Starlette incluy√©ndolo.

Puedes ver m√°s detalles en <a href="https://www.starlette.io/background/" class="external-link" target="_blank">la documentaci√≥n oficial de Starlette sobre Background Tasks</a>.

## Advertencia

Si necesitas realizar una computaci√≥n intensa en segundo plano y no necesariamente necesitas que se ejecute por el mismo proceso (por ejemplo, no necesitas compartir memoria, variables, etc.), podr√≠as beneficiarte del uso de otras herramientas m√°s grandes como <a href="https://docs.celeryq.dev" class="external-link" target="_blank">Celery</a>.

Tienden a requerir configuraciones m√°s complejas, un gestor de cola de mensajes/trabajos, como RabbitMQ o Redis, pero te permiten ejecutar tareas en segundo plano en m√∫ltiples procesos, y especialmente, en m√∫ltiples servidores.

Pero si necesitas acceder a variables y objetos de la misma app de **FastAPI**, o necesitas realizar peque√±as tareas en segundo plano (como enviar una notificaci√≥n por email), simplemente puedes usar `BackgroundTasks`.

## Resumen

Importa y usa `BackgroundTasks` con par√°metros en *path operation functions* y dependencias para agregar tareas en segundo plano.


================================================
File: /docs/es/docs/tutorial/bigger-applications.md
================================================
# Aplicaciones m√°s grandes - M√∫ltiples archivos

Si est√°s construyendo una aplicaci√≥n o una API web, rara vez podr√°s poner todo en un solo archivo.

**FastAPI** proporciona una herramienta conveniente para estructurar tu aplicaci√≥n manteniendo toda la flexibilidad.

/// info | Informaci√≥n

Si vienes de Flask, esto ser√≠a el equivalente a los Blueprints de Flask.

///

## Un ejemplo de estructura de archivos

Digamos que tienes una estructura de archivos como esta:

```
.
‚îú‚îÄ‚îÄ app
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dependencies.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ routers
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ items.py
‚îÇ¬†¬† ‚îÇ   ‚îî‚îÄ‚îÄ users.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ internal
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ admin.py
```

/// tip | Consejo

Hay varios archivos `__init__.py`: uno en cada directorio o subdirectorio.

Esto es lo que permite importar c√≥digo de un archivo a otro.

Por ejemplo, en `app/main.py` podr√≠as tener una l√≠nea como:

```
from app.routers import items
```

///

* El directorio `app` contiene todo. Y tiene un archivo vac√≠o `app/__init__.py`, por lo que es un "paquete de Python" (una colecci√≥n de "m√≥dulos de Python"): `app`.
* Contiene un archivo `app/main.py`. Como est√° dentro de un paquete de Python (un directorio con un archivo `__init__.py`), es un "m√≥dulo" de ese paquete: `app.main`.
* Tambi√©n hay un archivo `app/dependencies.py`, al igual que `app/main.py`, es un "m√≥dulo": `app.dependencies`.
* Hay un subdirectorio `app/routers/` con otro archivo `__init__.py`, por lo que es un "subpaquete de Python": `app.routers`.
* El archivo `app/routers/items.py` est√° dentro de un paquete, `app/routers/`, por lo que es un subm√≥dulo: `app.routers.items`.
* Lo mismo con `app/routers/users.py`, es otro subm√≥dulo: `app.routers.users`.
* Tambi√©n hay un subdirectorio `app/internal/` con otro archivo `__init__.py`, por lo que es otro "subpaquete de Python": `app.internal`.
* Y el archivo `app/internal/admin.py` es otro subm√≥dulo: `app.internal.admin`.

<img src="/img/tutorial/bigger-applications/package.svg">

La misma estructura de archivos con comentarios:

```
.
‚îú‚îÄ‚îÄ app                  # "app" es un paquete de Python
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py      # este archivo hace que "app" sea un "paquete de Python"
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py          # m√≥dulo "main", por ejemplo import app.main
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dependencies.py  # m√≥dulo "dependencies", por ejemplo import app.dependencies
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ routers          # "routers" es un "subpaquete de Python"
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py  # hace que "routers" sea un "subpaquete de Python"
‚îÇ¬†¬† ‚îÇ   ‚îú‚îÄ‚îÄ items.py     # subm√≥dulo "items", por ejemplo import app.routers.items
‚îÇ¬†¬† ‚îÇ   ‚îî‚îÄ‚îÄ users.py     # subm√≥dulo "users", por ejemplo import app.routers.users
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ internal         # "internal" es un "subpaquete de Python"
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ __init__.py  # hace que "internal" sea un "subpaquete de Python"
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ admin.py     # subm√≥dulo "admin", por ejemplo import app.internal.admin
```

## `APIRouter`

Digamos que el archivo dedicado solo a manejar usuarios es el subm√≥dulo en `/app/routers/users.py`.

Quieres tener las *path operations* relacionadas con tus usuarios separadas del resto del c√≥digo, para mantenerlo organizado.

Pero todav√≠a es parte de la misma aplicaci√≥n/web API de **FastAPI** (es parte del mismo "paquete de Python").

Puedes crear las *path operations* para ese m√≥dulo usando `APIRouter`.

### Importar `APIRouter`

Lo importas y creas una "instance" de la misma manera que lo har√≠as con la clase `FastAPI`:

```Python hl_lines="1  3" title="app/routers/users.py"
{!../../docs_src/bigger_applications/app/routers/users.py!}
```

### *Path operations* con `APIRouter`

Y luego lo usas para declarar tus *path operations*.

√ösalo de la misma manera que usar√≠as la clase `FastAPI`:

```Python hl_lines="6  11  16" title="app/routers/users.py"
{!../../docs_src/bigger_applications/app/routers/users.py!}
```

Puedes pensar en `APIRouter` como una clase "mini `FastAPI`".

